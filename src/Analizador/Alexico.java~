/* The following code was generated by JFlex 1.4.3 on 21/08/19 12:29 PM */

package Analizador;
import static Analizador.Tokens.*;

/* Secci√≥n de declaraciones de JFlex */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 21/08/19 12:29 PM from the specification file
 * <tt>C:/Users/josue/Documents/NetBeansProjects/Proyecto_Compiladores/Proyecto_Compiladores/src/Analizador/Alexico.flex</tt>
 */
class Alexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\64\2\0\1\4\22\0\1\4\1\15\1\0\1\31"+
    "\1\0\1\11\1\16\1\66\1\24\1\25\1\7\1\5\1\4\1\6"+
    "\1\21\1\10\1\65\1\65\10\2\1\0\1\20\1\12\1\13\1\14"+
    "\1\67\1\30\1\32\1\50\1\44\1\33\1\34\1\46\1\54\1\47"+
    "\1\51\1\62\1\56\1\41\1\57\1\40\1\43\1\42\1\63\1\37"+
    "\1\52\1\36\1\45\1\61\1\60\1\35\1\53\1\55\1\22\1\0"+
    "\1\23\1\0\1\1\1\0\32\3\1\26\1\17\1\27\101\0\1\70"+
    "\uff40\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\2\1"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\30\4\1\31\1\1\1\32\1\33\1\34"+
    "\1\0\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\0\1\45\1\46\1\47\1\4\1\50\6\4"+
    "\1\50\20\4\1\50\12\4\1\50\15\4\2\50\3\4"+
    "\1\50\32\4\2\50\21\4\1\50\17\4\1\0\1\51"+
    "\2\0\1\4\1\50\7\4\1\50\15\4\1\50\57\4"+
    "\1\50\24\4\1\50\5\4\1\50\16\4\1\50\2\4"+
    "\1\50\6\4\1\50\14\4\1\50\4\4\1\50\7\4"+
    "\1\0\1\35\1\3\14\4\1\50\10\4\1\0\4\4"+
    "\1\50\3\4\1\50\2\4\1\50\20\4\1\50\7\4"+
    "\1\50\3\4\1\50\2\4\1\50\17\4\1\50\44\4"+
    "\2\50\16\4\1\0\1\50\52\4\1\50\31\4\1\50"+
    "\5\4\1\50\1\0\46\4\1\0\11\4\1\50\4\4"+
    "\1\50\6\4\1\50\5\4\1\50\6\4\1\50\3\4"+
    "\1\50\34\4\1\50\23\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[680];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\162\0\344\0\71\0\71"+
    "\0\71\0\u011d\0\71\0\u0156\0\u018f\0\u01c8\0\u0201\0\u023a"+
    "\0\u0273\0\71\0\71\0\u02ac\0\71\0\u02e5\0\71\0\u031e"+
    "\0\71\0\71\0\u0357\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474"+
    "\0\u04ad\0\u04e6\0\u051f\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c"+
    "\0\u0675\0\u06ae\0\u06e7\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804"+
    "\0\u083d\0\u0876\0\u08af\0\253\0\u08e8\0\71\0\71\0\u0921"+
    "\0\u095a\0\u0993\0\71\0\71\0\71\0\71\0\71\0\71"+
    "\0\71\0\u09cc\0\71\0\71\0\71\0\u0a05\0\162\0\u0a3e"+
    "\0\u0a77\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0b94\0\u0bcd\0\u0c06"+
    "\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23\0\u0d5c\0\u0d95\0\u0dce"+
    "\0\u0e07\0\u0e40\0\u0e79\0\u0eb2\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96"+
    "\0\u0fcf\0\u1008\0\u1041\0\u107a\0\u10b3\0\u10ec\0\u1125\0\u115e"+
    "\0\u1197\0\u11d0\0\u1209\0\u1242\0\u127b\0\u12b4\0\u12ed\0\u1326"+
    "\0\u135f\0\u1398\0\u13d1\0\u140a\0\u1443\0\u147c\0\u14b5\0\u14ee"+
    "\0\u1527\0\u1560\0\u1599\0\u15d2\0\u160b\0\u1644\0\u167d\0\u16b6"+
    "\0\u16ef\0\u1728\0\u1761\0\u179a\0\u17d3\0\u180c\0\u1845\0\u187e"+
    "\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d\0\u1a46"+
    "\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b9c\0\u1bd5\0\u1c0e"+
    "\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\u1d64\0\u1d9d\0\u1dd6"+
    "\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3\0\u1f2c\0\u1f65\0\u1f9e"+
    "\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u20bb\0\u20f4\0\u212d\0\u2166"+
    "\0\u219f\0\u21d8\0\u2211\0\u224a\0\u2283\0\u22bc\0\u22f5\0\u232e"+
    "\0\u2367\0\u23a0\0\u23d9\0\u23d9\0\u2412\0\u244b\0\u2484\0\u24bd"+
    "\0\u24f6\0\u252f\0\u2568\0\u25a1\0\u25da\0\u2613\0\u264c\0\u2685"+
    "\0\u26be\0\u26f7\0\u0f5d\0\u2730\0\u2769\0\u27a2\0\u27db\0\u2814"+
    "\0\u284d\0\u2886\0\u28bf\0\u28f8\0\u2931\0\u296a\0\u29a3\0\u29dc"+
    "\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0\0\u2af9\0\u2b32\0\u2b6b\0\u2ba4"+
    "\0\u2bdd\0\u2c16\0\u2c4f\0\u2c88\0\u2cc1\0\u2cfa\0\u2d33\0\u2d6c"+
    "\0\u2da5\0\u2dde\0\u2e17\0\u2e50\0\u2e89\0\u2ec2\0\u2efb\0\u2f34"+
    "\0\u2f6d\0\u2fa6\0\u2fdf\0\u3018\0\u3051\0\u308a\0\u30c3\0\u30fc"+
    "\0\u3135\0\u316e\0\u31a7\0\u31e0\0\u3219\0\u3252\0\u328b\0\u32c4"+
    "\0\u32fd\0\u3336\0\u336f\0\u33a8\0\u33e1\0\u341a\0\u3453\0\u348c"+
    "\0\u34c5\0\u34fe\0\u3537\0\u3570\0\u35a9\0\u35e2\0\u361b\0\u3654"+
    "\0\u368d\0\u36c6\0\u36ff\0\u3738\0\u3771\0\u37aa\0\u37e3\0\u381c"+
    "\0\u3855\0\u388e\0\u38c7\0\u3900\0\u3939\0\u3972\0\u39ab\0\u39e4"+
    "\0\u3a1d\0\u3a56\0\u3a8f\0\u3ac8\0\u3b01\0\u3b3a\0\u3b73\0\u3bac"+
    "\0\u38c7\0\u3be5\0\u3c1e\0\u3c57\0\u3c90\0\u3cc9\0\u3d02\0\u3d3b"+
    "\0\u3d74\0\u3dad\0\u3de6\0\u3e1f\0\u3e58\0\u3e91\0\u3eca\0\u3f03"+
    "\0\u3f3c\0\u3f75\0\u3fae\0\u3fe7\0\u4020\0\u4059\0\u4092\0\u40cb"+
    "\0\u4104\0\u413d\0\u4176\0\u41af\0\u41e8\0\u4221\0\u425a\0\u4293"+
    "\0\u42cc\0\u4305\0\u433e\0\u4377\0\u43b0\0\u43e9\0\u4422\0\u445b"+
    "\0\u4494\0\u44cd\0\u4506\0\u08e8\0\u095a\0\71\0\u453f\0\u4578"+
    "\0\u45b1\0\u45ea\0\u4623\0\u465c\0\u4695\0\u46ce\0\u4707\0\u4740"+
    "\0\u4779\0\u47b2\0\u47eb\0\u4824\0\u485d\0\u4896\0\u48cf\0\u4908"+
    "\0\u4941\0\u497a\0\u49b3\0\u49ec\0\u4a25\0\u4a5e\0\u4a97\0\u4ad0"+
    "\0\u4b09\0\u4b42\0\u4b7b\0\u4bb4\0\u4bed\0\u4c26\0\u4c5f\0\u4c98"+
    "\0\u4cd1\0\u4d0a\0\u4d43\0\u4d7c\0\u4db5\0\u4dee\0\u4e27\0\u4e60"+
    "\0\u4e99\0\u4ed2\0\u4f0b\0\u4f44\0\u4f7d\0\u4fb6\0\u4fef\0\u5028"+
    "\0\u5061\0\u509a\0\u50d3\0\u510c\0\u5145\0\u517e\0\u51b7\0\u51f0"+
    "\0\u5229\0\u5262\0\u529b\0\u52d4\0\u530d\0\u5346\0\u537f\0\u53b8"+
    "\0\u53f1\0\u542a\0\u5463\0\u549c\0\u54d5\0\u550e\0\u5547\0\u5580"+
    "\0\u55b9\0\u55f2\0\u562b\0\u4377\0\u5664\0\u569d\0\u56d6\0\u570f"+
    "\0\u5748\0\u5781\0\u57ba\0\u57f3\0\u582c\0\u5865\0\u589e\0\u58d7"+
    "\0\u5910\0\u5949\0\u5982\0\u59bb\0\u59f4\0\u5a2d\0\u5a66\0\u5a9f"+
    "\0\u5ad8\0\u5b11\0\u5b4a\0\u5b83\0\u5bbc\0\u5bf5\0\u5c2e\0\u5c67"+
    "\0\u5ca0\0\u5cd9\0\u5d12\0\u5d4b\0\u5d84\0\u5dbd\0\u5df6\0\u5e2f"+
    "\0\u5e68\0\u5ea1\0\u5eda\0\u5f13\0\u5f4c\0\u5f85\0\u5fbe\0\u5ff7"+
    "\0\u6030\0\u24bd\0\u6069\0\u60a2\0\u60db\0\u6114\0\u614d\0\u6186"+
    "\0\u61bf\0\u61f8\0\u6231\0\u626a\0\u62a3\0\u62dc\0\u6315\0\u634e"+
    "\0\u6387\0\u63c0\0\u63f9\0\u6432\0\u646b\0\u64a4\0\u64dd\0\u6516"+
    "\0\u654f\0\u6588\0\u65c1\0\u65fa\0\u6633\0\u666c\0\u66a5\0\u66de"+
    "\0\u6717\0\u6750\0\u6789\0\u67c2\0\u67fb\0\u6834\0\u686d\0\u68a6"+
    "\0\u68df\0\u6918\0\u3d3b\0\u6951\0\u698a\0\u69c3\0\u69fc\0\u6a35"+
    "\0\u6a6e\0\u6aa7\0\u6ae0\0\u6b19\0\u6b52\0\u6b8b\0\u6bc4\0\u6bfd"+
    "\0\u6c36\0\u6c6f\0\u6ca8\0\u6ce1\0\u6d1a\0\u6d53\0\u6d8c\0\u6dc5"+
    "\0\u6dfe\0\u6e37\0\u6e70\0\u6ea9\0\u6ee2\0\u6f1b\0\u6f54\0\u6f8d"+
    "\0\u6fc6\0\u6fff\0\u7038\0\u7071\0\u70aa\0\u70e3\0\u711c\0\u7155"+
    "\0\u718e\0\u71c7\0\u4fb6\0\u7200\0\u7239\0\u7272\0\u72ab\0\u72e4"+
    "\0\u24f6\0\u731d\0\u7356\0\u738f\0\u73c8\0\u7401\0\u743a\0\u7473"+
    "\0\u74ac\0\u74e5\0\u751e\0\u7557\0\u7590\0\u75c9\0\u7602\0\u763b"+
    "\0\u7674\0\u76ad\0\u76e6\0\u771f\0\u7758\0\u7791\0\u77ca\0\u7803"+
    "\0\u783c\0\u7875\0\u78ae\0\u78e7\0\u7920\0\u7959\0\u7992\0\u79cb"+
    "\0\u7a04\0\u7a3d\0\u7a76\0\u7aaf\0\u7ae8\0\u7b21\0\u7b5a\0\u7b93"+
    "\0\u7bcc\0\u7c05\0\u7c3e\0\u7c77\0\u7cb0\0\u7ce9\0\u7d22\0\u7d5b"+
    "\0\u7d94\0\u7dcd\0\u30c3\0\u7e06\0\u7e3f\0\u7e78\0\u7eb1\0\u7eea"+
    "\0\u7f23\0\u7f5c\0\u7f95\0\u7fce\0\u1527\0\u8007\0\u7aaf\0\u8040"+
    "\0\u8079\0\u3f75\0\u80b2\0\u80eb\0\71\0\u8124\0\u815d\0\u8196"+
    "\0\u81cf\0\u8208\0\u8241\0\u827a\0\u82b3\0\u82ec\0\u8325\0\u835e"+
    "\0\u8397\0\u83d0\0\u8409\0\u8442\0\u847b\0\u84b4\0\u84ed\0\u8526"+
    "\0\u855f\0\u8598\0\u85d1\0\u860a\0\u8643\0\u867c\0\u86b5\0\u86ee"+
    "\0\u8727\0\u8760\0\u8799\0\u87d2\0\u880b\0\u8844\0\u887d\0\u88b6"+
    "\0\u88ef\0\u8928\0\u8961\0\u899a\0\u89d3\0\u8a0c\0\u8a45\0\u8a7e"+
    "\0\u8ab7\0\u8af0\0\u8b29\0\u8b62\0\u8b9b\0\u8bd4\0\u8c0d\0\u8c46"+
    "\0\u827a\0\u8c7f\0\u8cb8\0\u8cf1\0\u8d2a\0\u8d63\0\u8d9c\0\u8dd5";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[680];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\5\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\5\1\6\1\64\1\65\1\66"+
    "\1\67\72\0\3\5\26\0\32\5\1\0\1\5\5\0"+
    "\1\4\16\0\1\70\43\0\1\4\7\0\1\6\57\0"+
    "\1\6\13\0\1\71\1\72\73\0\1\73\70\0\1\74"+
    "\70\0\1\75\70\0\1\76\73\0\1\77\71\0\1\100"+
    "\74\0\1\101\53\0\1\102\16\0\1\103\72\0\1\104"+
    "\72\0\1\105\40\0\3\5\26\0\1\5\1\106\2\5"+
    "\1\107\1\110\1\111\1\112\2\5\1\113\1\114\2\5"+
    "\1\115\1\5\1\116\6\5\1\117\2\5\1\0\1\5"+
    "\4\0\3\5\26\0\1\120\1\5\1\121\2\5\1\122"+
    "\3\5\1\123\1\5\1\124\2\5\1\125\1\126\12\5"+
    "\1\0\1\5\4\0\3\5\26\0\3\5\1\127\1\5"+
    "\1\130\1\131\1\132\10\5\1\133\11\5\1\0\1\5"+
    "\4\0\3\5\26\0\1\134\1\5\1\135\2\5\1\136"+
    "\3\5\1\137\3\5\1\140\1\5\1\141\1\142\11\5"+
    "\1\0\1\5\4\0\3\5\26\0\1\143\1\5\1\144"+
    "\6\5\1\145\1\5\1\146\3\5\1\147\12\5\1\0"+
    "\1\5\4\0\3\5\26\0\1\150\1\5\1\151\6\5"+
    "\1\152\1\153\1\154\16\5\1\0\1\5\4\0\3\5"+
    "\26\0\1\155\1\5\1\156\6\5\1\157\5\5\1\160"+
    "\12\5\1\0\1\5\4\0\3\5\26\0\1\161\1\5"+
    "\1\162\2\5\1\163\1\5\1\164\1\5\1\165\1\5"+
    "\1\166\3\5\1\167\12\5\1\0\1\5\4\0\3\5"+
    "\26\0\5\5\1\170\1\171\1\5\1\172\1\5\1\173"+
    "\1\174\1\175\12\5\1\176\2\5\1\0\1\5\4\0"+
    "\3\5\26\0\1\177\4\5\1\200\1\5\1\201\1\5"+
    "\1\202\1\5\1\203\1\5\1\204\14\5\1\0\1\5"+
    "\4\0\3\5\26\0\6\5\1\205\1\5\1\206\7\5"+
    "\1\207\11\5\1\0\1\5\4\0\3\5\26\0\1\210"+
    "\1\5\1\211\2\5\1\212\1\5\1\213\1\5\1\214"+
    "\1\5\1\215\3\5\1\216\12\5\1\0\1\5\4\0"+
    "\3\5\26\0\1\217\10\5\1\220\20\5\1\0\1\5"+
    "\4\0\3\5\26\0\1\221\1\5\1\222\2\5\1\223"+
    "\3\5\1\224\1\5\1\225\3\5\1\226\1\5\1\107"+
    "\10\5\1\0\1\5\4\0\3\5\26\0\1\5\1\227"+
    "\4\5\1\230\5\5\1\107\3\5\1\231\4\5\1\232"+
    "\4\5\1\0\1\5\4\0\3\5\26\0\1\233\1\5"+
    "\1\234\1\5\1\235\3\5\1\236\1\237\1\240\1\241"+
    "\1\5\1\242\1\5\1\243\1\5\1\244\3\5\1\245"+
    "\3\5\1\246\1\0\1\5\4\0\3\5\26\0\2\5"+
    "\1\247\27\5\1\0\1\5\4\0\3\5\26\0\2\5"+
    "\1\250\2\5\1\251\1\5\1\252\1\5\1\253\20\5"+
    "\1\0\1\5\4\0\3\5\26\0\11\5\1\254\20\5"+
    "\1\0\1\5\4\0\3\5\26\0\2\5\1\255\14\5"+
    "\1\256\12\5\1\0\1\5\4\0\3\5\26\0\1\257"+
    "\1\5\1\260\6\5\1\261\5\5\1\262\12\5\1\0"+
    "\1\5\4\0\3\5\26\0\1\263\4\5\1\264\3\5"+
    "\1\265\3\5\1\266\1\5\1\267\12\5\1\0\1\5"+
    "\4\0\3\5\26\0\1\270\16\5\1\271\12\5\1\0"+
    "\1\5\4\0\3\5\26\0\11\5\1\272\20\5\1\0"+
    "\1\5\3\0\64\273\1\0\1\273\1\274\2\273\2\0"+
    "\1\70\62\0\1\70\3\0\7\71\1\275\54\71\1\0"+
    "\4\71\64\72\1\0\4\72\2\0\1\276\62\0\1\276"+
    "\4\0\3\5\26\0\2\107\30\5\1\0\1\5\4\0"+
    "\3\5\26\0\2\5\1\107\27\5\1\0\1\5\4\0"+
    "\3\5\26\0\1\5\1\107\17\5\1\107\10\5\1\0"+
    "\1\5\4\0\3\5\26\0\4\5\1\277\2\5\1\300"+
    "\22\5\1\0\1\5\4\0\3\5\26\0\4\5\1\301"+
    "\25\5\1\0\1\5\4\0\3\5\26\0\4\5\1\302"+
    "\25\5\1\0\1\5\4\0\3\5\26\0\20\5\1\303"+
    "\11\5\1\0\1\5\4\0\3\5\26\0\12\5\1\107"+
    "\5\5\1\304\11\5\1\0\1\5\4\0\3\5\26\0"+
    "\22\5\1\107\7\5\1\0\1\5\4\0\3\5\26\0"+
    "\4\5\1\305\14\5\1\107\10\5\1\0\1\5\4\0"+
    "\3\5\26\0\1\306\5\5\1\255\1\307\2\5\1\310"+
    "\1\5\1\311\3\5\1\312\11\5\1\0\1\5\4\0"+
    "\3\5\26\0\11\5\1\313\20\5\1\0\1\5\4\0"+
    "\3\5\26\0\13\5\1\314\11\5\1\315\4\5\1\0"+
    "\1\5\4\0\3\5\26\0\25\5\1\313\4\5\1\0"+
    "\1\5\4\0\3\5\26\0\12\5\1\316\17\5\1\0"+
    "\1\5\4\0\3\5\26\0\1\317\17\5\1\320\11\5"+
    "\1\0\1\5\4\0\3\5\26\0\2\5\1\321\1\5"+
    "\1\322\5\5\1\323\4\5\1\324\12\5\1\0\1\5"+
    "\4\0\3\5\26\0\5\5\1\325\24\5\1\0\1\5"+
    "\4\0\3\5\26\0\1\5\1\326\30\5\1\0\1\5"+
    "\4\0\3\5\26\0\20\5\1\110\11\5\1\0\1\5"+
    "\4\0\3\5\26\0\12\5\1\327\17\5\1\0\1\5"+
    "\4\0\3\5\26\0\16\5\1\330\13\5\1\0\1\5"+
    "\4\0\3\5\26\0\3\5\1\331\21\5\1\332\4\5"+
    "\1\0\1\5\4\0\3\5\26\0\1\333\12\5\1\334"+
    "\3\5\1\335\1\5\1\336\10\5\1\0\1\5\4\0"+
    "\3\5\26\0\10\5\1\107\21\5\1\0\1\5\4\0"+
    "\3\5\26\0\2\5\1\337\27\5\1\0\1\5\4\0"+
    "\3\5\26\0\25\5\1\340\4\5\1\0\1\5\4\0"+
    "\3\5\26\0\2\5\1\341\27\5\1\0\1\5\4\0"+
    "\3\5\26\0\17\5\1\342\12\5\1\0\1\5\4\0"+
    "\3\5\26\0\1\343\3\5\1\344\2\5\1\345\1\346"+
    "\1\5\1\347\1\5\1\350\3\5\1\351\6\5\1\352"+
    "\2\5\1\0\1\5\4\0\3\5\26\0\7\5\1\353"+
    "\16\5\1\354\3\5\1\0\1\5\4\0\3\5\26\0"+
    "\7\5\1\110\22\5\1\0\1\5\4\0\3\5\26\0"+
    "\22\5\1\355\7\5\1\0\1\5\4\0\3\5\26\0"+
    "\4\5\1\356\20\5\1\357\4\5\1\0\1\5\4\0"+
    "\3\5\26\0\3\5\1\250\26\5\1\0\1\5\4\0"+
    "\3\5\26\0\4\5\1\107\1\5\1\360\3\5\1\361"+
    "\17\5\1\0\1\5\4\0\3\5\26\0\15\5\1\247"+
    "\14\5\1\0\1\5\4\0\3\5\26\0\7\5\1\362"+
    "\15\5\1\363\4\5\1\0\1\5\4\0\3\5\26\0"+
    "\6\5\1\364\11\5\1\250\11\5\1\0\1\5\4\0"+
    "\3\5\26\0\1\365\13\5\1\250\12\5\1\366\2\5"+
    "\1\0\1\5\4\0\3\5\26\0\1\367\11\5\1\370"+
    "\13\5\1\277\3\5\1\0\1\5\4\0\3\5\26\0"+
    "\6\5\1\371\15\5\1\110\5\5\1\0\1\5\4\0"+
    "\3\5\26\0\1\5\1\107\3\5\1\372\12\5\1\373"+
    "\11\5\1\0\1\5\4\0\3\5\26\0\5\5\1\374"+
    "\24\5\1\0\1\5\4\0\3\5\26\0\2\5\1\375"+
    "\6\5\1\376\5\5\1\377\12\5\1\0\1\5\4\0"+
    "\3\5\26\0\1\337\31\5\1\0\1\5\4\0\3\5"+
    "\26\0\20\5\1\u0100\11\5\1\0\1\5\4\0\3\5"+
    "\26\0\16\5\1\u0101\13\5\1\0\1\5\4\0\3\5"+
    "\26\0\27\5\1\u0102\2\5\1\0\1\5\4\0\3\5"+
    "\26\0\1\5\1\277\30\5\1\0\1\5\4\0\3\5"+
    "\26\0\7\5\1\255\22\5\1\0\1\5\4\0\3\5"+
    "\26\0\2\5\1\u0103\1\5\1\301\25\5\1\0\1\5"+
    "\4\0\3\5\26\0\4\5\1\u0104\25\5\1\0\1\5"+
    "\4\0\3\5\26\0\4\5\1\u0105\25\5\1\0\1\5"+
    "\4\0\3\5\26\0\14\5\1\u0106\15\5\1\0\1\5"+
    "\4\0\3\5\26\0\2\5\1\u0107\27\5\1\0\1\5"+
    "\4\0\3\5\26\0\4\5\1\u0108\13\5\1\u0109\11\5"+
    "\1\0\1\5\4\0\3\5\26\0\2\5\1\u010a\6\5"+
    "\1\u010b\20\5\1\0\1\5\4\0\3\5\26\0\11\5"+
    "\1\132\1\5\1\u010c\16\5\1\0\1\5\4\0\3\5"+
    "\26\0\1\u010d\4\5\1\u010e\1\u010f\1\u0110\3\5\1\u0111"+
    "\11\5\1\u0112\4\5\1\0\1\5\4\0\3\5\26\0"+
    "\5\5\1\u0113\24\5\1\0\1\5\4\0\3\5\26\0"+
    "\1\u0114\1\5\1\u0115\27\5\1\0\1\5\4\0\3\5"+
    "\26\0\10\5\1\u0116\6\5\1\u0117\4\5\1\u0118\5\5"+
    "\1\0\1\5\4\0\3\5\26\0\1\5\1\u0119\6\5"+
    "\1\277\21\5\1\0\1\5\4\0\3\5\26\0\1\u011a"+
    "\1\5\1\u011b\14\5\1\u011c\12\5\1\0\1\5\4\0"+
    "\3\5\26\0\7\5\1\132\22\5\1\0\1\5\4\0"+
    "\3\5\26\0\4\5\1\u011d\25\5\1\0\1\5\4\0"+
    "\3\5\26\0\2\5\1\u011e\6\5\1\u011f\20\5\1\0"+
    "\1\5\4\0\3\5\26\0\11\5\1\u0120\20\5\1\0"+
    "\1\5\4\0\3\5\26\0\5\5\1\u0121\5\5\1\u0122"+
    "\16\5\1\0\1\5\4\0\3\5\26\0\6\5\1\u0123"+
    "\1\u0124\22\5\1\0\1\5\4\0\3\5\26\0\5\5"+
    "\1\u0125\1\5\1\u0126\22\5\1\0\1\5\4\0\3\5"+
    "\26\0\27\5\1\u0127\2\5\1\0\1\5\4\0\3\5"+
    "\26\0\7\5\1\u0128\3\5\1\u0129\16\5\1\0\1\5"+
    "\4\0\3\5\26\0\12\5\1\u012a\17\5\1\0\1\5"+
    "\4\0\3\5\26\0\4\5\1\u012b\15\5\1\272\7\5"+
    "\1\0\1\5\4\0\3\5\26\0\2\5\1\u012c\6\5"+
    "\1\u012d\20\5\1\0\1\5\4\0\3\5\26\0\4\5"+
    "\1\u012e\25\5\1\0\1\5\4\0\3\5\26\0\7\5"+
    "\1\u012f\22\5\1\0\1\5\4\0\3\5\26\0\4\5"+
    "\1\u0130\25\5\1\0\1\5\4\0\3\5\26\0\2\5"+
    "\1\u0131\27\5\1\0\1\5\4\0\3\5\26\0\1\5"+
    "\1\u0132\2\5\1\u0133\1\5\1\277\1\5\1\u0134\1\5"+
    "\1\u0135\4\5\1\u0136\1\u0137\11\5\1\0\1\5\4\0"+
    "\3\5\26\0\11\5\1\u0138\20\5\1\0\1\5\4\0"+
    "\3\5\26\0\25\5\1\u0139\4\5\1\0\1\5\4\0"+
    "\3\5\26\0\27\5\1\110\2\5\1\0\1\5\4\0"+
    "\3\5\26\0\4\5\1\u013a\2\5\1\u013b\2\5\1\u013c"+
    "\5\5\1\u013d\4\5\1\u013e\4\5\1\0\1\5\4\0"+
    "\3\5\26\0\1\u013f\31\5\1\0\1\5\4\0\3\5"+
    "\26\0\1\u0140\31\5\1\0\1\5\4\0\3\5\26\0"+
    "\25\5\1\110\4\5\1\0\1\5\4\0\3\5\26\0"+
    "\5\5\1\u0141\7\5\1\u0142\14\5\1\0\1\5\4\0"+
    "\3\5\26\0\16\5\1\u0143\6\5\1\107\4\5\1\0"+
    "\1\5\4\0\3\5\26\0\13\5\1\u0144\16\5\1\0"+
    "\1\5\4\0\3\5\26\0\23\5\1\110\6\5\1\0"+
    "\1\5\4\0\3\5\26\0\20\5\1\u0145\11\5\1\0"+
    "\1\5\4\0\3\5\26\0\1\u0146\31\5\1\0\1\5"+
    "\4\0\3\5\26\0\7\5\1\u0147\22\5\1\0\1\5"+
    "\4\0\3\5\26\0\1\u0129\31\5\1\0\1\5\4\0"+
    "\3\5\26\0\4\5\1\107\25\5\1\0\1\5\4\0"+
    "\3\5\26\0\1\u0111\10\5\1\u0148\20\5\1\0\1\5"+
    "\4\0\3\5\26\0\11\5\1\u0149\20\5\1\0\1\5"+
    "\4\0\3\5\26\0\4\5\1\u014a\25\5\1\0\1\5"+
    "\4\0\3\5\26\0\6\5\1\110\23\5\1\0\1\5"+
    "\4\0\3\5\26\0\21\5\1\107\10\5\1\0\1\5"+
    "\4\0\3\5\26\0\7\5\1\u0124\22\5\1\0\1\5"+
    "\4\0\3\5\26\0\3\5\1\107\1\u011d\25\5\1\0"+
    "\1\5\4\0\3\5\26\0\5\5\1\u011a\24\5\1\0"+
    "\1\5\4\0\3\5\26\0\1\5\1\u014b\4\5\1\224"+
    "\23\5\1\0\1\5\4\0\3\5\26\0\6\5\1\u014c"+
    "\23\5\1\0\1\5\4\0\3\5\26\0\17\5\1\u014d"+
    "\12\5\1\0\1\5\4\0\3\5\26\0\17\5\1\u014e"+
    "\12\5\1\0\1\5\4\0\3\5\26\0\5\5\1\u012f"+
    "\24\5\1\0\1\5\4\0\3\5\26\0\2\5\1\u014f"+
    "\14\5\1\146\12\5\1\0\1\5\4\0\3\5\26\0"+
    "\4\5\1\u0150\25\5\1\0\1\5\4\0\3\5\26\0"+
    "\5\5\1\u0151\1\5\1\u0152\22\5\1\0\1\5\4\0"+
    "\3\5\26\0\2\5\1\u0153\27\5\1\0\1\5\4\0"+
    "\3\5\26\0\17\5\1\337\12\5\1\0\1\5\3\0"+
    "\66\u0154\1\0\2\u0154\7\71\1\275\1\u0155\53\71\1\0"+
    "\4\71\2\0\1\276\22\0\1\u0156\37\0\1\276\4\0"+
    "\3\5\26\0\2\5\1\u0129\27\5\1\0\1\5\4\0"+
    "\3\5\26\0\11\5\1\u0157\20\5\1\0\1\5\4\0"+
    "\3\5\26\0\17\5\1\u0158\12\5\1\0\1\5\4\0"+
    "\3\5\26\0\15\5\1\u0159\14\5\1\0\1\5\4\0"+
    "\3\5\26\0\11\5\1\u015a\20\5\1\0\1\5\4\0"+
    "\3\5\26\0\2\5\1\u015b\27\5\1\0\1\5\4\0"+
    "\3\5\26\0\1\u015c\1\5\1\107\27\5\1\0\1\5"+
    "\4\0\3\5\26\0\7\5\1\u015d\22\5\1\0\1\5"+
    "\4\0\3\5\26\0\2\5\1\u015e\27\5\1\0\1\5"+
    "\4\0\3\5\26\0\7\5\1\u015f\7\5\1\u0160\12\5"+
    "\1\0\1\5\4\0\3\5\26\0\1\u0161\1\5\1\u0162"+
    "\27\5\1\0\1\5\4\0\3\5\26\0\12\5\1\u0163"+
    "\17\5\1\0\1\5\4\0\3\5\26\0\16\5\1\146"+
    "\13\5\1\0\1\5\4\0\3\5\26\0\1\272\31\5"+
    "\1\0\1\5\4\0\3\5\26\0\12\5\1\107\17\5"+
    "\1\0\1\5\4\0\3\5\26\0\22\5\1\u0164\7\5"+
    "\1\0\1\5\4\0\3\5\26\0\4\5\1\u0165\5\5"+
    "\1\u0166\11\5\1\107\5\5\1\0\1\5\4\0\3\5"+
    "\26\0\12\5\1\u014c\17\5\1\0\1\5\4\0\3\5"+
    "\26\0\2\5\1\u0167\2\5\1\u0168\24\5\1\0\1\5"+
    "\4\0\3\5\26\0\2\5\1\u0169\27\5\1\0\1\5"+
    "\4\0\3\5\26\0\4\5\1\107\13\5\1\u016a\11\5"+
    "\1\0\1\5\4\0\3\5\26\0\7\5\1\u016b\22\5"+
    "\1\0\1\5\4\0\3\5\2\0\1\u016c\23\0\32\5"+
    "\1\0\1\5\4\0\3\5\26\0\1\u016d\31\5\1\0"+
    "\1\5\4\0\3\5\26\0\7\5\1\u016e\22\5\1\0"+
    "\1\5\4\0\3\5\26\0\4\5\1\u016f\25\5\1\0"+
    "\1\5\4\0\3\5\26\0\10\5\1\u0170\21\5\1\0"+
    "\1\5\4\0\3\5\26\0\6\5\1\u0171\10\5\1\u0172"+
    "\12\5\1\0\1\5\4\0\3\5\26\0\2\5\1\107"+
    "\3\5\1\u0157\23\5\1\0\1\5\4\0\3\5\26\0"+
    "\22\5\1\u0173\2\5\1\107\4\5\1\0\1\5\4\0"+
    "\1\u0174\2\5\26\0\32\5\1\0\1\5\4\0\3\5"+
    "\26\0\6\5\1\107\23\5\1\0\1\5\4\0\3\5"+
    "\26\0\2\5\1\u0175\27\5\1\0\1\5\4\0\3\5"+
    "\26\0\31\5\1\u0176\1\0\1\5\4\0\3\5\26\0"+
    "\20\5\1\u0177\11\5\1\0\1\5\4\0\3\5\26\0"+
    "\1\5\1\u0178\5\5\1\107\22\5\1\0\1\5\4\0"+
    "\3\5\26\0\13\5\1\u0179\16\5\1\0\1\5\4\0"+
    "\3\5\26\0\1\u017a\31\5\1\0\1\5\4\0\3\5"+
    "\26\0\7\5\1\u017b\22\5\1\0\1\5\4\0\3\5"+
    "\26\0\11\5\1\u017c\20\5\1\0\1\5\4\0\3\5"+
    "\26\0\2\5\1\u017d\27\5\1\0\1\5\4\0\3\5"+
    "\26\0\4\5\1\u017e\25\5\1\0\1\5\4\0\3\5"+
    "\26\0\2\5\1\u017f\6\5\1\u0180\20\5\1\0\1\5"+
    "\4\0\3\5\26\0\7\5\1\u0181\22\5\1\0\1\5"+
    "\4\0\3\5\26\0\12\5\1\u0182\5\5\1\107\1\5"+
    "\1\u0183\7\5\1\0\1\5\4\0\3\5\26\0\15\5"+
    "\1\250\14\5\1\0\1\5\4\0\3\5\26\0\13\5"+
    "\1\u0184\3\5\1\u0185\12\5\1\0\1\5\4\0\3\5"+
    "\26\0\2\5\1\u0186\27\5\1\0\1\5\4\0\3\5"+
    "\26\0\2\5\1\107\7\5\1\u0187\17\5\1\0\1\5"+
    "\4\0\3\5\26\0\15\5\1\u0188\14\5\1\0\1\5"+
    "\4\0\3\5\26\0\7\5\1\u0189\22\5\1\0\1\5"+
    "\4\0\3\5\26\0\2\5\1\u018a\27\5\1\0\1\5"+
    "\4\0\3\5\26\0\22\5\1\u018b\7\5\1\0\1\5"+
    "\4\0\3\5\26\0\1\5\1\u0127\30\5\1\0\1\5"+
    "\4\0\3\5\26\0\2\5\1\u0124\27\5\1\0\1\5"+
    "\4\0\3\5\26\0\1\5\1\107\30\5\1\0\1\5"+
    "\4\0\3\5\26\0\1\u0124\31\5\1\0\1\5\4\0"+
    "\3\5\26\0\2\5\1\u018c\27\5\1\0\1\5\4\0"+
    "\3\5\26\0\4\5\1\u018d\25\5\1\0\1\5\4\0"+
    "\3\5\26\0\12\5\1\370\17\5\1\0\1\5\4\0"+
    "\3\5\26\0\12\5\1\u018e\17\5\1\0\1\5\4\0"+
    "\3\5\26\0\10\5\1\u015f\1\5\1\u018f\5\5\1\u0190"+
    "\11\5\1\0\1\5\4\0\3\5\26\0\12\5\1\u0191"+
    "\17\5\1\0\1\5\4\0\3\5\26\0\6\5\1\250"+
    "\2\5\1\u0129\13\5\1\u0192\1\5\1\u0193\2\5\1\0"+
    "\1\5\4\0\3\5\26\0\17\5\1\113\12\5\1\0"+
    "\1\5\4\0\3\5\26\0\7\5\1\u0194\22\5\1\0"+
    "\1\5\4\0\3\5\26\0\11\5\1\250\20\5\1\0"+
    "\1\5\4\0\3\5\26\0\6\5\1\u0195\23\5\1\0"+
    "\1\5\4\0\3\5\26\0\2\5\1\u0196\27\5\1\0"+
    "\1\5\4\0\3\5\26\0\2\5\1\u0129\5\5\1\u0134"+
    "\21\5\1\0\1\5\4\0\3\5\26\0\20\5\1\u0197"+
    "\11\5\1\0\1\5\4\0\3\5\26\0\5\5\1\u0198"+
    "\24\5\1\0\1\5\4\0\3\5\26\0\1\u0199\31\5"+
    "\1\0\1\5\4\0\3\5\26\0\2\5\1\107\1\5"+
    "\1\107\5\5\1\u019a\17\5\1\0\1\5\4\0\3\5"+
    "\26\0\1\u015e\31\5\1\0\1\5\4\0\3\5\26\0"+
    "\20\5\1\u0186\11\5\1\0\1\5\4\0\3\5\26\0"+
    "\20\5\1\u019b\11\5\1\0\1\5\4\0\3\5\26\0"+
    "\7\5\1\u019c\22\5\1\0\1\5\4\0\3\5\26\0"+
    "\5\5\1\u019d\24\5\1\0\1\5\4\0\3\5\26\0"+
    "\4\5\1\u019e\1\5\1\u019f\11\5\1\u01a0\6\5\1\u01a1"+
    "\2\5\1\0\1\5\4\0\3\5\26\0\7\5\1\u01a2"+
    "\3\5\1\u01a3\16\5\1\0\1\5\4\0\3\5\26\0"+
    "\6\5\1\250\23\5\1\0\1\5\4\0\3\5\26\0"+
    "\10\5\1\u01a4\14\5\1\u01a5\4\5\1\0\1\5\4\0"+
    "\3\5\26\0\5\5\1\u01a6\12\5\1\u01a7\11\5\1\0"+
    "\1\5\4\0\3\5\26\0\5\5\1\u01a8\24\5\1\0"+
    "\1\5\4\0\3\5\26\0\12\5\1\u01a9\17\5\1\0"+
    "\1\5\4\0\3\5\26\0\17\5\1\167\12\5\1\0"+
    "\1\5\4\0\3\5\26\0\11\5\1\337\17\5\1\u01aa"+
    "\1\0\1\5\4\0\3\5\26\0\6\5\1\u01ab\23\5"+
    "\1\0\1\5\4\0\3\5\26\0\1\u014e\31\5\1\0"+
    "\1\5\4\0\3\5\26\0\22\5\1\110\7\5\1\0"+
    "\1\5\4\0\3\5\26\0\5\5\1\107\24\5\1\0"+
    "\1\5\4\0\3\5\26\0\6\5\1\117\23\5\1\0"+
    "\1\5\4\0\3\5\26\0\12\5\1\u012e\17\5\1\0"+
    "\1\5\4\0\3\5\26\0\2\5\1\u01ac\27\5\1\0"+
    "\1\5\4\0\3\5\26\0\25\5\1\107\4\5\1\0"+
    "\1\5\4\0\3\5\26\0\1\250\31\5\1\0\1\5"+
    "\4\0\3\5\26\0\2\5\1\u01ad\1\5\1\u01ae\25\5"+
    "\1\0\1\5\4\0\3\5\26\0\6\5\1\367\23\5"+
    "\1\0\1\5\4\0\3\5\26\0\12\5\1\113\17\5"+
    "\1\0\1\5\4\0\3\5\26\0\7\5\1\107\22\5"+
    "\1\0\1\5\4\0\3\5\26\0\20\5\1\250\11\5"+
    "\1\0\1\5\4\0\3\5\26\0\2\5\1\107\4\5"+
    "\1\u01af\22\5\1\0\1\5\4\0\3\5\26\0\17\5"+
    "\1\u011c\12\5\1\0\1\5\4\0\3\5\26\0\1\5"+
    "\1\u01b0\30\5\1\0\1\5\4\0\3\5\26\0\24\5"+
    "\1\u0148\5\5\1\0\1\5\4\0\3\5\26\0\26\5"+
    "\1\u01b1\3\5\1\0\1\5\4\0\3\5\26\0\1\u012f"+
    "\31\5\1\0\1\5\4\0\3\5\26\0\26\5\1\132"+
    "\3\5\1\0\1\5\4\0\3\5\26\0\15\5\1\107"+
    "\14\5\1\0\1\5\4\0\3\5\26\0\24\5\1\107"+
    "\5\5\1\0\1\5\4\0\1\u01b2\2\5\26\0\32\5"+
    "\1\0\1\5\4\0\3\5\26\0\6\5\1\u01b3\23\5"+
    "\1\0\1\5\4\0\3\5\26\0\2\5\1\u01b4\14\5"+
    "\1\u01b5\12\5\1\0\1\5\4\0\3\5\26\0\2\5"+
    "\1\u01b6\6\5\1\107\20\5\1\0\1\5\4\0\3\5"+
    "\26\0\13\5\1\250\16\5\1\0\1\5\4\0\3\5"+
    "\26\0\7\5\1\u01b7\22\5\1\0\1\5\4\0\3\5"+
    "\26\0\4\5\1\u01b8\25\5\1\0\1\5\4\0\3\5"+
    "\26\0\2\5\1\u01b9\27\5\1\0\1\5\4\0\3\5"+
    "\26\0\7\5\1\u01ba\22\5\1\0\1\5\4\0\3\5"+
    "\26\0\2\5\1\u01bb\27\5\1\0\1\5\4\0\3\5"+
    "\26\0\13\5\1\u01bc\16\5\1\0\1\5\4\0\3\5"+
    "\26\0\2\5\1\u01bd\27\5\1\0\1\5\4\0\3\5"+
    "\26\0\4\5\1\301\4\5\1\u0122\1\5\1\u01be\16\5"+
    "\1\0\1\5\4\0\3\5\26\0\20\5\1\u01bf\11\5"+
    "\1\0\1\5\4\0\3\5\26\0\1\u01c0\31\5\1\0"+
    "\1\5\4\0\3\5\26\0\4\5\1\u01c1\25\5\1\0"+
    "\1\5\4\0\3\5\26\0\12\5\1\110\17\5\1\0"+
    "\1\5\4\0\3\5\26\0\11\5\1\256\20\5\1\0"+
    "\1\5\4\0\3\5\26\0\2\5\1\u01c2\27\5\1\0"+
    "\1\5\4\0\3\5\26\0\20\5\1\u01c3\11\5\1\0"+
    "\1\5\4\0\3\5\26\0\4\5\1\u01c4\25\5\1\0"+
    "\1\5\4\0\3\5\26\0\4\5\1\u01c5\25\5\1\0"+
    "\1\5\4\0\3\5\26\0\7\5\1\u01c6\22\5\1\0"+
    "\1\5\4\0\3\5\26\0\2\5\1\u01c7\7\5\1\u01c8"+
    "\5\5\1\u01c9\5\5\1\u01ca\3\5\1\0\1\5\4\0"+
    "\3\5\26\0\13\5\1\313\16\5\1\0\1\5\4\0"+
    "\3\5\26\0\16\5\1\370\13\5\1\0\1\5\4\0"+
    "\3\5\26\0\11\5\1\107\20\5\1\0\1\5\4\0"+
    "\3\5\26\0\13\5\1\146\16\5\1\0\1\5\4\0"+
    "\3\5\26\0\13\5\1\u015e\16\5\1\0\1\5\4\0"+
    "\3\5\26\0\4\5\1\u01cb\25\5\1\0\1\5\4\0"+
    "\3\5\26\0\4\5\1\u01cc\25\5\1\0\1\5\4\0"+
    "\3\5\26\0\5\5\1\110\1\u01cd\23\5\1\0\1\5"+
    "\4\0\3\5\26\0\15\5\1\u01ce\14\5\1\0\1\5"+
    "\4\0\3\5\26\0\12\5\1\153\6\5\1\u0127\10\5"+
    "\1\0\1\5\4\0\3\5\26\0\13\5\1\u01cf\16\5"+
    "\1\0\1\5\4\0\3\5\26\0\26\5\1\107\3\5"+
    "\1\0\1\5\4\0\3\5\26\0\12\5\1\u010a\17\5"+
    "\1\0\1\5\4\0\3\5\26\0\11\5\1\337\20\5"+
    "\1\0\1\5\4\0\3\5\26\0\11\5\1\u01d0\20\5"+
    "\1\0\1\5\4\0\3\5\26\0\7\5\1\u01a4\22\5"+
    "\1\0\1\5\4\0\3\5\26\0\5\5\1\113\24\5"+
    "\1\0\1\5\4\0\3\5\26\0\16\5\1\u01d1\13\5"+
    "\1\0\1\5\4\0\3\5\26\0\7\5\1\u01d2\22\5"+
    "\1\0\1\5\4\0\3\5\26\0\4\5\1\110\25\5"+
    "\1\0\1\5\4\0\3\5\26\0\1\u01d3\31\5\1\0"+
    "\1\5\4\0\3\5\26\0\25\5\1\370\4\5\1\0"+
    "\1\5\4\0\3\5\26\0\13\5\1\u01d4\16\5\1\0"+
    "\1\5\4\0\3\5\26\0\5\5\1\u01d5\24\5\1\0"+
    "\1\5\4\0\3\5\26\0\5\5\1\u01d6\24\5\1\0"+
    "\1\5\4\0\3\5\26\0\6\5\1\u01d7\23\5\1\0"+
    "\1\5\4\0\3\5\26\0\5\5\1\u01d8\11\5\1\u01d9"+
    "\12\5\1\0\1\5\4\0\3\5\26\0\11\5\1\u01da"+
    "\20\5\1\0\1\5\4\0\3\5\26\0\5\5\1\u01db"+
    "\24\5\1\0\1\5\4\0\3\5\26\0\1\u01bd\31\5"+
    "\1\0\1\5\4\0\3\5\26\0\10\5\1\u01dc\21\5"+
    "\1\0\1\5\4\0\3\5\26\0\4\5\1\u0186\25\5"+
    "\1\0\1\5\4\0\3\5\26\0\27\5\1\u0124\2\5"+
    "\1\0\1\5\37\0\1\u01dd\35\0\3\5\26\0\10\5"+
    "\1\110\21\5\1\0\1\5\4\0\3\5\26\0\2\5"+
    "\1\u01de\27\5\1\0\1\5\4\0\3\5\26\0\20\5"+
    "\1\u01df\11\5\1\0\1\5\4\0\3\5\26\0\11\5"+
    "\1\u01e0\20\5\1\0\1\5\4\0\3\5\26\0\20\5"+
    "\1\u01e1\11\5\1\0\1\5\4\0\3\5\26\0\7\5"+
    "\1\u0127\22\5\1\0\1\5\4\0\3\5\26\0\22\5"+
    "\1\277\7\5\1\0\1\5\4\0\3\5\26\0\12\5"+
    "\1\u01e2\17\5\1\0\1\5\4\0\3\5\26\0\20\5"+
    "\1\u01e3\2\5\1\u01e4\6\5\1\0\1\5\4\0\3\5"+
    "\26\0\13\5\1\370\16\5\1\0\1\5\4\0\3\5"+
    "\26\0\2\5\1\u01c7\27\5\1\0\1\5\4\0\3\5"+
    "\26\0\4\5\1\u01e5\25\5\1\0\1\5\4\0\3\5"+
    "\26\0\5\5\1\337\24\5\1\0\1\5\4\0\3\5"+
    "\26\0\4\5\1\u01e6\25\5\1\0\1\5\4\0\3\5"+
    "\26\0\17\5\1\u01e7\12\5\1\0\1\5\4\0\3\5"+
    "\26\0\6\5\1\u01e8\23\5\1\0\1\5\4\0\3\5"+
    "\26\0\5\5\1\u01e9\24\5\1\0\1\5\4\0\3\5"+
    "\26\0\5\5\1\u01ea\3\5\1\u01d3\20\5\1\0\1\5"+
    "\4\0\3\5\26\0\5\5\1\250\24\5\1\0\1\5"+
    "\4\0\3\5\26\0\24\5\1\110\5\5\1\0\1\5"+
    "\4\0\3\5\26\0\16\5\1\u01eb\13\5\1\0\1\5"+
    "\4\0\3\5\26\0\11\5\1\u01ec\20\5\1\0\1\5"+
    "\4\0\3\5\26\0\13\5\1\u01ed\16\5\1\0\1\5"+
    "\4\0\3\5\26\0\5\5\1\370\24\5\1\0\1\5"+
    "\4\0\3\5\26\0\11\5\1\u01db\20\5\1\0\1\5"+
    "\4\0\3\5\26\0\20\5\1\107\11\5\1\0\1\5"+
    "\4\0\3\5\26\0\7\5\1\u01ee\22\5\1\0\1\5"+
    "\4\0\3\5\26\0\2\5\1\u01ef\27\5\1\0\1\5"+
    "\4\0\3\5\26\0\17\5\1\u01f0\12\5\1\0\1\5"+
    "\4\0\3\5\26\0\5\5\1\u0194\24\5\1\0\1\5"+
    "\4\0\3\5\26\0\13\5\1\u01f1\16\5\1\0\1\5"+
    "\4\0\3\5\26\0\6\5\1\u014a\23\5\1\0\1\5"+
    "\4\0\3\5\26\0\17\5\1\370\12\5\1\0\1\5"+
    "\4\0\3\5\26\0\2\5\1\u0111\27\5\1\0\1\5"+
    "\4\0\3\5\26\0\17\5\1\u01f2\12\5\1\0\1\5"+
    "\4\0\3\5\26\0\2\5\1\u01f3\27\5\1\0\1\5"+
    "\4\0\3\5\26\0\2\5\1\u01f4\27\5\1\0\1\5"+
    "\4\0\3\5\26\0\1\u01f5\31\5\1\0\1\5\4\0"+
    "\3\5\26\0\17\5\1\u01f6\12\5\1\0\1\5\4\0"+
    "\3\5\26\0\17\5\1\316\12\5\1\0\1\5\4\0"+
    "\3\5\26\0\1\5\1\u01f7\1\5\1\u01f8\1\5\1\u01f9"+
    "\23\5\1\u01fa\1\0\1\5\4\0\3\5\26\0\4\5"+
    "\1\u01fb\25\5\1\0\1\5\4\0\3\5\26\0\2\5"+
    "\1\u016a\27\5\1\0\1\5\4\0\3\5\26\0\7\5"+
    "\1\u01fc\22\5\1\0\1\5\4\0\3\5\26\0\7\5"+
    "\1\u01fd\22\5\1\0\1\5\4\0\3\5\26\0\1\u01fe"+
    "\31\5\1\0\1\5\4\0\3\5\26\0\4\5\1\u01ff"+
    "\25\5\1\0\1\5\4\0\3\5\26\0\2\5\1\u0200"+
    "\27\5\1\0\1\5\4\0\3\5\26\0\2\5\1\u0201"+
    "\27\5\1\0\1\5\4\0\3\5\26\0\1\u0202\16\5"+
    "\1\u0203\12\5\1\0\1\5\4\0\3\5\26\0\2\5"+
    "\1\u0204\27\5\1\0\1\5\4\0\3\5\26\0\4\5"+
    "\1\u0205\25\5\1\0\1\5\4\0\3\5\26\0\2\5"+
    "\1\u017f\27\5\1\0\1\5\4\0\3\5\26\0\1\u0206"+
    "\31\5\1\0\1\5\4\0\3\5\26\0\25\5\1\337"+
    "\4\5\1\0\1\5\4\0\3\5\26\0\17\5\1\250"+
    "\12\5\1\0\1\5\4\0\3\5\26\0\2\5\1\u0207"+
    "\27\5\1\0\1\5\4\0\3\5\26\0\11\5\1\u0129"+
    "\20\5\1\0\1\5\4\0\1\u01b2\2\5\26\0\1\u0208"+
    "\31\5\1\0\1\5\4\0\3\5\26\0\24\5\1\u0209"+
    "\5\5\1\0\1\5\4\0\3\5\26\0\13\5\1\110"+
    "\16\5\1\0\1\5\4\0\3\5\26\0\11\5\1\u020a"+
    "\20\5\1\0\1\5\4\0\3\5\26\0\4\5\1\u020b"+
    "\25\5\1\0\1\5\4\0\3\5\26\0\17\5\1\u020c"+
    "\12\5\1\0\1\5\4\0\3\5\26\0\5\5\1\164"+
    "\24\5\1\0\1\5\4\0\3\5\26\0\14\5\1\u020d"+
    "\15\5\1\0\1\5\4\0\3\5\26\0\7\5\1\u020e"+
    "\22\5\1\0\1\5\4\0\3\5\26\0\2\5\1\140"+
    "\27\5\1\0\1\5\4\0\3\5\26\0\7\5\1\u020f"+
    "\22\5\1\0\1\5\4\0\3\5\26\0\4\5\1\u0210"+
    "\25\5\1\0\1\5\4\0\3\5\26\0\3\5\1\107"+
    "\26\5\1\0\1\5\4\0\3\5\26\0\12\5\1\u0211"+
    "\17\5\1\0\1\5\4\0\3\5\26\0\5\5\1\u0212"+
    "\14\5\1\277\7\5\1\0\1\5\4\0\3\5\26\0"+
    "\13\5\1\u0213\16\5\1\0\1\5\4\0\3\5\26\0"+
    "\17\5\1\u0214\12\5\1\0\1\5\4\0\3\5\26\0"+
    "\5\5\1\250\1\u0215\23\5\1\0\1\5\4\0\3\5"+
    "\26\0\1\113\31\5\1\0\1\5\4\0\3\5\26\0"+
    "\1\5\1\u0216\30\5\1\0\1\5\4\0\3\5\26\0"+
    "\20\5\1\277\11\5\1\0\1\5\4\0\3\5\26\0"+
    "\12\5\1\250\17\5\1\0\1\5\4\0\3\5\26\0"+
    "\5\5\1\u0217\24\5\1\0\1\5\4\0\3\5\26\0"+
    "\17\5\1\u0218\12\5\1\0\1\5\4\0\3\5\26\0"+
    "\6\5\1\u0219\23\5\1\0\1\5\4\0\3\5\26\0"+
    "\17\5\1\u021a\12\5\1\0\1\5\4\0\3\5\26\0"+
    "\25\5\1\u021b\4\5\1\0\1\5\4\0\3\5\26\0"+
    "\4\5\1\u021c\25\5\1\0\1\5\4\0\3\5\26\0"+
    "\1\5\1\u01ab\30\5\1\0\1\5\4\0\3\5\26\0"+
    "\2\5\1\u021d\27\5\1\0\1\5\4\0\3\5\26\0"+
    "\7\5\1\u021e\22\5\1\0\1\5\4\0\3\5\26\0"+
    "\5\5\1\u021f\24\5\1\0\1\5\4\0\3\5\26\0"+
    "\1\107\10\5\1\u0213\20\5\1\0\1\5\4\0\3\5"+
    "\26\0\4\5\1\u010a\25\5\1\0\1\5\4\0\3\5"+
    "\26\0\1\u0220\31\5\1\0\1\5\4\0\3\5\26\0"+
    "\14\5\1\u01a7\15\5\1\0\1\5\4\0\3\5\26\0"+
    "\2\5\1\u0178\27\5\1\0\1\5\4\0\3\5\26\0"+
    "\2\5\1\u0221\27\5\1\0\1\5\4\0\3\5\26\0"+
    "\17\5\1\u0222\12\5\1\0\1\5\4\0\3\5\26\0"+
    "\2\5\1\u0223\27\5\1\0\1\5\4\0\3\5\26\0"+
    "\5\5\1\u0224\24\5\1\0\1\5\4\0\3\5\26\0"+
    "\1\132\31\5\1\0\1\5\4\0\3\5\26\0\5\5"+
    "\1\110\24\5\1\0\1\5\4\0\3\5\26\0\7\5"+
    "\1\250\22\5\1\0\1\5\4\0\3\5\26\0\5\5"+
    "\1\u0225\24\5\1\0\1\5\4\0\3\5\26\0\17\5"+
    "\1\u0226\12\5\1\0\1\5\4\0\3\5\26\0\11\5"+
    "\1\u021a\20\5\1\0\1\5\4\0\3\5\26\0\17\5"+
    "\1\u0227\12\5\1\0\1\5\4\0\3\5\26\0\6\5"+
    "\1\u01bd\23\5\1\0\1\5\4\0\3\5\26\0\6\5"+
    "\1\u0228\23\5\1\0\1\5\4\0\3\5\26\0\6\5"+
    "\1\370\23\5\1\0\1\5\4\0\3\5\26\0\4\5"+
    "\1\u0229\25\5\1\0\1\5\40\0\1\u022a\34\0\3\5"+
    "\26\0\20\5\1\u022b\11\5\1\0\1\5\4\0\3\5"+
    "\26\0\17\5\1\243\12\5\1\0\1\5\4\0\3\5"+
    "\26\0\5\5\1\u0192\24\5\1\0\1\5\4\0\3\5"+
    "\26\0\1\u0123\6\5\1\u01a2\22\5\1\0\1\5\4\0"+
    "\3\5\26\0\11\5\1\u022c\20\5\1\0\1\5\4\0"+
    "\3\5\26\0\4\5\1\u022d\25\5\1\0\1\5\4\0"+
    "\3\5\26\0\11\5\1\u022e\20\5\1\0\1\5\4\0"+
    "\3\5\26\0\2\5\1\151\27\5\1\0\1\5\4\0"+
    "\3\5\26\0\17\5\1\233\12\5\1\0\1\5\4\0"+
    "\3\5\26\0\12\5\1\u01ba\17\5\1\0\1\5\4\0"+
    "\3\5\26\0\14\5\1\u022f\15\5\1\0\1\5\4\0"+
    "\3\5\26\0\2\5\1\u0230\27\5\1\0\1\5\4\0"+
    "\3\5\26\0\17\5\1\u01bd\12\5\1\0\1\5\4\0"+
    "\3\5\26\0\1\u01ef\31\5\1\0\1\5\4\0\3\5"+
    "\26\0\13\5\1\u0111\16\5\1\0\1\5\4\0\3\5"+
    "\26\0\17\5\1\u0231\12\5\1\0\1\5\4\0\3\5"+
    "\26\0\13\5\1\u010c\16\5\1\0\1\5\4\0\3\5"+
    "\26\0\12\5\1\u012f\17\5\1\0\1\5\4\0\3\5"+
    "\26\0\14\5\1\107\15\5\1\0\1\5\4\0\3\5"+
    "\26\0\1\u011a\31\5\1\0\1\5\4\0\3\5\26\0"+
    "\20\5\1\301\11\5\1\0\1\5\4\0\3\5\26\0"+
    "\5\5\1\233\24\5\1\0\1\5\4\0\3\5\26\0"+
    "\1\5\1\u0232\30\5\1\0\1\5\4\0\3\5\26\0"+
    "\5\5\1\255\24\5\1\0\1\5\4\0\3\5\26\0"+
    "\7\5\1\u0233\22\5\1\0\1\5\4\0\3\5\26\0"+
    "\1\u0234\31\5\1\0\1\5\4\0\3\5\26\0\25\5"+
    "\1\u0124\4\5\1\0\1\5\4\0\3\5\26\0\11\5"+
    "\1\u0235\20\5\1\0\1\5\4\0\3\5\26\0\13\5"+
    "\1\u0236\16\5\1\0\1\5\4\0\3\5\26\0\1\u0237"+
    "\31\5\1\0\1\5\4\0\3\5\26\0\11\5\1\117"+
    "\20\5\1\0\1\5\4\0\3\5\26\0\1\5\1\u0238"+
    "\30\5\1\0\1\5\4\0\3\5\26\0\2\5\1\u0239"+
    "\27\5\1\0\1\5\4\0\3\5\26\0\20\5\1\u0140"+
    "\11\5\1\0\1\5\4\0\3\5\26\0\20\5\1\u023a"+
    "\11\5\1\0\1\5\4\0\3\5\26\0\17\5\1\u023b"+
    "\12\5\1\0\1\5\4\0\3\5\26\0\6\5\1\u01aa"+
    "\23\5\1\0\1\5\4\0\3\5\26\0\12\5\1\u01dc"+
    "\17\5\1\0\1\5\4\0\3\5\26\0\5\5\1\u023c"+
    "\24\5\1\0\1\5\4\0\3\5\26\0\4\5\1\u023d"+
    "\25\5\1\0\1\5\4\0\3\5\26\0\6\5\1\u023e"+
    "\23\5\1\0\1\5\4\0\3\5\26\0\12\5\1\u023f"+
    "\17\5\1\0\1\5\4\0\3\5\26\0\10\5\1\u0240"+
    "\21\5\1\0\1\5\4\0\3\5\26\0\26\5\1\337"+
    "\3\5\1\0\1\5\4\0\3\5\26\0\2\5\1\u0241"+
    "\27\5\1\0\1\5\4\0\3\5\26\0\22\5\1\337"+
    "\7\5\1\0\1\5\4\0\3\5\26\0\1\u0242\31\5"+
    "\1\0\1\5\4\0\3\5\26\0\11\5\1\u01ef\20\5"+
    "\1\0\1\5\4\0\3\5\26\0\2\5\1\u0243\27\5"+
    "\1\0\1\5\4\0\3\5\26\0\17\5\1\u0244\12\5"+
    "\1\0\1\5\4\0\3\5\26\0\1\u0245\31\5\1\0"+
    "\1\5\4\0\3\5\26\0\20\5\1\u013b\6\5\1\370"+
    "\2\5\1\0\1\5\4\0\3\5\26\0\1\5\1\110"+
    "\30\5\1\0\1\5\4\0\3\5\26\0\1\u0246\31\5"+
    "\1\0\1\5\4\0\3\5\26\0\20\5\1\u0247\11\5"+
    "\1\0\1\5\4\0\3\5\26\0\17\5\1\u010a\12\5"+
    "\1\0\1\5\4\0\3\5\26\0\17\5\1\u0248\12\5"+
    "\1\0\1\5\4\0\3\5\26\0\11\5\1\u0249\20\5"+
    "\1\0\1\5\4\0\3\5\26\0\4\5\1\u024a\25\5"+
    "\1\0\1\5\4\0\3\5\26\0\20\5\1\u024b\11\5"+
    "\1\0\1\5\4\0\3\5\26\0\1\107\31\5\1\0"+
    "\1\5\4\0\3\5\26\0\5\5\1\u0127\24\5\1\0"+
    "\1\5\4\0\3\5\26\0\25\5\1\u024c\4\5\1\0"+
    "\1\5\4\0\3\5\26\0\17\5\1\u0111\12\5\1\0"+
    "\1\5\4\0\3\5\26\0\5\5\1\u01a7\24\5\1\0"+
    "\1\5\4\0\3\5\26\0\5\5\1\u024d\24\5\1\0"+
    "\1\5\4\0\3\5\26\0\27\5\1\277\2\5\1\0"+
    "\1\5\4\0\3\5\26\0\6\5\1\u024e\23\5\1\0"+
    "\1\5\4\0\3\5\26\0\17\5\1\u024f\12\5\1\0"+
    "\1\5\4\0\3\5\26\0\1\314\1\5\1\367\27\5"+
    "\1\0\1\5\4\0\3\5\26\0\10\5\1\u0245\5\5"+
    "\1\110\13\5\1\0\1\5\4\0\3\5\26\0\16\5"+
    "\1\u0250\13\5\1\0\1\5\4\0\3\5\26\0\6\5"+
    "\1\u013b\23\5\1\0\1\5\37\0\1\u0251\35\0\3\5"+
    "\26\0\1\u0252\31\5\1\0\1\5\4\0\3\5\26\0"+
    "\6\5\1\u0253\23\5\1\0\1\5\4\0\3\5\26\0"+
    "\1\124\31\5\1\0\1\5\4\0\3\5\26\0\6\5"+
    "\1\u0254\23\5\1\0\1\5\4\0\3\5\26\0\17\5"+
    "\1\u0255\12\5\1\0\1\5\4\0\3\5\26\0\6\5"+
    "\1\u0256\23\5\1\0\1\5\4\0\3\5\26\0\1\5"+
    "\1\u0257\30\5\1\0\1\5\4\0\3\5\26\0\13\5"+
    "\1\u01d3\16\5\1\0\1\5\4\0\3\5\26\0\2\5"+
    "\1\u0258\27\5\1\0\1\5\4\0\3\5\26\0\4\5"+
    "\1\u0259\25\5\1\0\1\5\4\0\3\5\26\0\26\5"+
    "\1\u025a\3\5\1\0\1\5\4\0\3\5\26\0\2\5"+
    "\1\u01f5\27\5\1\0\1\5\4\0\3\5\26\0\10\5"+
    "\1\u0186\21\5\1\0\1\5\4\0\3\5\26\0\2\5"+
    "\1\u025b\27\5\1\0\1\5\4\0\3\5\26\0\5\5"+
    "\1\u025c\24\5\1\0\1\5\4\0\3\5\26\0\10\5"+
    "\1\u025d\21\5\1\0\1\5\4\0\3\5\26\0\6\5"+
    "\1\u025e\23\5\1\0\1\5\4\0\3\5\26\0\1\u025f"+
    "\31\5\1\0\1\5\4\0\3\5\26\0\2\5\1\107"+
    "\14\5\1\u0158\12\5\1\0\1\5\4\0\3\5\26\0"+
    "\4\5\1\u0260\25\5\1\0\1\5\4\0\3\5\26\0"+
    "\4\5\1\u0261\25\5\1\0\1\5\4\0\3\5\26\0"+
    "\11\5\1\u021e\20\5\1\0\1\5\4\0\3\5\26\0"+
    "\3\5\1\u0262\26\5\1\0\1\5\4\0\3\5\26\0"+
    "\12\5\1\u0245\17\5\1\0\1\5\4\0\3\5\26\0"+
    "\6\5\1\u0263\23\5\1\0\1\5\4\0\3\5\26\0"+
    "\4\5\1\u0264\25\5\1\0\1\5\4\0\3\5\26\0"+
    "\4\5\1\u01a7\25\5\1\0\1\5\4\0\3\5\26\0"+
    "\7\5\1\u0265\22\5\1\0\1\5\4\0\3\5\26\0"+
    "\17\5\1\u017a\12\5\1\0\1\5\4\0\3\5\26\0"+
    "\4\5\1\u0266\25\5\1\0\1\5\4\0\3\5\26\0"+
    "\6\5\1\u0267\23\5\1\0\1\5\4\0\3\5\26\0"+
    "\17\5\1\u0268\12\5\1\0\1\5\4\0\3\5\26\0"+
    "\4\5\1\u0269\25\5\1\0\1\5\4\0\1\u026a\2\5"+
    "\26\0\32\5\1\0\1\5\4\0\3\5\26\0\6\5"+
    "\1\u0127\23\5\1\0\1\5\4\0\3\5\26\0\22\5"+
    "\1\u026b\7\5\1\0\1\5\4\0\3\5\26\0\23\5"+
    "\1\u01ba\6\5\1\0\1\5\4\0\3\5\26\0\13\5"+
    "\1\u026c\16\5\1\0\1\5\47\0\1\u026d\25\0\3\5"+
    "\26\0\25\5\1\u026e\4\5\1\0\1\5\4\0\3\5"+
    "\26\0\27\5\1\u01a1\2\5\1\0\1\5\4\0\3\5"+
    "\26\0\2\5\1\u026f\27\5\1\0\1\5\4\0\3\5"+
    "\26\0\22\5\1\u0232\7\5\1\0\1\5\4\0\3\5"+
    "\26\0\12\5\1\357\17\5\1\0\1\5\4\0\3\5"+
    "\26\0\12\5\1\u0270\17\5\1\0\1\5\4\0\3\5"+
    "\26\0\22\5\1\357\7\5\1\0\1\5\4\0\3\5"+
    "\26\0\1\u0271\31\5\1\0\1\5\4\0\3\5\26\0"+
    "\20\5\1\u0272\11\5\1\0\1\5\4\0\3\5\26\0"+
    "\2\5\1\367\27\5\1\0\1\5\4\0\3\5\26\0"+
    "\11\5\1\u0273\20\5\1\0\1\5\4\0\3\5\26\0"+
    "\20\5\1\u0274\11\5\1\0\1\5\4\0\3\5\26\0"+
    "\17\5\1\u0275\12\5\1\0\1\5\4\0\1\u0276\2\5"+
    "\26\0\32\5\1\0\1\5\4\0\3\5\26\0\2\5"+
    "\1\u0277\27\5\1\0\1\5\4\0\3\5\26\0\4\5"+
    "\1\u0274\25\5\1\0\1\5\4\0\3\5\26\0\22\5"+
    "\1\224\7\5\1\0\1\5\4\0\3\5\26\0\21\5"+
    "\1\u0278\10\5\1\0\1\5\4\0\3\5\26\0\21\5"+
    "\1\u0279\10\5\1\0\1\5\4\0\3\5\26\0\12\5"+
    "\1\u027a\17\5\1\0\1\5\4\0\3\5\26\0\17\5"+
    "\1\u027b\12\5\1\0\1\5\4\0\3\5\26\0\5\5"+
    "\1\u027c\24\5\1\0\1\5\4\0\3\5\26\0\4\5"+
    "\1\u025c\25\5\1\0\1\5\4\0\3\5\26\0\10\5"+
    "\1\146\21\5\1\0\1\5\4\0\1\u027d\2\5\26\0"+
    "\32\5\1\0\1\5\4\0\3\5\26\0\11\5\1\u0124"+
    "\20\5\1\0\1\5\4\0\3\5\26\0\20\5\1\u027e"+
    "\11\5\1\0\1\5\4\0\3\5\26\0\2\5\1\250"+
    "\27\5\1\0\1\5\4\0\3\5\26\0\6\5\1\365"+
    "\23\5\1\0\1\5\4\0\3\5\26\0\4\5\1\u027f"+
    "\25\5\1\0\1\5\4\0\3\5\26\0\6\5\1\u0280"+
    "\23\5\1\0\1\5\4\0\3\5\26\0\1\5\1\u010a"+
    "\2\5\1\u0281\6\5\1\u01bc\16\5\1\0\1\5\4\0"+
    "\3\5\26\0\5\5\1\u0130\24\5\1\0\1\5\4\0"+
    "\1\u0282\2\5\26\0\12\5\1\u0270\17\5\1\0\1\5"+
    "\4\0\3\5\26\0\1\u0283\31\5\1\0\1\5\4\0"+
    "\3\5\26\0\20\5\1\u0284\3\5\1\u0285\5\5\1\0"+
    "\1\5\4\0\3\5\26\0\12\5\1\u0186\17\5\1\0"+
    "\1\5\4\0\3\5\26\0\11\5\1\u0148\20\5\1\0"+
    "\1\5\4\0\3\5\26\0\15\5\1\u0286\7\5\1\u0287"+
    "\4\5\1\0\1\5\4\0\3\5\26\0\11\5\1\u0288"+
    "\20\5\1\0\1\5\4\0\3\5\26\0\1\314\31\5"+
    "\1\0\1\5\4\0\3\5\26\0\4\5\1\u0223\25\5"+
    "\1\0\1\5\4\0\3\5\26\0\17\5\1\u0289\12\5"+
    "\1\0\1\5\4\0\3\5\26\0\17\5\1\u028a\12\5"+
    "\1\0\1\5\4\0\3\5\26\0\13\5\1\u028b\16\5"+
    "\1\0\1\5\4\0\3\5\26\0\17\5\1\u028c\12\5"+
    "\1\0\1\5\4\0\3\5\26\0\2\5\1\u028d\27\5"+
    "\1\0\1\5\4\0\3\5\26\0\11\5\1\u028e\20\5"+
    "\1\0\1\5\4\0\3\5\26\0\17\5\1\u028f\12\5"+
    "\1\0\1\5\4\0\3\5\26\0\13\5\1\u0290\16\5"+
    "\1\0\1\5\4\0\3\5\26\0\25\5\1\u0291\4\5"+
    "\1\0\1\5\4\0\3\5\26\0\6\5\1\u0292\23\5"+
    "\1\0\1\5\4\0\3\5\26\0\1\5\1\u01a5\30\5"+
    "\1\0\1\5\4\0\3\5\26\0\25\5\1\u0293\4\5"+
    "\1\0\1\5\4\0\3\5\26\0\21\5\1\u0294\10\5"+
    "\1\0\1\5\4\0\3\5\26\0\13\5\1\u0129\16\5"+
    "\1\0\1\5\4\0\3\5\26\0\6\5\1\u01a4\23\5"+
    "\1\0\1\5\4\0\3\5\26\0\5\5\1\u0140\24\5"+
    "\1\0\1\5\4\0\3\5\26\0\2\5\1\u0295\27\5"+
    "\1\0\1\5\4\0\3\5\26\0\20\5\1\u01a1\11\5"+
    "\1\0\1\5\4\0\3\5\26\0\17\5\1\u0296\12\5"+
    "\1\0\1\5\4\0\3\5\26\0\10\5\1\u0297\21\5"+
    "\1\0\1\5\4\0\3\5\26\0\20\5\1\u01e3\11\5"+
    "\1\0\1\5\4\0\3\5\26\0\7\5\1\u0298\22\5"+
    "\1\0\1\5\4\0\3\5\26\0\15\5\1\u0299\14\5"+
    "\1\0\1\5\4\0\3\5\26\0\1\u029a\31\5\1\0"+
    "\1\5\4\0\3\5\26\0\5\5\1\u029b\24\5\1\0"+
    "\1\5\4\0\3\5\26\0\5\5\1\u029c\24\5\1\0"+
    "\1\5\4\0\3\5\26\0\1\u029d\31\5\1\0\1\5"+
    "\4\0\3\5\26\0\17\5\1\u029e\12\5\1\0\1\5"+
    "\4\0\3\5\26\0\20\5\1\u029f\11\5\1\0\1\5"+
    "\4\0\3\5\26\0\4\5\1\u02a0\25\5\1\0\1\5"+
    "\4\0\3\5\26\0\2\5\1\u02a1\27\5\1\0\1\5"+
    "\4\0\3\5\26\0\21\5\1\u02a2\10\5\1\0\1\5"+
    "\4\0\3\5\26\0\1\5\1\u02a3\2\5\1\u027f\25\5"+
    "\1\0\1\5\4\0\3\5\26\0\2\5\1\u02a4\27\5"+
    "\1\0\1\5\4\0\3\5\26\0\4\5\1\u02a5\25\5"+
    "\1\0\1\5\4\0\3\5\26\0\1\u02a6\31\5\1\0"+
    "\1\5\4\0\3\5\26\0\17\5\1\u02a7\12\5\1\0"+
    "\1\5\4\0\3\5\26\0\7\5\1\u02a8\22\5\1\0"+
    "\1\5\4\0\3\5\26\0\20\5\1\u02a1\11\5\1\0"+
    "\1\5\3\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[36366];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\3\11\1\1\1\11\6\1\2\11"+
    "\1\1\1\11\1\1\1\11\1\1\2\11\33\1\2\11"+
    "\1\1\1\0\1\1\7\11\1\0\3\11\165\1\1\0"+
    "\1\1\2\0\225\1\1\0\1\1\1\11\25\1\1\0"+
    "\160\1\1\0\114\1\1\0\46\1\1\0\33\1\1\11"+
    "\73\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[680];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Alexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Alexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 142) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { return Operador de Division;
          }
        case 42: break;
        case 4: 
          { lexeme=yytext(); return Identificador;
          }
        case 43: break;
        case 27: 
          { return Apertura signo de Interrogacion;
          }
        case 44: break;
        case 26: 
          { return Cierre signo de Interrogacion;
          }
        case 45: break;
        case 41: 
          { lexeme=yytext(); return String;
          }
        case 46: break;
        case 15: 
          { return Punto y coma;
          }
        case 47: break;
        case 33: 
          { return Operador no igual;
          }
        case 48: break;
        case 22: 
          { return Cierre de llaves;
          }
        case 49: break;
        case 23: 
          { return Arroba;
          }
        case 50: break;
        case 40: 
          { lexeme=yytext(); return Reservadas;
          }
        case 51: break;
        case 20: 
          { return Cierre de par√©ntesis;
          }
        case 52: break;
        case 37: 
          { return Par√©ntesis;
          }
        case 53: break;
        case 21: 
          { return Apertura de llaves;
          }
        case 54: break;
        case 29: 
          { lexeme=yytext(); return Comentario;
          }
        case 55: break;
        case 7: 
          { return Operador de Resta;
          }
        case 56: break;
        case 6: 
          { return Operador de Suma;
          }
        case 57: break;
        case 39: 
          { return Doble Numeral;
          }
        case 58: break;
        case 36: 
          { return Corchetes;
          }
        case 59: break;
        case 17: 
          { return Apertura de corchetes;
          }
        case 60: break;
        case 38: 
          { return Llaves;
          }
        case 61: break;
        case 30: 
          { return Menor o igual que;
          }
        case 62: break;
        case 11: 
          { return Menor que;
          }
        case 63: break;
        case 31: 
          { return Operador de Igualdad;
          }
        case 64: break;
        case 25: 
          { lexeme=yytext(); return Bit;
          }
        case 65: break;
        case 34: 
          { return Operador AND;
          }
        case 66: break;
        case 8: 
          { return Operador de Multiplicacion;
          }
        case 67: break;
        case 18: 
          { return Cierre de corchetes;
          }
        case 68: break;
        case 16: 
          { return Punto;
          }
        case 69: break;
        case 10: 
          { return Simbolo de Porcentaje;
          }
        case 70: break;
        case 24: 
          { return Numeral;
          }
        case 71: break;
        case 14: 
          { return Signo de Exclamaci√≥n;
          }
        case 72: break;
        case 13: 
          { return Mayor que;
          }
        case 73: break;
        case 12: 
          { return Simbolo Igual;
          }
        case 74: break;
        case 2: 
          { return Gui√≥n bajo;
          }
        case 75: break;
        case 35: 
          { return Operador OR;
          }
        case 76: break;
        case 1: 
          { return ERROR;
          }
        case 77: break;
        case 28: 
          { lexeme=yytext(); return Float;
          }
        case 78: break;
        case 5: 
          { /*Ignore*/
          }
        case 79: break;
        case 3: 
          { lexeme=yytext(); return Int;
          }
        case 80: break;
        case 32: 
          { return Mayor o igual que;
          }
        case 81: break;
        case 19: 
          { return Apertura de par√©ntesis;
          }
        case 82: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
