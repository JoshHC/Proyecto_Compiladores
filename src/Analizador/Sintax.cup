package Analizador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java_cup.runtime.virtual_parse_stack;
import java.lang.reflect.Field;
import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.IOException;


action code{:
    private String ambitoActual = "master";
    public LinkedList<Simbolo> Tabladesimbolos = new LinkedList<Simbolo>();

     public void EscribirTS(String txtruta) throws IOException {
        //Se reemplaza el salto de línea por un salto de Línea que reconozca el BufferedWriter
        String absolutePath = txtruta;
        absolutePath = absolutePath.substring(0, absolutePath.length() - 3);
        absolutePath += "out";
        


        File ArchivoOut = new File(absolutePath);
        FileWriter writer = new FileWriter(ArchivoOut);
        PrintWriter pw = new PrintWriter(ArchivoOut);

        String linea = "";
        linea = "|Ambito                  |Ambito_Objeto          |Tipo           |Tipo_Dato      "
                + "|ID                             |Valor  |Tipo_Retorno   |\n";
        pw.write(linea);
        
        linea = "-----------------------------------------------------------------------------------"
                + "-------------------------------------------------------------------------------\n";
        pw.write(linea);

        int cont = 0;
        Simbolo item;
        item = Tabladesimbolos.get(cont);

        while(item != null)
        {            
            float cociente;
            linea = "";
            
            if (item.Ambito != null)
            {
                cociente = (item.Ambito.length()+1)/4;
                // Impresion de Ambito con 6 tabulares
                switch ((int)Math.floor(cociente))
                {
                    case 0: linea += "|" + item.Ambito + "\t\t\t\t\t\t"; break;
                    case 1: linea += "|" + item.Ambito + "\t\t\t\t\t"; break;
                    case 2: linea += "|" + item.Ambito + "\t\t\t\t"; break;
                    case 3: linea += "|" + item.Ambito + "\t\t\t"; break;
                    case 4: linea += "|" + item.Ambito + "\t\t"; break;
                    case 5: linea += "|" + item.Ambito + "\t"; break;
                    default: linea += "|" + item.Ambito; break;
                }
            }
            else
            {
                linea += "|\t\t\t\t\t\t";
            }
            

            if (item.Ambito_Objeto != null)
            {
                cociente = (item.Ambito_Objeto.length()+1)/4;
                // Impresion de Ambito_Objeto con 6 tabulares
                switch ((int)Math.floor(cociente))
                {
                    case 0: linea += "|" + item.Ambito_Objeto + "\t\t\t\t\t\t"; break;
                    case 1: linea += "|" + item.Ambito_Objeto + "\t\t\t\t\t"; break;
                    case 2: linea += "|" + item.Ambito_Objeto + "\t\t\t\t"; break;
                    case 3: linea += "|" + item.Ambito_Objeto + "\t\t\t"; break;
                    case 4: linea += "|" + item.Ambito_Objeto + "\t\t"; break;
                    case 5: linea += "|" + item.Ambito_Objeto + "\t"; break;
                    default: linea += "|" + item.Ambito_Objeto; break;
                }
            }
            else
            {
                linea += "|\t\t\t\t\t\t";
            }

            
            if (item.Tipo != null)
            {
                cociente = (item.Tipo.length()+1)/4;
                // Impresion de Tipo con 4 tabulares
                switch ((int)Math.floor(cociente))
                {
                    case 0: linea += "|" + item.Tipo + "\t\t\t\t"; break;
                    case 1: linea += "|" + item.Tipo + "\t\t\t"; break;
                    case 2: linea += "|" + item.Tipo + "\t\t"; break;
                    case 3: linea += "|" + item.Tipo + "\t"; break;
                    default: linea += "|" + item.Tipo; break;
                }
            }
            else
            {
                linea += "|\t\t\t\t";
            }
            
            
            if (item.Tipo_Dato != null)
            {
                cociente = (item.Tipo_Dato.length()+1)/4;
                // Impresion de Tipo_Dato con 4 tabulares
                switch ((int)Math.floor(cociente))
                {
                    case 0: linea += "|" + item.Tipo_Dato + "\t\t\t\t"; break;
                    case 1: linea += "|" + item.Tipo_Dato + "\t\t\t"; break;
                    case 2: linea += "|" + item.Tipo_Dato + "\t\t"; break;
                    case 3: linea += "|" + item.Tipo_Dato + "\t"; break;
                    default: linea += "|" + item.Tipo_Dato; break;
                }
            }
            else
            {
                linea += "|\t\t\t\t";
            }
            

            if (item.ID != null)
            {
                cociente = (item.ID.length()+1)/4;
                // Impresion de ID con 8 tabulares
                switch ((int)Math.floor(cociente))
                {
                    case 0: linea += "|" + item.ID + "\t\t\t\t\t\t\t\t"; break;
                    case 1: linea += "|" + item.ID + "\t\t\t\t\t\t\t"; break;
                    case 2: linea += "|" + item.ID + "\t\t\t\t\t\t"; break;
                    case 3: linea += "|" + item.ID + "\t\t\t\t\t"; break;
                    case 4: linea += "|" + item.ID + "\t\t\t\t"; break;
                    case 5: linea += "|" + item.ID + "\t\t\t"; break;
                    case 6: linea += "|" + item.ID + "\t\t"; break;
                    case 7: linea += "|" + item.ID + "\t"; break;
                    default: linea += "|" + item.ID; break;
                }
            }
            else
            {
                linea += "|\t\t\t\t\t\t\t\t";
            }
            

            if (item.Valor != null)
            {
                cociente = (item.Valor.length()+1)/4;
                // Impresion de Valor con 2 tabulares
                switch ((int)Math.floor(cociente))
                {
                    case 0: linea += "|" + item.Valor + "\t\t"; break;
                    case 1: linea += "|" + item.Valor + "\t"; break;
                    default: linea += "|" + item.Valor; break;
                }
            }
            else
            {
                linea += "|\t\t";
            }   
            

            if (item.Tipo_Retorno != null)
            {
                cociente = (item.Tipo_Retorno.length()+1)/4;
                // Impresion de Tipo_Retorno con 4 tabulares
                switch ((int)Math.floor(cociente))
                {
                    case 0: linea += "|" + item.Tipo_Retorno + "\t\t\t\t"; break;
                    case 1: linea += "|" + item.Tipo_Retorno + "\t\t\t"; break;
                    case 2: linea += "|" + item.Tipo_Retorno + "\t\t"; break;
                    case 3: linea += "|" + item.Tipo_Retorno + "\t"; break;
                    default: linea += "|" + item.Tipo_Retorno; break;
                }
            }
            else
            {
                linea += "|\t\t\t\t";
            }
               
            

              try
            {
                cociente = (item.Tipo.length()+1)/4;
                // Impresion de Tipo con 4 tabulares
                switch ((int)Math.floor(cociente))
                {
                    case 0: linea += "|" + item.Tipo + "\t\t\t\t"; break;
                    case 1: linea += "|" + item.Tipo + "\t\t\t"; break;
                    case 2: linea += "|" + item.Tipo + "\t\t"; break;
                    case 3: linea += "|" + item.Tipo + "\t"; break;
                    default: linea += "|" + item.Tipo; break;
                }
            }
            catch(Exception e)
            {
                  linea += "|\t\t\t\t";
            }
           
            try
            {

                cociente = (item.Tipo_Dato.length()+1)/4;
                // Impresion de Tipo_Dato con 4 tabulares
                switch ((int)Math.floor(cociente))
                {
                    case 0: linea += "|" + item.Tipo_Dato + "\t\t\t\t\n"; break;
                    case 1: linea += "|" + item.Tipo_Dato + "\t\t\t\n"; break;
                    case 2: linea += "|" + item.Tipo_Dato + "\t\t\n"; break;
                    case 3: linea += "|" + item.Tipo_Dato + "\t\n"; break;
                    default: linea += "|" + item.Tipo_Dato + "\n"; break;
                }
            }
            catch(Exception e)
            {
                linea += "|\t\t\t\t\n";
            }

            pw.write(linea);

            cont++;
            try
            {
            item = Tabladesimbolos.get(cont);
            }
            catch(Exception e)
           {
                  break;       
           }
        }

        pw.append("FIN DE TABLA DE SIMBOLOS");

        pw.close();
        writer.close();
    }

    public void llenarTabla(){
        Tabladesimbolos.add(new Simbolo("","","","","","","",0,0));
        //Ambito, Ambito_objeto, Tipo, Tipo_dato, ID, Valor, Tipo_retorno, Dim1, Dim2
        Tabladesimbolos.add(new Simbolo("","","database","","master","","",0,0));
        Tabladesimbolos.add(new Simbolo("master","","schema","","dbo","","",0,0));
        //
        //DB Motociclismo
        Tabladesimbolos.add(new Simbolo("","","database","","Motociclismo","","",0,0));
        Tabladesimbolos.add(new Simbolo("Motociclismo","","schema","","dbo","","",0,0));
        Tabladesimbolos.add(new Simbolo("Motociclismo","","schema","","NASCAR","","",0,0));
        //Tabla Carrera
        Tabladesimbolos.add(new Simbolo("Motociclismo","NASCAR","table","","Carrera","","",0,0));
        Tabladesimbolos.add(new Simbolo("Motociclismo","Carrera","column","varchar","NombreGP","","",15,0));
        Tabladesimbolos.add(new Simbolo("Motociclismo","Carrera","column","varchar","Año","","",4,0));
        Tabladesimbolos.add(new Simbolo("Motociclismo","Carrera","column","varchar","FechaHoraInicio","","",25,0));
        Tabladesimbolos.add(new Simbolo("Motociclismo","Carrera","column","int","NumVueltas","","",0,0));
        Tabladesimbolos.add(new Simbolo("Motociclismo","Carrera","column","varchar","NombreCircuito","","",15,0));
        //Tabla Circuito
        Tabladesimbolos.add(new Simbolo("Motociclismo","NASCAR","table","","Circuito","","",0,0));
        Tabladesimbolos.add(new Simbolo("Motociclismo","Circuito","column","varchar","Nombre","","",15,0));
        Tabladesimbolos.add(new Simbolo("Motociclismo","Circuito","column","varchar","Pais","","",15,0));
        Tabladesimbolos.add(new Simbolo("Motociclismo","Circuito","column","varchar","Tipo","","",15,0));
        Tabladesimbolos.add(new Simbolo("Motociclismo","Circuito","column","float","Longitud","","",4,1));
        Tabladesimbolos.add(new Simbolo("Motociclismo","Circuito","column","varchar","Diseñador","","",20,0));
        //Tabla Consultas
        Tabladesimbolos.add(new Simbolo("Motociclismo","dbo","Tabladesimbolos","","CONSULTAS_SQL","","",0,0));
        Tabladesimbolos.add(new Simbolo("Motociclismo","CONSULTAS_SQL","column","int","ID_CONSULTA","","",0,0));
        Tabladesimbolos.add(new Simbolo("Motociclismo","CONSULTAS_SQL","column","varchar","CONSULTA","","",800,0));
        //Tabla Escuderia
        Tabladesimbolos.add(new Simbolo("Motociclismo","NASCAR","table","","Escuderia","","",0,0));
        Tabladesimbolos.add(new Simbolo("Motociclismo","Escuderia","column","varchar","Nombre","","",20,0));
        Tabladesimbolos.add(new Simbolo("Motociclismo","Escuderia","column","varchar","Manager","","",15,0));
        Tabladesimbolos.add(new Simbolo("Motociclismo","Escuderia","column","varchar","FabricanteMotor","","",15,0));
        Tabladesimbolos.add(new Simbolo("Motociclismo","Escuderia","column","varchar","Sede","","",15,0));
        //Tabla Piloto
        Tabladesimbolos.add(new Simbolo("Motociclismo","NASCAR","table","","Piloto","","",0,0));
        Tabladesimbolos.add(new Simbolo("Motociclismo","Piloto","column","int","Codigo","","",0,0));
        Tabladesimbolos.add(new Simbolo("Motociclismo","Piloto","column","varchar","Nombre","","",50,0));
        Tabladesimbolos.add(new Simbolo("Motociclismo","Piloto","column","varchar","Nacionalidad","","",15,0));
        Tabladesimbolos.add(new Simbolo("Motociclismo","Piloto","column","varchar","FechaNacimiento","","",25,0));
        Tabladesimbolos.add(new Simbolo("Motociclismo","Piloto","column","varchar","CarreraDebut","","",20,0));
        Tabladesimbolos.add(new Simbolo("Motociclismo","Piloto","column","varchar","NombreEscuderia","","",20,0));
        //Tabla Resultado
        Tabladesimbolos.add(new Simbolo("Motociclismo","NASCAR","table","","Resultado","","",0,0));
        Tabladesimbolos.add(new Simbolo("Motociclismo","Resultado","column","varchar","NombreGP","","",15,0));
        Tabladesimbolos.add(new Simbolo("Motociclismo","Resultado","column","varchar","Año","","",4,0));
        Tabladesimbolos.add(new Simbolo("Motociclismo","Resultado","column","int","CodPiloto","","",0,0));
        Tabladesimbolos.add(new Simbolo("Motociclismo","Resultado","column","int","Puesto","","",0,0));
        Tabladesimbolos.add(new Simbolo("Motociclismo","Resultado","column","varchar","DistanciaGanador","","",25,0));
        //
        //DB Veterinaria
        Tabladesimbolos.add(new Simbolo("","","database","","Veterinaria","","",0,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","","schema","","dbo","","",0,0));
        //Tabla CalendarioVacunacion
        Tabladesimbolos.add(new Simbolo("Veterinaria","dbo","table","","CalendarioVacunacion","","",0,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","CalendarioVacunacion","column","varchar","Fecha","","",8,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","CalendarioVacunacion","column","varchar","Enfermedad","","",50,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","CalendarioVacunacion","column","varchar","CodigoPaciente","","",8,0));
        //Tabla Cliente
        Tabladesimbolos.add(new Simbolo("Veterinaria","dbo","table","","Cliente","","",0,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Cliente","column","varchar","DPI","","",13,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Cliente","column","varchar","NIT","","",12,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Cliente","column","varchar","Nombre","","",50,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Cliente","column","varchar","Numero","","",8,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Cliente","column","varchar","Direccion","","",800,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Cliente","column","varchar","Correo","","",800,0));
        //Table Clinica
        Tabladesimbolos.add(new Simbolo("Veterinaria","dbo","table","","Clinica","","",0,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Clinica","column","int","Codigo","","",0,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Clinica","column","varchar","Nombre","","",50,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Clinica","column","varchar","Direccion","","",800,0));
        //Tabla Consulta
        Tabladesimbolos.add(new Simbolo("Veterinaria","dbo","table","","Consulta","","",0,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Consulta","column","varchar","Sala","","",20,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Consulta","column","float","PrecioFijo","","",4,2));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Consulta","column","int","NumeroOperaciones","","",0,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Consulta","column","int","NumeroVacunas","","",0,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Consulta","column","int","NumeroPruebasEspecificas","","",0,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Consulta","column","float","PrecioOperaciones","","",4,2));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Consulta","column","float","PrecioVacunas","","",4,2));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Consulta","column","float","PrecioPruebasEspecificas","","",4,2));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Consulta","column","varchar","CodigoPaciente","","",8,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Consulta","column","varchar","NombreVeterinario","","",50,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Consulta","column","varchar","FECHA","","",8,0));
        //Tabla Diagnostico
        Tabladesimbolos.add(new Simbolo("Veterinaria","dbo","table","","Diagnostico","","",0,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Diagnostico","column","varchar","Resultado","","",20,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Diagnostico","column","varchar","PruebaEspecifica","","",20,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Diagnostico","column","varchar","Lugar","","",15,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Diagnostico","column","varchar","FechaPrueba","","",800,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Diagnostico","column","varchar","CodigoPaciente","","",8,0));
        //Tabla Factura
        Tabladesimbolos.add(new Simbolo("Veterinaria","dbo","table","","Factura","","",0,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Factura","column","varchar","Numero","","",10,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Factura","column","varchar","Detalle","","",50,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Factura","column","float","Importe","","",4,2));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Factura","column","float","TOTAL","","",4,2));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Factura","column","int","CodigoClinica","","",0,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Factura","column","varchar","NITCliente","","",12,0));
        //Tabla HistorialMedico
        Tabladesimbolos.add(new Simbolo("Veterinaria","dbo","table","","HistorialMedico","","",0,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","HistorialMedico","column","varchar","MotivoVisita","","",20,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","HistorialMedico","column","varchar","FechaVisita","","",800,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","HistorialMedico","column","varchar","CodigoPaciente","","",8,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","HistorialMedico","column","varchar","ResultadoDiagnostico","","",20,0));
        //Tabla Laboratorio
        Tabladesimbolos.add(new Simbolo("Veterinaria","dbo","table","","Laboratorio","","",0,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Laboratorio","column","varchar","NIT","","",12,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Laboratorio","column","varchar","Nombre","","",50,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Laboratorio","column","varchar","Direccion","","",800,0));
        //Tabla Medicina
        Tabladesimbolos.add(new Simbolo("Veterinaria","dbo","table","","Medicina","","",0,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Medicina","column","int","Codigo","","",0,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Medicina","column","varchar","Nombre","","",50,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Medicina","column","numeric","Codigo","","",10,2));
        //Tabla OperacionQuirurgica
        Tabladesimbolos.add(new Simbolo("Veterinaria","dbo","table","","OperacionQuirurgica","","",0,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","OperacionQuirurgica","column","int","CodigoClinica","","",0,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","OperacionQuirurgica","column","varchar","Quirofano","","",15,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","OperacionQuirurgica","column","varchar","NombreVeterinario","","",50,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","OperacionQuirurgica","column","varchar","Fecha","","",800,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","OperacionQuirurgica","column","varchar","Duracion","","",20,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","OperacionQuirurgica","column","varchar","Observaciones","","",800,0));
        //Tabla Paciente
        Tabladesimbolos.add(new Simbolo("Veterinaria","dbo","table","","Paciente","","",0,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Paciente","column","varchar","Codigo","","",8,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Paciente","column","varchar","Nombre","","",800,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Paciente","column","varchar","Especie","","",800,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Paciente","column","varchar","Raza","","",800,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Paciente","column","varchar","ColorPelo","","",800,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Paciente","column","varchar","FechaNacimiento","","",800,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Paciente","column","varchar","PesoMedio","","",800,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Paciente","column","int","CodigoClinica","","",0,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Paciente","column","varchar","NITCliente","","",12,0));
        //Tabla Producto
        Tabladesimbolos.add(new Simbolo("Veterinaria","dbo","table","","Producto","","",0,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Producto","column","int","Codigo","","",0,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Producto","column","varchar","Nombre","","",50,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Producto","column","numeric","PrecioUnitario","","",10,2));
        //Tabla Proveedor
        Tabladesimbolos.add(new Simbolo("Veterinaria","dbo","table","","Proveedor","","",0,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Proveedor","column","varchar","NIT","","",12,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Proveedor","column","varchar","Nombre","","",50,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Proveedor","column","varchar","Direccion","","",800,0));
        //Tabla SuministraFarmacia
        Tabladesimbolos.add(new Simbolo("Veterinaria","dbo","table","","SuministraFarmacia","","",0,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","SuministraFarmacia","column","varchar","NITLaboratorio","","",12,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","SuministraFarmacia","column","int","CodigoMedicina","","",0,0));
        //Tabla SuministraTienda
        Tabladesimbolos.add(new Simbolo("Veterinaria","dbo","table","","SuministraTienda","","",0,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","SuministraTienda","column","varchar","NITProveedor","","",12,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","SuministraTienda","column","int","CodigoProducto","","",0,0));
        //Tabla Tratamiento
        Tabladesimbolos.add(new Simbolo("Veterinaria","dbo","table","","Tratamiento","","",0,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Tratamiento","column","varchar","Nombre","","",20,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Tratamiento","column","varchar","Dosificacion","","",800,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Tratamiento","column","varchar","Duracion","","",20,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Tratamiento","column","varchar","Resultado","","",20,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Tratamiento","column","varchar","CodigoPaciente","","",8,0));
        //Tabla VentaFarmacia
        Tabladesimbolos.add(new Simbolo("Veterinaria","dbo","table","","VentaFarmacia","","",0,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","VentaFarmacia","column","varchar","NITCliente","","",12,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","VentaFarmacia","column","int","CodigoMedicina","","",0,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","VentaFarmacia","column","varchar","Fecha","","",800,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","VentaFarmacia","column","int","CodigoClinica","","",0,0));
        //Tabla VentaTienda
        Tabladesimbolos.add(new Simbolo("Veterinaria","dbo","table","","VentaTienda","","",0,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","VentaTienda","column","varchar","NITCliente","","",12,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","VentaTienda","column","int","CodigoMedicina","","",0,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","VentaTienda","column","varchar","Fecha","","",800,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","VentaTienda","column","int","CodigoClinica","","",0,0));
        //Tabla Veterinario
        Tabladesimbolos.add(new Simbolo("Veterinaria","dbo","table","","Veterinario","","",0,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Veterinario","column","varchar","Nombre","","",50,0));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Veterinario","column","float","SalarioBase","","",4,2));
        Tabladesimbolos.add(new Simbolo("Veterinaria","Veterinario","column","float","Salario","","",4,2));
    }

    public boolean Exists(String Ambito, String tipo, String ide){
        int k = 0;
        for(Simbolo temp : Tabladesimbolos){
            if(k == 142){
            String h = "";
            }
            if(temp.getAmbito().equals(Ambito) && temp.getTipo().equals(tipo) && temp.getID().equals(ide)){
                return true;
            }
            k++;
        }
        return false;
    }
    
    
:};
parser code
{: 

    public LinkedList<String> SyntacticErrors = new LinkedList<String>();
    private Symbol s;
    
    public final Class getSymbolContainer() {
        return sym.class;
    }

    protected void ImprimirTabla(String Ruta) throws IOException
    {
      action_obj.EscribirTS(Ruta);
    }

    public void syntax_error(Symbol cur_token){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        String Auxiliar = "";
        List<Integer> ids = expected_token_ids();
        LinkedList<String> list = new LinkedList<String>(); 
        for (Integer expected : ids) {
                  Auxiliar = symbl_name_from_id(expected);
                  Auxiliar = " " + Auxiliar + " ";
                  list.add(Auxiliar);
        }
        SyntacticErrors.add("* Error Sintactico. Linea: " + (s.right+1) + " Columna: " + (s.left+1) + ". Simbolo:  \'" + s.value + "\'  * Se esperaba: " + list);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
      java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        String Auxiliar = "";
        List<Integer> ids = expected_token_ids();
        LinkedList<String> list = new LinkedList<String>(); 
        for (Integer expected : ids) {
                  Auxiliar = symbl_name_from_id(expected);
                  Auxiliar = " " + Auxiliar + " ";
                  list.add(Auxiliar);
        }
        SyntacticErrors.add("* Error Sintactico. Linea: " + (s.right+1) + " Columna: " + (s.left+1) + ". Simbolo:  \'" + s.value + "\'  * Se esperaba: " + list);
    }


    public String symbl_name_from_id(int id) {
	  Field[] fields = getSymbolContainer().getFields();
	  for(Field f : fields){
		  try {
			if (f.getInt(null)==id)
			  return f.getName();
		} catch (IllegalArgumentException e) {
			//e.printStackTrace();
		} catch (IllegalAccessException e) {
			//e.printStackTrace();
		}
	  }
	  return "Simbolo Invalido id";
    }
   

     public List<Integer> expected_token_ids() {
        List<Integer> ret = new LinkedList<Integer>();
	  int parse_state = ((Symbol)stack.peek()).parse_state ;
	  short[] row = action_tab[parse_state];
	  for (int i = 0; i<row.length; i+=2){
		  if (row[i]==-1) continue;
		  if (!validate_expected_symbol(row[i])) continue;
		  ret.add(new Integer(row[i]));
	  }
	  return ret;

    }

    /*protected static final int _error_sync_size(){
        return 1;
    }*/

    protected int error_sync_size() {
            return 1;
    }

    private boolean validate_expected_symbol(int id){
	  short lhs,rhs_size;
	  int act;
	  try {
		  virtual_parse_stack vstack = new virtual_parse_stack(stack);
		  for (;;)
		  {
			  act = get_action(vstack.top(), id);

			  if (act == 0) return false;

			  if (act > 0)
			  {
				  vstack.push(act-1);

				  if (!advance_lookahead()) return true;
			  }
			  else
			  {
				  if ((-act)-1 == start_production())  return true;

				  lhs = production_tab[(-act)-1][0];
				  rhs_size = production_tab[(-act)-1][1];
				  for (int i = 0; i < rhs_size; i++) vstack.pop();

				  vstack.push(get_reduce(vstack.top(), lhs));
			  }
		  }

	  } catch (Exception e) {
		  e.printStackTrace();
	  }
	  return true;
  }



:};

terminal Reservadas,Igual,Suma,Resta,Multiplicacion,Division,Identificador,Numero,Comentario,ComentarioE,Int,Bit,String,StringE,
         Float,Porcentaje,Menor_que,Menor_o_igual_que,Mayor_que,Mayor_o_igual_que,Operador_de_Igualdad,Operador_no_igual,Operador_AND,
         Operador_OR,Signo_de_Exclamación,Cierre_signo_de_Interrogacion,Apertura_signo_de_Interrogacion,Punto_y_coma,Coma,Punto,Arroba,
         Numeral,Doble_Numeral,Corchetes,Llaves,Paréntesis,Apertura_de_corchetes,Apertura_de_llaves,Apertura_de_paréntesis,
         Cierre_de_corchetes,Cierre_de_llaves,Cierre_de_paréntesis,Guión_bajo,ERROR,ADD,AND,OR,EXTERNAL,FETCH,PUBLIC,ALTER,FILE,RAISERROR,
         FILLFACTOR,READ,ANY,FOR,READTEXT,AS,FOREIGN,RECONFIGURE,FREETEXT,REFERENCES,AUTHORIZATION,FREETEXTTABLE,REPLICATION,BACKUP,FROM,
         RESTORE,BEGIN,FULL,RESTRICT,BETWEEN,FUNCTION,RETURN,BREAK,GOTO,REVERT,BROWSE,GRANT,REVOKE,BULK,GROUP,RIGHT,BY,HAVING,ROLLBACK,
         CASCADE,HOLDLOCK,ROWCOUNT,CASE,IDENTITY,ROWGUIDCOL,CHECK,IDENTITY_INSERT,RULE,CHECKPOINT,IDENTITYCOL,SAVE,CLOSE,IF,SCHEMA,CLUSTERED,
         IN,SECURITYAUDIT,COALESCE,INDEX,SELECT,COLLATE,INNER,SEMANTICKEYPHRASETABLE,COLUMN,INSERT,SEMANTICSIMILARITYDETAILSTABLE,COMMIT,
         INTERSECT,SEMANTICSIMILARITYTABLE,COMPUTE,INTO,SESSION_USER,CONSTRAINT,IS,SET,CONTAINS,JOIN,SETUSER,CONTAINSTABLE,KEY,SHUTDOWN,
         CONTINUE,KILL,SOME,CONVERT,LEFT,STATISTICS,CREATE,LIKE,SYSTEM_USER,CROSS,LINENO,TABLE,CURRENT,LOAD,TABLESAMPLE,CURRENT_DATE,MERGE,
         TEXTSIZE,CURRENT_TIME,NATIONAL,THEN,CURRENT_TIMESTAMP,NOCHECK,TO,CURRENT_USER,NONCLUSTERED,TOP,CURSOR,NOT,TRAN,DATABASE,NULL,
         TRANSACTION,DBCC,NULLIF,TRIGGER,DEALLOCATE,OF,TRUNCATE,DECLARE,OFF,TRY_CONVERT,DEFAULT,OFFSETS,TSEQUAL,DELETE,UNION,DENY,OPEN,
         UNIQUE,DESC,OPENDATASOURCE,UNPIVOT,DISK,OPENQUERY,UPDATE,DISTINCT,OPENROWSET,UPDATETEXT,DISTRIBUTED,OPENXML,USE,DOUBLE,OPTION,
         USER,DROP,VALUES,DUMP,ORDER,ARYING,ELSE,OUTER,VIEW,END,OVER,WAITFOR,ERRLVL,PERCENT,WHEN,ESCAPE,PIVOT,WHERE,EXCEPT,PLAN,WHILE,
         EXEC,PRECISION,WITH,EXECUTE,PRIMARY,WITHIN_GROUP,EXISTS,PRINT,WRITETEXT,EXIT,PROC,ABSOLUTE,OVERLAPS,ACTION,PAD,ADA,PARTIAL,PASCAL,
         ALL,EXTRACT,POSITION,ALLOCATE,FALSE,PREPARE,FIRST,PRESERVE,FLOAT,ARE,PRIOR,PRIVILEGES,ASC,FORTRAN,PROCEDURE,ASSERTION,FOUND,AT,REAL,
         AVG,GET,GLOBAL,RELATIVE,GO,BIT,BIT_LENGTH,BOTH,ROWS,HOUR,CASCADED,SCROLL,IMMEDIATE,SECOND,CAST,SECTION,CATALOG,INCLUDE,CHAR,SESSION,
         CHAR_LENGTH,INDICATOR,CHARACTER,INITIALLY,CHARACTER_LENGTH,SIZE,INPUT,SMALLINT,INSENSITIVE,SPACE,INT,SQL,COLLATION,INTEGER,SQLCA,SQLCODE,
         INTERVAL,SQLERROR,CONNECT,SQLSTATE,CONNECTION,SQLWARNING,ISOLATION,SUBSTRING,CONSTRAINTS,SUM,LANGUAGE,CORRESPONDING,LAST,TEMPORARY,COUNT,
         LEADING,TIME,LEVEL,TIMESTAMP,TIMEZONE_HOUR,LOCAL,TIMEZONE_MINUTE,LOWER,MATCH,TRAILING,MAX,MIN,TRANSLATE,DATE,MINUTE,TRANSLATION,DAY,MODULE,
         TRIM,MONTH,TRUE,DEC,NAMES,DECIMAL,NATURAL,UNKNOWN,NCHAR,DEFERRABLE,NEXT,UPPER,DEFERRED,NO,USAGE,NONE,USING,DESCRIBE,VALUE,DESCRIPTOR,DIAGNOSTICS,
         NUMERIC,VARCHAR,DISCONNECT,OCTET_LENGTH,VARYING,DOMAIN,ON,ONLY,WHENEVER,WORK,END_EXEC,WRITE,YEAR,OUTPUT,ZONE,EXCEPTION,OUT,READONLY,ENCRYPTION,
         RETURNS,SCHEMABINDING,CALLED,INLINE,CALLER,SELF,OWNER,RECOMPILE,MARK,FORWARD_ONLY,STATIC,KEYSET,DYNAMIC,FAST_FORWARD,READ_ONLY,SCROLL_LOCKS,OPTIMISTIC,
         TYPE_WARNING,NAME,FILENAME,KB,GB,TB,MB,MAXSIZE,UNLIMITED,FILEGROWTH,MODULAR, PYCGO, NVARCHAR, MONEY, DATETIME, DELAYED_DURABILITY;

non terminal OperadoresBooleanos, DML, DDL, TCL, TSQL, Final,Object2, Object2A, Object3, Object3A, Object4, Object4A, IFE, Drop, 
    DropA, DropTable, DropTableA, DropUser, DropDatabase, DropDatabaseA, DropView, DropViewA,
    DropIndex, DropIndexA, DropIndexB, Truncate, Alias, AliasA, Expresion, ExpresionA, ExpresionB, ExpresionC, ExpresionD, ExpresionE, ExpresionF,
    Not, Top, TopA, Expresiones, SearchCondition, SearchConditionA, Predicado, PredicadoA, PredicadoC, Where, SelectColumns, SelectColumnsA, ColumnList,
    ColumnListA, ColumnListB, Select, SelectA, Having, Order, OrderA, OrderB, OrderC, Group, GroupA, Insert, InsertInto , InsertColumnList , InsertExpresion,
    InsertExpresionA, InsertExpresionB , InsertValores , InsertValoresA , Delete, FromDelete, DeleteA, DeleteB, DeleteC, Server, Update, UpdateA, UpdateB,
    UpdateC, FromUpdate, FromSelect, FromSelectA, Join, Type, Outer, Create, CreateA,CreateUser, CreateDB, CreateDBA, CreateDBB, Primary, FileSpecs,
    FileSpec, COLLATEDB, Filename, Optionals, Optionals_A, Optional, Size, Size_A, Maxsize, Maxsize_A, Filegrowth, Filegrowth_A, CreateView, CreateIndex,
    CreateIndexA, ColumnIndex, ColumnIndexA, ColumnIndexB, IncludeIndex, OptionalOn, CreateTable, FileGroup, NFR, CNC, CNCA, ColumnDef, ColumnDefA, 
    ColumnDefD, ColumnDefE, ColumnDefF, ColumnDefG, ColumnDefH, ColumnConstr, ColumnConstrA, ColumnConstrB, ColumnConstrC, 
    ColumnConstrD, ColumnConstrE, ColumnConstrF, ColumnConstrG, ColumnConstrH, ColumnConstrI, TableConstr, TableConstrA, TableConstrB, TableConstrC, 
    TableConstrD, TableConstrE, TableIndex, Alter, AlterA, AlterDatabase, AlterDBA, AlterDBB, AlterUser, AlterView, AlterViewA, AlterTable, 
    AlterTableA, AlterColumn, AlterColumnC, AlterColumnA, AlterColumnD, AlterColumnE, AlterTableDrop , AlterTableDropA , AlterTableDropB, AlterTableDropC,
    AlterTableDropD, BeginTran, BeginTranA, BeginTranB, BeginTranC, SavePoint, NameA, TranName, Commit, CommitA, Rollback, RollbackA, Procedure, 
    SP_Reservada, NumSP, ParamsSP, ParamsA_SP, ParamsB_SP, TipoD_SP, TipoD_SP1, TipoD_SP2, TipoD_SP3, ProcOption, ProcOption1, ProcOption2, ClauseExec, 
    ProcOptionRec, Clause, ReplicationSP, StartSP, StmtSP, StmtSP1, StmtSP2, Function, Params, OrAlter, Param, Param_A, Param_B, As, ReadOnly, Type_Return, 
    Data, Table, SCT, DType, With, FuncOpc, FuncOpcA, FuncOpcB, FuncOpcC, VariableList, VariableLista, CursorDeclare, CursorDeclarea, 
    CursorDeclareb, CursorDeclarec, CursorDeclared, CursorDeclaree, CursorDeclaref, CursorDeclareg, InicialB, NFR1, NFR2,ColumnDefV,ColumnDefX,ColumnDefW,ColumnDefZ,
    ColumnDefY, Sizew, Sizenw, ExecProcedure, RepeatProcedure, RepeatProcedureA, EXECUTE_AS_CLAUSE, CallFunction, FunctionContent, FunctionContentA, DTypes,
    NameDB, FileDB, FinalTran, OnOff, CommitB, DropProcedure, DropProcedureA, DropFunction, DataOptional, Set_variable, Simbolo;
 
    non terminal Simbolo ID, Inicial, InicialA;
    non terminal Simbolo Variable;
    non terminal Simbolo Name;
    non terminal Simbolo Tipo_dato;
    non terminal Simbolo Tipo_datoA;
    non terminal Simbolo Tipo_datoB;
    non terminal Simbolo Tipo_datoC;
    non terminal Simbolo Tipo_datoD;
    non terminal Simbolo Declare_variable, Tipo_variable, valor, Variable_list;
    non terminal Simbolo Data_Type;

    precedence right Not;
    precedence left Apertura_de_paréntesis;
    precedence right Object3;
    precedence left Object2;

    start with Inicial;
     

    Inicial ::= InicialA|;

    InicialA ::= DML Inicial 
        | DDL Inicial 
        | TCL Inicial
        | USE Object3 Final Inicial //{::}
        | Declare_variable:dv Final Inicial {:
                                    
                                    RESULT = dv;
                                    if(Exists(ambitoActual, RESULT.getTipo(), RESULT.getID())){
                                    System.out.println("La variable " + RESULT.getID() + " ya existe en el ambito actual");
                                    }else{
                                    Tabladesimbolos.add(RESULT);
                                       
                                    }
                                        :}
        | Set_variable Final Inicial;

    InicialB ::= DML Inicial | DDL Inicial | TCL Inicial | USE Object3 Final Inicial| SavePoint Final InicialB | Declare_variable Final Inicial | Set_variable Final Inicial;

    DML ::= Delete Final | error Final;

    DDL ::= Alter Final | error;

    TCL ::= BeginTran Final InicialB FinalTran;

    Final ::= Punto_y_coma {:if(Tabladesimbolos.isEmpty()){
                                llenarTabla();
                           }:} | GO {:if(Tabladesimbolos.isEmpty()){
                                llenarTabla();
                           }:} | PYCGO {:if(Tabladesimbolos.isEmpty()){
                                llenarTabla();
                           }:} ;

    ID ::= Identificador:i {: RESULT = new Simbolo(); RESULT.setID(i.toString());:}
    | Apertura_de_corchetes Identificador:i Cierre_de_corchetes {: RESULT = new Simbolo(); RESULT.setID(i.toString());:};

    Object2 ::= ID Object2A;

    Object2A ::= Punto ID |;

    Object3 ::= ID Object3A;

    Object3A ::= Punto Object2 |;

    IFE ::= IF EXISTS |;

    Variable ::= Arroba Identificador:i {:RESULT = new Simbolo();
                                    RESULT.setID(i.toString());:};

    Tipo_dato ::= Tipo_datoD:d Tipo_datoB:b {:RESULT = d; RESULT.setDimension1(b.getDimension1()); RESULT.setDimension2(b.getDimension2());:};

    Tipo_datoD ::= Tipo_datoA:a {:RESULT = a;:} 
        | Apertura_de_corchetes Tipo_datoA:a Cierre_de_corchetes {:RESULT = a;:};

    Tipo_datoA ::= VARCHAR {:RESULT = new Simbolo(); RESULT.setTipo_Dato("varchar");:}
        | INTEGER {:RESULT = new Simbolo(); RESULT.setTipo_Dato("integer");:}
        | FLOAT {:RESULT = new Simbolo(); RESULT.setTipo_Dato("float");:}
        | DATE {:RESULT = new Simbolo(); RESULT.setTipo_Dato("date");:}
        | BIT {:RESULT = new Simbolo(); RESULT.setTipo_Dato("bit");:}
        | DOUBLE {:RESULT = new Simbolo(); RESULT.setTipo_Dato("double");:}
        | CHAR {:RESULT = new Simbolo(); RESULT.setTipo_Dato("char");:}
        | CURSOR {:RESULT = new Simbolo(); RESULT.setTipo_Dato("cursor");:}
        | NCHAR {:RESULT = new Simbolo(); RESULT.setTipo_Dato("nchar");:} 
        | REAL {:RESULT = new Simbolo(); RESULT.setTipo_Dato("real");:}
        | TIME {:RESULT = new Simbolo(); RESULT.setTipo_Dato("time");:}
        | INT {:RESULT = new Simbolo(); RESULT.setTipo_Dato("int");:}
        | DECIMAL {:RESULT = new Simbolo(); RESULT.setTipo_Dato("decimal");:}
        | SMALLINT {:RESULT = new Simbolo(); RESULT.setTipo_Dato("smallint");:}
        | NUMERIC {:RESULT = new Simbolo(); RESULT.setTipo_Dato("numeric");:}
        | NVARCHAR  {:RESULT = new Simbolo(); RESULT.setTipo_Dato("nvarchar");:}
        | MONEY {:RESULT = new Simbolo(); RESULT.setTipo_Dato("money");:}
        | DATETIME {:RESULT = new Simbolo(); RESULT.setTipo_Dato("datetime");:};

    Tipo_datoB ::= Apertura_de_paréntesis Int:i Tipo_datoC:c Cierre_de_paréntesis {:RESULT = new Simbolo();
                                            RESULT.setDimension1(Integer.valueOf(i.toString()));
                                            RESULT.setDimension2(c.getDimension2());:}
        |{:RESULT = new Simbolo(); RESULT.setDimension1(0);
            RESULT = new Simbolo(); RESULT.setDimension2(0);:};

    Tipo_datoC ::= Coma Int:i {:RESULT = new Simbolo();
              RESULT.setDimension2(Integer.valueOf(i.toString()));:} |
               {:RESULT = new Simbolo(); RESULT.setDimension2(0);:};

    DataOptional ::= Apertura_de_paréntesis Int:i Cierre_de_paréntesis|;

    Drop ::= DROP DropA;
    
    DropA ::= DropTable | DropUser | DropDatabase | DropView | DropIndex | DropProcedure| DropFunction;

    DropFunction ::= FUNCTION IFE Object2 DropProcedureA;

    DropProcedure ::= SP_Reservada IFE Object2 DropProcedureA;

    DropProcedureA ::= Coma Object2 DropProcedureA |;

    DropTable ::= TABLE IFE Object3 DropTableA;

    DropTableA ::= Coma Object3 DropTableA |;

    DropUser ::= USER IFE ID;

    DropDatabase ::= DATABASE IFE ID DropDatabaseA;

    DropDatabaseA ::= Coma ID DropDatabaseA |;

    DropView ::= VIEW IFE Object2 DropViewA;

    DropViewA ::= Coma Object2 DropViewA |;

    DropIndex ::= INDEX IFE DropIndexA DropIndexB;

    DropIndexA ::= ID ON Object3;

    DropIndexB ::= Coma DropIndexA DropIndexB |;

    Truncate ::= TRUNCATE TABLE Object3;

    Alias ::= AS AliasA | AliasA |;

    AliasA ::= ID | String;

    Expresion ::= ExpresionB ExpresionA;

    ExpresionA ::= Suma ExpresionB ExpresionA | Resta ExpresionB ExpresionA |;

    ExpresionB ::= ExpresionD ExpresionC;

    ExpresionC ::= Multiplicacion ExpresionD ExpresionC | Division ExpresionD ExpresionC |;

    ExpresionD ::= Apertura_de_paréntesis Expresion PredicadoC Cierre_de_paréntesis | ExpresionE;

    ExpresionE ::= Object3 CallFunction| Int | Float | String | Bit | NULL | Variable 
        | SUM Apertura_de_paréntesis ExpresionF
	| AVG Apertura_de_paréntesis ExpresionF
	| MIN Apertura_de_paréntesis ExpresionF
	| MAX Apertura_de_paréntesis ExpresionF
	| COUNT Apertura_de_paréntesis ExpresionF;

    CallFunction ::= Apertura_de_paréntesis FunctionContent Cierre_de_paréntesis|;

    FunctionContent ::= Tipo_dato FunctionContentA;

    FunctionContentA ::= Coma FunctionContent|;

    ExpresionF ::= Object3 Cierre_de_paréntesis
	| Int Cierre_de_paréntesis
	| Multiplicacion Cierre_de_paréntesis;

    Not ::= NOT |;

    Top ::= TOP Apertura_de_paréntesis Int Cierre_de_paréntesis TopA |;

    TopA ::= PERCENT |;

    Expresiones ::= Coma Expresion Expresiones |;

    SearchCondition ::= Not Predicado SearchConditionA | Apertura_de_paréntesis SearchCondition Cierre_de_paréntesis SearchConditionA;

    SearchConditionA ::= AND SearchCondition|OR SearchCondition|;

    Predicado ::= Expresion PredicadoA;

    OperadoresBooleanos ::= Igual | Operador_no_igual | Mayor_que | Mayor_o_igual_que | Menor_que | Menor_o_igual_que;

    PredicadoA ::= OperadoresBooleanos Expresion| IS Not NULL | Not PredicadoC;

    PredicadoC ::= IN Apertura_de_paréntesis Expresion Expresiones Cierre_de_paréntesis
	| BETWEEN Expresion AND Expresion
	| LIKE Expresion;

    Where ::= WHERE SearchCondition |;

    SelectColumns ::= Expresion Alias SelectColumnsA| Multiplicacion SelectColumnsA;

    SelectColumnsA ::= Coma Expresion Alias SelectColumnsA |;

    ColumnList ::= Apertura_de_paréntesis ColumnListA Cierre_de_paréntesis;

    ColumnListA ::= ID ColumnListB;

    ColumnListB ::= Coma ID ColumnListB |;

    Select ::= SELECT SelectA Top SelectColumns FromSelect Where Group Having Order;

    SelectA ::= ALL | DISTINCT |;

    Having ::= HAVING SearchCondition |;

    Order ::= ORDER BY Expresion OrderA OrderB OrderC |;

    OrderA ::= COLLATE ID |;

    OrderB ::= ASC | DESC |;

    OrderC ::= Coma Expresion OrderA OrderB|;

    Group ::= GROUP BY Expresion GroupA |;

    GroupA ::= Coma Expresion GroupA |;

    Insert ::= INSERT Top InsertInto Object3 InsertColumnList InsertValores;

    InsertInto ::= INTO |;

    InsertColumnList ::= ColumnList |;

    InsertExpresion ::= InsertExpresionA InsertExpresionB;

    InsertExpresionA ::= DEFAULT | Int | Float | String | Bit;

    InsertExpresionB ::= Coma InsertExpresionA InsertExpresionB |;

    InsertValores ::= VALUES Apertura_de_paréntesis InsertExpresion Cierre_de_paréntesis InsertValoresA | DEFAULT VALUES;

    InsertValoresA ::= Coma Apertura_de_paréntesis InsertExpresion Cierre_de_paréntesis InsertValoresA |;

    Delete ::= DELETE Top FromDelete DeleteA;

    FromDelete ::= FROM |;

    DeleteA ::= OPENQUERY Server | Object3 DeleteB Where;

    DeleteB ::= FROM Object3 DeleteC|;

    DeleteC ::= Coma Object3 DeleteC |;

    Server ::= Apertura_de_paréntesis ID Coma Int Cierre_de_paréntesis;

    Update ::= UPDATE Top Object3 SET UpdateA FromUpdate Where;

    UpdateA ::= ID Igual UpdateB UpdateC;

    UpdateB ::= DEFAULT | Expresion;

    UpdateC ::= Coma UpdateA|;

    FromUpdate ::= FROM Object3 DeleteC |;

    FromSelect ::= FROM Object3 Alias Join FromSelectA |;

    FromSelectA ::= Coma Object3 Alias Join |;

    Join ::= Type JOIN Object3 Alias ON SearchCondition Join |;

    Type ::= INNER | RIGHT Outer | LEFT Outer | FULL Outer |;

    Outer ::= OUTER |;

    Create ::= CREATE CreateA;

    CreateA ::= CreateTable | CreateDB | CreateIndex | CreateUser | CreateView | Procedure | Function;

    CreateUser ::= USER ID;

    CreateDB ::= DATABASE ID CreateDBA;

    CreateDBA ::= CreateDBB COLLATEDB;

    CreateDBB ::= ON Primary FileSpecs |;

    Primary ::= PRIMARY |;

    FileSpecs ::= FileSpec Coma FileSpecs | FileSpec;

    FileSpec ::= Apertura_de_paréntesis NameDB Igual String Coma FileDB Igual String Optionals Cierre_de_paréntesis;

    NameDB ::= NAME|NAMES;

    FileDB ::= FILE|FILENAME;

    COLLATEDB ::= COLLATE ID |;

    Optionals ::= Coma Optional Optionals|;

    Optional ::= Size | Maxsize | Filegrowth;

    Size ::= Sizew | Sizenw;

    Sizew ::= SIZE Igual Int Size_A;
    
    Sizenw ::= SIZE Igual Int;

    Size_A ::= KB| MB | GB | TB;

    Maxsize ::= MAXSIZE Igual Maxsize_A;

    Maxsize_A ::= Int Size_A | UNLIMITED;

    Filegrowth ::= FILEGROWTH Igual Int Filegrowth_A;

    Filegrowth_A ::= Size_A | MODULAR |;

    CreateView ::= VIEW Object2 AS Select;

    CreateIndex ::= CreateIndexA ColumnConstrC INDEX ID ON Object3 ColumnIndex IncludeIndex Where OptionalOn;

    CreateIndexA ::= UNIQUE|;

    ColumnIndex ::= Apertura_de_paréntesis ColumnIndexA Cierre_de_paréntesis;

    ColumnIndexA ::= ID OrderB ColumnIndexB;

    ColumnIndexB ::= Coma ID OrderB ColumnIndexB |;

    IncludeIndex ::= INCLUDE ColumnList |;

    OptionalOn ::= ON ID Apertura_de_paréntesis ID Cierre_de_paréntesis |;

    CreateTable ::= TABLE Object3 Apertura_de_paréntesis CNC CNCA Cierre_de_paréntesis FileGroup;

    FileGroup ::= ON PRIMARY|;

    NFR ::= NOT NFR1|;
    
    NFR1 ::= FOR REPLICATION NFR2| NULL;
    
    NFR2 ::= NOT ColumnDefG|;

    CNC ::= ColumnDef | TableConstr | TableIndex;

    CNCA ::= Coma CNC CNCA |;

    ColumnDef ::= ID Tipo_dato ColumnDefA ColumnDefZ;

    ColumnDefZ ::= CONSTRAINT ID ColumnDefY|ColumnDefY|;

    ColumnDefY ::= DEFAULT ColumnDefD ColumnDefE NFR ColumnDefH ColumnConstr|IDENTITY ColumnDefF NFR ColumnDefH ColumnConstr|ColumnDefX ColumnDefW ColumnDefH ColumnConstr|ROWGUIDCOL ColumnConstr|ColumnConstrB ColumnConstr;
    
    ColumnDefX ::= NOT|;

    ColumnDefW ::= NULL|FOR REPLICATION ColumnDefV;

    ColumnDefV ::= NOT NULL| NULL|;

    ColumnDefA ::= COLLATE ID |;

    ColumnDefD ::= Int | Float | String | Bit | NULL;

    ColumnDefE ::= IDENTITY ColumnDefF |;

    ColumnDefF ::= Apertura_de_paréntesis Int Coma Int Cierre_de_paréntesis |;

    ColumnDefG ::= NULL|;

    ColumnDefH ::= ROWGUIDCOL |;

    ColumnConstr ::= ColumnConstrA ColumnConstrB ColumnConstr |;

    ColumnConstrA ::= CONSTRAINT ID |;

    ColumnConstrB ::= PRIMARY KEY ColumnConstrC 
        | UNIQUE ColumnConstrC
	| ColumnConstrD REFERENCES Object2 ColumnConstrE ColumnConstrF NFR
	| CHECK NFR Apertura_de_paréntesis SearchCondition Cierre_de_paréntesis;

    ColumnConstrC ::= CLUSTERED | NONCLUSTERED |;

    ColumnConstrD ::= FOREIGN KEY |;

    ColumnConstrE ::= Apertura_de_paréntesis ID Cierre_de_paréntesis |;

    ColumnConstrF ::= ON ColumnConstrG ColumnConstrF|;

    ColumnConstrG ::= DELETE ColumnConstrI|UPDATE ColumnConstrI;

    ColumnConstrH ::= NULL | DEFAULT;

    ColumnConstrI ::= CASCADE | SET ColumnConstrH;

    TableConstr ::= ColumnConstrA TableConstrA;

    TableConstrA ::= PRIMARY KEY ColumnConstrC TableConstrB
	| UNIQUE ColumnConstrC TableConstrB
	| FOREIGN KEY TableConstrD REFERENCES Object2 ColumnConstrE ColumnConstrF NFR
	| CHECK NFR Apertura_de_paréntesis SearchCondition Cierre_de_paréntesis;

    TableConstrB ::= Apertura_de_paréntesis ID OrderB TableConstrC Cierre_de_paréntesis;

    TableConstrC ::= Coma ID OrderB TableConstrC |;

    TableConstrD ::= Apertura_de_paréntesis ID TableConstrE Cierre_de_paréntesis;

    TableConstrE ::= Coma ID TableConstrE |;

    TableIndex ::= INDEX ID ColumnConstrC TableConstrB;

    Alter ::= ALTER AlterA;

    AlterA ::= AlterTable | AlterUser | AlterDatabase | AlterView | Function;

    AlterDatabase ::= DATABASE AlterDBA AlterDBB;

    AlterDBA ::= ID | CURRENT;

    AlterDBB ::= COLLATE ID | SET ROLLBACK IMMEDIATE;

    AlterUser ::= USER ID;

    AlterView  ::= VIEW Object2 AlterViewA AS Select;

    AlterViewA ::= ColumnList |;

    AlterTable ::= TABLE Object3 AlterTableA;

    AlterTableA ::= AlterColumn| ADD CNC CNCA| AlterTableDrop;

    AlterColumn ::= ALTER COLUMN ID AlterColumnC;

    AlterColumnC ::= AlterColumnA | AlterColumnD AlterColumnE;

    AlterColumnA ::= Tipo_dato ColumnDefA ColumnDefG;

    AlterColumnD ::= ADD | DROP;

    AlterColumnE ::= ROWGUIDCOL | NOT FOR REPLICATION;

    AlterTableDrop ::= DROP AlterTableDropA AlterTableDropC;

    AlterTableDropA ::= AlterTableDropB IFE ID | COLUMN IFE ID;

    AlterTableDropB ::= CONSTRAINT |;

    AlterTableDropC ::= Coma AlterTableDropA AlterTableDropC |;

    BeginTran ::= BEGIN TranName BeginTranA; //FinalTran;

    BeginTranA ::= Name BeginTranB |;

    BeginTranB ::= WITH MARK BeginTranC |;

    BeginTranC ::= String |;

    FinalTran ::= Commit Final|Rollback Final;

    SavePoint ::= SAVE TranName Name;

    Name ::= ID:i {:RESULT = new Simbolo();
                              RESULT.setID(i.toString());
                              RESULT.setTipo("Identificador");:} | Variable:v {:RESULT = new Simbolo();
                              RESULT.setID(v.toString());
                              RESULT.setTipo("Variable");:};

    NameA ::= ID | Variable |;

    TranName ::= TRAN | TRANSACTION;

    Commit ::= COMMIT CommitA CommitB;

    CommitA ::= TranName NameA |;

    CommitB ::= WITH Apertura_de_paréntesis DELAYED_DURABILITY Igual OnOff Cierre_de_paréntesis|;

    OnOff ::= ON| OFF;

    Rollback ::= ROLLBACK RollbackA;

    RollbackA ::= TranName NameA |;
	
    Procedure ::= OrAlter SP_Reservada Object2 NumSP ParamsSP ProcOption ReplicationSP AS StartSP;

    SP_Reservada ::=  PROC | PROCEDURE;

    NumSP ::= Punto_y_coma Int |;

    ParamsSP ::= ParamsA_SP |;

    ParamsA_SP ::= Variable TipoD_SP ParamsB_SP;

    ParamsB_SP ::= Coma ParamsA_SP |;

    TipoD_SP ::= Tipo_dato TipoD_SP1 TipoD_SP2
	| CURSOR VARYING TipoD_SP3
	| ID READONLY;

    TipoD_SP1 ::= Igual DEFAULT |;

    TipoD_SP2 ::= TipoD_SP3 |;

    TipoD_SP3 ::= OUT | OUTPUT;

    ProcOption ::= WITH ProcOption1 |;

    ProcOption1 ::= ProcOption2 ProcOptionRec;

    ProcOption2 ::= ENCRYPTION | RECOMPILE | ClauseExec AS Clause;

    ClauseExec ::= EXECUTE | EXEC;

    ProcOptionRec ::= Coma ProcOption1 |;

    Clause ::= CALLER | SELF | OWNER | ID;

    ReplicationSP ::= FOR REPLICATION |;

    StartSP ::= BEGIN StmtSP END;

    StmtSP ::= DML StmtSP1;

    StmtSP1 ::= DML StmtSP2 |;

    StmtSP2 ::= DML|;

    CursorDeclare ::= DECLARE ID CURSOR CursorDeclarea CursorDeclareb CursorDeclarec CursorDeclared CursorDeclaree FOR Select CursorDeclaref;
    
    CursorDeclarea ::= LOCAL|GLOBAL|;
    
    CursorDeclareb ::= SCROLL|FORWARD_ONLY|;
    
    CursorDeclarec ::= STATIC|KEYSET|DYNAMIC|FAST_FORWARD|;
    
    CursorDeclared ::= READ_ONLY|SCROLL_LOCKS|OPTIMISTIC|;
    
    CursorDeclaree ::= TYPE_WARNING|;
    
    CursorDeclaref ::= FOR UPDATE CursorDeclareg|;
    
    CursorDeclareg ::= OF ColumnListA|;

    Function  ::= OrAlter FUNCTION Object2 Apertura_de_paréntesis Params Cierre_de_paréntesis RETURNS Type_Return;
    
    Params ::= Param_A |;
    
    OrAlter ::= OR ALTER|;
    
    Param ::= Variable As Expresion ReadOnly;

    As ::= AS|;
    
    Param_A ::= Param Param_B;
    
    Param_B ::= Coma Param_A|;
    
    ReadOnly ::= READONLY|;
    
    Type_Return ::= Data | Table;
    
    Data ::= Tipo_datoA With As BEGIN DML RETURN Expresion END;
    
    Table ::= TABLE With As RETURN SCT;
    
    SCT ::= Apertura_de_paréntesis Select Cierre_de_paréntesis | Select;

    DTypes ::= Apertura_de_paréntesis DType Cierre_de_paréntesis | DType;
    
    DType ::= Variable | Int | Float | String | Bit | NULL;
        
    With ::= WITH FuncOpc|;
    
    FuncOpc ::= FuncOpcA FuncOpcB;
    
    FuncOpcA ::= ENCRYPTION  | SCHEMABINDING | RETURNS NULL ON NULL INPUT | CALLED ON NULL INPUT | EXECUTE_AS_CLAUSE | INLINE Igual FuncOpcC;
    
    FuncOpcB ::= Coma FuncOpc |;
    
    FuncOpcC ::= ON | OFF;
 
    EXECUTE_AS_CLAUSE ::= ClauseExec AS Clause;

    ExecProcedure ::= ClauseExec Object3 | ClauseExec Object3 Apertura_de_paréntesis RepeatProcedure Cierre_de_paréntesis | ClauseExec Object3 RepeatProcedure;
    
    RepeatProcedure ::= Variable Igual Data_Type RepeatProcedureA | Data_Type RepeatProcedureA; 

    RepeatProcedureA ::= Coma RepeatProcedure|;

    Data_Type ::=  Int:i {:RESULT = new Simbolo(); RESULT.setValor(i.toString()); RESULT.setTipo_Retorno("int");:}
        | Float:f {:RESULT = new Simbolo(); RESULT.setValor(f.toString()); RESULT.setTipo_Retorno("float");:}
        | String:s {:RESULT = new Simbolo(); RESULT.setValor(s.toString()); RESULT.setTipo_Retorno("string");:}
        | Bit:b {:RESULT = new Simbolo(); RESULT.setValor(b.toString()); RESULT.setTipo_Retorno("bit");:}
        | NULL {:RESULT = new Simbolo(); RESULT.setValor("NULL"); RESULT.setTipo_Retorno("null");:};

    Declare_variable ::= DECLARE Variable:v Tipo_variable:t Variable_list 
        {:RESULT = new Simbolo();
        RESULT.setID(v.getID());
        RESULT.setAmbito(ambitoActual);
        RESULT.setTipo("variable");
        RESULT.setTipo_Dato(t.getTipo_Dato());
        :};

    Tipo_variable ::=  As Tipo_dato:t valor:v {:RESULT = t; 
            if(v.getValor() != ""){
                RESULT.setValor(v.getValor());
            }else{
                RESULT.setValor("");
            }
            RESULT.setTipo_Retorno(v.getTipo_Retorno());
            :};

    valor ::= Igual Data_Type:d {:RESULT = d;:}
        | {:RESULT = new Simbolo();
            RESULT.setValor("");
            RESULT.setTipo_Retorno("");:};
	
    Variable_list ::= Coma Variable Tipo_variable Variable_list |;
    
    Set_variable ::= SET Variable Igual Expresion;