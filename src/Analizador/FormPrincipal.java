/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Analizador;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Reader;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import jdk.nashorn.internal.parser.Token;

/**
 *
 * @author josue
 */
public class FormPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form FormPrincipal
     */
    public FormPrincipal() {
        initComponents();
        this.setLocationRelativeTo(null);
    }
    
    List<String> SintactiList = new ArrayList<String>();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtruta = new javax.swing.JTextField();
        btnAnalizar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtResultado = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 28)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Analizador Léxico - MiniSQL");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 13, 610, 94));

        txtruta.setEnabled(false);
        getContentPane().add(txtruta, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, 410, -1));

        btnAnalizar.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        btnAnalizar.setText("Analizar");
        btnAnalizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizarActionPerformed(evt);
            }
        });
        getContentPane().add(btnAnalizar, new org.netbeans.lib.awtextra.AbsoluteConstraints(437, 110, 150, -1));

        txtResultado.setColumns(20);
        txtResultado.setRows(5);
        jScrollPane1.setViewportView(txtResultado);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 570, 289));

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Josué David Higueros Calderón - 1169317 - Ingeniería Informática y de Sistemas");
        jLabel2.setToolTipText("");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(22, 448, 570, -1));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/tapiz-sql_1280x800_11668.jpg"))); // NOI18N
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 610, 480));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAnalizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizarActionPerformed
       
        //Se crea el cuadro de dialogo donde se obtendra el archivo Mini-SQL
        JFileChooser chooser = new JFileChooser();
        //Se aplica un filtro para que solo se reconozcan los archivos .MiniSQL
        FileNameExtensionFilter MiniSQLFilter = new FileNameExtensionFilter("Archivos con Extensión MiniSQL", "minisql"); 
        chooser.setFileFilter(MiniSQLFilter);
        chooser.showOpenDialog(null);


        try {
            //Se crea un lector con el cual se leéra el archivo seleccionado
            Reader lector = new BufferedReader(new FileReader(chooser.getSelectedFile()));
            //Se fija la ruta en el cuadro de texto destinado
            txtruta.setText(chooser.getSelectedFile().getAbsolutePath());
            //Se crea una instancia de la clase y se le envia la lectura al constructor
            Alexico lexer = new Alexico(lector);
            //se crea una variable para el resultado
            String resultado = "";

            while (true) 
            {
                //se crea una instancia de la clase tokens
                Tokens tokens = lexer.yylex();
                if (tokens == null) 
                {
                    //Se concatena la palabra FIN cuando ya se finalizó el proceso
                    resultado += "FIN";
                    //Se coloca el texto en el JTextPanel
                    txtResultado.setText(resultado);
                    //Se manda a escribir la salida en un archivo de texto
                    EscribirSalida(chooser.getSelectedFile().getName().replace(".minisql"," "), txtruta.getText(), resultado);
                    return;
                }
                switch (tokens) {
                    
                    case ERROR:
                        resultado += "ERROR, Simbolo: "+lexer.lexeme+" no definido en el lenguaje" +"\n" + "Linea: "+lexer.line+"   "+"Posición Inicial: "+lexer.initialcolumn+"  "+"Posición Final: "+lexer.finalcolumn + "\n" + "\n";
                        break;
                        
                    case Identificador: 
                        
                        if(lexer.lexeme.length() > 31)
                        {
                            //Si el identificador es mayor a 31 caracteres
                            resultado += "TOKEN "+ ":"+" El elemento: "+lexer.lexeme.substring(0, 31) + " Es un " + tokens + "\n" + "ERROR, Identificador Truncado, Excedio el límite de caracteres permitidos"+"\n"+ "Linea: "+lexer.line+"   "+"Posición Inicial: "+lexer.initialcolumn+"  "+"Posición Final: "+lexer.finalcolumn + "\n" + "\n";
                             SintactiList.add(lexer.lexeme);
                        }
                        else
                        {
                            //Si el identificador cumple con las reglas
                            resultado += "TOKEN "+ ":"+" El elemento: "+lexer.lexeme+ " Es un " + tokens + "\n" + "Linea: "+lexer.line +"   "+"Posición Inicial: "+lexer.initialcolumn+"  "+"Posición Final: "+lexer.finalcolumn + "\n" + "\n";
                            SintactiList.add(lexer.lexeme);
                        }
                        break;
                        
                    case Reservadas:
                        //Si es una palabra reservada
                        resultado += "TOKEN "+ ":"+" El elemento: "+lexer.lexeme + " pertenece a las palabras " + tokens + "\n" + "Linea: "+lexer.line+"  "+"Posición Inicial: "+lexer.initialcolumn+"  "+"Posición Final: "+lexer.finalcolumn + "\n" + "\n";
                        SintactiList.add(lexer.lexeme);
                        break;
                        
                    case StringE:
                        resultado += "ERROR, el string excede la cantidad de líneas permitidas \n" + "Linea: "+lexer.line+"   "+"Posición Inicial: "+lexer.initialcolumn+"  "+"Posición Final: "+lexer.finalcolumn + "\n" + "\n";
                         SintactiList.add(lexer.lexeme);
                        break;
                 
                    case Int: case String: case Float: case Bit:
                         resultado += "TOKEN "+ ":"+" El elemento: "+lexer.lexeme + " Es un " + tokens + "\n" + "Linea: "+lexer.line+"   "+"Posición Inicial: "+lexer.initialcolumn+"  "+"Posición Final: "+lexer.finalcolumn + "\n" + "\n";
                         SintactiList.add(lexer.lexeme);
                         break;
                        
                    case Comentario: 
                          //quitar comentario
                         // resultado += "Comentario multilinea o simple" + "\n" + "Linea: "+lexer.line+"   "+"Posición Inicial: "+lexer.initialcolumn+"  "+"Posición Final: "+lexer.finalcolumn + "\n" + "\n";
                        break;
                        
                    case ComentarioE:
                        //quitar comentario
                        resultado += "ERROR, el comentario no posee el operador de cierre"+ "\n" + "Linea: "+lexer.line+"   "+"Posición Inicial: "+lexer.initialcolumn+"  "+"Posición Final: "+lexer.finalcolumn + "\n" + "\n"; 
                    break;     
                        
                    default:
                        if(tokens.toString().contains("_"))
                        {
                            String temporal = tokens.toString().replace("_", " ");
                            resultado += "TOKEN " +":"+" El elemento: "+lexer.lexeme + " Es " + temporal + "\n" + "Linea: "+lexer.line+"    "+"Posición Inicial: "+lexer.initialcolumn+"  "+"Posición Final: "+lexer.finalcolumn + "\n" + "\n";
                             SintactiList.add(lexer.lexeme);
                        }
                        else
                        {
                            resultado += "TOKEN " +":"+" El elemento: "+lexer.lexeme + " Es  " + tokens + "\n" + "Linea: "+lexer.line+"    "+"Posición Inicial: "+lexer.initialcolumn+"  "+"Posición Final: "+lexer.finalcolumn + "\n" + "\n";
                            SintactiList.add(lexer.lexeme);
                        }
                        break;
                }
            }
            
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(FormPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FormPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnAnalizarActionPerformed

    
    public final void emparejar(String Tokesperado)
    {
      
    }
    
    //Método que escribe la salida del archivo .out
    public void EscribirSalida(String Nombre, String ruta, String Contenido) throws IOException
    {
        //Se reemplaza el salto de línea por un salto de Línea que reconozca el BufferedWriter
        Contenido = Contenido.replace("\n", "\r\n");
        //Se reemplaza la extension del archivo
        ruta = ruta.replace(".minisql", ".out");
        File archivo = new File(ruta);
        BufferedWriter bw;
        
        if(archivo.exists()) 
        {
            bw = new BufferedWriter(new FileWriter(archivo));
            bw.write(Contenido);
        } else {
            bw = new BufferedWriter(new FileWriter(archivo));
            bw.write(Contenido);
        }
        bw.close();   
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnalizar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtResultado;
    private javax.swing.JTextField txtruta;
    // End of variables declaration//GEN-END:variables
}
