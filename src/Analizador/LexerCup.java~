/* The following code was generated by JFlex 1.4.3 on 14/11/19 06:57 PM */

package Analizador;
import java_cup.runtime.Symbol;

/* Secci√≥n de declaraciones de JFlex */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 14/11/19 06:57 PM from the specification file
 * <tt>C:/Users/josue/Documents/NetBeansProjects/Proyecto_Compiladores/Proyecto_Compiladores/src/Analizador/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  4, 28,  0,  0, 27,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    55, 13,  0, 26,  0,  9, 14, 56, 21, 22,  7,  5, 17,  6, 18,  8, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  0, 16, 10, 11, 12, 58, 
    25, 29, 42, 38, 30, 31, 37, 47, 39, 43, 53, 49, 36, 50, 35, 45, 
    40, 54, 34, 44, 33, 41, 52, 51, 32, 46, 48, 19,  0, 20,  0,  3, 
     0,  1,  1,  1,  1, 57,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 23, 15, 24,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 59, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\2\1"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\30\2\1\1\1\32\1\33\1\34"+
    "\1\3\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\2\0\1\45\1\46\1\47\1\50\1\2\1\51"+
    "\6\2\1\52\22\2\1\53\2\2\1\54\12\2\1\55"+
    "\44\2\1\56\1\2\1\57\1\60\1\61\15\2\1\62"+
    "\1\63\1\64\11\2\1\65\1\66\2\2\1\67\3\2"+
    "\1\70\12\2\1\71\1\72\2\34\1\36\2\0\1\73"+
    "\1\74\1\75\1\76\1\2\1\77\1\100\1\2\1\101"+
    "\3\2\1\102\1\2\1\103\1\2\1\104\4\2\1\105"+
    "\16\2\1\106\15\2\1\107\24\2\1\110\27\2\1\111"+
    "\24\2\1\112\21\2\1\113\7\2\1\114\3\2\1\115"+
    "\11\2\1\116\12\2\1\117\4\2\1\120\2\2\1\121"+
    "\3\2\1\122\3\2\1\123\5\2\1\124\1\2\1\125"+
    "\3\2\1\126\14\2\2\0\10\2\1\127\1\2\1\130"+
    "\6\2\1\131\1\132\1\133\1\134\3\2\1\135\3\2"+
    "\1\136\3\2\1\137\2\2\1\0\1\2\1\140\4\2"+
    "\1\141\1\2\1\142\2\2\1\143\1\2\1\144\1\145"+
    "\3\2\1\146\1\147\10\2\1\150\3\2\1\151\3\2"+
    "\1\152\1\153\1\2\1\154\1\2\1\155\4\2\1\156"+
    "\1\2\1\157\2\2\1\160\1\161\6\2\1\162\2\2"+
    "\1\163\1\2\1\164\7\2\1\165\1\166\5\2\1\167"+
    "\20\2\1\170\12\2\1\171\1\172\13\2\1\173\6\2"+
    "\1\174\1\2\1\175\4\2\1\176\10\2\1\177\2\2"+
    "\1\200\13\2\1\201\1\202\7\2\1\203\2\2\1\204"+
    "\4\2\1\205\1\206\3\2\1\207\1\210\1\2\1\211"+
    "\2\2\1\212\10\2\1\213\1\2\1\214\1\215\3\2"+
    "\1\216\1\217\2\35\1\2\1\220\34\2\1\0\2\2"+
    "\1\221\31\2\1\222\5\2\1\223\1\224\7\2\1\225"+
    "\1\2\1\226\1\227\1\230\1\2\1\231\1\2\1\232"+
    "\1\2\1\233\6\2\1\234\4\2\1\235\1\2\1\236"+
    "\2\2\1\237\13\2\1\240\12\2\1\241\1\242\4\2"+
    "\1\243\3\2\1\244\3\2\1\245\1\246\1\247\2\2"+
    "\1\250\1\251\3\2\1\252\3\2\1\253\2\2\1\254"+
    "\20\2\1\255\4\2\1\256\3\2\1\257\10\2\1\260"+
    "\1\2\1\261\1\2\1\262\1\263\3\2\1\264\1\265"+
    "\2\2\1\266\1\267\1\2\1\270\1\271\1\2\1\272"+
    "\3\2\1\273\1\274\1\2\1\275\7\2\1\276\11\2"+
    "\1\277\1\300\4\2\1\301\1\302\1\303\1\0\1\2"+
    "\1\304\21\2\1\305\7\2\1\306\1\307\5\2\1\310"+
    "\6\2\1\311\12\2\1\312\1\313\1\2\1\314\5\2"+
    "\1\315\10\2\1\316\1\2\1\317\1\320\2\2\1\321"+
    "\7\2\1\322\3\2\1\323\1\2\1\324\1\325\1\2"+
    "\1\326\6\2\1\327\2\2\1\330\4\2\1\331\2\2"+
    "\1\332\2\2\1\333\1\2\1\334\1\335\16\2\1\336"+
    "\1\2\1\337\1\2\1\340\1\341\1\2\1\342\1\2"+
    "\1\343\6\2\1\344\10\2\1\345\2\2\1\346\1\347"+
    "\6\2\1\350\1\351\1\2\1\352\1\2\1\0\10\2"+
    "\1\353\3\2\1\354\5\2\1\355\6\2\1\356\3\2"+
    "\1\357\1\2\1\360\1\2\1\361\2\2\1\362\6\2"+
    "\1\363\1\364\1\2\1\365\1\366\4\2\1\367\4\2"+
    "\1\370\1\2\1\371\1\372\1\2\1\373\1\2\1\374"+
    "\1\375\1\2\1\376\1\2\1\377\4\2\1\u0100\1\u0101"+
    "\1\2\1\u0102\5\2\1\u0103\1\u0104\4\2\1\u0105\1\u0106"+
    "\1\2\1\u0107\11\2\1\u0108\2\2\1\u0109\2\2\1\u010a"+
    "\4\2\1\u010b\1\u010c\1\u010d\2\2\1\0\1\u010e\1\u010f"+
    "\1\u0110\1\2\1\u0111\1\2\1\u0112\1\u0113\3\2\1\u0114"+
    "\1\2\1\u0115\2\2\1\u0116\1\2\1\u0117\1\2\1\u0118"+
    "\2\2\1\u0119\3\2\1\u011a\1\u011b\6\2\1\u011c\1\u011d"+
    "\1\u011e\4\2\1\u011f\1\u0120\1\u0121\1\2\1\u0122\1\2"+
    "\1\u0123\1\u0124\1\2\1\u0125\1\u0126\1\u0127\3\2\1\u0128"+
    "\5\2\1\u0129\1\2\1\u012a\1\u012b\3\2\1\u012c\1\2"+
    "\1\u012d\2\2\1\u012e\3\2\1\u012f\2\2\1\u0130\12\2"+
    "\1\u0131\2\2\1\u0132\1\u0133\1\u0134\6\2\1\u0135\1\2"+
    "\1\u0136\1\0\1\2\1\u0137\7\2\1\u0138\2\2\1\u0139"+
    "\1\2\1\u013a\2\2\1\u013b\2\2\1\u013c\1\u013d\2\2"+
    "\1\u013e\10\2\1\u013f\1\2\1\u0140\10\2\1\u0141\1\u0142"+
    "\1\2\1\u0143\1\u0144\4\2\1\u0145\1\u0146\1\u0147\1\2"+
    "\1\u0148\1\u0149\7\2\1\u014a\5\2\1\u014b\1\2\1\u014c"+
    "\1\0\1\2\1\u014d\1\2\1\u014e\1\u014f\2\2\1\u0150"+
    "\1\u0151\7\2\1\u0152\2\2\1\u0153\3\2\1\u0154\1\u0155"+
    "\3\2\1\u0156\5\2\1\u0157\1\u0158\1\u0159\1\u015a\1\u015b"+
    "\7\2\1\u015c\3\2\1\u015d\2\2\1\u015e\1\u015f\1\0"+
    "\2\2\1\u0160\1\u0161\1\u0162\1\u0163\1\u0164\1\u0165\3\2"+
    "\1\u0166\1\u0167\4\2\1\u0168\6\2\1\u0169\1\2\1\u016a"+
    "\1\u016b\6\2\1\u016c\2\2\1\0\4\2\1\u016d\1\u016e"+
    "\1\u016f\1\2\1\u0170\1\2\1\u0171\1\u0172\1\u0173\4\2"+
    "\1\u0174\2\2\1\u0175\1\2\1\u0176\1\2\1\u0177\1\u0178"+
    "\1\2\1\u0179\1\2\1\u017a\2\2\1\u017b\1\u017c\1\2"+
    "\1\u017d\2\2\1\u017e\10\2\1\u017f\1\2\1\u0180\2\2"+
    "\1\u0181\3\2\1\u0182\4\2\1\u0183\2\2\1\u0184\15\2"+
    "\1\u0185\1\2\1\u0186\6\2\1\u0187";

  private static int [] zzUnpackAction() {
    int [] result = new int[1561];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\74\0\360\0\u012c\0\u0168"+
    "\0\74\0\u01a4\0\74\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0"+
    "\0\u030c\0\u0348\0\74\0\74\0\u0384\0\74\0\u03c0\0\74"+
    "\0\u03fc\0\74\0\74\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528"+
    "\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc\0\u0708"+
    "\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870\0\u08ac\0\u08e8"+
    "\0\u0924\0\u0960\0\u099c\0\u09d8\0\u0a14\0\74\0\74\0\u0a50"+
    "\0\u012c\0\u0a8c\0\u0ac8\0\74\0\74\0\74\0\74\0\74"+
    "\0\74\0\u0348\0\u0b04\0\74\0\74\0\74\0\74\0\u0b40"+
    "\0\170\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4"+
    "\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4"+
    "\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4"+
    "\0\u10e0\0\u111c\0\170\0\u1158\0\u1194\0\u11d0\0\u120c\0\u1248"+
    "\0\u1284\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u13b0\0\u13ec\0\u1428"+
    "\0\u1464\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u1590\0\u15cc\0\u1608"+
    "\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8"+
    "\0\u1824\0\u1860\0\u189c\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8"+
    "\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8"+
    "\0\u1be4\0\u1c20\0\u1c5c\0\u1c98\0\u1cd4\0\170\0\u1d10\0\u1d4c"+
    "\0\170\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0"+
    "\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\u2058\0\u2094\0\u20d0"+
    "\0\u210c\0\u2148\0\u2184\0\u21c0\0\u21fc\0\u2238\0\u2274\0\u22b0"+
    "\0\u22ec\0\u2328\0\u2364\0\170\0\u23a0\0\u23dc\0\u2418\0\170"+
    "\0\u2454\0\u2490\0\u24cc\0\170\0\u2508\0\u2544\0\u2580\0\u25bc"+
    "\0\u25f8\0\u2634\0\u2670\0\u26ac\0\u26e8\0\u2724\0\u0a14\0\74"+
    "\0\u2760\0\u279c\0\u27d8\0\u2814\0\u2850\0\74\0\170\0\170"+
    "\0\170\0\u288c\0\170\0\170\0\u28c8\0\u2904\0\u2940\0\u297c"+
    "\0\u29b8\0\170\0\u29f4\0\170\0\u2a30\0\170\0\u2a6c\0\u2aa8"+
    "\0\u2ae4\0\u2b20\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c\0\u2c88"+
    "\0\u2cc4\0\u2d00\0\u2d3c\0\u2d78\0\u2db4\0\u2df0\0\u2e2c\0\u2e68"+
    "\0\u2ea4\0\u2ee0\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0\0\u300c\0\u3048"+
    "\0\u3084\0\u30c0\0\u30fc\0\u3138\0\u3174\0\u31b0\0\u31ec\0\170"+
    "\0\u3228\0\u3264\0\u32a0\0\u32dc\0\u3318\0\u3354\0\u3390\0\u33cc"+
    "\0\u3408\0\u3444\0\u3480\0\u34bc\0\u34f8\0\u3534\0\u3570\0\u35ac"+
    "\0\u35e8\0\u3624\0\u3660\0\u369c\0\170\0\u36d8\0\u3714\0\u3750"+
    "\0\u378c\0\u37c8\0\u3804\0\u3840\0\u387c\0\u38b8\0\u38f4\0\u3930"+
    "\0\u396c\0\u39a8\0\u39e4\0\u3a20\0\u3a5c\0\u3a98\0\u3ad4\0\u3b10"+
    "\0\u3b4c\0\u3b88\0\u3bc4\0\u3c00\0\u3c3c\0\u3c78\0\u3cb4\0\u3cf0"+
    "\0\u3d2c\0\u3d68\0\u3da4\0\u3de0\0\u3e1c\0\u3e58\0\u3e94\0\u3ed0"+
    "\0\u3f0c\0\u3f48\0\u3f84\0\u3fc0\0\u3ffc\0\u4038\0\u4074\0\u40b0"+
    "\0\u40ec\0\170\0\u4128\0\u4164\0\u41a0\0\u41dc\0\u4218\0\u4254"+
    "\0\u4290\0\u42cc\0\u4308\0\u4344\0\u4380\0\u43bc\0\u43f8\0\u4434"+
    "\0\u4470\0\u44ac\0\u44e8\0\u4524\0\u4560\0\u459c\0\u45d8\0\u4614"+
    "\0\u4650\0\u468c\0\u46c8\0\u4704\0\u4740\0\u477c\0\u47b8\0\u47f4"+
    "\0\u4830\0\u486c\0\u48a8\0\u48e4\0\u4920\0\u495c\0\u4998\0\u49d4"+
    "\0\u4a10\0\u4a4c\0\u4a88\0\u4ac4\0\u4b00\0\u4b3c\0\u4b78\0\u4bb4"+
    "\0\u4bf0\0\u4c2c\0\u4c68\0\u4ca4\0\170\0\u4ce0\0\u4d1c\0\u4d58"+
    "\0\u4d94\0\u4dd0\0\u4e0c\0\u4e48\0\u4e84\0\u4ec0\0\u4efc\0\u4f38"+
    "\0\u4f74\0\u4fb0\0\u4fec\0\u5028\0\170\0\u5064\0\u50a0\0\u50dc"+
    "\0\u5118\0\u5154\0\u5190\0\u51cc\0\u5208\0\u5244\0\u5280\0\u52bc"+
    "\0\u52f8\0\u5334\0\u5370\0\u53ac\0\u53e8\0\u5424\0\u5460\0\u549c"+
    "\0\u54d8\0\u5514\0\u5550\0\u558c\0\u55c8\0\u5604\0\u5640\0\u567c"+
    "\0\u56b8\0\u56f4\0\u5730\0\u576c\0\u57a8\0\u57e4\0\u5820\0\u585c"+
    "\0\u5898\0\170\0\u58d4\0\u5910\0\u594c\0\u5988\0\u59c4\0\u5a00"+
    "\0\u5a3c\0\170\0\170\0\170\0\u5a78\0\u5ab4\0\u5af0\0\170"+
    "\0\u5b2c\0\u5b68\0\u5ba4\0\u5be0\0\u5c1c\0\u5c58\0\u5c94\0\170"+
    "\0\u5cd0\0\u5d0c\0\u5d48\0\u5d84\0\170\0\u5dc0\0\u5dfc\0\u5e38"+
    "\0\u5e74\0\u5eb0\0\u5eec\0\170\0\u5f28\0\u5f64\0\170\0\u5fa0"+
    "\0\170\0\u5fdc\0\u6018\0\u6054\0\u6090\0\u60cc\0\170\0\u6108"+
    "\0\u6144\0\u6180\0\u61bc\0\u61f8\0\u6234\0\u6270\0\u62ac\0\170"+
    "\0\u62e8\0\u6324\0\u6360\0\170\0\u639c\0\u63d8\0\u6414\0\u6450"+
    "\0\170\0\u648c\0\u64c8\0\u6504\0\170\0\u6540\0\u657c\0\u65b8"+
    "\0\u65f4\0\170\0\u6630\0\170\0\u666c\0\u66a8\0\170\0\170"+
    "\0\u66e4\0\u6720\0\u675c\0\u6798\0\u67d4\0\u6810\0\170\0\u684c"+
    "\0\u6888\0\170\0\u68c4\0\u6900\0\u693c\0\u6978\0\u69b4\0\u69f0"+
    "\0\u6a2c\0\u6a68\0\u6aa4\0\170\0\170\0\u6ae0\0\u6b1c\0\u6b58"+
    "\0\u6b94\0\u6bd0\0\u6c0c\0\u6c48\0\u6c84\0\u6cc0\0\u6cfc\0\u6d38"+
    "\0\u6d74\0\u6db0\0\u6dec\0\u6e28\0\u6e64\0\u6ea0\0\u6edc\0\u6f18"+
    "\0\u6f54\0\u6f90\0\u6fcc\0\170\0\u7008\0\u7044\0\u7080\0\u70bc"+
    "\0\u70f8\0\u7134\0\u7170\0\u71ac\0\u71e8\0\u7224\0\u7260\0\170"+
    "\0\u729c\0\u72d8\0\u7314\0\u7350\0\u738c\0\u73c8\0\u7404\0\u7440"+
    "\0\u747c\0\u74b8\0\u74f4\0\170\0\u7530\0\u756c\0\u75a8\0\u75e4"+
    "\0\u7620\0\u765c\0\170\0\u7698\0\170\0\u76d4\0\u7710\0\u774c"+
    "\0\u7788\0\170\0\u77c4\0\u7800\0\u783c\0\u7878\0\u78b4\0\u78f0"+
    "\0\u792c\0\u7968\0\170\0\u79a4\0\u79e0\0\170\0\u7a1c\0\u7a58"+
    "\0\u7a94\0\u7ad0\0\u7b0c\0\u7b48\0\u7b84\0\u7bc0\0\u7bfc\0\u7c38"+
    "\0\u7c74\0\170\0\170\0\u7cb0\0\u7cec\0\u7d28\0\u7d64\0\u7da0"+
    "\0\u7ddc\0\u7e18\0\170\0\u7e54\0\u7e90\0\u7ecc\0\u7f08\0\u7f44"+
    "\0\u7f80\0\u7fbc\0\u7ff8\0\170\0\u8034\0\u8070\0\u80ac\0\170"+
    "\0\170\0\u80e8\0\170\0\u8124\0\u8160\0\170\0\u819c\0\u81d8"+
    "\0\u8214\0\u8250\0\u828c\0\u82c8\0\u8304\0\u8340\0\u837c\0\u83b8"+
    "\0\u83f4\0\170\0\u8430\0\u846c\0\u84a8\0\170\0\170\0\74"+
    "\0\u2850\0\u84e4\0\170\0\u8520\0\u855c\0\u8598\0\u85d4\0\u8610"+
    "\0\u864c\0\u8688\0\u86c4\0\u8700\0\u873c\0\u8778\0\u87b4\0\u87f0"+
    "\0\u882c\0\u8868\0\u88a4\0\u88e0\0\u891c\0\u8958\0\u8994\0\u89d0"+
    "\0\u8a0c\0\u8a48\0\u8a84\0\u8ac0\0\u8afc\0\u8b38\0\u8b74\0\u8bb0"+
    "\0\u8bec\0\u8c28\0\u8c64\0\u8ca0\0\u8cdc\0\u8d18\0\u8d54\0\u8d90"+
    "\0\u8dcc\0\u8e08\0\u8e44\0\u8e80\0\u8ebc\0\u8ef8\0\u8f34\0\u8f70"+
    "\0\u8fac\0\u8fe8\0\u9024\0\u9060\0\u909c\0\u90d8\0\u9114\0\u9150"+
    "\0\u918c\0\u91c8\0\u9204\0\u9240\0\170\0\u927c\0\u92b8\0\u92f4"+
    "\0\u9330\0\u936c\0\170\0\170\0\u93a8\0\u93e4\0\u9420\0\u945c"+
    "\0\u9498\0\u94d4\0\u9510\0\170\0\u954c\0\170\0\170\0\170"+
    "\0\u9588\0\170\0\u95c4\0\170\0\u9600\0\170\0\u963c\0\u9678"+
    "\0\u96b4\0\u96f0\0\u972c\0\u9768\0\170\0\u97a4\0\u97e0\0\u981c"+
    "\0\u9858\0\170\0\u9894\0\170\0\u98d0\0\u990c\0\u9948\0\u9984"+
    "\0\u99c0\0\u99fc\0\u9a38\0\u9a74\0\u9ab0\0\u9aec\0\u9b28\0\u9b64"+
    "\0\u9ba0\0\u9bdc\0\170\0\u9c18\0\u9c54\0\u9c90\0\u9ccc\0\u9d08"+
    "\0\u9d44\0\u9d80\0\u9dbc\0\u9df8\0\u9e34\0\170\0\170\0\u9e70"+
    "\0\u9eac\0\u9ee8\0\u9f24\0\170\0\u9f60\0\u9f9c\0\u9fd8\0\170"+
    "\0\ua014\0\ua050\0\ua08c\0\170\0\170\0\170\0\ua0c8\0\ua104"+
    "\0\170\0\170\0\ua140\0\ua17c\0\ua1b8\0\170\0\ua1f4\0\ua230"+
    "\0\ua26c\0\170\0\ua2a8\0\ua2e4\0\170\0\ua320\0\ua35c\0\ua398"+
    "\0\ua3d4\0\ua410\0\ua44c\0\ua488\0\ua4c4\0\ua500\0\ua53c\0\ua578"+
    "\0\ua5b4\0\ua5f0\0\ua62c\0\ua668\0\ua6a4\0\170\0\ua6e0\0\ua71c"+
    "\0\ua758\0\ua794\0\170\0\ua7d0\0\ua80c\0\ua848\0\170\0\ua884"+
    "\0\ua8c0\0\ua8fc\0\ua938\0\ua974\0\ua9b0\0\ua9ec\0\uaa28\0\170"+
    "\0\uaa64\0\170\0\uaaa0\0\170\0\170\0\uaadc\0\uab18\0\uab54"+
    "\0\170\0\170\0\uab90\0\uabcc\0\170\0\170\0\uac08\0\uac44"+
    "\0\170\0\uac80\0\170\0\uacbc\0\uacf8\0\uad34\0\uad70\0\170"+
    "\0\uadac\0\170\0\uade8\0\uae24\0\uae60\0\uae9c\0\uaed8\0\uaf14"+
    "\0\uaf50\0\170\0\uaf8c\0\uafc8\0\ub004\0\ub040\0\ub07c\0\ub0b8"+
    "\0\ub0f4\0\ub130\0\ub16c\0\170\0\170\0\ub1a8\0\ub1e4\0\ub220"+
    "\0\ub25c\0\ub298\0\170\0\170\0\ub2d4\0\ub310\0\170\0\ub34c"+
    "\0\ub388\0\ub3c4\0\ub400\0\ub43c\0\ub478\0\ub4b4\0\ub4f0\0\ub52c"+
    "\0\ub568\0\ub5a4\0\ub5e0\0\ub61c\0\ub658\0\ub694\0\ub6d0\0\ub70c"+
    "\0\ub748\0\ub784\0\ub7c0\0\ub7fc\0\ub838\0\ub874\0\ub8b0\0\ub8ec"+
    "\0\170\0\170\0\ub928\0\ub964\0\ub9a0\0\ub9dc\0\uba18\0\170"+
    "\0\uba54\0\uba90\0\ubacc\0\ubb08\0\ubb44\0\ubb80\0\170\0\ubbbc"+
    "\0\ubbf8\0\ubc34\0\ubc70\0\ubcac\0\ubce8\0\ubd24\0\ubd60\0\ubd9c"+
    "\0\ubdd8\0\170\0\170\0\ube14\0\170\0\ube50\0\ube8c\0\ubec8"+
    "\0\ubf04\0\ubf40\0\170\0\ubf7c\0\ubfb8\0\ubff4\0\uc030\0\uc06c"+
    "\0\uc0a8\0\uc0e4\0\uc120\0\170\0\uc15c\0\170\0\170\0\uc198"+
    "\0\uc1d4\0\170\0\uc210\0\uc24c\0\uc288\0\uc2c4\0\uc300\0\uc33c"+
    "\0\uc378\0\170\0\uc3b4\0\uc3f0\0\uc42c\0\170\0\uc468\0\uc4a4"+
    "\0\170\0\uc4e0\0\170\0\uc51c\0\uc558\0\uc594\0\uc5d0\0\uc60c"+
    "\0\uc648\0\170\0\uc684\0\uc6c0\0\170\0\uc6fc\0\uc738\0\uc774"+
    "\0\uc7b0\0\170\0\uc7ec\0\uc828\0\170\0\uc864\0\uc8a0\0\170"+
    "\0\uc8dc\0\uc918\0\uc954\0\uc990\0\uc9cc\0\uca08\0\uca44\0\uca80"+
    "\0\ucabc\0\ucaf8\0\ucb34\0\ucb70\0\ucbac\0\ucbe8\0\ucc24\0\ucc60"+
    "\0\ucc9c\0\170\0\uccd8\0\170\0\ucd14\0\170\0\170\0\ucd50"+
    "\0\170\0\ucd8c\0\170\0\ucdc8\0\uce04\0\uce40\0\uce7c\0\uceb8"+
    "\0\ucef4\0\170\0\ucf30\0\ucf6c\0\ucfa8\0\ucfe4\0\ud020\0\ud05c"+
    "\0\ud098\0\ud0d4\0\170\0\ud110\0\ud14c\0\170\0\170\0\ud188"+
    "\0\ud1c4\0\ud200\0\ud23c\0\ud278\0\ud2b4\0\170\0\170\0\ud2f0"+
    "\0\170\0\ud32c\0\ud368\0\ud3a4\0\ud3e0\0\ud41c\0\ud458\0\ud494"+
    "\0\ud4d0\0\ud50c\0\ud548\0\170\0\ud584\0\ud5c0\0\ud5fc\0\170"+
    "\0\ud638\0\ud674\0\ud6b0\0\ud6ec\0\ud728\0\170\0\ud764\0\ud7a0"+
    "\0\ud7dc\0\ud818\0\ud854\0\ud890\0\170\0\ud8cc\0\ud908\0\ud944"+
    "\0\170\0\ud980\0\170\0\ud9bc\0\170\0\ud9f8\0\uda34\0\170"+
    "\0\uda70\0\udaac\0\udae8\0\udb24\0\udb60\0\udb9c\0\170\0\170"+
    "\0\udbd8\0\170\0\udc14\0\udc50\0\udc8c\0\udcc8\0\udd04\0\udd40"+
    "\0\udd7c\0\uddb8\0\uddf4\0\ude30\0\ude6c\0\udea8\0\170\0\170"+
    "\0\udee4\0\170\0\udf20\0\170\0\170\0\udf5c\0\170\0\udf98"+
    "\0\170\0\udfd4\0\ue010\0\ue04c\0\ue088\0\170\0\170\0\ue0c4"+
    "\0\170\0\ue100\0\ue13c\0\ue178\0\ue1b4\0\ue1f0\0\170\0\170"+
    "\0\ue22c\0\ue268\0\ue2a4\0\ue2e0\0\170\0\170\0\ue31c\0\ue358"+
    "\0\ue394\0\ue3d0\0\ue40c\0\ue448\0\ue484\0\ue4c0\0\ue4fc\0\ue538"+
    "\0\ue574\0\170\0\ue5b0\0\ue5ec\0\170\0\ue628\0\ue664\0\170"+
    "\0\ue6a0\0\ue6dc\0\ue718\0\ue754\0\170\0\170\0\170\0\ue790"+
    "\0\ue7cc\0\ue808\0\170\0\170\0\170\0\ue844\0\170\0\ue880"+
    "\0\170\0\170\0\ue8bc\0\ue8f8\0\ue934\0\170\0\ue970\0\170"+
    "\0\ue9ac\0\ue9e8\0\170\0\uea24\0\170\0\uea60\0\74\0\uea9c"+
    "\0\uead8\0\170\0\ueb14\0\ueb50\0\ueb8c\0\170\0\170\0\uebc8"+
    "\0\uec04\0\uec40\0\uec7c\0\uecb8\0\uecf4\0\170\0\170\0\170"+
    "\0\ued30\0\ued6c\0\ueda8\0\uede4\0\170\0\170\0\170\0\uee20"+
    "\0\170\0\uee5c\0\170\0\170\0\uee98\0\ueed4\0\170\0\170"+
    "\0\uef10\0\uef4c\0\uef88\0\170\0\uefc4\0\uf000\0\uf03c\0\uf078"+
    "\0\uf0b4\0\170\0\uf0f0\0\uf12c\0\170\0\uf168\0\uf1a4\0\uf1e0"+
    "\0\170\0\uf21c\0\170\0\uf258\0\uf294\0\170\0\uf2d0\0\uf30c"+
    "\0\uf348\0\uf384\0\uf3c0\0\uf3fc\0\170\0\uf438\0\uf474\0\uf4b0"+
    "\0\uf4ec\0\uf528\0\uf564\0\uf5a0\0\uf5dc\0\uf618\0\uf654\0\170"+
    "\0\uf690\0\uf6cc\0\170\0\170\0\170\0\uf708\0\uf744\0\uf780"+
    "\0\uf7bc\0\uf7f8\0\uf834\0\170\0\uf870\0\170\0\uf8ac\0\uf8e8"+
    "\0\170\0\uf924\0\uf960\0\uf99c\0\uf9d8\0\ufa14\0\ufa50\0\ufa8c"+
    "\0\170\0\ufac8\0\ufb04\0\170\0\ufb40\0\170\0\ufb7c\0\ufbb8"+
    "\0\170\0\ufbf4\0\ufc30\0\170\0\170\0\ufc6c\0\ufca8\0\170"+
    "\0\ufce4\0\ufd20\0\ufd5c\0\ufd98\0\ufdd4\0\ufe10\0\ufe4c\0\ufe88"+
    "\0\170\0\ufec4\0\uff00\0\uff3c\0\uff78\0\uffb4\0\ufff0\1\54"+
    "\1\150\1\244\1\340\0\170\0\170\1\u011c\0\170\0\170"+
    "\1\u0158\1\u0194\1\u01d0\1\u020c\0\170\0\170\0\170\1\u0248"+
    "\0\170\0\170\1\u0284\1\u02c0\1\u02fc\1\u0338\1\u0374\1\u03b0"+
    "\1\u03ec\0\170\1\u0428\1\u0464\1\u04a0\1\u04dc\1\u0518\0\170"+
    "\1\u0554\0\170\1\u0590\1\u05cc\0\170\1\u0608\0\170\0\170"+
    "\1\u0644\1\u0680\0\170\0\170\1\u06bc\1\u06f8\1\u0734\1\u0770"+
    "\1\u07ac\1\u07e8\1\u0824\0\170\1\u0860\1\u089c\0\170\1\u08d8"+
    "\1\u0914\1\u0950\0\170\0\170\1\u098c\1\u09c8\1\u0a04\0\170"+
    "\1\u0a40\1\u0a7c\1\u0ab8\1\u0af4\1\u0b30\0\170\1\u0b6c\0\170"+
    "\0\170\0\170\1\u0ba8\1\u0be4\1\u0c20\1\u0c5c\1\u0c98\1\u0cd4"+
    "\1\u0d10\0\170\1\u0d4c\1\u0d88\1\u0dc4\0\170\1\u0e00\1\u0e3c"+
    "\0\170\0\170\1\u0e78\1\u0eb4\1\u0ef0\0\170\0\170\0\170"+
    "\0\170\0\170\0\170\1\u0f2c\1\u0f68\1\u0fa4\0\170\0\170"+
    "\1\u0fe0\1\u101c\1\u1058\1\u1094\0\170\1\u10d0\1\u110c\1\u1148"+
    "\1\u1184\1\u11c0\1\u11fc\0\170\1\u1238\0\170\0\170\1\u1274"+
    "\1\u12b0\1\u12ec\1\u1328\1\u1364\1\u13a0\0\170\1\u13dc\1\u1418"+
    "\1\u1454\1\u1490\1\u14cc\1\u1508\1\u1544\0\170\0\170\0\170"+
    "\1\u1580\0\170\1\u15bc\0\170\1\u15f8\0\170\1\u1634\1\u1670"+
    "\1\u16ac\1\u16e8\0\170\1\u1724\1\u1760\0\170\1\u179c\0\170"+
    "\1\u17d8\0\74\0\170\1\u1814\0\170\1\u1850\0\170\1\u188c"+
    "\1\u18c8\0\170\0\170\1\u1904\0\170\1\u1940\1\u197c\0\170"+
    "\1\u19b8\1\u19f4\1\u1a30\1\u1a6c\1\u1aa8\1\u1ae4\1\u1b20\1\u1b5c"+
    "\0\170\1\u1b98\0\170\1\u1bd4\1\u1c10\0\170\1\u1c4c\1\u1c88"+
    "\1\u1cc4\0\170\1\u1d00\1\u1d3c\1\u1d78\1\u1db4\0\170\1\u1df0"+
    "\1\u1e2c\0\170\1\u1e68\1\u1ea4\1\u1ee0\1\u1f1c\1\u1f58\1\u1f94"+
    "\1\u1fd0\1\u200c\1\u2048\1\u2084\1\u20c0\1\u20fc\1\u2138\0\170"+
    "\1\u2174\0\170\1\u21b0\1\u21ec\1\u2228\1\u2264\1\u22a0\1\u22dc"+
    "\0\170";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1561];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\2\6\1\35\1\36\1\37\1\3"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\3\1\6\1\65"+
    "\1\3\1\66\1\67\75\0\3\3\31\0\32\3\2\0"+
    "\1\3\4\0\1\4\17\0\1\70\55\0\1\6\26\0"+
    "\2\6\32\0\1\6\6\0\1\71\73\0\1\71\3\0"+
    "\1\72\74\0\1\73\77\0\1\74\73\0\1\75\73\0"+
    "\1\76\73\0\1\77\76\0\1\100\74\0\1\101\60\0"+
    "\1\102\26\0\2\102\22\0\1\103\7\0\1\102\30\0"+
    "\1\104\75\0\1\105\75\0\1\106\75\0\1\107\42\0"+
    "\3\3\31\0\1\3\1\110\2\3\1\111\1\112\1\113"+
    "\1\114\1\3\1\115\2\3\1\116\1\117\1\3\1\120"+
    "\7\3\1\121\2\3\2\0\1\3\3\0\3\3\31\0"+
    "\1\122\1\3\1\123\2\3\1\124\6\3\1\125\1\126"+
    "\1\127\1\3\1\130\1\131\10\3\2\0\1\3\3\0"+
    "\3\3\31\0\3\3\1\132\1\3\1\133\1\134\1\135"+
    "\7\3\1\136\12\3\2\0\1\3\3\0\3\3\31\0"+
    "\1\137\1\3\1\140\2\3\1\141\4\3\1\142\2\3"+
    "\1\143\1\144\1\145\1\146\1\147\10\3\2\0\1\3"+
    "\3\0\3\3\31\0\1\150\1\3\1\151\11\3\1\152"+
    "\1\3\1\153\1\3\1\154\11\3\2\0\1\3\3\0"+
    "\3\3\31\0\1\155\1\3\1\156\6\3\1\157\2\3"+
    "\1\160\3\3\1\161\6\3\1\162\2\3\2\0\1\3"+
    "\3\0\3\3\31\0\1\163\1\3\1\164\13\3\1\165"+
    "\1\3\1\166\11\3\2\0\1\3\3\0\3\3\31\0"+
    "\1\167\1\3\1\170\2\3\1\171\1\3\1\172\4\3"+
    "\1\173\1\3\1\174\1\3\1\175\11\3\2\0\1\3"+
    "\3\0\3\3\31\0\1\176\4\3\1\177\1\3\1\200"+
    "\2\3\1\201\1\3\1\202\3\3\1\203\11\3\2\0"+
    "\1\3\3\0\3\3\31\0\1\204\17\3\1\205\11\3"+
    "\2\0\1\3\3\0\3\3\31\0\1\206\1\3\1\207"+
    "\2\3\1\210\1\3\1\211\4\3\1\212\1\3\1\213"+
    "\1\3\1\214\11\3\2\0\1\3\3\0\3\3\31\0"+
    "\6\3\1\215\4\3\1\216\3\3\1\217\12\3\2\0"+
    "\1\3\3\0\3\3\31\0\1\220\1\3\1\221\2\3"+
    "\1\222\6\3\1\223\1\3\1\224\1\3\1\225\1\226"+
    "\10\3\2\0\1\3\3\0\3\3\31\0\1\3\1\227"+
    "\4\3\1\230\1\3\1\231\6\3\1\232\5\3\1\233"+
    "\4\3\2\0\1\3\3\0\3\3\31\0\1\234\1\3"+
    "\1\235\1\3\1\236\4\3\1\237\1\240\1\241\1\242"+
    "\1\3\1\243\1\3\1\244\1\245\3\3\1\246\3\3"+
    "\1\247\2\0\1\3\3\0\3\3\31\0\5\3\1\250"+
    "\1\251\1\3\1\252\1\253\1\3\1\254\1\255\11\3"+
    "\1\256\1\257\2\3\2\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\260\27\3\2\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\261\2\3\1\262\1\3\1\263\5\3\1\264"+
    "\2\3\1\265\11\3\2\0\1\3\3\0\3\3\31\0"+
    "\20\3\1\266\11\3\2\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\267\12\3\1\270\1\271\13\3\2\0\1\3"+
    "\3\0\3\3\31\0\1\272\1\3\1\273\12\3\1\274"+
    "\1\275\1\3\1\276\11\3\2\0\1\3\3\0\3\3"+
    "\31\0\1\277\4\3\1\300\4\3\1\301\3\3\1\302"+
    "\1\3\1\303\11\3\2\0\1\3\3\0\3\3\31\0"+
    "\1\304\15\3\1\305\13\3\2\0\1\3\3\0\3\3"+
    "\31\0\20\3\1\306\11\3\2\0\1\3\2\0\33\307"+
    "\2\0\33\307\1\310\3\307\2\0\1\70\2\0\2\311"+
    "\30\0\1\312\31\0\1\312\2\0\34\72\1\0\37\72"+
    "\7\313\1\314\12\313\1\314\10\313\2\315\37\313\55\0"+
    "\1\316\17\0\3\3\31\0\1\317\1\320\30\3\2\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\321\16\3\1\322"+
    "\10\3\2\0\1\3\3\0\3\3\31\0\1\3\1\323"+
    "\17\3\1\324\10\3\2\0\1\3\3\0\3\3\31\0"+
    "\4\3\1\325\2\3\1\326\22\3\2\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\327\25\3\2\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\330\25\3\2\0\1\3\3\0"+
    "\3\3\31\0\17\3\1\331\12\3\2\0\1\3\3\0"+
    "\3\3\31\0\11\3\1\332\5\3\1\333\12\3\2\0"+
    "\1\3\3\0\3\3\31\0\22\3\1\334\7\3\2\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\335\14\3\1\336"+
    "\10\3\2\0\1\3\3\0\3\3\31\0\1\337\5\3"+
    "\1\340\1\341\1\342\1\343\5\3\1\344\12\3\2\0"+
    "\1\3\3\0\3\3\31\0\20\3\1\345\11\3\2\0"+
    "\1\3\3\0\3\3\31\0\25\3\1\346\4\3\2\0"+
    "\1\3\3\0\3\3\31\0\11\3\1\347\20\3\2\0"+
    "\1\3\3\0\3\3\31\0\1\350\16\3\1\351\12\3"+
    "\2\0\1\3\3\0\3\3\31\0\14\3\1\352\10\3"+
    "\1\353\4\3\2\0\1\3\3\0\3\3\31\0\6\3"+
    "\1\354\23\3\2\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\355\1\3\1\356\4\3\1\357\4\3\1\360\13\3"+
    "\2\0\1\3\3\0\3\3\31\0\5\3\1\361\24\3"+
    "\2\0\1\3\3\0\3\3\31\0\1\3\1\362\7\3"+
    "\1\363\20\3\2\0\1\3\3\0\3\3\31\0\17\3"+
    "\1\364\12\3\2\0\1\3\3\0\3\3\31\0\11\3"+
    "\1\365\20\3\2\0\1\3\3\0\3\3\31\0\15\3"+
    "\1\366\14\3\2\0\1\3\3\0\3\3\31\0\3\3"+
    "\1\367\21\3\1\370\4\3\2\0\1\3\3\0\3\3"+
    "\31\0\1\371\13\3\1\372\1\3\1\373\2\3\1\374"+
    "\10\3\2\0\1\3\3\0\3\3\31\0\2\3\1\375"+
    "\27\3\2\0\1\3\3\0\3\3\31\0\25\3\1\376"+
    "\4\3\2\0\1\3\3\0\3\3\31\0\2\3\1\377"+
    "\27\3\2\0\1\3\3\0\3\3\31\0\13\3\1\u0100"+
    "\16\3\2\0\1\3\3\0\3\3\31\0\13\3\1\u0101"+
    "\16\3\2\0\1\3\3\0\3\3\31\0\16\3\1\u0102"+
    "\13\3\2\0\1\3\3\0\3\3\31\0\1\u0103\3\3"+
    "\1\u0104\2\3\1\u0105\1\u0106\1\u0107\1\3\1\u0108\3\3"+
    "\1\u0109\7\3\1\u010a\2\3\2\0\1\3\3\0\3\3"+
    "\31\0\7\3\1\u010b\22\3\2\0\1\3\3\0\3\3"+
    "\31\0\22\3\1\u010c\7\3\2\0\1\3\3\0\3\3"+
    "\31\0\7\3\1\u010d\16\3\1\u010e\3\3\2\0\1\3"+
    "\3\0\3\3\31\0\4\3\1\u010f\20\3\1\u0110\4\3"+
    "\2\0\1\3\3\0\3\3\31\0\3\3\1\u0111\26\3"+
    "\2\0\1\3\3\0\3\3\31\0\12\3\1\u0112\17\3"+
    "\2\0\1\3\3\0\3\3\31\0\7\3\1\u0113\15\3"+
    "\1\u0114\4\3\2\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u0115\1\3\1\u0116\2\3\1\u0117\20\3\2\0\1\3"+
    "\3\0\3\3\31\0\1\u0118\31\3\2\0\1\3\3\0"+
    "\3\3\31\0\6\3\1\u0119\10\3\1\u011a\12\3\2\0"+
    "\1\3\3\0\3\3\31\0\1\u011b\7\3\1\u011c\16\3"+
    "\1\u011d\2\3\2\0\1\3\3\0\3\3\31\0\6\3"+
    "\1\u011e\15\3\1\u011f\5\3\2\0\1\3\3\0\3\3"+
    "\31\0\1\u0120\10\3\1\u0121\14\3\1\u0122\3\3\2\0"+
    "\1\3\3\0\3\3\31\0\7\3\1\u0123\7\3\1\u0124"+
    "\12\3\2\0\1\3\3\0\3\3\31\0\4\3\1\u0125"+
    "\25\3\2\0\1\3\3\0\3\3\31\0\2\3\1\u0126"+
    "\15\3\1\u0127\11\3\2\0\1\3\3\0\3\3\31\0"+
    "\20\3\1\u0128\11\3\2\0\1\3\3\0\3\3\31\0"+
    "\6\3\1\u0129\1\u012a\22\3\2\0\1\3\3\0\3\3"+
    "\31\0\5\3\1\u012b\1\3\1\u012c\22\3\2\0\1\3"+
    "\3\0\3\3\31\0\5\3\1\u012d\6\3\1\u012e\15\3"+
    "\2\0\1\3\3\0\3\3\31\0\4\3\1\u012f\2\3"+
    "\1\u0130\7\3\1\u0131\12\3\2\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u0132\15\3\1\u0133\11\3\2\0\1\3"+
    "\3\0\3\3\31\0\14\3\1\u0134\3\3\1\u0135\11\3"+
    "\2\0\1\3\3\0\3\3\31\0\1\u0136\1\3\1\u0137"+
    "\27\3\2\0\1\3\3\0\3\3\31\0\5\3\1\u0138"+
    "\24\3\2\0\1\3\3\0\3\3\31\0\1\u0139\4\3"+
    "\1\u013a\1\u013b\1\u013c\4\3\1\u013d\10\3\1\u013e\4\3"+
    "\2\0\1\3\3\0\3\3\31\0\27\3\1\u013f\2\3"+
    "\2\0\1\3\3\0\3\3\31\0\7\3\1\u0140\4\3"+
    "\1\u0141\15\3\2\0\1\3\3\0\3\3\31\0\1\3"+
    "\1\u0142\3\3\1\u0143\11\3\1\u0144\12\3\2\0\1\3"+
    "\3\0\3\3\31\0\5\3\1\u0145\24\3\2\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u0146\13\3\1\u0147\1\3"+
    "\1\u0148\11\3\2\0\1\3\3\0\3\3\31\0\1\u0149"+
    "\31\3\2\0\1\3\3\0\3\3\31\0\15\3\1\u014a"+
    "\14\3\2\0\1\3\3\0\3\3\31\0\27\3\1\u014b"+
    "\2\3\2\0\1\3\3\0\3\3\31\0\17\3\1\u014c"+
    "\12\3\2\0\1\3\3\0\3\3\31\0\7\3\1\u014d"+
    "\3\3\1\u014e\2\3\1\u014f\5\3\1\u0150\5\3\2\0"+
    "\1\3\3\0\3\3\31\0\1\3\1\u0151\11\3\1\u0152"+
    "\16\3\2\0\1\3\3\0\3\3\31\0\1\u0153\1\3"+
    "\1\u0154\13\3\1\u0155\13\3\2\0\1\3\3\0\3\3"+
    "\31\0\11\3\1\u0156\20\3\2\0\1\3\3\0\3\3"+
    "\31\0\4\3\1\u0157\15\3\1\u0158\7\3\2\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u0159\15\3\1\u015a\11\3"+
    "\2\0\1\3\3\0\3\3\31\0\7\3\1\u015b\22\3"+
    "\2\0\1\3\3\0\3\3\31\0\4\3\1\u015c\25\3"+
    "\2\0\1\3\3\0\3\3\31\0\4\3\1\u015d\25\3"+
    "\2\0\1\3\3\0\3\3\31\0\2\3\1\u015e\27\3"+
    "\2\0\1\3\3\0\3\3\31\0\1\3\1\u015f\2\3"+
    "\1\u0160\1\3\1\u0161\1\u0162\1\3\1\u0163\1\3\1\u0164"+
    "\2\3\1\u0165\1\u0166\12\3\2\0\1\3\3\0\3\3"+
    "\31\0\20\3\1\u0167\11\3\2\0\1\3\3\0\3\3"+
    "\31\0\25\3\1\u0168\4\3\2\0\1\3\3\0\3\3"+
    "\31\0\27\3\1\u0169\2\3\2\0\1\3\3\0\3\3"+
    "\31\0\4\3\1\u016a\2\3\1\u016b\1\3\1\u016c\5\3"+
    "\1\u016d\5\3\1\u016e\4\3\2\0\1\3\3\0\3\3"+
    "\31\0\1\u016f\31\3\2\0\1\3\3\0\3\3\31\0"+
    "\5\3\1\u0170\4\3\1\u0171\17\3\2\0\1\3\3\0"+
    "\3\3\31\0\14\3\1\u0172\15\3\2\0\1\3\3\0"+
    "\3\3\31\0\1\u0173\31\3\2\0\1\3\3\0\3\3"+
    "\31\0\15\3\1\u0174\7\3\1\u0175\4\3\2\0\1\3"+
    "\3\0\3\3\31\0\23\3\1\u0176\6\3\2\0\1\3"+
    "\3\0\3\3\31\0\25\3\1\u0177\4\3\2\0\1\3"+
    "\3\0\3\3\31\0\17\3\1\u0178\12\3\2\0\1\3"+
    "\3\0\3\3\31\0\1\u0179\31\3\2\0\1\3\3\0"+
    "\3\3\31\0\7\3\1\u017a\22\3\2\0\1\3\3\0"+
    "\3\3\31\0\1\3\1\u017b\30\3\2\0\1\3\3\0"+
    "\3\3\31\0\7\3\1\u017c\22\3\2\0\1\3\3\0"+
    "\3\3\31\0\10\3\1\u017d\21\3\2\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\u017e\25\3\2\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u017f\1\3\1\u0180\25\3\2\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u0181\25\3\2\0"+
    "\1\3\3\0\3\3\31\0\6\3\1\u0182\23\3\2\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u0183\27\3\2\0"+
    "\1\3\3\0\3\3\31\0\1\u0184\31\3\2\0\1\3"+
    "\3\0\3\3\31\0\4\3\1\u0185\25\3\2\0\1\3"+
    "\3\0\3\3\31\0\1\u0186\17\3\1\u0187\11\3\2\0"+
    "\1\3\3\0\3\3\31\0\20\3\1\u0188\11\3\2\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u0189\25\3\2\0"+
    "\1\3\3\0\3\3\31\0\6\3\1\u018a\23\3\2\0"+
    "\1\3\3\0\3\3\31\0\21\3\1\u018b\10\3\2\0"+
    "\1\3\3\0\3\3\31\0\7\3\1\u018c\22\3\2\0"+
    "\1\3\3\0\3\3\31\0\3\3\1\u018d\1\u018e\1\u018f"+
    "\24\3\2\0\1\3\3\0\3\3\31\0\5\3\1\u0190"+
    "\24\3\2\0\1\3\3\0\3\3\31\0\6\3\1\u0191"+
    "\23\3\2\0\1\3\3\0\3\3\31\0\1\3\1\u0192"+
    "\4\3\1\u0193\23\3\2\0\1\3\3\0\3\3\31\0"+
    "\16\3\1\u0194\13\3\2\0\1\3\3\0\3\3\31\0"+
    "\16\3\1\u0195\13\3\2\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\u0196\13\3\1\u0197\13\3\2\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\u0198\25\3\2\0\1\3\3\0"+
    "\3\3\31\0\5\3\1\u0199\24\3\2\0\1\3\3\0"+
    "\3\3\31\0\5\3\1\u019a\1\3\1\u019b\22\3\2\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u019c\27\3\2\0"+
    "\1\3\3\0\3\3\31\0\16\3\1\u019d\13\3\2\0"+
    "\1\3\4\0\1\311\73\0\1\311\2\0\2\311\65\0"+
    "\7\313\1\u019e\12\313\1\315\10\313\2\315\37\313\7\315"+
    "\1\u019f\12\315\1\314\60\315\1\u019e\64\315\1\0\3\3"+
    "\31\0\16\3\1\u01a0\13\3\2\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u01a1\27\3\2\0\1\3\3\0\3\3"+
    "\31\0\20\3\1\u01a2\11\3\2\0\1\3\3\0\3\3"+
    "\31\0\16\3\1\u01a3\13\3\2\0\1\3\3\0\3\3"+
    "\31\0\12\3\1\u01a4\17\3\2\0\1\3\3\0\3\3"+
    "\31\0\20\3\1\u01a5\11\3\2\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u01a6\27\3\2\0\1\3\3\0\3\3"+
    "\31\0\1\u01a7\1\3\1\u01a8\27\3\2\0\1\3\3\0"+
    "\3\3\31\0\7\3\1\u01a9\22\3\2\0\1\3\3\0"+
    "\3\3\31\0\21\3\1\u01aa\10\3\2\0\1\3\3\0"+
    "\3\3\31\0\1\u01ab\1\3\1\u01ac\27\3\2\0\1\3"+
    "\3\0\3\3\31\0\1\u01ad\1\3\1\u01ae\27\3\2\0"+
    "\1\3\3\0\3\3\31\0\7\3\1\u01af\6\3\1\u01b0"+
    "\13\3\2\0\1\3\3\0\3\3\31\0\11\3\1\u01b1"+
    "\20\3\2\0\1\3\3\0\3\3\31\0\13\3\1\u01b2"+
    "\16\3\2\0\1\3\3\0\3\3\31\0\13\3\1\u01b3"+
    "\16\3\2\0\1\3\3\0\3\3\31\0\11\3\1\u01b4"+
    "\20\3\2\0\1\3\3\0\3\3\31\0\22\3\1\u01b5"+
    "\7\3\2\0\1\3\3\0\3\3\31\0\4\3\1\u01b6"+
    "\4\3\1\u01b7\12\3\1\u01b8\5\3\2\0\1\3\3\0"+
    "\3\3\31\0\15\3\1\u01b9\14\3\2\0\1\3\3\0"+
    "\3\3\31\0\1\u01ba\31\3\2\0\1\3\3\0\3\3"+
    "\31\0\1\u01bb\31\3\2\0\1\3\3\0\3\3\31\0"+
    "\11\3\1\u01bc\20\3\2\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\u01bd\2\3\1\u01be\24\3\2\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u01bf\27\3\2\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\u01c0\12\3\1\u01c1\12\3\2\0"+
    "\1\3\3\0\3\3\31\0\7\3\1\u01c2\22\3\2\0"+
    "\1\3\3\0\3\3\2\0\1\u01c3\26\0\32\3\2\0"+
    "\1\3\3\0\3\3\31\0\5\3\1\u01c4\24\3\2\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u01c5\27\3\2\0"+
    "\1\3\3\0\3\3\31\0\1\u01c6\31\3\2\0\1\3"+
    "\3\0\3\3\31\0\7\3\1\u01c7\22\3\2\0\1\3"+
    "\3\0\3\3\31\0\4\3\1\u01c8\25\3\2\0\1\3"+
    "\3\0\3\3\31\0\13\3\1\u01c9\16\3\2\0\1\3"+
    "\3\0\3\3\31\0\6\3\1\u01ca\7\3\1\u01cb\13\3"+
    "\2\0\1\3\3\0\3\3\31\0\2\3\1\u01cc\3\3"+
    "\1\u01cd\23\3\2\0\1\3\3\0\3\3\31\0\22\3"+
    "\1\u01ce\2\3\1\u01cf\4\3\2\0\1\3\3\0\2\3"+
    "\1\u01d0\31\0\32\3\2\0\1\3\3\0\3\3\31\0"+
    "\6\3\1\u01d1\23\3\2\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\u01d2\27\3\2\0\1\3\3\0\3\3\31\0"+
    "\31\3\1\u01d3\2\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u01d4\27\3\2\0\1\3\3\0\3\3\31\0\17\3"+
    "\1\u01d5\12\3\2\0\1\3\3\0\3\3\31\0\1\3"+
    "\1\u01d6\5\3\1\u01d7\22\3\2\0\1\3\3\0\3\3"+
    "\31\0\14\3\1\u01d8\15\3\2\0\1\3\3\0\3\3"+
    "\31\0\1\u01d9\31\3\2\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\u01da\27\3\2\0\1\3\3\0\3\3\31\0"+
    "\20\3\1\u01db\11\3\2\0\1\3\3\0\3\3\31\0"+
    "\7\3\1\u01dc\22\3\2\0\1\3\3\0\3\3\31\0"+
    "\4\3\1\u01dd\25\3\2\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\u01de\15\3\1\u01df\11\3\2\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u01e0\27\3\2\0\1\3\3\0"+
    "\3\3\31\0\12\3\1\u01e1\17\3\2\0\1\3\3\0"+
    "\3\3\31\0\7\3\1\u01e2\22\3\2\0\1\3\3\0"+
    "\3\3\31\0\11\3\1\u01e3\5\3\1\u01e4\2\3\1\u01e5"+
    "\7\3\2\0\1\3\3\0\3\3\31\0\14\3\1\u01e6"+
    "\1\3\1\u01e7\13\3\2\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\u01e8\27\3\2\0\1\3\3\0\3\3\31\0"+
    "\4\3\1\u01e9\25\3\2\0\1\3\3\0\3\3\31\0"+
    "\1\u01ea\31\3\2\0\1\3\3\0\3\3\31\0\7\3"+
    "\1\u01eb\22\3\2\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u01ec\27\3\2\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u01ed\6\3\1\u01ee\20\3\2\0\1\3\3\0\3\3"+
    "\31\0\12\3\1\u01ef\17\3\2\0\1\3\3\0\3\3"+
    "\31\0\5\3\1\u01f0\24\3\2\0\1\3\3\0\3\3"+
    "\31\0\22\3\1\u01f1\7\3\2\0\1\3\3\0\3\3"+
    "\31\0\4\3\1\u01f2\25\3\2\0\1\3\3\0\3\3"+
    "\31\0\1\3\1\u01f3\30\3\2\0\1\3\3\0\3\3"+
    "\31\0\4\3\1\u01f4\25\3\2\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u01f5\27\3\2\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u01f6\27\3\2\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u01f7\27\3\2\0\1\3\3\0\3\3"+
    "\31\0\1\3\1\u01f8\30\3\2\0\1\3\3\0\3\3"+
    "\31\0\1\u01f9\31\3\2\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\u01fa\27\3\2\0\1\3\3\0\3\3\31\0"+
    "\17\3\1\u01fb\12\3\2\0\1\3\3\0\3\3\31\0"+
    "\4\3\1\u01fc\25\3\2\0\1\3\3\0\3\3\31\0"+
    "\11\3\1\u01fd\20\3\2\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\u01fe\27\3\2\0\1\3\3\0\3\3\31\0"+
    "\25\3\1\u01ff\4\3\2\0\1\3\3\0\3\3\31\0"+
    "\1\u0200\31\3\2\0\1\3\3\0\3\3\31\0\11\3"+
    "\1\u0201\20\3\2\0\1\3\3\0\3\3\31\0\7\3"+
    "\1\u0202\22\3\2\0\1\3\3\0\3\3\31\0\17\3"+
    "\1\u0203\12\3\2\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u0204\4\3\1\u0205\22\3\2\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u0206\1\3\1\u0207\21\3\1\u0208\3\3"+
    "\2\0\1\3\3\0\3\3\31\0\6\3\1\u0209\23\3"+
    "\2\0\1\3\3\0\3\3\31\0\1\u020a\31\3\2\0"+
    "\1\3\3\0\3\3\31\0\7\3\1\u020b\22\3\2\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u020c\1\3\1\u020d"+
    "\4\3\1\u020e\20\3\2\0\1\3\3\0\3\3\31\0"+
    "\1\u020f\31\3\2\0\1\3\3\0\3\3\31\0\17\3"+
    "\1\u0210\12\3\2\0\1\3\3\0\3\3\31\0\17\3"+
    "\1\u0211\12\3\2\0\1\3\3\0\3\3\31\0\17\3"+
    "\1\u0212\12\3\2\0\1\3\3\0\3\3\31\0\5\3"+
    "\1\u0213\24\3\2\0\1\3\3\0\3\3\31\0\11\3"+
    "\1\u0214\20\3\2\0\1\3\3\0\3\3\31\0\5\3"+
    "\1\u0215\11\3\1\u0216\12\3\2\0\1\3\3\0\3\3"+
    "\31\0\7\3\1\u0217\22\3\2\0\1\3\3\0\3\3"+
    "\31\0\5\3\1\u0218\24\3\2\0\1\3\3\0\3\3"+
    "\31\0\4\3\1\u0219\1\3\1\u021a\10\3\1\u021b\7\3"+
    "\1\u021c\2\3\2\0\1\3\3\0\3\3\31\0\7\3"+
    "\1\u021d\4\3\1\u021e\15\3\2\0\1\3\3\0\3\3"+
    "\31\0\6\3\1\u021f\23\3\2\0\1\3\3\0\3\3"+
    "\31\0\13\3\1\u0220\11\3\1\u0221\4\3\2\0\1\3"+
    "\3\0\3\3\31\0\16\3\1\u0222\13\3\2\0\1\3"+
    "\3\0\3\3\31\0\1\3\1\u0223\30\3\2\0\1\3"+
    "\3\0\3\3\31\0\5\3\1\u0224\24\3\2\0\1\3"+
    "\3\0\3\3\31\0\4\3\1\u0225\25\3\2\0\1\3"+
    "\3\0\3\3\31\0\11\3\1\u0226\20\3\2\0\1\3"+
    "\3\0\3\3\31\0\11\3\1\u0227\20\3\2\0\1\3"+
    "\3\0\3\3\31\0\11\3\1\u0228\1\3\1\u0229\3\3"+
    "\1\u022a\12\3\2\0\1\3\3\0\3\3\31\0\6\3"+
    "\1\u022b\11\3\1\u022c\4\3\1\u022d\1\3\1\u022e\2\3"+
    "\2\0\1\3\3\0\3\3\31\0\11\3\1\u022f\20\3"+
    "\2\0\1\3\3\0\3\3\31\0\6\3\1\u0230\23\3"+
    "\2\0\1\3\3\0\3\3\31\0\7\3\1\u0231\22\3"+
    "\2\0\1\3\3\0\3\3\31\0\20\3\1\u0232\11\3"+
    "\2\0\1\3\3\0\3\3\31\0\16\3\1\u0233\13\3"+
    "\2\0\1\3\3\0\3\3\31\0\16\3\1\u0234\13\3"+
    "\2\0\1\3\3\0\3\3\31\0\16\3\1\u0235\13\3"+
    "\2\0\1\3\3\0\3\3\31\0\20\3\1\u0236\10\3"+
    "\1\u0237\2\0\1\3\3\0\3\3\31\0\6\3\1\u0238"+
    "\23\3\2\0\1\3\3\0\3\3\31\0\1\u0239\31\3"+
    "\2\0\1\3\3\0\3\3\31\0\2\3\1\u023a\27\3"+
    "\2\0\1\3\3\0\3\3\31\0\22\3\1\u023b\7\3"+
    "\2\0\1\3\3\0\3\3\31\0\5\3\1\u023c\24\3"+
    "\2\0\1\3\3\0\3\3\31\0\6\3\1\u023d\23\3"+
    "\2\0\1\3\3\0\3\3\31\0\24\3\1\u023e\5\3"+
    "\2\0\1\3\3\0\3\3\31\0\26\3\1\u023f\3\3"+
    "\2\0\1\3\3\0\3\3\31\0\16\3\1\u0240\13\3"+
    "\2\0\1\3\3\0\3\3\31\0\1\u0241\31\3\2\0"+
    "\1\3\3\0\3\3\31\0\26\3\1\u0242\3\3\2\0"+
    "\1\3\3\0\3\3\31\0\24\3\1\u0243\5\3\2\0"+
    "\1\3\3\0\2\3\1\u0244\31\0\32\3\2\0\1\3"+
    "\3\0\3\3\31\0\12\3\1\u0245\17\3\2\0\1\3"+
    "\3\0\3\3\31\0\6\3\1\u0246\23\3\2\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u0247\13\3\1\u0248\13\3"+
    "\2\0\1\3\3\0\3\3\31\0\2\3\1\u0249\15\3"+
    "\1\u024a\11\3\2\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u024b\27\3\2\0\1\3\3\0\3\3\31\0\16\3"+
    "\1\u024c\13\3\2\0\1\3\3\0\3\3\31\0\7\3"+
    "\1\u024d\22\3\2\0\1\3\3\0\3\3\31\0\14\3"+
    "\1\u024e\15\3\2\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u024f\25\3\2\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u0250\27\3\2\0\1\3\3\0\3\3\31\0\7\3"+
    "\1\u0251\22\3\2\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u0252\27\3\2\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u0253\27\3\2\0\1\3\3\0\3\3\31\0\14\3"+
    "\1\u0254\15\3\2\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u0255\5\3\1\u0256\21\3\2\0\1\3\3\0\3\3"+
    "\31\0\4\3\1\u0257\7\3\1\u0258\3\3\1\u0259\11\3"+
    "\2\0\1\3\3\0\3\3\31\0\17\3\1\u025a\12\3"+
    "\2\0\1\3\3\0\3\3\31\0\1\u025b\31\3\2\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u025c\25\3\2\0"+
    "\1\3\3\0\3\3\31\0\20\3\1\u025d\11\3\2\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u025e\27\3\2\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u025f\25\3\2\0"+
    "\1\3\3\0\3\3\31\0\11\3\1\u0260\20\3\2\0"+
    "\1\3\3\0\3\3\31\0\17\3\1\u0261\12\3\2\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u0262\27\3\2\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u0263\27\3\2\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u0264\25\3\2\0"+
    "\1\3\3\0\3\3\31\0\7\3\1\u0265\22\3\2\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u0266\6\3\1\u0267"+
    "\5\3\1\u0268\6\3\1\u0269\3\3\2\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u026a\27\3\2\0\1\3\3\0"+
    "\3\3\31\0\21\3\1\u026b\10\3\2\0\1\3\3\0"+
    "\3\3\31\0\17\3\1\u026c\12\3\2\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u026d\27\3\2\0\1\3\3\0"+
    "\3\3\31\0\6\3\1\u026e\23\3\2\0\1\3\3\0"+
    "\3\3\31\0\16\3\1\u026f\13\3\2\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u0270\10\3\1\u0271\16\3\2\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u0272\27\3\2\0"+
    "\1\3\3\0\3\3\31\0\5\3\1\u0273\24\3\2\0"+
    "\1\3\3\0\3\3\31\0\5\3\1\u0274\24\3\2\0"+
    "\1\3\3\0\3\3\31\0\6\3\1\u0275\23\3\2\0"+
    "\1\3\3\0\3\3\31\0\14\3\1\u0276\15\3\2\0"+
    "\1\3\3\0\3\3\31\0\15\3\1\u0277\14\3\2\0"+
    "\1\3\3\0\3\3\31\0\20\3\1\u0278\11\3\2\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u0279\27\3\2\0"+
    "\1\3\3\0\3\3\31\0\17\3\1\u027a\12\3\2\0"+
    "\1\3\3\0\3\3\31\0\7\3\1\u027b\22\3\2\0"+
    "\1\3\3\0\3\3\31\0\17\3\1\u027c\12\3\2\0"+
    "\1\3\3\0\3\3\31\0\11\3\1\u027d\20\3\2\0"+
    "\1\3\3\0\3\3\31\0\24\3\1\u027e\5\3\2\0"+
    "\1\3\3\0\3\3\31\0\22\3\1\u027f\7\3\2\0"+
    "\1\3\3\0\3\3\31\0\14\3\1\u0280\15\3\2\0"+
    "\1\3\3\0\3\3\31\0\14\3\1\u0281\15\3\2\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u0282\1\3\1\u0283"+
    "\25\3\2\0\1\3\3\0\3\3\31\0\4\3\1\u0284"+
    "\25\3\2\0\1\3\3\0\3\3\31\0\4\3\1\u0285"+
    "\25\3\2\0\1\3\3\0\3\3\31\0\5\3\1\u0286"+
    "\1\u0287\23\3\2\0\1\3\3\0\3\3\31\0\7\3"+
    "\1\u0288\22\3\2\0\1\3\3\0\3\3\31\0\12\3"+
    "\1\u0289\17\3\2\0\1\3\3\0\3\3\31\0\24\3"+
    "\1\u028a\5\3\2\0\1\3\3\0\3\3\31\0\11\3"+
    "\1\u028b\7\3\1\u028c\10\3\2\0\1\3\3\0\3\3"+
    "\31\0\14\3\1\u028d\15\3\2\0\1\3\3\0\3\3"+
    "\31\0\26\3\1\u028e\3\3\2\0\1\3\3\0\3\3"+
    "\31\0\6\3\1\u028f\23\3\2\0\1\3\2\0\7\315"+
    "\1\u019e\1\u0290\72\315\1\u019f\1\u0291\11\315\1\314\51\315"+
    "\1\0\3\3\31\0\6\3\1\u0292\23\3\2\0\1\3"+
    "\3\0\3\3\31\0\5\3\1\u0293\24\3\2\0\1\3"+
    "\3\0\3\3\31\0\11\3\1\u0294\20\3\2\0\1\3"+
    "\3\0\3\3\31\0\20\3\1\u0295\11\3\2\0\1\3"+
    "\3\0\3\3\31\0\20\3\1\u0296\11\3\2\0\1\3"+
    "\3\0\3\3\31\0\7\3\1\u0297\22\3\2\0\1\3"+
    "\3\0\3\3\31\0\5\3\1\u0298\24\3\2\0\1\3"+
    "\3\0\3\3\31\0\15\3\1\u0299\14\3\2\0\1\3"+
    "\3\0\3\3\31\0\4\3\1\u029a\25\3\2\0\1\3"+
    "\3\0\3\3\31\0\7\3\1\u029b\22\3\2\0\1\3"+
    "\3\0\3\3\31\0\21\3\1\u029c\10\3\2\0\1\3"+
    "\3\0\3\3\31\0\4\3\1\u029d\25\3\2\0\1\3"+
    "\3\0\3\3\31\0\14\3\1\u029e\15\3\2\0\1\3"+
    "\3\0\3\3\31\0\5\3\1\u029f\24\3\2\0\1\3"+
    "\3\0\3\3\31\0\1\u02a0\31\3\2\0\1\3\3\0"+
    "\3\3\31\0\25\3\1\u02a1\4\3\2\0\1\3\3\0"+
    "\3\3\31\0\5\3\1\u02a2\24\3\2\0\1\3\3\0"+
    "\3\3\31\0\6\3\1\u02a3\23\3\2\0\1\3\3\0"+
    "\3\3\31\0\5\3\1\u02a4\10\3\1\u02a5\13\3\2\0"+
    "\1\3\3\0\3\3\31\0\20\3\1\u02a6\11\3\2\0"+
    "\1\3\3\0\3\3\31\0\7\3\1\u02a7\22\3\2\0"+
    "\1\3\3\0\3\3\31\0\16\3\1\u02a8\13\3\2\0"+
    "\1\3\3\0\3\3\31\0\25\3\1\u02a9\4\3\2\0"+
    "\1\3\3\0\3\3\31\0\14\3\1\u02aa\15\3\2\0"+
    "\1\3\3\0\3\3\31\0\5\3\1\u02ab\24\3\2\0"+
    "\1\3\3\0\3\3\31\0\1\u02ac\31\3\2\0\1\3"+
    "\3\0\3\3\31\0\13\3\1\u02ad\16\3\2\0\1\3"+
    "\3\0\3\3\31\0\4\3\1\u02ae\25\3\2\0\1\3"+
    "\3\0\3\3\31\0\27\3\1\u02af\2\3\2\0\1\3"+
    "\41\0\1\u02b0\35\0\3\3\31\0\21\3\1\u02b1\10\3"+
    "\2\0\1\3\3\0\3\3\31\0\13\3\1\u02b2\16\3"+
    "\2\0\1\3\3\0\3\3\31\0\2\3\1\u02b3\27\3"+
    "\2\0\1\3\3\0\3\3\31\0\17\3\1\u02b4\12\3"+
    "\2\0\1\3\3\0\3\3\31\0\20\3\1\u02b5\11\3"+
    "\2\0\1\3\3\0\3\3\31\0\17\3\1\u02b6\12\3"+
    "\2\0\1\3\3\0\3\3\31\0\7\3\1\u02b7\22\3"+
    "\2\0\1\3\3\0\3\3\31\0\11\3\1\u02b8\20\3"+
    "\2\0\1\3\3\0\3\3\31\0\22\3\1\u02b9\7\3"+
    "\2\0\1\3\3\0\3\3\31\0\11\3\1\u02ba\20\3"+
    "\2\0\1\3\3\0\3\3\31\0\17\3\1\u02bb\3\3"+
    "\1\u02bc\6\3\2\0\1\3\3\0\3\3\31\0\14\3"+
    "\1\u02bd\15\3\2\0\1\3\3\0\2\3\1\u02be\31\0"+
    "\32\3\2\0\1\3\3\0\3\3\31\0\2\3\1\u02bf"+
    "\27\3\2\0\1\3\3\0\2\3\1\u02c0\31\0\4\3"+
    "\1\u02c1\13\3\1\u02c2\11\3\2\0\1\3\3\0\3\3"+
    "\31\0\5\3\1\u02c3\24\3\2\0\1\3\3\0\3\3"+
    "\31\0\4\3\1\u02c4\25\3\2\0\1\3\3\0\3\3"+
    "\31\0\5\3\1\u02c5\24\3\2\0\1\3\3\0\3\3"+
    "\31\0\6\3\1\u02c6\16\3\1\u02c7\4\3\2\0\1\3"+
    "\3\0\3\3\31\0\16\3\1\u02c8\13\3\2\0\1\3"+
    "\3\0\3\3\31\0\5\3\1\u02c9\12\3\1\u02ca\11\3"+
    "\2\0\1\3\3\0\3\3\31\0\5\3\1\u02cb\24\3"+
    "\2\0\1\3\3\0\3\3\31\0\24\3\1\u02cc\5\3"+
    "\2\0\1\3\3\0\3\3\31\0\4\3\1\u02cd\25\3"+
    "\2\0\1\3\3\0\3\3\31\0\15\3\1\u02ce\14\3"+
    "\2\0\1\3\3\0\3\3\31\0\20\3\1\u02cf\11\3"+
    "\2\0\1\3\3\0\3\3\31\0\14\3\1\u02d0\15\3"+
    "\2\0\1\3\3\0\3\3\31\0\5\3\1\u02d1\24\3"+
    "\2\0\1\3\3\0\3\3\31\0\20\3\1\u02d2\11\3"+
    "\2\0\1\3\3\0\3\3\31\0\17\3\1\u02d3\12\3"+
    "\2\0\1\3\3\0\3\3\31\0\5\3\1\u02d4\24\3"+
    "\2\0\1\3\3\0\3\3\31\0\16\3\1\u02d5\13\3"+
    "\2\0\1\3\3\0\3\3\31\0\5\3\1\u02d6\24\3"+
    "\2\0\1\3\3\0\3\3\31\0\7\3\1\u02d7\22\3"+
    "\2\0\1\3\3\0\3\3\31\0\2\3\1\u02d8\27\3"+
    "\2\0\1\3\3\0\3\3\31\0\11\3\1\u02d9\20\3"+
    "\2\0\1\3\3\0\3\3\31\0\14\3\1\u02da\15\3"+
    "\2\0\1\3\3\0\3\3\31\0\16\3\1\u02db\13\3"+
    "\2\0\1\3\3\0\3\3\31\0\7\3\1\u02dc\22\3"+
    "\2\0\1\3\3\0\3\3\31\0\6\3\1\u02dd\23\3"+
    "\2\0\1\3\3\0\3\3\31\0\7\3\1\u02de\22\3"+
    "\2\0\1\3\3\0\3\3\31\0\5\3\1\u02df\24\3"+
    "\2\0\1\3\3\0\3\3\31\0\2\3\1\u02e0\27\3"+
    "\2\0\1\3\3\0\2\3\1\u02e1\31\0\32\3\2\0"+
    "\1\3\3\0\3\3\31\0\12\3\1\u02e2\17\3\2\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u02e3\25\3\2\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u02e4\25\3\2\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u02e5\25\3\2\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u02e6\25\3\2\0"+
    "\1\3\3\0\3\3\31\0\6\3\1\u02e7\13\3\1\u02e8"+
    "\7\3\2\0\1\3\3\0\3\3\31\0\10\3\1\u02e9"+
    "\21\3\2\0\1\3\3\0\3\3\31\0\16\3\1\u02ea"+
    "\13\3\2\0\1\3\3\0\3\3\31\0\5\3\1\u02eb"+
    "\24\3\2\0\1\3\3\0\3\3\31\0\1\u02ec\31\3"+
    "\2\0\1\3\3\0\3\3\31\0\1\3\1\u02ed\30\3"+
    "\2\0\1\3\3\0\3\3\31\0\7\3\1\u02ee\22\3"+
    "\2\0\1\3\3\0\3\3\31\0\2\3\1\u02ef\27\3"+
    "\2\0\1\3\3\0\3\3\31\0\1\u02f0\31\3\2\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u02f1\25\3\2\0"+
    "\1\3\3\0\3\3\31\0\17\3\1\u02f2\12\3\2\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u02f3\25\3\2\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u02f4\27\3\2\0"+
    "\1\3\3\0\2\3\1\u02f5\31\0\1\u02f6\31\3\2\0"+
    "\1\3\3\0\3\3\31\0\24\3\1\u02f7\5\3\2\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u02f8\27\3\2\0"+
    "\1\3\3\0\3\3\31\0\20\3\1\u02f9\11\3\2\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u02fa\27\3\2\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u02fb\27\3\2\0"+
    "\1\3\3\0\3\3\31\0\1\u02fc\15\3\1\u02fd\13\3"+
    "\2\0\1\3\3\0\3\3\31\0\2\3\1\u02fe\27\3"+
    "\2\0\1\3\3\0\3\3\31\0\4\3\1\u02ff\25\3"+
    "\2\0\1\3\3\0\3\3\31\0\2\3\1\u0300\27\3"+
    "\2\0\1\3\3\0\3\3\31\0\1\u0301\31\3\2\0"+
    "\1\3\3\0\3\3\31\0\25\3\1\u0302\4\3\2\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u0303\25\3\2\0"+
    "\1\3\3\0\3\3\31\0\14\3\1\u0304\15\3\2\0"+
    "\1\3\3\0\3\3\31\0\16\3\1\u0305\13\3\2\0"+
    "\1\3\3\0\3\3\31\0\6\3\1\u0306\23\3\2\0"+
    "\1\3\3\0\3\3\31\0\7\3\1\u0307\22\3\2\0"+
    "\1\3\3\0\3\3\31\0\16\3\1\u0308\13\3\2\0"+
    "\1\3\3\0\3\3\31\0\1\u0309\31\3\2\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u030a\27\3\2\0\1\3"+
    "\3\0\3\3\31\0\16\3\1\u030b\13\3\2\0\1\3"+
    "\3\0\3\3\31\0\1\u030c\31\3\2\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u030d\27\3\2\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\u030e\25\3\2\0\1\3\3\0"+
    "\3\3\31\0\5\3\1\u030f\24\3\2\0\1\3\3\0"+
    "\3\3\31\0\1\u0310\31\3\2\0\1\3\3\0\3\3"+
    "\31\0\16\3\1\u0311\13\3\2\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u0312\27\3\2\0\1\3\3\0\3\3"+
    "\31\0\16\3\1\u0313\13\3\2\0\1\3\3\0\3\3"+
    "\31\0\4\3\1\u0314\25\3\2\0\1\3\3\0\3\3"+
    "\31\0\4\3\1\u0315\25\3\2\0\1\3\3\0\3\3"+
    "\31\0\25\3\1\u0316\4\3\2\0\1\3\3\0\3\3"+
    "\31\0\27\3\1\u0317\2\3\2\0\1\3\3\0\3\3"+
    "\31\0\6\3\1\u0318\23\3\2\0\1\3\3\0\3\3"+
    "\31\0\14\3\1\u0319\15\3\2\0\1\3\3\0\3\3"+
    "\31\0\20\3\1\u031a\11\3\2\0\1\3\3\0\3\3"+
    "\31\0\4\3\1\u031b\25\3\2\0\1\3\3\0\3\3"+
    "\31\0\5\3\1\u031c\24\3\2\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u031d\27\3\2\0\1\3\3\0\3\3"+
    "\31\0\22\3\1\u031e\7\3\2\0\1\3\3\0\3\3"+
    "\31\0\14\3\1\u031f\15\3\2\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u0320\27\3\2\0\1\3\3\0\3\3"+
    "\31\0\6\3\1\u0321\23\3\2\0\1\3\3\0\3\3"+
    "\31\0\24\3\1\u0322\5\3\2\0\1\3\3\0\3\3"+
    "\31\0\17\3\1\u0323\12\3\2\0\1\3\3\0\3\3"+
    "\31\0\7\3\1\u0324\22\3\2\0\1\3\3\0\3\3"+
    "\31\0\4\3\1\u0325\25\3\2\0\1\3\3\0\3\3"+
    "\31\0\3\3\1\u0326\26\3\2\0\1\3\3\0\3\3"+
    "\31\0\11\3\1\u0327\20\3\2\0\1\3\3\0\3\3"+
    "\31\0\5\3\1\u0328\14\3\1\u0329\7\3\2\0\1\3"+
    "\3\0\3\3\31\0\5\3\1\u032a\24\3\2\0\1\3"+
    "\3\0\3\3\31\0\6\3\1\u032b\23\3\2\0\1\3"+
    "\3\0\3\3\31\0\14\3\1\u032c\15\3\2\0\1\3"+
    "\3\0\3\3\31\0\4\3\1\u032d\25\3\2\0\1\3"+
    "\3\0\3\3\31\0\16\3\1\u032e\13\3\2\0\1\3"+
    "\3\0\3\3\31\0\5\3\1\u032f\1\u0330\23\3\2\0"+
    "\1\3\3\0\3\3\31\0\1\u0331\31\3\2\0\1\3"+
    "\3\0\3\3\31\0\1\3\1\u0332\30\3\2\0\1\3"+
    "\3\0\3\3\31\0\17\3\1\u0333\12\3\2\0\1\3"+
    "\3\0\3\3\31\0\11\3\1\u0334\20\3\2\0\1\3"+
    "\3\0\3\3\31\0\16\3\1\u0335\13\3\2\0\1\3"+
    "\3\0\3\3\31\0\5\3\1\u0336\24\3\2\0\1\3"+
    "\3\0\3\3\31\0\6\3\1\u0337\23\3\2\0\1\3"+
    "\3\0\3\3\31\0\16\3\1\u0338\13\3\2\0\1\3"+
    "\3\0\3\3\31\0\6\3\1\u0339\23\3\2\0\1\3"+
    "\3\0\3\3\31\0\16\3\1\u033a\13\3\2\0\1\3"+
    "\3\0\3\3\31\0\7\3\1\u033b\22\3\2\0\1\3"+
    "\3\0\3\3\31\0\25\3\1\u033c\4\3\2\0\1\3"+
    "\3\0\3\3\31\0\1\3\1\u033d\30\3\2\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u033e\27\3\2\0\1\3"+
    "\3\0\3\3\31\0\4\3\1\u033f\25\3\2\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u0340\27\3\2\0\1\3"+
    "\3\0\3\3\31\0\7\3\1\u0341\22\3\2\0\1\3"+
    "\3\0\3\3\31\0\5\3\1\u0342\24\3\2\0\1\3"+
    "\3\0\3\3\31\0\1\u0343\17\3\1\u0344\11\3\2\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u0345\25\3\2\0"+
    "\1\3\3\0\3\3\31\0\1\u0346\31\3\2\0\1\3"+
    "\3\0\3\3\31\0\5\3\1\u0347\24\3\2\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u0348\27\3\2\0\1\3"+
    "\3\0\3\3\31\0\4\3\1\u0349\25\3\2\0\1\3"+
    "\3\0\3\3\31\0\1\3\1\u034a\1\3\1\u034b\1\3"+
    "\1\u034c\23\3\1\u034d\2\0\1\3\3\0\3\3\31\0"+
    "\20\3\1\u034e\4\3\1\u034f\4\3\2\0\1\3\3\0"+
    "\3\3\31\0\5\3\1\u0350\24\3\2\0\1\3\3\0"+
    "\3\3\31\0\14\3\1\u0351\15\3\2\0\1\3\3\0"+
    "\3\3\31\0\5\3\1\u0352\24\3\2\0\1\3\3\0"+
    "\3\3\31\0\7\3\1\u0353\22\3\2\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\u0354\25\3\2\0\1\3\3\0"+
    "\3\3\31\0\13\3\1\u0355\16\3\2\0\1\3\3\0"+
    "\3\3\31\0\1\u0356\31\3\2\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u0357\27\3\2\0\1\3\3\0\3\3"+
    "\31\0\16\3\1\u0358\13\3\2\0\1\3\3\0\3\3"+
    "\31\0\12\3\1\u0359\17\3\2\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u035a\27\3\2\0\1\3\3\0\3\3"+
    "\31\0\4\3\1\u035b\25\3\2\0\1\3\3\0\3\3"+
    "\31\0\7\3\1\u035c\22\3\2\0\1\3\3\0\3\3"+
    "\31\0\21\3\1\u035d\10\3\2\0\1\3\3\0\3\3"+
    "\31\0\12\3\1\u035e\17\3\2\0\1\3\3\0\3\3"+
    "\31\0\10\3\1\u035f\21\3\2\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u0360\27\3\2\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u0361\27\3\2\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u0362\27\3\2\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u0363\27\3\2\0\1\3\3\0\3\3"+
    "\31\0\16\3\1\u0364\13\3\2\0\1\3\3\0\3\3"+
    "\31\0\12\3\1\u0365\17\3\2\0\1\3\3\0\3\3"+
    "\31\0\16\3\1\u0366\13\3\2\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u0367\27\3\2\0\1\3\3\0\3\3"+
    "\31\0\22\3\1\u0368\7\3\2\0\1\3\3\0\3\3"+
    "\31\0\1\u0369\31\3\2\0\1\3\3\0\3\3\31\0"+
    "\6\3\1\u036a\23\3\2\0\1\3\3\0\3\3\31\0"+
    "\5\3\1\u036b\24\3\2\0\1\3\3\0\3\3\31\0"+
    "\14\3\1\u036c\15\3\2\0\1\3\3\0\3\3\31\0"+
    "\4\3\1\u036d\25\3\2\0\1\3\3\0\3\3\31\0"+
    "\1\u036e\31\3\2\0\1\3\3\0\3\3\31\0\16\3"+
    "\1\u036f\13\3\2\0\1\3\3\0\3\3\31\0\20\3"+
    "\1\u0370\11\3\2\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u0371\27\3\2\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u0372\27\3\2\0\1\3\3\0\3\3\31\0\7\3"+
    "\1\u0373\22\3\2\0\1\3\3\0\3\3\31\0\5\3"+
    "\1\u0374\24\3\2\0\1\3\3\0\3\3\31\0\5\3"+
    "\1\u0375\24\3\2\0\1\3\3\0\3\3\31\0\1\u0376"+
    "\31\3\2\0\1\3\3\0\3\3\31\0\16\3\1\u0377"+
    "\13\3\2\0\1\3\3\0\3\3\31\0\20\3\1\u0378"+
    "\11\3\2\0\1\3\3\0\3\3\31\0\16\3\1\u0379"+
    "\13\3\2\0\1\3\3\0\3\3\31\0\6\3\1\u037a"+
    "\23\3\2\0\1\3\3\0\3\3\31\0\6\3\1\u037b"+
    "\23\3\2\0\1\3\3\0\3\3\31\0\2\3\1\u037c"+
    "\27\3\2\0\1\3\3\0\3\3\31\0\6\3\1\u037d"+
    "\23\3\2\0\1\3\3\0\3\3\31\0\16\3\1\u037e"+
    "\13\3\2\0\1\3\3\0\3\3\31\0\4\3\1\u037f"+
    "\25\3\2\0\1\3\3\0\3\3\31\0\6\3\1\u0380"+
    "\23\3\2\0\1\3\3\0\3\3\31\0\11\3\1\u0381"+
    "\20\3\2\0\1\3\3\0\3\3\31\0\4\3\1\u0382"+
    "\25\3\2\0\1\3\3\0\3\3\31\0\17\3\1\u0383"+
    "\12\3\2\0\1\3\3\0\3\3\31\0\7\3\1\u0384"+
    "\22\3\2\0\1\3\42\0\1\u0385\34\0\3\3\31\0"+
    "\13\3\1\u0386\16\3\2\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\u0387\27\3\2\0\1\3\3\0\3\3\31\0"+
    "\17\3\1\u0388\12\3\2\0\1\3\3\0\3\3\31\0"+
    "\16\3\1\u0389\13\3\2\0\1\3\3\0\3\3\31\0"+
    "\5\3\1\u038a\24\3\2\0\1\3\3\0\3\3\31\0"+
    "\1\u038b\6\3\1\u038c\22\3\2\0\1\3\3\0\3\3"+
    "\31\0\16\3\1\u038d\13\3\2\0\1\3\3\0\3\3"+
    "\31\0\1\u038e\31\3\2\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\u038f\27\3\2\0\1\3\3\0\3\3\31\0"+
    "\20\3\1\u0390\11\3\2\0\1\3\3\0\3\3\31\0"+
    "\4\3\1\u0391\25\3\2\0\1\3\3\0\3\3\31\0"+
    "\20\3\1\u0392\11\3\2\0\1\3\3\0\3\3\31\0"+
    "\1\u0393\31\3\2\0\1\3\3\0\3\3\31\0\26\3"+
    "\1\u0394\3\3\2\0\1\3\3\0\3\3\31\0\5\3"+
    "\1\u0395\24\3\2\0\1\3\3\0\3\3\31\0\20\3"+
    "\1\u0396\11\3\2\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u0397\27\3\2\0\1\3\3\0\3\3\31\0\6\3"+
    "\1\u0398\23\3\2\0\1\3\3\0\3\3\31\0\6\3"+
    "\1\u0399\23\3\2\0\1\3\3\0\3\3\31\0\16\3"+
    "\1\u039a\13\3\2\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u039b\27\3\2\0\1\3\3\0\3\3\31\0\10\3"+
    "\1\u039c\21\3\2\0\1\3\3\0\3\3\31\0\13\3"+
    "\1\u039d\16\3\2\0\1\3\3\0\3\3\31\0\11\3"+
    "\1\u039e\20\3\2\0\1\3\3\0\3\3\31\0\16\3"+
    "\1\u039f\13\3\2\0\1\3\3\0\3\3\31\0\5\3"+
    "\1\u03a0\24\3\2\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u03a1\25\3\2\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u03a2\27\3\2\0\1\3\3\0\3\3\31\0\1\u03a3"+
    "\31\3\2\0\1\3\3\0\3\3\31\0\14\3\1\u03a4"+
    "\15\3\2\0\1\3\3\0\3\3\31\0\16\3\1\u03a5"+
    "\13\3\2\0\1\3\3\0\3\3\31\0\1\u03a6\31\3"+
    "\2\0\1\3\3\0\3\3\31\0\6\3\1\u03a7\23\3"+
    "\2\0\1\3\3\0\3\3\31\0\10\3\1\u03a8\21\3"+
    "\2\0\1\3\3\0\3\3\31\0\16\3\1\u03a9\13\3"+
    "\2\0\1\3\3\0\3\3\31\0\14\3\1\u03aa\15\3"+
    "\2\0\1\3\3\0\3\3\31\0\11\3\1\u03ab\20\3"+
    "\2\0\1\3\3\0\3\3\31\0\12\3\1\u03ac\17\3"+
    "\2\0\1\3\3\0\3\3\31\0\1\u03ad\31\3\2\0"+
    "\1\3\3\0\3\3\31\0\6\3\1\u03ae\23\3\2\0"+
    "\1\3\3\0\3\3\31\0\20\3\1\u03af\11\3\2\0"+
    "\1\3\3\0\3\3\31\0\10\3\1\u03b0\21\3\2\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u03b1\27\3\2\0"+
    "\1\3\3\0\3\3\31\0\16\3\1\u03b2\13\3\2\0"+
    "\1\3\3\0\3\3\31\0\1\u03b3\31\3\2\0\1\3"+
    "\3\0\3\3\31\0\5\3\1\u03b4\24\3\2\0\1\3"+
    "\3\0\3\3\31\0\1\u03b5\31\3\2\0\1\3\3\0"+
    "\3\3\31\0\22\3\1\u03b6\7\3\2\0\1\3\3\0"+
    "\3\3\31\0\1\u03b7\31\3\2\0\1\3\3\0\3\3"+
    "\31\0\5\3\1\u03b8\24\3\2\0\1\3\3\0\3\3"+
    "\31\0\20\3\1\u03b9\11\3\2\0\1\3\3\0\3\3"+
    "\31\0\1\3\1\u03ba\3\3\1\u03bb\24\3\2\0\1\3"+
    "\3\0\3\3\31\0\1\3\1\u03bc\30\3\2\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u03bd\27\3\2\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u03be\27\3\2\0\1\3"+
    "\3\0\3\3\31\0\7\3\1\u03bf\22\3\2\0\1\3"+
    "\3\0\3\3\31\0\11\3\1\u03c0\20\3\2\0\1\3"+
    "\3\0\3\3\31\0\13\3\1\u03c1\16\3\2\0\1\3"+
    "\3\0\3\3\31\0\6\3\1\u03c2\23\3\2\0\1\3"+
    "\3\0\3\3\31\0\5\3\1\u03c3\24\3\2\0\1\3"+
    "\3\0\3\3\31\0\17\3\1\u03c4\12\3\2\0\1\3"+
    "\3\0\3\3\31\0\17\3\1\u03c5\12\3\2\0\1\3"+
    "\3\0\3\3\31\0\16\3\1\u03c6\13\3\2\0\1\3"+
    "\3\0\3\3\31\0\6\3\1\u03c7\23\3\2\0\1\3"+
    "\3\0\3\3\31\0\11\3\1\u03c8\20\3\2\0\1\3"+
    "\3\0\3\3\31\0\5\3\1\u03c9\24\3\2\0\1\3"+
    "\3\0\3\3\31\0\5\3\1\u03ca\24\3\2\0\1\3"+
    "\3\0\3\3\31\0\4\3\1\u03cb\25\3\2\0\1\3"+
    "\3\0\3\3\31\0\6\3\1\u03cc\23\3\2\0\1\3"+
    "\3\0\3\3\31\0\4\3\1\u03cd\25\3\2\0\1\3"+
    "\3\0\3\3\31\0\4\3\1\u03ce\25\3\2\0\1\3"+
    "\3\0\3\3\31\0\22\3\1\u03cf\7\3\2\0\1\3"+
    "\3\0\3\3\31\0\20\3\1\u03d0\11\3\2\0\1\3"+
    "\3\0\3\3\31\0\1\u03d1\31\3\2\0\1\3\3\0"+
    "\3\3\31\0\7\3\1\u03d2\22\3\2\0\1\3\3\0"+
    "\3\3\31\0\6\3\1\u03d3\23\3\2\0\1\3\3\0"+
    "\3\3\31\0\17\3\1\u03d4\12\3\2\0\1\3\3\0"+
    "\3\3\31\0\5\3\1\u03d5\24\3\2\0\1\3\3\0"+
    "\3\3\31\0\5\3\1\u03d6\24\3\2\0\1\3\3\0"+
    "\3\3\31\0\5\3\1\u03d7\24\3\2\0\1\3\3\0"+
    "\3\3\31\0\7\3\1\u03d8\22\3\2\0\1\3\3\0"+
    "\3\3\31\0\1\3\1\u03d9\30\3\2\0\1\3\3\0"+
    "\3\3\31\0\11\3\1\u03da\20\3\2\0\1\3\3\0"+
    "\3\3\31\0\16\3\1\u03db\13\3\2\0\1\3\3\0"+
    "\3\3\31\0\16\3\1\u03dc\13\3\2\0\1\3\3\0"+
    "\3\3\31\0\20\3\1\u03dd\11\3\2\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u03de\27\3\2\0\1\3\3\0"+
    "\3\3\31\0\26\3\1\u03df\3\3\2\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u03e0\27\3\2\0\1\3\3\0"+
    "\3\3\31\0\13\3\1\u03e1\16\3\2\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u03e2\27\3\2\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u03e3\27\3\2\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u03e4\27\3\2\0\1\3\3\0"+
    "\3\3\31\0\16\3\1\u03e5\13\3\2\0\1\3\3\0"+
    "\3\3\31\0\1\u03e6\31\3\2\0\1\3\3\0\3\3"+
    "\31\0\17\3\1\u03e7\7\3\1\u03e8\2\3\2\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u03e9\27\3\2\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u03ea\27\3\2\0\1\3"+
    "\3\0\3\3\31\0\1\3\1\u03eb\30\3\2\0\1\3"+
    "\3\0\3\3\31\0\1\u03ec\31\3\2\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\u03ed\25\3\2\0\1\3\3\0"+
    "\3\3\31\0\17\3\1\u03ee\12\3\2\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\u03ef\25\3\2\0\1\3\3\0"+
    "\3\3\31\0\16\3\1\u03f0\13\3\2\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u03f1\27\3\2\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\u03f2\25\3\2\0\1\3\3\0"+
    "\3\3\31\0\20\3\1\u03f3\11\3\2\0\1\3\3\0"+
    "\3\3\31\0\16\3\1\u03f4\13\3\2\0\1\3\3\0"+
    "\3\3\31\0\1\3\1\u03f5\30\3\2\0\1\3\3\0"+
    "\3\3\31\0\20\3\1\u03f6\11\3\2\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\u03f7\25\3\2\0\1\3\3\0"+
    "\3\3\31\0\11\3\1\u03f8\5\3\1\u03f9\12\3\2\0"+
    "\1\3\3\0\3\3\31\0\7\3\1\u03fa\22\3\2\0"+
    "\1\3\3\0\3\3\31\0\1\u03fb\31\3\2\0\1\3"+
    "\3\0\3\3\31\0\20\3\1\u03fc\11\3\2\0\1\3"+
    "\3\0\3\3\31\0\5\3\1\u03fd\24\3\2\0\1\3"+
    "\3\0\3\3\31\0\25\3\1\u03fe\4\3\2\0\1\3"+
    "\3\0\3\3\31\0\16\3\1\u03ff\13\3\2\0\1\3"+
    "\3\0\3\3\31\0\5\3\1\u0400\24\3\2\0\1\3"+
    "\3\0\3\3\31\0\1\3\1\u0401\30\3\2\0\1\3"+
    "\3\0\3\3\31\0\1\u0402\31\3\2\0\1\3\3\0"+
    "\3\3\31\0\5\3\1\u0403\24\3\2\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\u0404\25\3\2\0\1\3\3\0"+
    "\2\3\1\u0405\31\0\32\3\2\0\1\3\3\0\3\3"+
    "\31\0\1\u0406\31\3\2\0\1\3\3\0\3\3\31\0"+
    "\25\3\1\u0407\4\3\2\0\1\3\3\0\3\3\31\0"+
    "\20\3\1\u0408\11\3\2\0\1\3\3\0\3\3\31\0"+
    "\14\3\1\u0409\15\3\2\0\1\3\3\0\3\3\31\0"+
    "\6\3\1\u040a\23\3\2\0\1\3\3\0\3\3\31\0"+
    "\16\3\1\u040b\13\3\2\0\1\3\3\0\3\3\31\0"+
    "\4\3\1\u040c\25\3\2\0\1\3\3\0\3\3\31\0"+
    "\1\u040d\31\3\2\0\1\3\3\0\3\3\31\0\7\3"+
    "\1\u040e\22\3\2\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u040f\25\3\2\0\1\3\3\0\3\3\31\0\23\3"+
    "\1\u0410\6\3\2\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u0411\27\3\2\0\1\3\3\0\3\3\31\0\1\u0412"+
    "\1\3\1\u0413\27\3\2\0\1\3\3\0\3\3\31\0"+
    "\20\3\1\u0414\11\3\2\0\1\3\3\0\3\3\31\0"+
    "\4\3\1\u0415\25\3\2\0\1\3\3\0\3\3\31\0"+
    "\27\3\1\u0416\2\3\2\0\1\3\3\0\3\3\31\0"+
    "\6\3\1\u0417\23\3\2\0\1\3\3\0\3\3\31\0"+
    "\1\u0418\31\3\2\0\1\3\3\0\3\3\31\0\6\3"+
    "\1\u0419\23\3\2\0\1\3\3\0\3\3\31\0\17\3"+
    "\1\u041a\12\3\2\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u041b\25\3\2\0\1\3\3\0\3\3\31\0\16\3"+
    "\1\u041c\13\3\2\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u041d\25\3\2\0\1\3\3\0\3\3\31\0\16\3"+
    "\1\u041e\13\3\2\0\1\3\3\0\3\3\31\0\17\3"+
    "\1\u041f\12\3\2\0\1\3\3\0\3\3\31\0\25\3"+
    "\1\u0420\4\3\2\0\1\3\3\0\3\3\31\0\11\3"+
    "\1\u0421\20\3\2\0\1\3\3\0\3\3\31\0\1\3"+
    "\1\u0422\30\3\2\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u0423\25\3\2\0\1\3\3\0\3\3\31\0\1\u0424"+
    "\1\3\1\u0425\27\3\2\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\u0426\27\3\2\0\1\3\3\0\3\3\31\0"+
    "\7\3\1\u0427\22\3\2\0\1\3\3\0\3\3\31\0"+
    "\13\3\1\u0428\1\3\1\u0429\14\3\2\0\1\3\3\0"+
    "\3\3\31\0\17\3\1\u042a\12\3\2\0\1\3\3\0"+
    "\3\3\31\0\15\3\1\u042b\14\3\2\0\1\3\3\0"+
    "\3\3\31\0\11\3\1\u042c\20\3\2\0\1\3\3\0"+
    "\3\3\31\0\6\3\1\u042d\23\3\2\0\1\3\3\0"+
    "\3\3\31\0\11\3\1\u042e\20\3\2\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u042f\27\3\2\0\1\3\3\0"+
    "\3\3\31\0\1\u0430\31\3\2\0\1\3\3\0\3\3"+
    "\31\0\4\3\1\u0431\25\3\2\0\1\3\3\0\3\3"+
    "\31\0\16\3\1\u0432\13\3\2\0\1\3\41\0\1\u0433"+
    "\35\0\3\3\31\0\4\3\1\u0434\25\3\2\0\1\3"+
    "\3\0\3\3\31\0\1\u0435\31\3\2\0\1\3\3\0"+
    "\3\3\31\0\23\3\1\u0436\6\3\2\0\1\3\3\0"+
    "\3\3\31\0\1\u0437\31\3\2\0\1\3\3\0\3\3"+
    "\31\0\11\3\1\u0438\20\3\2\0\1\3\3\0\3\3"+
    "\31\0\1\u0439\31\3\2\0\1\3\3\0\3\3\31\0"+
    "\6\3\1\u043a\23\3\2\0\1\3\3\0\3\3\31\0"+
    "\4\3\1\u043b\25\3\2\0\1\3\3\0\3\3\31\0"+
    "\5\3\1\u043c\24\3\2\0\1\3\3\0\3\3\31\0"+
    "\6\3\1\u043d\23\3\2\0\1\3\3\0\3\3\31\0"+
    "\1\u043e\31\3\2\0\1\3\3\0\3\3\31\0\6\3"+
    "\1\u043f\23\3\2\0\1\3\3\0\3\3\31\0\7\3"+
    "\1\u0440\22\3\2\0\1\3\3\0\3\3\31\0\1\u0441"+
    "\31\3\2\0\1\3\3\0\3\3\31\0\5\3\1\u0442"+
    "\24\3\2\0\1\3\3\0\3\3\31\0\6\3\1\u0443"+
    "\23\3\2\0\1\3\3\0\3\3\31\0\3\3\1\u0444"+
    "\26\3\2\0\1\3\3\0\3\3\31\0\7\3\1\u0445"+
    "\22\3\2\0\1\3\3\0\3\3\31\0\17\3\1\u0446"+
    "\12\3\2\0\1\3\3\0\3\3\31\0\27\3\1\u0447"+
    "\2\3\2\0\1\3\3\0\3\3\31\0\6\3\1\u0448"+
    "\23\3\2\0\1\3\3\0\3\3\31\0\16\3\1\u0449"+
    "\13\3\2\0\1\3\3\0\3\3\31\0\16\3\1\u044a"+
    "\13\3\2\0\1\3\3\0\3\3\31\0\1\u044b\31\3"+
    "\2\0\1\3\3\0\3\3\31\0\11\3\1\u044c\20\3"+
    "\2\0\1\3\3\0\3\3\31\0\2\3\1\u044d\27\3"+
    "\2\0\1\3\3\0\3\3\31\0\11\3\1\u044e\20\3"+
    "\2\0\1\3\3\0\3\3\31\0\6\3\1\u044f\23\3"+
    "\2\0\1\3\3\0\3\3\31\0\1\3\1\u0450\30\3"+
    "\2\0\1\3\3\0\3\3\31\0\7\3\1\u0451\22\3"+
    "\2\0\1\3\3\0\3\3\31\0\1\u0452\31\3\2\0"+
    "\1\3\3\0\3\3\31\0\11\3\1\u0453\20\3\2\0"+
    "\1\3\3\0\3\3\31\0\17\3\1\u0454\12\3\2\0"+
    "\1\3\3\0\3\3\31\0\24\3\1\u0455\5\3\2\0"+
    "\1\3\3\0\3\3\31\0\1\u0456\31\3\2\0\1\3"+
    "\3\0\3\3\31\0\22\3\1\u0457\7\3\2\0\1\3"+
    "\3\0\3\3\31\0\22\3\1\u0458\7\3\2\0\1\3"+
    "\3\0\3\3\31\0\20\3\1\u0459\11\3\2\0\1\3"+
    "\3\0\3\3\31\0\3\3\1\u045a\26\3\2\0\1\3"+
    "\3\0\3\3\31\0\20\3\1\u045b\11\3\2\0\1\3"+
    "\3\0\3\3\31\0\25\3\1\u045c\4\3\2\0\1\3"+
    "\3\0\3\3\31\0\20\3\1\u045d\11\3\2\0\1\3"+
    "\3\0\3\3\31\0\11\3\1\u045e\20\3\2\0\1\3"+
    "\3\0\3\3\31\0\6\3\1\u045f\23\3\2\0\1\3"+
    "\3\0\3\3\31\0\6\3\1\u0460\23\3\2\0\1\3"+
    "\3\0\3\3\31\0\1\3\1\u0461\30\3\2\0\1\3"+
    "\3\0\3\3\31\0\22\3\1\u0462\7\3\2\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u0463\27\3\2\0\1\3"+
    "\3\0\3\3\31\0\5\3\1\u0464\24\3\2\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u0465\27\3\2\0\1\3"+
    "\3\0\3\3\31\0\4\3\1\u0466\25\3\2\0\1\3"+
    "\3\0\3\3\31\0\20\3\1\u0467\11\3\2\0\1\3"+
    "\3\0\3\3\31\0\4\3\1\u0468\25\3\2\0\1\3"+
    "\3\0\3\3\31\0\11\3\1\u0469\20\3\2\0\1\3"+
    "\3\0\3\3\31\0\13\3\1\u046a\16\3\2\0\1\3"+
    "\3\0\3\3\31\0\6\3\1\u046b\23\3\2\0\1\3"+
    "\3\0\3\3\31\0\14\3\1\u046c\15\3\2\0\1\3"+
    "\3\0\3\3\31\0\4\3\1\u046d\25\3\2\0\1\3"+
    "\3\0\3\3\31\0\1\u046e\31\3\2\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\u046f\25\3\2\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u0470\13\3\1\u0471\13\3\2\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u0472\27\3\2\0"+
    "\1\3\3\0\3\3\31\0\11\3\1\u0473\20\3\2\0"+
    "\1\3\3\0\3\3\31\0\7\3\1\u0474\22\3\2\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u0475\25\3\2\0"+
    "\1\3\3\0\3\3\31\0\16\3\1\u0476\13\3\2\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u0477\27\3\2\0"+
    "\1\3\3\0\3\3\31\0\27\3\1\u0478\2\3\2\0"+
    "\1\3\3\0\3\3\31\0\21\3\1\u0479\10\3\2\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u047a\27\3\2\0"+
    "\1\3\3\0\3\3\31\0\14\3\1\u047b\15\3\2\0"+
    "\1\3\3\0\3\3\31\0\20\3\1\u047c\11\3\2\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u047d\25\3\2\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u047e\25\3\2\0"+
    "\1\3\3\0\3\3\31\0\6\3\1\u047f\23\3\2\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u0480\25\3\2\0"+
    "\1\3\3\0\3\3\31\0\6\3\1\u0481\23\3\2\0"+
    "\1\3\3\0\3\3\31\0\6\3\1\u0482\23\3\2\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u0483\25\3\2\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u0484\25\3\2\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u0485\27\3\2\0"+
    "\1\3\3\0\3\3\31\0\1\u0486\31\3\2\0\1\3"+
    "\3\0\3\3\31\0\5\3\1\u0487\24\3\2\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u0488\27\3\2\0\1\3"+
    "\3\0\3\3\31\0\7\3\1\u0489\22\3\2\0\1\3"+
    "\3\0\3\3\31\0\16\3\1\u048a\13\3\2\0\1\3"+
    "\3\0\3\3\31\0\16\3\1\u048b\13\3\2\0\1\3"+
    "\3\0\3\3\31\0\1\u048c\31\3\2\0\1\3\3\0"+
    "\3\3\31\0\5\3\1\u048d\24\3\2\0\1\3\3\0"+
    "\3\3\31\0\6\3\1\u048e\23\3\2\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\u048f\25\3\2\0\1\3\3\0"+
    "\3\3\31\0\6\3\1\u0490\23\3\2\0\1\3\3\0"+
    "\3\3\31\0\16\3\1\u0491\13\3\2\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\u0492\25\3\2\0\1\3\3\0"+
    "\2\3\1\u0493\31\0\32\3\2\0\1\3\3\0\3\3"+
    "\31\0\15\3\1\u0494\14\3\2\0\1\3\3\0\3\3"+
    "\31\0\26\3\1\u0495\3\3\2\0\1\3\3\0\3\3"+
    "\31\0\16\3\1\u0496\13\3\2\0\1\3\3\0\2\3"+
    "\1\u0497\31\0\32\3\2\0\1\3\3\0\3\3\31\0"+
    "\6\3\1\u0498\23\3\2\0\1\3\3\0\3\3\31\0"+
    "\20\3\1\u0499\11\3\2\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\u049a\27\3\2\0\1\3\3\0\3\3\31\0"+
    "\4\3\1\u049b\25\3\2\0\1\3\3\0\3\3\31\0"+
    "\6\3\1\u049c\23\3\2\0\1\3\3\0\3\3\31\0"+
    "\17\3\1\u049d\12\3\2\0\1\3\3\0\3\3\31\0"+
    "\7\3\1\u049e\22\3\2\0\1\3\3\0\3\3\31\0"+
    "\4\3\1\u049f\25\3\2\0\1\3\3\0\3\3\31\0"+
    "\7\3\1\u04a0\22\3\2\0\1\3\3\0\3\3\31\0"+
    "\26\3\1\u04a1\3\3\2\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\u04a2\27\3\2\0\1\3\3\0\3\3\31\0"+
    "\17\3\1\u04a3\12\3\2\0\1\3\3\0\3\3\31\0"+
    "\13\3\1\u04a4\16\3\2\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\u04a5\27\3\2\0\1\3\3\0\3\3\31\0"+
    "\5\3\1\u04a6\24\3\2\0\1\3\3\0\3\3\31\0"+
    "\5\3\1\u04a7\24\3\2\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\u04a8\27\3\2\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\u04a9\27\3\2\0\1\3\3\0\3\3\31\0"+
    "\32\3\1\u04aa\1\0\1\3\3\0\3\3\31\0\5\3"+
    "\1\u04ab\24\3\2\0\1\3\3\0\3\3\31\0\22\3"+
    "\1\u04ac\7\3\2\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u04ad\27\3\2\0\1\3\3\0\3\3\31\0\23\3"+
    "\1\u04ae\6\3\2\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u04af\27\3\2\0\1\3\3\0\3\3\31\0\20\3"+
    "\1\u04b0\11\3\2\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u04b1\27\3\2\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u04b2\27\3\2\0\1\3\3\0\3\3\31\0\1\u04b3"+
    "\31\3\2\0\1\3\3\0\2\3\1\u04b4\31\0\32\3"+
    "\2\0\1\3\3\0\3\3\31\0\15\3\1\u04b5\14\3"+
    "\2\0\1\3\3\0\3\3\31\0\1\3\1\u04b6\30\3"+
    "\2\0\1\3\3\0\3\3\31\0\4\3\1\u04b7\25\3"+
    "\2\0\1\3\3\0\3\3\31\0\2\3\1\u04b8\27\3"+
    "\2\0\1\3\3\0\3\3\31\0\4\3\1\u04b9\25\3"+
    "\2\0\1\3\3\0\3\3\31\0\14\3\1\u04ba\15\3"+
    "\2\0\1\3\3\0\3\3\31\0\4\3\1\u04bb\25\3"+
    "\2\0\1\3\3\0\3\3\31\0\2\3\1\u04bc\27\3"+
    "\2\0\1\3\3\0\3\3\31\0\7\3\1\u04bd\22\3"+
    "\2\0\1\3\3\0\3\3\31\0\20\3\1\u04be\11\3"+
    "\2\0\1\3\50\0\1\u04bf\26\0\3\3\31\0\16\3"+
    "\1\u04c0\13\3\2\0\1\3\3\0\3\3\31\0\25\3"+
    "\1\u04c1\4\3\2\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u04c2\27\3\2\0\1\3\3\0\3\3\31\0\5\3"+
    "\1\u04c3\24\3\2\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u04c4\25\3\2\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u04c5\25\3\2\0\1\3\3\0\3\3\31\0\22\3"+
    "\1\u04c6\7\3\2\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u04c7\27\3\2\0\1\3\3\0\3\3\31\0\27\3"+
    "\1\u04c8\2\3\2\0\1\3\3\0\3\3\31\0\25\3"+
    "\1\u04c9\4\3\2\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u04ca\27\3\2\0\1\3\3\0\3\3\31\0\5\3"+
    "\1\u04cb\24\3\2\0\1\3\3\0\3\3\31\0\20\3"+
    "\1\u04cc\11\3\2\0\1\3\3\0\3\3\31\0\7\3"+
    "\1\u04cd\22\3\2\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u04ce\25\3\2\0\1\3\3\0\3\3\31\0\21\3"+
    "\1\u04cf\10\3\2\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u04d0\27\3\2\0\1\3\3\0\3\3\31\0\11\3"+
    "\1\u04d1\20\3\2\0\1\3\3\0\3\3\31\0\22\3"+
    "\1\u04d2\7\3\2\0\1\3\3\0\3\3\31\0\7\3"+
    "\1\u04d3\22\3\2\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u04d4\25\3\2\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u04d5\25\3\2\0\1\3\3\0\3\3\31\0\24\3"+
    "\1\u04d6\5\3\2\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u04d7\25\3\2\0\1\3\3\0\3\3\31\0\11\3"+
    "\1\u04d8\20\3\2\0\1\3\3\0\3\3\31\0\7\3"+
    "\1\u04d9\22\3\2\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u04da\25\3\2\0\1\3\3\0\3\3\31\0\5\3"+
    "\1\u04db\24\3\2\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u04dc\27\3\2\0\1\3\3\0\3\3\31\0\5\3"+
    "\1\u04dd\24\3\2\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u04de\25\3\2\0\1\3\3\0\3\3\31\0\6\3"+
    "\1\u04df\23\3\2\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u04e0\27\3\2\0\1\3\3\0\3\3\31\0\26\3"+
    "\1\u04e1\3\3\2\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u04e2\25\3\2\0\1\3\3\0\2\3\1\u04e3\31\0"+
    "\32\3\2\0\1\3\3\0\3\3\31\0\1\3\1\u04e4"+
    "\30\3\2\0\1\3\3\0\3\3\31\0\2\3\1\u04e5"+
    "\27\3\2\0\1\3\3\0\3\3\31\0\6\3\1\u04e6"+
    "\23\3\2\0\1\3\3\0\3\3\31\0\2\3\1\u04e7"+
    "\27\3\2\0\1\3\3\0\3\3\31\0\16\3\1\u04e8"+
    "\13\3\2\0\1\3\3\0\2\3\1\u04e9\31\0\32\3"+
    "\2\0\1\3\3\0\3\3\31\0\2\3\1\u04ea\27\3"+
    "\2\0\1\3\3\0\3\3\31\0\20\3\1\u04eb\11\3"+
    "\2\0\1\3\3\0\3\3\31\0\17\3\1\u04ec\12\3"+
    "\2\0\1\3\3\0\3\3\31\0\2\3\1\u04ed\27\3"+
    "\2\0\1\3\3\0\3\3\31\0\16\3\1\u04ee\13\3"+
    "\2\0\1\3\3\0\3\3\31\0\16\3\1\u04ef\13\3"+
    "\2\0\1\3\3\0\3\3\31\0\20\3\1\u04f0\11\3"+
    "\2\0\1\3\3\0\3\3\31\0\24\3\1\u04f1\5\3"+
    "\2\0\1\3\3\0\3\3\31\0\20\3\1\u04f2\11\3"+
    "\2\0\1\3\3\0\3\3\31\0\2\3\1\u04f3\27\3"+
    "\2\0\1\3\3\0\3\3\31\0\22\3\1\u04f4\7\3"+
    "\2\0\1\3\3\0\3\3\31\0\5\3\1\u04f5\24\3"+
    "\2\0\1\3\3\0\3\3\31\0\6\3\1\u04f6\23\3"+
    "\2\0\1\3\3\0\3\3\31\0\2\3\1\u04f7\27\3"+
    "\2\0\1\3\3\0\3\3\31\0\2\3\1\u04f8\27\3"+
    "\2\0\1\3\3\0\3\3\31\0\22\3\1\u04f9\7\3"+
    "\2\0\1\3\3\0\3\3\31\0\21\3\1\u04fa\10\3"+
    "\2\0\1\3\3\0\3\3\31\0\20\3\1\u04fb\11\3"+
    "\2\0\1\3\3\0\3\3\31\0\11\3\1\u04fc\20\3"+
    "\2\0\1\3\3\0\3\3\31\0\7\3\1\u04fd\22\3"+
    "\2\0\1\3\3\0\3\3\31\0\7\3\1\u04fe\22\3"+
    "\2\0\1\3\3\0\3\3\31\0\4\3\1\u04ff\25\3"+
    "\2\0\1\3\3\0\3\3\31\0\20\3\1\u0500\11\3"+
    "\2\0\1\3\3\0\3\3\31\0\4\3\1\u0501\25\3"+
    "\2\0\1\3\3\0\3\3\31\0\21\3\1\u0502\10\3"+
    "\2\0\1\3\3\0\2\3\1\u0503\31\0\32\3\2\0"+
    "\1\3\3\0\3\3\31\0\11\3\1\u0504\20\3\2\0"+
    "\1\3\3\0\3\3\31\0\16\3\1\u0505\13\3\2\0"+
    "\1\3\3\0\3\3\31\0\7\3\1\u0506\22\3\2\0"+
    "\1\3\3\0\3\3\31\0\16\3\1\u0507\13\3\2\0"+
    "\1\3\3\0\3\3\31\0\6\3\1\u0508\23\3\2\0"+
    "\1\3\3\0\3\3\31\0\6\3\1\u0509\23\3\2\0"+
    "\1\3\3\0\3\3\31\0\14\3\1\u050a\15\3\2\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u050b\25\3\2\0"+
    "\1\3\3\0\3\3\31\0\5\3\1\u050c\24\3\2\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u050d\27\3\2\0"+
    "\1\3\3\0\3\3\31\0\16\3\1\u050e\13\3\2\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u050f\27\3\2\0"+
    "\1\3\3\0\3\3\31\0\1\u0510\31\3\2\0\1\3"+
    "\3\0\3\3\31\0\17\3\1\u0511\12\3\2\0\1\3"+
    "\3\0\3\3\31\0\5\3\1\u0512\24\3\2\0\1\3"+
    "\3\0\3\3\31\0\4\3\1\u0513\25\3\2\0\1\3"+
    "\3\0\3\3\31\0\17\3\1\u0514\12\3\2\0\1\3"+
    "\3\0\3\3\31\0\3\3\1\u0515\26\3\2\0\1\3"+
    "\3\0\3\3\31\0\5\3\1\u0516\24\3\2\0\1\3"+
    "\61\0\1\u0517\15\0\3\3\31\0\1\u0518\31\3\2\0"+
    "\1\3\3\0\3\3\31\0\6\3\1\u0519\23\3\2\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u051a\25\3\2\0"+
    "\1\3\3\0\3\3\31\0\1\3\1\u051b\30\3\2\0"+
    "\1\3\3\0\3\3\31\0\7\3\1\u051c\22\3\2\0"+
    "\1\3\3\0\3\3\31\0\20\3\1\u051d\11\3\2\0"+
    "\1\3\3\0\3\3\31\0\16\3\1\u051e\13\3\2\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u051f\25\3\2\0"+
    "\1\3\3\0\3\3\31\0\11\3\1\u0520\20\3\2\0"+
    "\1\3\3\0\3\3\31\0\6\3\1\u0521\23\3\2\0"+
    "\1\3\3\0\3\3\31\0\20\3\1\u0522\11\3\2\0"+
    "\1\3\3\0\3\3\31\0\13\3\1\u0523\16\3\2\0"+
    "\1\3\3\0\3\3\31\0\21\3\1\u0524\10\3\2\0"+
    "\1\3\3\0\3\3\31\0\16\3\1\u0525\13\3\2\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u0526\13\3\1\u0527"+
    "\13\3\2\0\1\3\3\0\3\3\31\0\2\3\1\u0528"+
    "\27\3\2\0\1\3\3\0\3\3\31\0\13\3\1\u0529"+
    "\16\3\2\0\1\3\3\0\2\3\1\u052a\31\0\32\3"+
    "\2\0\1\3\3\0\3\3\31\0\6\3\1\u052b\23\3"+
    "\2\0\1\3\3\0\3\3\31\0\5\3\1\u052c\24\3"+
    "\2\0\1\3\3\0\3\3\31\0\21\3\1\u052d\10\3"+
    "\2\0\1\3\3\0\3\3\31\0\2\3\1\u052e\27\3"+
    "\2\0\1\3\3\0\3\3\31\0\14\3\1\u052f\15\3"+
    "\2\0\1\3\3\0\3\3\31\0\2\3\1\u0530\27\3"+
    "\2\0\1\3\3\0\3\3\31\0\16\3\1\u0531\13\3"+
    "\2\0\1\3\3\0\3\3\31\0\20\3\1\u0532\11\3"+
    "\2\0\1\3\3\0\3\3\31\0\2\3\1\u0533\27\3"+
    "\2\0\1\3\3\0\3\3\31\0\26\3\1\u0534\3\3"+
    "\2\0\1\3\3\0\3\3\31\0\4\3\1\u0535\25\3"+
    "\2\0\1\3\3\0\3\3\31\0\4\3\1\u0536\25\3"+
    "\2\0\1\3\3\0\3\3\31\0\20\3\1\u0537\11\3"+
    "\2\0\1\3\3\0\3\3\31\0\20\3\1\u0538\11\3"+
    "\2\0\1\3\3\0\3\3\31\0\1\3\1\u0539\30\3"+
    "\2\0\1\3\3\0\3\3\31\0\22\3\1\u053a\7\3"+
    "\2\0\1\3\3\0\3\3\31\0\5\3\1\u053b\24\3"+
    "\2\0\1\3\3\0\3\3\31\0\6\3\1\u053c\23\3"+
    "\2\0\1\3\3\0\3\3\31\0\1\3\1\u053d\2\3"+
    "\1\u053e\7\3\1\u053f\15\3\2\0\1\3\3\0\3\3"+
    "\31\0\6\3\1\u0540\23\3\2\0\1\3\3\0\3\3"+
    "\31\0\4\3\1\u0541\25\3\2\0\1\3\3\0\3\3"+
    "\31\0\20\3\1\u0542\11\3\2\0\1\3\3\0\3\3"+
    "\31\0\6\3\1\u0543\23\3\2\0\1\3\3\0\3\3"+
    "\31\0\6\3\1\u0544\23\3\2\0\1\3\3\0\3\3"+
    "\31\0\6\3\1\u0545\23\3\2\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u0546\27\3\2\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u0547\27\3\2\0\1\3\3\0\3\3"+
    "\31\0\1\3\1\u0548\30\3\2\0\1\3\3\0\3\3"+
    "\31\0\3\3\1\u0549\26\3\2\0\1\3\3\0\3\3"+
    "\31\0\4\3\1\u054a\25\3\2\0\1\3\3\0\2\3"+
    "\1\u054b\31\0\11\3\1\u054c\20\3\2\0\1\3\3\0"+
    "\3\3\31\0\5\3\1\u054d\24\3\2\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\u054e\25\3\2\0\1\3\3\0"+
    "\3\3\31\0\21\3\1\u054f\10\3\2\0\1\3\3\0"+
    "\3\3\31\0\16\3\1\u0550\13\3\2\0\1\3\3\0"+
    "\3\3\31\0\6\3\1\u0551\23\3\2\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u0552\27\3\2\0\1\3\3\0"+
    "\3\3\31\0\1\u0553\31\3\2\0\1\3\3\0\3\3"+
    "\31\0\14\3\1\u0554\15\3\2\0\1\3\3\0\3\3"+
    "\31\0\17\3\1\u0555\4\3\1\u0556\5\3\2\0\1\3"+
    "\3\0\3\3\31\0\11\3\1\u0557\20\3\2\0\1\3"+
    "\3\0\3\3\31\0\20\3\1\u0558\11\3\2\0\1\3"+
    "\3\0\3\3\31\0\6\3\1\u0559\23\3\2\0\1\3"+
    "\3\0\3\3\31\0\22\3\1\u055a\7\3\2\0\1\3"+
    "\3\0\3\3\31\0\17\3\1\u055b\12\3\2\0\1\3"+
    "\3\0\3\3\31\0\6\3\1\u055c\23\3\2\0\1\3"+
    "\3\0\3\3\31\0\6\3\1\u055d\23\3\2\0\1\3"+
    "\3\0\3\3\31\0\17\3\1\u055e\12\3\2\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u055f\27\3\2\0\1\3"+
    "\3\0\3\3\31\0\21\3\1\u0560\10\3\2\0\1\3"+
    "\3\0\3\3\31\0\16\3\1\u0561\13\3\2\0\1\3"+
    "\3\0\3\3\31\0\4\3\1\u0562\25\3\2\0\1\3"+
    "\44\0\1\u0563\32\0\3\3\31\0\4\3\1\u0564\25\3"+
    "\2\0\1\3\3\0\3\3\31\0\2\3\1\u0565\27\3"+
    "\2\0\1\3\3\0\3\3\31\0\14\3\1\u0566\15\3"+
    "\2\0\1\3\3\0\3\3\31\0\2\3\1\u0567\27\3"+
    "\2\0\1\3\3\0\3\3\31\0\5\3\1\u0568\24\3"+
    "\2\0\1\3\3\0\3\3\31\0\11\3\1\u0569\20\3"+
    "\2\0\1\3\3\0\3\3\31\0\2\3\1\u056a\27\3"+
    "\2\0\1\3\3\0\3\3\31\0\4\3\1\u056b\25\3"+
    "\2\0\1\3\3\0\3\3\31\0\6\3\1\u056c\23\3"+
    "\2\0\1\3\3\0\3\3\31\0\7\3\1\u056d\22\3"+
    "\2\0\1\3\3\0\3\3\31\0\20\3\1\u056e\11\3"+
    "\2\0\1\3\3\0\3\3\31\0\20\3\1\u056f\11\3"+
    "\2\0\1\3\3\0\3\3\31\0\5\3\1\u0570\24\3"+
    "\2\0\1\3\3\0\3\3\31\0\12\3\1\u0571\12\3"+
    "\1\u0572\4\3\2\0\1\3\3\0\3\3\31\0\16\3"+
    "\1\u0573\13\3\2\0\1\3\3\0\3\3\31\0\17\3"+
    "\1\u0574\12\3\2\0\1\3\3\0\3\3\31\0\5\3"+
    "\1\u0575\24\3\2\0\1\3\3\0\3\3\31\0\20\3"+
    "\1\u0576\11\3\2\0\1\3\3\0\3\3\31\0\7\3"+
    "\1\u0577\22\3\2\0\1\3\3\0\3\3\31\0\5\3"+
    "\1\u0578\24\3\2\0\1\3\3\0\3\3\31\0\1\u0579"+
    "\31\3\2\0\1\3\3\0\3\3\31\0\1\u057a\31\3"+
    "\2\0\1\3\3\0\3\3\31\0\12\3\1\u057b\17\3"+
    "\2\0\1\3\3\0\3\3\31\0\5\3\1\u057c\24\3"+
    "\2\0\1\3\3\0\3\3\31\0\6\3\1\u057d\23\3"+
    "\2\0\1\3\3\0\3\3\31\0\4\3\1\u057e\25\3"+
    "\2\0\1\3\3\0\2\3\1\u057f\31\0\32\3\2\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u0580\25\3\2\0"+
    "\1\3\3\0\3\3\31\0\1\u0581\31\3\2\0\1\3"+
    "\3\0\3\3\31\0\16\3\1\u0582\13\3\2\0\1\3"+
    "\3\0\3\3\31\0\17\3\1\u0583\12\3\2\0\1\3"+
    "\3\0\3\3\31\0\1\3\1\u0584\30\3\2\0\1\3"+
    "\3\0\3\3\31\0\1\u0585\31\3\2\0\1\3\3\0"+
    "\3\3\31\0\6\3\1\u0586\23\3\2\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\u0587\25\3\2\0\1\3\3\0"+
    "\3\3\31\0\17\3\1\u0588\12\3\2\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\u0589\25\3\2\0\1\3\3\0"+
    "\3\3\31\0\12\3\1\u058a\17\3\2\0\1\3\3\0"+
    "\3\3\31\0\16\3\1\u058b\13\3\2\0\1\3\3\0"+
    "\3\3\31\0\20\3\1\u058c\11\3\2\0\1\3\3\0"+
    "\3\3\31\0\27\3\1\u058d\2\3\2\0\1\3\3\0"+
    "\3\3\31\0\14\3\1\u058e\15\3\2\0\1\3\3\0"+
    "\3\3\31\0\17\3\1\u058f\12\3\2\0\1\3\3\0"+
    "\3\3\31\0\16\3\1\u0590\13\3\2\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u0591\27\3\2\0\1\3\3\0"+
    "\3\3\31\0\17\3\1\u0592\12\3\2\0\1\3\3\0"+
    "\3\3\31\0\11\3\1\u0593\20\3\2\0\1\3\3\0"+
    "\3\3\31\0\1\3\1\u0594\30\3\2\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u0595\27\3\2\0\1\3\3\0"+
    "\3\3\31\0\22\3\1\u0596\7\3\2\0\1\3\3\0"+
    "\3\3\31\0\22\3\1\u0597\7\3\2\0\1\3\3\0"+
    "\3\3\31\0\20\3\1\u0598\11\3\2\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\u0599\25\3\2\0\1\3\3\0"+
    "\3\3\31\0\11\3\1\u059a\20\3\2\0\1\3\57\0"+
    "\1\u059b\17\0\3\3\31\0\16\3\1\u059c\13\3\2\0"+
    "\1\3\3\0\3\3\31\0\5\3\1\u059d\24\3\2\0"+
    "\1\3\3\0\3\3\31\0\17\3\1\u059e\12\3\2\0"+
    "\1\3\3\0\3\3\31\0\1\3\1\u059f\30\3\2\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u05a0\27\3\2\0"+
    "\1\3\3\0\3\3\31\0\6\3\1\u05a1\23\3\2\0"+
    "\1\3\3\0\3\3\31\0\6\3\1\u05a2\23\3\2\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u05a3\25\3\2\0"+
    "\1\3\3\0\3\3\31\0\20\3\1\u05a4\11\3\2\0"+
    "\1\3\3\0\3\3\31\0\16\3\1\u05a5\13\3\2\0"+
    "\1\3\3\0\3\3\31\0\6\3\1\u05a6\23\3\2\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u05a7\27\3\2\0"+
    "\1\3\3\0\3\3\31\0\6\3\1\u05a8\23\3\2\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u05a9\27\3\2\0"+
    "\1\3\3\0\3\3\31\0\5\3\1\u05aa\24\3\2\0"+
    "\1\3\3\0\3\3\31\0\15\3\1\u05ab\14\3\2\0"+
    "\1\3\3\0\3\3\31\0\7\3\1\u05ac\22\3\2\0"+
    "\1\3\3\0\3\3\31\0\12\3\1\u05ad\17\3\2\0"+
    "\1\3\3\0\3\3\31\0\7\3\1\u05ae\22\3\2\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u05af\25\3\2\0"+
    "\1\3\3\0\3\3\31\0\25\3\1\u05b0\4\3\2\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u05b1\27\3\2\0"+
    "\1\3\3\0\3\3\31\0\16\3\1\u05b2\13\3\2\0"+
    "\1\3\3\0\3\3\31\0\15\3\1\u05b3\14\3\2\0"+
    "\1\3\3\0\3\3\31\0\17\3\1\u05b4\12\3\2\0"+
    "\1\3\3\0\3\3\31\0\6\3\1\u05b5\23\3\2\0"+
    "\1\3\3\0\3\3\31\0\7\3\1\u05b6\22\3\2\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u05b7\27\3\2\0"+
    "\1\3\3\0\3\3\31\0\1\3\1\u05b8\30\3\2\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u05b9\27\3\2\0"+
    "\1\3\3\0\3\3\31\0\25\3\1\u05ba\4\3\2\0"+
    "\1\3\3\0\3\3\31\0\21\3\1\u05bb\10\3\2\0"+
    "\1\3\3\0\3\3\31\0\24\3\1\u05bc\5\3\2\0"+
    "\1\3\3\0\3\3\31\0\16\3\1\u05bd\13\3\2\0"+
    "\1\3\3\0\3\3\31\0\5\3\1\u05be\24\3\2\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u05bf\25\3\2\0"+
    "\1\3\3\0\3\3\31\0\14\3\1\u05c0\15\3\2\0"+
    "\1\3\53\0\1\u05c1\23\0\3\3\31\0\20\3\1\u05c2"+
    "\11\3\2\0\1\3\3\0\3\3\31\0\1\u05c3\31\3"+
    "\2\0\1\3\3\0\3\3\31\0\14\3\1\u05c4\15\3"+
    "\2\0\1\3\3\0\3\3\31\0\6\3\1\u05c5\23\3"+
    "\2\0\1\3\3\0\3\3\31\0\22\3\1\u05c6\7\3"+
    "\2\0\1\3\3\0\3\3\31\0\1\3\1\u05c7\30\3"+
    "\2\0\1\3\3\0\3\3\31\0\1\3\1\u05c8\30\3"+
    "\2\0\1\3\3\0\3\3\31\0\7\3\1\u05c9\22\3"+
    "\2\0\1\3\3\0\3\3\31\0\21\3\1\u05ca\10\3"+
    "\2\0\1\3\3\0\3\3\31\0\2\3\1\u05cb\27\3"+
    "\2\0\1\3\3\0\3\3\31\0\2\3\1\u05cc\27\3"+
    "\2\0\1\3\3\0\3\3\31\0\2\3\1\u05cd\27\3"+
    "\2\0\1\3\3\0\3\3\31\0\5\3\1\u05ce\24\3"+
    "\2\0\1\3\3\0\3\3\31\0\6\3\1\u05cf\23\3"+
    "\2\0\1\3\3\0\3\3\31\0\7\3\1\u05d0\22\3"+
    "\2\0\1\3\3\0\3\3\31\0\17\3\1\u05d1\12\3"+
    "\2\0\1\3\3\0\3\3\31\0\16\3\1\u05d2\13\3"+
    "\2\0\1\3\3\0\3\3\31\0\5\3\1\u05d3\24\3"+
    "\2\0\1\3\3\0\3\3\31\0\16\3\1\u05d4\13\3"+
    "\2\0\1\3\3\0\3\3\31\0\13\3\1\u05d5\16\3"+
    "\2\0\1\3\3\0\3\3\31\0\17\3\1\u05d6\12\3"+
    "\2\0\1\3\3\0\3\3\31\0\6\3\1\u05d7\23\3"+
    "\2\0\1\3\3\0\3\3\31\0\12\3\1\u05d8\17\3"+
    "\2\0\1\3\3\0\3\3\31\0\5\3\1\u05d9\24\3"+
    "\2\0\1\3\52\0\1\u05da\24\0\3\3\31\0\6\3"+
    "\1\u05db\23\3\2\0\1\3\3\0\3\3\31\0\15\3"+
    "\1\u05dc\14\3\2\0\1\3\3\0\3\3\31\0\5\3"+
    "\1\u05dd\24\3\2\0\1\3\3\0\3\3\31\0\14\3"+
    "\1\u05de\15\3\2\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u05df\27\3\2\0\1\3\3\0\3\3\31\0\6\3"+
    "\1\u05e0\23\3\2\0\1\3\3\0\3\3\31\0\17\3"+
    "\1\u05e1\12\3\2\0\1\3\3\0\3\3\31\0\22\3"+
    "\1\u05e2\7\3\2\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u05e3\27\3\2\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u05e4\27\3\2\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u05e5\25\3\2\0\1\3\3\0\3\3\31\0\7\3"+
    "\1\u05e6\22\3\2\0\1\3\3\0\3\3\31\0\12\3"+
    "\1\u05e7\17\3\2\0\1\3\3\0\3\3\31\0\22\3"+
    "\1\u05e8\7\3\2\0\1\3\3\0\3\3\31\0\11\3"+
    "\1\u05e9\20\3\2\0\1\3\3\0\3\3\31\0\16\3"+
    "\1\u05ea\13\3\2\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u05eb\25\3\2\0\1\3\3\0\3\3\31\0\22\3"+
    "\1\u05ec\7\3\2\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u05ed\25\3\2\0\1\3\3\0\3\3\31\0\5\3"+
    "\1\u05ee\24\3\2\0\1\3\3\0\3\3\31\0\1\u05ef"+
    "\31\3\2\0\1\3\3\0\3\3\31\0\5\3\1\u05f0"+
    "\24\3\2\0\1\3\3\0\3\3\31\0\2\3\1\u05f1"+
    "\27\3\2\0\1\3\3\0\3\3\31\0\7\3\1\u05f2"+
    "\22\3\2\0\1\3\3\0\3\3\31\0\2\3\1\u05f3"+
    "\27\3\2\0\1\3\3\0\3\3\31\0\4\3\1\u05f4"+
    "\25\3\2\0\1\3\3\0\3\3\31\0\1\u05f5\31\3"+
    "\2\0\1\3\3\0\3\3\31\0\4\3\1\u05f6\25\3"+
    "\2\0\1\3\3\0\3\3\31\0\5\3\1\u05f7\24\3"+
    "\2\0\1\3\3\0\3\3\31\0\1\u05f8\31\3\2\0"+
    "\1\3\3\0\3\3\31\0\16\3\1\u05f9\13\3\2\0"+
    "\1\3\3\0\3\3\31\0\12\3\1\u05fa\17\3\2\0"+
    "\1\3\3\0\3\3\31\0\25\3\1\u05fb\4\3\2\0"+
    "\1\3\3\0\3\3\31\0\16\3\1\u05fc\13\3\2\0"+
    "\1\3\3\0\3\3\31\0\17\3\1\u05fd\12\3\2\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u05fe\25\3\2\0"+
    "\1\3\3\0\3\3\31\0\13\3\1\u05ff\16\3\2\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u0600\25\3\2\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u0601\27\3\2\0"+
    "\1\3\3\0\3\3\31\0\21\3\1\u0602\10\3\2\0"+
    "\1\3\3\0\3\3\31\0\21\3\1\u0603\10\3\2\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u0604\25\3\2\0"+
    "\1\3\3\0\3\3\31\0\1\3\1\u0605\2\3\1\u0606"+
    "\25\3\2\0\1\3\3\0\3\3\31\0\1\u0607\31\3"+
    "\2\0\1\3\3\0\3\3\31\0\2\3\1\u0608\27\3"+
    "\2\0\1\3\3\0\3\3\31\0\1\u0609\31\3\2\0"+
    "\1\3\3\0\3\3\31\0\15\3\1\u060a\14\3\2\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u060b\25\3\2\0"+
    "\1\3\3\0\3\3\31\0\15\3\1\u060c\14\3\2\0"+
    "\1\3\3\0\3\3\31\0\7\3\1\u060d\22\3\2\0"+
    "\1\3\3\0\3\3\31\0\1\u060e\31\3\2\0\1\3"+
    "\3\0\3\3\31\0\7\3\1\u060f\22\3\2\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u0610\27\3\2\0\1\3"+
    "\3\0\3\3\31\0\16\3\1\u0611\13\3\2\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u0612\27\3\2\0\1\3"+
    "\3\0\3\3\31\0\7\3\1\u0613\22\3\2\0\1\3"+
    "\3\0\3\3\31\0\17\3\1\u0614\12\3\2\0\1\3"+
    "\3\0\3\3\31\0\4\3\1\u0615\25\3\2\0\1\3"+
    "\3\0\3\3\31\0\1\u0616\31\3\2\0\1\3\3\0"+
    "\3\3\31\0\15\3\1\u0617\14\3\2\0\1\3\3\0"+
    "\3\3\31\0\7\3\1\u0618\22\3\2\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u0619\27\3\2\0\1\3\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[74520];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\3\1\1\11\1\1\1\11"+
    "\7\1\2\11\1\1\1\11\1\1\1\11\1\1\2\11"+
    "\32\1\2\11\4\1\6\11\2\0\4\11\200\1\1\11"+
    "\3\1\2\0\1\11\317\1\2\0\43\1\1\0\314\1"+
    "\1\11\37\1\1\0\324\1\1\0\255\1\1\0\166\1"+
    "\1\0\24\1\1\11\127\1\1\0\113\1\1\0\67\1"+
    "\1\0\45\1\1\0\30\1\1\11\77\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1561];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){   
        return new Symbol(type, yyline, yycolumn, value);
    }

   private Symbol symbol(int type){   
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 240: 
          { return new Symbol (sym.NUMERIC,yycolumn,yyline, yytext());
          }
        case 392: break;
        case 299: 
          { return new Symbol (sym.CONTINUE,yycolumn,yyline, yytext());
          }
        case 393: break;
        case 309: 
          { return new Symbol (sym.OVERLAPS,yycolumn,yyline, yytext());
          }
        case 394: break;
        case 163: 
          { return new Symbol (sym.PIVOT,yycolumn,yyline, yytext());
          }
        case 395: break;
        case 294: 
          { return new Symbol (sym.FUNCTION,yycolumn,yyline, yytext());
          }
        case 396: break;
        case 379: 
          { return new Symbol (sym.CORRESPONDING,yycolumn,yyline, yytext());
          }
        case 397: break;
        case 320: 
          { return new Symbol (sym.CHARACTER,yycolumn,yyline, yytext());
          }
        case 398: break;
        case 286: 
          { return new Symbol (sym.RELATIVE,yycolumn,yyline, yytext());
          }
        case 399: break;
        case 130: 
          { return new Symbol (sym.SOME,yycolumn,yyline, yytext());
          }
        case 400: break;
        case 50: 
          { return new Symbol (sym.OR,yycolumn,yyline, yytext());
          }
        case 401: break;
        case 152: 
          { return new Symbol (sym.FALSE,yycolumn,yyline, yytext());
          }
        case 402: break;
        case 268: 
          { return new Symbol (sym.MODULAR,yycolumn,yyline, yytext());
          }
        case 403: break;
        case 371: 
          { return new Symbol (sym.CURRENT_USER,yycolumn,yyline, yytext());
          }
        case 404: break;
        case 136: 
          { return new Symbol (sym.ZONE,yycolumn,yyline, yytext());
          }
        case 405: break;
        case 143: 
          { return new Symbol (sym.JOIN,yycolumn,yyline, yytext());
          }
        case 406: break;
        case 67: 
          { return new Symbol (sym.AVG,yycolumn,yyline, yytext());
          }
        case 407: break;
        case 185: 
          { return new Symbol (sym.WHERE,yycolumn,yyline, yytext());
          }
        case 408: break;
        case 193: 
          { return new Symbol (sym.EXCEPT,yycolumn,yyline, yytext());
          }
        case 409: break;
        case 228: 
          { return new Symbol (sym.VALUES,yycolumn,yyline, yytext());
          }
        case 410: break;
        case 303: 
          { return new Symbol (sym.IDENTITY,yycolumn,yyline, yytext());
          }
        case 411: break;
        case 119: 
          { return new Symbol (sym.CHAR,yycolumn,yyline, yytext());
          }
        case 412: break;
        case 86: 
          { return new Symbol (sym.MIN,yycolumn,yyline, yytext());
          }
        case 413: break;
        case 203: 
          { return new Symbol (sym.CALLER,yycolumn,yyline, yytext());
          }
        case 414: break;
        case 377: 
          { return new Symbol (sym.TIMEZONE_HOUR,yycolumn,yyline, yytext());
          }
        case 415: break;
        case 288: 
          { return new Symbol (sym.ROLLBACK,yycolumn,yyline, yytext());
          }
        case 416: break;
        case 155: 
          { return new Symbol (sym.FIRST,yycolumn,yyline, yytext());
          }
        case 417: break;
        case 386: 
          { return new Symbol (sym.CHARACTER_LENGTH,yycolumn,yyline, yytext());
          }
        case 418: break;
        case 384: 
          { return new Symbol (sym.TIMEZONE_MINUTE,yycolumn,yyline, yytext());
          }
        case 419: break;
        case 3: 
          { return new Symbol(sym.Int, yycolumn, yyline, yytext());
          }
        case 420: break;
        case 349: 
          { return new Symbol (sym.SQLWARNING,yycolumn,yyline, yytext());
          }
        case 421: break;
        case 162: 
          { return new Symbol (sym.PRIOR,yycolumn,yyline, yytext());
          }
        case 422: break;
        case 93: 
          { return new Symbol (sym.DISK,yycolumn,yyline, yytext());
          }
        case 423: break;
        case 252: 
          { return new Symbol (sym.PARTIAL,yycolumn,yyline, yytext());
          }
        case 424: break;
        case 292: 
          { return new Symbol (sym.LANGUAGE,yycolumn,yyline, yytext());
          }
        case 425: break;
        case 2: 
          { return new Symbol(sym.Identificador, yycolumn, yyline, yytext());
          }
        case 426: break;
        case 33: 
          { return new Symbol(sym.Mayor_o_igual_que, yycolumn, yyline, yytext());
          }
        case 427: break;
        case 72: 
          { return new Symbol (sym.NOT,yycolumn,yyline, yytext());
          }
        case 428: break;
        case 235: 
          { return new Symbol (sym.TRIGGER,yycolumn,yyline, yytext());
          }
        case 429: break;
        case 196: 
          { return new Symbol (sym.ESCAPE,yycolumn,yyline, yytext());
          }
        case 430: break;
        case 365: 
          { return new Symbol (sym.TYPE_WARNING,yycolumn,yyline, yytext());
          }
        case 431: break;
        case 284: 
          { return new Symbol (sym.READTEXT,yycolumn,yyline, yytext());
          }
        case 432: break;
        case 380: 
          { return new Symbol (sym.CONTAINSTABLE,yycolumn,yyline, yytext());
          }
        case 433: break;
        case 208: 
          { return new Symbol (sym.HAVING,yycolumn,yyline, yytext());
          }
        case 434: break;
        case 1: 
          { return new Symbol(sym.ERROR, yycolumn, yyline, yytext());
          }
        case 435: break;
        case 190: 
          { return new Symbol (sym.DELETE,yycolumn,yyline, yytext());
          }
        case 436: break;
        case 91: 
          { return new Symbol (sym.DUMP,yycolumn,yyline, yytext());
          }
        case 437: break;
        case 366: 
          { return new Symbol (sym.NONCLUSTERED,yycolumn,yyline, yytext());
          }
        case 438: break;
        case 171: 
          { return new Symbol (sym.INNER,yycolumn,yyline, yytext());
          }
        case 439: break;
        case 47: 
          { return new Symbol (sym.IN,yycolumn,yyline, yytext());
          }
        case 440: break;
        case 54: 
          { return new Symbol (sym.GO,yycolumn,yyline, yytext());
          }
        case 441: break;
        case 277: 
          { return new Symbol (sym.DESCRIBE,yycolumn,yyline, yytext());
          }
        case 442: break;
        case 257: 
          { return new Symbol (sym.UNKNOWN,yycolumn,yyline, yytext());
          }
        case 443: break;
        case 63: 
          { return new Symbol (sym.AND,yycolumn,yyline, yytext());
          }
        case 444: break;
        case 35: 
          { return new Symbol(sym.Operador_AND, yycolumn, yyline, yytext());
          }
        case 445: break;
        case 65: 
          { return new Symbol (sym.ALL,yycolumn,yyline, yytext());
          }
        case 446: break;
        case 116: 
          { return new Symbol (sym.FILE,yycolumn,yyline, yytext());
          }
        case 447: break;
        case 300: 
          { return new Symbol (sym.HOLDLOCK,yycolumn,yyline, yytext());
          }
        case 448: break;
        case 138: 
          { return new Symbol (sym.MARK,yycolumn,yyline, yytext());
          }
        case 449: break;
        case 109: 
          { return new Symbol (sym.NONE,yycolumn,yyline, yytext());
          }
        case 450: break;
        case 13: 
          { return new Symbol(sym.Mayor_que, yycolumn, yyline, yytext());
          }
        case 451: break;
        case 266: 
          { return new Symbol (sym.OPENXML,yycolumn,yyline, yytext());
          }
        case 452: break;
        case 253: 
          { return new Symbol (sym.PERCENT,yycolumn,yyline, yytext());
          }
        case 453: break;
        case 246: 
          { return new Symbol (sym.CASCADE,yycolumn,yyline, yytext());
          }
        case 454: break;
        case 25: 
          { return new Symbol(sym.Numeral, yycolumn, yyline, yytext());
          }
        case 455: break;
        case 381: 
          { return new Symbol (sym.SECURITYAUDIT,yycolumn,yyline, yytext());
          }
        case 456: break;
        case 10: 
          { return new Symbol(sym.Porcentaje, yycolumn, yyline, yytext());
          }
        case 457: break;
        case 9: 
          { return new Symbol(sym.Division, yycolumn, yyline, yytext());
          }
        case 458: break;
        case 132: 
          { return new Symbol (sym.OPEN,yycolumn,yyline, yytext());
          }
        case 459: break;
        case 197: 
          { return new Symbol (sym.RETURN,yycolumn,yyline, yytext());
          }
        case 460: break;
        case 350: 
          { return new Symbol (sym.OPENROWSET,yycolumn,yyline, yytext());
          }
        case 461: break;
        case 318: 
          { return new Symbol (sym.RECOMPILE,yycolumn,yyline, yytext());
          }
        case 462: break;
        case 276: 
          { return new Symbol (sym.DEFERRED,yycolumn,yyline, yytext());
          }
        case 463: break;
        case 178: 
          { return new Symbol (sym.GRANT,yycolumn,yyline, yytext());
          }
        case 464: break;
        case 156: 
          { return new Symbol (sym.FOUND,yycolumn,yyline, yytext());
          }
        case 465: break;
        case 66: 
          { return new Symbol (sym.ASC,yycolumn,yyline, yytext());
          }
        case 466: break;
        case 270: 
          { return new Symbol (sym.VARCHAR,yycolumn,yyline, yytext());
          }
        case 467: break;
        case 36: 
          { return new Symbol(sym.Operador_OR, yycolumn, yyline, yytext());
          }
        case 468: break;
        case 75: 
          { return new Symbol (sym.USE,yycolumn,yyline, yytext());
          }
        case 469: break;
        case 214: 
          { return new Symbol (sym.BROWSE,yycolumn,yyline, yytext());
          }
        case 470: break;
        case 114: 
          { return new Symbol (sym.FROM,yycolumn,yyline, yytext());
          }
        case 471: break;
        case 183: 
          { return new Symbol (sym.MONTH,yycolumn,yyline, yytext());
          }
        case 472: break;
        case 329: 
          { return new Symbol (sym.IMMEDIATE,yycolumn,yyline, yytext());
          }
        case 473: break;
        case 198: 
          { return new Symbol (sym.REVERT,yycolumn,yyline, yytext());
          }
        case 474: break;
        case 102: 
          { return new Symbol (sym.READ,yycolumn,yyline, yytext());
          }
        case 475: break;
        case 158: 
          { return new Symbol (sym.CLOSE,yycolumn,yyline, yytext());
          }
        case 476: break;
        case 11: 
          { return new Symbol(sym.Menor_que, yycolumn, yyline, yytext());
          }
        case 477: break;
        case 161: 
          { return new Symbol (sym.PRINT,yycolumn,yyline, yytext());
          }
        case 478: break;
        case 332: 
          { return new Symbol (sym.WRITETEXT,yycolumn,yyline, yytext());
          }
        case 479: break;
        case 340: 
          { return new Symbol (sym.FILEGROWTH,yycolumn,yyline, yytext());
          }
        case 480: break;
        case 204: 
          { return new Symbol (sym.CREATE,yycolumn,yyline, yytext());
          }
        case 481: break;
        case 316: 
          { return new Symbol (sym.RAISERROR,yycolumn,yyline, yytext());
          }
        case 482: break;
        case 101: 
          { return new Symbol (sym.TIME,yycolumn,yyline, yytext());
          }
        case 483: break;
        case 92: 
          { return new Symbol (sym.DBCC,yycolumn,yyline, yytext());
          }
        case 484: break;
        case 100: 
          { return new Symbol (sym.THEN,yycolumn,yyline, yytext());
          }
        case 485: break;
        case 206: 
          { return new Symbol (sym.COLUMN,yycolumn,yyline, yytext());
          }
        case 486: break;
        case 144: 
          { return new Symbol (sym.ALTER,yycolumn,yyline, yytext());
          }
        case 487: break;
        case 243: 
          { return new Symbol (sym.FOREIGN,yycolumn,yyline, yytext());
          }
        case 488: break;
        case 7: 
          { return new Symbol(sym.Resta, yycolumn, yyline, yytext());
          }
        case 489: break;
        case 201: 
          { return new Symbol (sym.LINENO,yycolumn,yyline, yytext());
          }
        case 490: break;
        case 5: 
          { /*Ignore*/
          }
        case 491: break;
        case 83: 
          { return new Symbol (sym.GET,yycolumn,yyline, yytext());
          }
        case 492: break;
        case 111: 
          { return new Symbol (sym.LEFT,yycolumn,yyline, yytext());
          }
        case 493: break;
        case 150: 
          { return new Symbol (sym.LOCAL,yycolumn,yyline, yytext());
          }
        case 494: break;
        case 184: 
          { return new Symbol (sym.WRITE,yycolumn,yyline, yytext());
          }
        case 495: break;
        case 291: 
          { return new Symbol (sym.NVARCHAR,yycolumn,yyline, yytext());
          }
        case 496: break;
        case 278: 
          { return new Symbol (sym.DISTINCT,yycolumn,yyline, yytext());
          }
        case 497: break;
        case 172: 
          { return new Symbol (sym.INPUT,yycolumn,yyline, yytext());
          }
        case 498: break;
        case 166: 
          { return new Symbol (sym.USAGE,yycolumn,yyline, yytext());
          }
        case 499: break;
        case 237: 
          { return new Symbol (sym.RETURNS,yycolumn,yyline, yytext());
          }
        case 500: break;
        case 390: 
          { return new Symbol (sym.SEMANTICSIMILARITYTABLE,yycolumn,yyline, yytext());
          }
        case 501: break;
        case 187: 
          { return new Symbol (sym.VALUE,yycolumn,yyline, yytext());
          }
        case 502: break;
        case 383: 
          { return new Symbol (sym.OPENDATASOURCE,yycolumn,yyline, yytext());
          }
        case 503: break;
        case 80: 
          { return new Symbol (sym.SQL,yycolumn,yyline, yytext());
          }
        case 504: break;
        case 58: 
          { return new Symbol(sym.String, yycolumn, yyline, yytext());
          }
        case 505: break;
        case 283: 
          { return new Symbol (sym.TRUNCATE,yycolumn,yyline, yytext());
          }
        case 506: break;
        case 314: 
          { return new Symbol (sym.TRANSLATE,yycolumn,yyline, yytext());
          }
        case 507: break;
        case 335: 
          { return new Symbol (sym.DESCRIPTOR,yycolumn,yyline, yytext());
          }
        case 508: break;
        case 293: 
          { return new Symbol (sym.FREETEXT,yycolumn,yyline, yytext());
          }
        case 509: break;
        case 4: 
          { return new Symbol(sym.Gui√≥n_bajo, yycolumn, yyline, yytext());
          }
        case 510: break;
        case 331: 
          { return new Symbol (sym.OPENQUERY,yycolumn,yyline, yytext());
          }
        case 511: break;
        case 82: 
          { return new Symbol (sym.OUT,yycolumn,yyline, yytext());
          }
        case 512: break;
        case 226: 
          { return new Symbol (sym.MINUTE,yycolumn,yyline, yytext());
          }
        case 513: break;
        case 322: 
          { return new Symbol (sym.PRECISION,yycolumn,yyline, yytext());
          }
        case 514: break;
        case 245: 
          { return new Symbol (sym.CATALOG,yycolumn,yyline, yytext());
          }
        case 515: break;
        case 108: 
          { return new Symbol (sym.NULL,yycolumn,yyline, yytext());
          }
        case 516: break;
        case 134: 
          { return new Symbol (sym.YEAR,yycolumn,yyline, yytext());
          }
        case 517: break;
        case 348: 
          { return new Symbol (sym.STATISTICS,yycolumn,yyline, yytext());
          }
        case 518: break;
        case 305: 
          { return new Symbol (sym.SHUTDOWN,yycolumn,yyline, yytext());
          }
        case 519: break;
        case 230: 
          { return new Symbol (sym.DECLARE,yycolumn,yyline, yytext());
          }
        case 520: break;
        case 149: 
          { return new Symbol (sym.LEVEL,yycolumn,yyline, yytext());
          }
        case 521: break;
        case 249: 
          { return new Symbol (sym.CONVERT,yycolumn,yyline, yytext());
          }
        case 522: break;
        case 30: 
          { return new Symbol(sym.ComentarioE, yycolumn, yyline, yytext());
          }
        case 523: break;
        case 98: 
          { return new Symbol (sym.TRUE,yycolumn,yyline, yytext());
          }
        case 524: break;
        case 217: 
          { return new Symbol (sym.SELECT,yycolumn,yyline, yytext());
          }
        case 525: break;
        case 110: 
          { return new Symbol (sym.LAST,yycolumn,yyline, yytext());
          }
        case 526: break;
        case 74: 
          { return new Symbol (sym.PAD,yycolumn,yyline, yytext());
          }
        case 527: break;
        case 59: 
          { return new Symbol (sym.PYCGO,yycolumn,yyline, yytext());
          }
        case 528: break;
        case 55: 
          { return new Symbol (sym.KB,yycolumn,yyline, yytext());
          }
        case 529: break;
        case 308: 
          { return new Symbol (sym.SQLSTATE,yycolumn,yyline, yytext());
          }
        case 530: break;
        case 53: 
          { return new Symbol (sym.GB,yycolumn,yyline, yytext());
          }
        case 531: break;
        case 142: 
          { return new Symbol (sym.VIEW,yycolumn,yyline, yytext());
          }
        case 532: break;
        case 358: 
          { return new Symbol (sym.RECONFIGURE,yycolumn,yyline, yytext());
          }
        case 533: break;
        case 18: 
          { return new Symbol(sym.Apertura_de_corchetes, yycolumn, yyline, yytext());
          }
        case 534: break;
        case 73: 
          { return new Symbol (sym.FOR,yycolumn,yyline, yytext());
          }
        case 535: break;
        case 342: 
          { return new Symbol (sym.CHECKPOINT,yycolumn,yyline, yytext());
          }
        case 536: break;
        case 389: 
          { return new Symbol (sym.SEMANTICKEYPHRASETABLE,yycolumn,yyline, yytext());
          }
        case 537: break;
        case 70: 
          { return new Symbol (sym.END,yycolumn,yyline, yytext());
          }
        case 538: break;
        case 17: 
          { return new Symbol(sym.Punto, yycolumn, yyline, yytext());
          }
        case 539: break;
        case 34: 
          { return new Symbol(sym.Operador_no_igual, yycolumn, yyline, yytext());
          }
        case 540: break;
        case 301: 
          { return new Symbol (sym.PRESERVE,yycolumn,yyline, yytext());
          }
        case 541: break;
        case 61: 
          { return new Symbol (sym.ADD, yycolumn, yyline, yytext());
          }
        case 542: break;
        case 373: 
          { return new Symbol (sym.SCROLL_LOCKS,yycolumn,yyline, yytext());
          }
        case 543: break;
        case 361: 
          { return new Symbol (sym.CONSTRAINTS,yycolumn,yyline, yytext());
          }
        case 544: break;
        case 391: 
          { return new Symbol (sym.SEMANTICSIMILARITYDETAILSTABLE,yycolumn,yyline, yytext());
          }
        case 545: break;
        case 62: 
          { return new Symbol (sym.ARE,yycolumn,yyline, yytext());
          }
        case 546: break;
        case 76: 
          { return new Symbol (sym.BIT,yycolumn,yyline, yytext());
          }
        case 547: break;
        case 140: 
          { return new Symbol (sym.WITH,yycolumn,yyline, yytext());
          }
        case 548: break;
        case 151: 
          { return new Symbol (sym.LOWER,yycolumn,yyline, yytext());
          }
        case 549: break;
        case 325: 
          { return new Symbol (sym.INDICATOR,yycolumn,yyline, yytext());
          }
        case 550: break;
        case 274: 
          { return new Symbol (sym.DATABASE,yycolumn,yyline, yytext());
          }
        case 551: break;
        case 12: 
          { return new Symbol(sym.Igual, yycolumn, yyline, yytext());
          }
        case 552: break;
        case 44: 
          { return new Symbol (sym.TO,yycolumn,yyline, yytext());
          }
        case 553: break;
        case 141: 
          { return new Symbol (sym.WORK,yycolumn,yyline, yytext());
          }
        case 554: break;
        case 40: 
          { return new Symbol(sym.Doble_Numeral, yycolumn, yyline, yytext());
          }
        case 555: break;
        case 117: 
          { return new Symbol (sym.CASE,yycolumn,yyline, yytext());
          }
        case 556: break;
        case 107: 
          { return new Symbol (sym.NEXT,yycolumn,yyline, yytext());
          }
        case 557: break;
        case 334: 
          { return new Symbol (sym.DEFERRABLE,yycolumn,yyline, yytext());
          }
        case 558: break;
        case 19: 
          { return new Symbol(sym.Cierre_de_corchetes, yycolumn, yyline, yytext());
          }
        case 559: break;
        case 295: 
          { return new Symbol (sym.FILENAME,yycolumn,yyline, yytext());
          }
        case 560: break;
        case 125: 
          { return new Symbol (sym.BOTH,yycolumn,yyline, yytext());
          }
        case 561: break;
        case 20: 
          { return new Symbol(sym.Apertura_de_par√©ntesis, yycolumn, yyline, yytext());
          }
        case 562: break;
        case 285: 
          { return new Symbol (sym.READONLY,yycolumn,yyline, yytext());
          }
        case 563: break;
        case 68: 
          { return new Symbol (sym.DAY,yycolumn,yyline, yytext());
          }
        case 564: break;
        case 368: 
          { return new Symbol (sym.FORWARD_ONLY,yycolumn,yyline, yytext());
          }
        case 565: break;
        case 236: 
          { return new Symbol (sym.TSEQUAL,yycolumn,yyline, yytext());
          }
        case 566: break;
        case 52: 
          { return new Symbol (sym.OF,yycolumn,yyline, yytext());
          }
        case 567: break;
        case 351: 
          { return new Symbol (sym.OPTIMISTIC,yycolumn,yyline, yytext());
          }
        case 568: break;
        case 115: 
          { return new Symbol (sym.FULL,yycolumn,yyline, yytext());
          }
        case 569: break;
        case 218: 
          { return new Symbol (sym.SECOND,yycolumn,yyline, yytext());
          }
        case 570: break;
        case 211: 
          { return new Symbol (sym.UNIQUE,yycolumn,yyline, yytext());
          }
        case 571: break;
        case 227: 
          { return new Symbol (sym.MODULE,yycolumn,yyline, yytext());
          }
        case 572: break;
        case 256: 
          { return new Symbol (sym.UNPIVOT,yycolumn,yyline, yytext());
          }
        case 573: break;
        case 321: 
          { return new Symbol (sym.COLLATION,yycolumn,yyline, yytext());
          }
        case 574: break;
        case 103: 
          { return new Symbol (sym.REAL,yycolumn,yyline, yytext());
          }
        case 575: break;
        case 323: 
          { return new Symbol (sym.PROCEDURE,yycolumn,yyline, yytext());
          }
        case 576: break;
        case 271: 
          { return new Symbol (sym.VARYING,yycolumn,yyline, yytext());
          }
        case 577: break;
        case 336: 
          { return new Symbol (sym.DISCONNECT,yycolumn,yyline, yytext());
          }
        case 578: break;
        case 126: 
          { return new Symbol (sym.INTO,yycolumn,yyline, yytext());
          }
        case 579: break;
        case 170: 
          { return new Symbol (sym.INDEX,yycolumn,yyline, yytext());
          }
        case 580: break;
        case 364: 
          { return new Symbol (sym.SYSTEM_USER,yycolumn,yyline, yytext());
          }
        case 581: break;
        case 341: 
          { return new Symbol (sym.FILLFACTOR,yycolumn,yyline, yytext());
          }
        case 582: break;
        case 280: 
          { return new Symbol (sym.END_EXEC,yycolumn,yyline, yytext());
          }
        case 583: break;
        case 87: 
          { return new Symbol (sym.DATE,yycolumn,yyline, yytext());
          }
        case 584: break;
        case 191: 
          { return new Symbol (sym.DOUBLE,yycolumn,yyline, yytext());
          }
        case 585: break;
        case 147: 
          { return new Symbol (sym.NAMES,yycolumn,yyline, yytext());
          }
        case 586: break;
        case 176: 
          { return new Symbol (sym.OUTER,yycolumn,yyline, yytext());
          }
        case 587: break;
        case 90: 
          { return new Symbol (sym.DROP,yycolumn,yyline, yytext());
          }
        case 588: break;
        case 79: 
          { return new Symbol (sym.SUM,yycolumn,yyline, yytext());
          }
        case 589: break;
        case 302: 
          { return new Symbol (sym.POSITION,yycolumn,yyline, yytext());
          }
        case 590: break;
        case 244: 
          { return new Symbol (sym.FORTRAN,yycolumn,yyline, yytext());
          }
        case 591: break;
        case 338: 
          { return new Symbol (sym.REFERENCES,yycolumn,yyline, yytext());
          }
        case 592: break;
        case 275: 
          { return new Symbol (sym.DATETIME,yycolumn,yyline, yytext());
          }
        case 593: break;
        case 64: 
          { return new Symbol (sym.ANY,yycolumn,yyline, yytext());
          }
        case 594: break;
        case 157: 
          { return new Symbol (sym.CROSS,yycolumn,yyline, yytext());
          }
        case 595: break;
        case 297: 
          { return new Symbol (sym.COALESCE,yycolumn,yyline, yytext());
          }
        case 596: break;
        case 128: 
          { return new Symbol (sym.SELF,yycolumn,yyline, yytext());
          }
        case 597: break;
        case 177: 
          { return new Symbol (sym.OWNER,yycolumn,yyline, yytext());
          }
        case 598: break;
        case 378: 
          { return new Symbol (sym.FREETEXTTABLE,yycolumn,yyline, yytext());
          }
        case 599: break;
        case 28: 
          { return new Symbol(sym.Float, yycolumn, yyline, yytext());
          }
        case 600: break;
        case 120: 
          { return new Symbol (sym.HOUR,yycolumn,yyline, yytext());
          }
        case 601: break;
        case 78: 
          { return new Symbol (sym.SET,yycolumn,yyline, yytext());
          }
        case 602: break;
        case 232: 
          { return new Symbol (sym.DYNAMIC,yycolumn,yyline, yytext());
          }
        case 603: break;
        case 179: 
          { return new Symbol (sym.GROUP,yycolumn,yyline, yytext());
          }
        case 604: break;
        case 287: 
          { return new Symbol (sym.RESTRICT,yycolumn,yyline, yytext());
          }
        case 605: break;
        case 207: 
          { return new Symbol (sym.COMMIT,yycolumn,yyline, yytext());
          }
        case 606: break;
        case 363: 
          { return new Symbol (sym.INSENSITIVE,yycolumn,yyline, yytext());
          }
        case 607: break;
        case 135: 
          { return new Symbol (sym.GOTO,yycolumn,yyline, yytext());
          }
        case 608: break;
        case 168: 
          { return new Symbol (sym.BEGIN,yycolumn,yyline, yytext());
          }
        case 609: break;
        case 95: 
          { return new Symbol (sym.EXIT,yycolumn,yyline, yytext());
          }
        case 610: break;
        case 360: 
          { return new Symbol (sym.CHAR_LENGTH,yycolumn,yyline, yytext());
          }
        case 611: break;
        case 263: 
          { return new Symbol (sym.SESSION,yycolumn,yyline, yytext());
          }
        case 612: break;
        case 265: 
          { return new Symbol (sym.OFFSETS,yycolumn,yyline, yytext());
          }
        case 613: break;
        case 99: 
          { return new Symbol (sym.TRIM,yycolumn,yyline, yytext());
          }
        case 614: break;
        case 81: 
          { return new Symbol (sym.OFF,yycolumn,yyline, yytext());
          }
        case 615: break;
        case 357: 
          { return new Symbol (sym.TRY_CONVERT,yycolumn,yyline, yytext());
          }
        case 616: break;
        case 254: 
          { return new Symbol (sym.PREPARE,yycolumn,yyline, yytext());
          }
        case 617: break;
        case 24: 
          { return new Symbol(sym.Arroba, yycolumn, yyline, yytext());
          }
        case 618: break;
        case 96: 
          { return new Symbol (sym.ELSE,yycolumn,yyline, yytext());
          }
        case 619: break;
        case 219: 
          { return new Symbol (sym.STATIC,yycolumn,yyline, yytext());
          }
        case 620: break;
        case 272: 
          { return new Symbol (sym.ALLOCATE,yycolumn,yyline, yytext());
          }
        case 621: break;
        case 43: 
          { return new Symbol (sym.TB,yycolumn,yyline, yytext());
          }
        case 622: break;
        case 220: 
          { return new Symbol (sym.SCROLL,yycolumn,yyline, yytext());
          }
        case 623: break;
        case 21: 
          { return new Symbol(sym.Cierre_de_par√©ntesis, yycolumn, yyline, yytext());
          }
        case 624: break;
        case 260: 
          { return new Symbol (sym.INCLUDE,yycolumn,yyline, yytext());
          }
        case 625: break;
        case 26: 
          { return new Symbol(sym.Cierre_signo_de_Interrogacion, yycolumn, yyline, yytext());
          }
        case 626: break;
        case 372: 
          { return new Symbol (sym.SESSION_USER,yycolumn,yyline, yytext());
          }
        case 627: break;
        case 375: 
          { return new Symbol (sym.WITHIN_GROUP,yycolumn,yyline, yytext());
          }
        case 628: break;
        case 175: 
          { return new Symbol (sym.ORDER,yycolumn,yyline, yytext());
          }
        case 629: break;
        case 15: 
          { return new Symbol(sym.Punto_y_coma, yycolumn, yyline, yytext());
          }
        case 630: break;
        case 173: 
          { return new Symbol (sym.SPACE,yycolumn,yyline, yytext());
          }
        case 631: break;
        case 104: 
          { return new Symbol (sym.RULE,yycolumn,yyline, yytext());
          }
        case 632: break;
        case 370: 
          { return new Symbol (sym.CURRENT_TIME,yycolumn,yyline, yytext());
          }
        case 633: break;
        case 344: 
          { return new Symbol (sym.CONSTRAINT,yycolumn,yyline, yytext());
          }
        case 634: break;
        case 154: 
          { return new Symbol (sym.FLOAT,yycolumn,yyline, yytext());
          }
        case 635: break;
        case 37: 
          { return new Symbol(sym.Corchetes, yycolumn, yyline, yytext());
          }
        case 636: break;
        case 160: 
          { return new Symbol (sym.COUNT,yycolumn,yyline, yytext());
          }
        case 637: break;
        case 137: 
          { return new Symbol (sym.KILL,yycolumn,yyline, yytext());
          }
        case 638: break;
        case 127: 
          { return new Symbol (sym.SAVE,yycolumn,yyline, yytext());
          }
        case 639: break;
        case 6: 
          { return new Symbol(sym.Suma, yycolumn, yyline, yytext());
          }
        case 640: break;
        case 71: 
          { return new Symbol (sym.TOP,yycolumn,yyline, yytext());
          }
        case 641: break;
        case 94: 
          { return new Symbol (sym.EXEC,yycolumn,yyline, yytext());
          }
        case 642: break;
        case 118: 
          { return new Symbol (sym.CAST,yycolumn,yyline, yytext());
          }
        case 643: break;
        case 131: 
          { return new Symbol (sym.ONLY,yycolumn,yyline, yytext());
          }
        case 644: break;
        case 153: 
          { return new Symbol (sym.FETCH,yycolumn,yyline, yytext());
          }
        case 645: break;
        case 281: 
          { return new Symbol (sym.TEXTSIZE,yycolumn,yyline, yytext());
          }
        case 646: break;
        case 262: 
          { return new Symbol (sym.SECTION,yycolumn,yyline, yytext());
          }
        case 647: break;
        case 38: 
          { return new Symbol(sym.Par√©ntesis, yycolumn, yyline, yytext());
          }
        case 648: break;
        case 346: 
          { return new Symbol (sym.UPDATETEXT,yycolumn,yyline, yytext());
          }
        case 649: break;
        case 51: 
          { return new Symbol (sym.ON,yycolumn,yyline, yytext());
          }
        case 650: break;
        case 311: 
          { return new Symbol (sym.ASSERTION,yycolumn,yyline, yytext());
          }
        case 651: break;
        case 222: 
          { return new Symbol (sym.OPTION,yycolumn,yyline, yytext());
          }
        case 652: break;
        case 339: 
          { return new Symbol (sym.ROWGUIDCOL,yycolumn,yyline, yytext());
          }
        case 653: break;
        case 355: 
          { return new Symbol (sym.TRANSACTION,yycolumn,yyline, yytext());
          }
        case 654: break;
        case 337: 
          { return new Symbol (sym.ENCRYPTION,yycolumn,yyline, yytext());
          }
        case 655: break;
        case 282: 
          { return new Symbol (sym.TRAILING,yycolumn,yyline, yytext());
          }
        case 656: break;
        case 255: 
          { return new Symbol (sym.PRIMARY,yycolumn,yyline, yytext());
          }
        case 657: break;
        case 376: 
          { return new Symbol (sym.AUTHORIZATION,yycolumn,yyline, yytext());
          }
        case 658: break;
        case 312: 
          { return new Symbol (sym.EXCEPTION,yycolumn,yyline, yytext());
          }
        case 659: break;
        case 215: 
          { return new Symbol (sym.INLINE,yycolumn,yyline, yytext());
          }
        case 660: break;
        case 129: 
          { return new Symbol (sym.SIZE,yycolumn,yyline, yytext());
          }
        case 661: break;
        case 317: 
          { return new Symbol (sym.READ_ONLY,yycolumn,yyline, yytext());
          }
        case 662: break;
        case 250: 
          { return new Symbol (sym.COLLATE,yycolumn,yyline, yytext());
          }
        case 663: break;
        case 267: 
          { return new Symbol (sym.MAXSIZE,yycolumn,yyline, yytext());
          }
        case 664: break;
        case 251: 
          { return new Symbol (sym.COMPUTE,yycolumn,yyline, yytext());
          }
        case 665: break;
        case 210: 
          { return new Symbol (sym.PUBLIC,yycolumn,yyline, yytext());
          }
        case 666: break;
        case 14: 
          { return new Symbol(sym.Signo_de_Exclamaci√≥n, yycolumn, yyline, yytext());
          }
        case 667: break;
        case 221: 
          { return new Symbol (sym.SCHEMA,yycolumn,yyline, yytext());
          }
        case 668: break;
        case 195: 
          { return new Symbol (sym.ERRLVL,yycolumn,yyline, yytext());
          }
        case 669: break;
        case 306: 
          { return new Symbol (sym.SMALLINT,yycolumn,yyline, yytext());
          }
        case 670: break;
        case 247: 
          { return new Symbol (sym.CURRENT,yycolumn,yyline, yytext());
          }
        case 671: break;
        case 189: 
          { return new Symbol (sym.ACTION,yycolumn,yyline, yytext());
          }
        case 672: break;
        case 89: 
          { return new Symbol (sym.DESC,yycolumn,yyline, yytext());
          }
        case 673: break;
        case 304: 
          { return new Symbol (sym.INTERVAL,yycolumn,yyline, yytext());
          }
        case 674: break;
        case 200: 
          { return new Symbol (sym.NULLIF,yycolumn,yyline, yytext());
          }
        case 675: break;
        case 123: 
          { return new Symbol (sym.USER,yycolumn,yyline, yytext());
          }
        case 676: break;
        case 261: 
          { return new Symbol (sym.SETUSER,yycolumn,yyline, yytext());
          }
        case 677: break;
        case 182: 
          { return new Symbol (sym.MONEY,yycolumn,yyline, yytext());
          }
        case 678: break;
        case 139: 
          { return new Symbol (sym.WHEN,yycolumn,yyline, yytext());
          }
        case 679: break;
        case 319: 
          { return new Symbol (sym.CLUSTERED,yycolumn,yyline, yytext());
          }
        case 680: break;
        case 269: 
          { return new Symbol (sym.WAITFOR,yycolumn,yyline, yytext());
          }
        case 681: break;
        case 181: 
          { return new Symbol (sym.MERGE,yycolumn,yyline, yytext());
          }
        case 682: break;
        case 105: 
          { return new Symbol (sym.ROWS,yycolumn,yyline, yytext());
          }
        case 683: break;
        case 209: 
          { return new Symbol (sym.PASCAL,yycolumn,yyline, yytext());
          }
        case 684: break;
        case 259: 
          { return new Symbol (sym.INTEGER,yycolumn,yyline, yytext());
          }
        case 685: break;
        case 186: 
          { return new Symbol (sym.WHILE,yycolumn,yyline, yytext());
          }
        case 686: break;
        case 234: 
          { return new Symbol (sym.EXTRACT,yycolumn,yyline, yytext());
          }
        case 687: break;
        case 202: 
          { return new Symbol (sym.CALLED,yycolumn,yyline, yytext());
          }
        case 688: break;
        case 279: 
          { return new Symbol (sym.EXTERNAL,yycolumn,yyline, yytext());
          }
        case 689: break;
        case 84: 
          { return new Symbol (sym.KEY,yycolumn,yyline, yytext());
          }
        case 690: break;
        case 49: 
          { return new Symbol (sym.IS,yycolumn,yyline, yytext());
          }
        case 691: break;
        case 97: 
          { return new Symbol (sym.TRAN,yycolumn,yyline, yytext());
          }
        case 692: break;
        case 216: 
          { return new Symbol (sym.INSERT,yycolumn,yyline, yytext());
          }
        case 693: break;
        case 385: 
          { return new Symbol (sym.IDENTITY_INSERT,yycolumn,yyline, yytext());
          }
        case 694: break;
        case 42: 
          { return new Symbol (sym.AS,yycolumn,yyline, yytext());
          }
        case 695: break;
        case 347: 
          { return new Symbol (sym.BIT_LENGTH,yycolumn,yyline, yytext());
          }
        case 696: break;
        case 60: 
          { return new Symbol (sym.ADA,yycolumn,yyline, yytext());
          }
        case 697: break;
        case 199: 
          { return new Symbol (sym.REVOKE,yycolumn,yyline, yytext());
          }
        case 698: break;
        case 353: 
          { return new Symbol (sym.DISTRIBUTED,yycolumn,yyline, yytext());
          }
        case 699: break;
        case 333: 
          { return new Symbol (sym.DEALLOCATE,yycolumn,yyline, yytext());
          }
        case 700: break;
        case 194: 
          { return new Symbol (sym.EXISTS,yycolumn,yyline, yytext());
          }
        case 701: break;
        case 167: 
          { return new Symbol (sym.USING,yycolumn,yyline, yytext());
          }
        case 702: break;
        case 327: 
          { return new Symbol (sym.INITIALLY,yycolumn,yyline, yytext());
          }
        case 703: break;
        case 180: 
          { return new Symbol (sym.MATCH,yycolumn,yyline, yytext());
          }
        case 704: break;
        case 328: 
          { return new Symbol (sym.ISOLATION,yycolumn,yyline, yytext());
          }
        case 705: break;
        case 233: 
          { return new Symbol (sym.EXECUTE,yycolumn,yyline, yytext());
          }
        case 706: break;
        case 113: 
          { return new Symbol (sym.LOAD,yycolumn,yyline, yytext());
          }
        case 707: break;
        case 32: 
          { return new Symbol(sym.Operador_de_Igualdad, yycolumn, yyline, yytext());
          }
        case 708: break;
        case 330: 
          { return new Symbol (sym.SUBSTRING,yycolumn,yyline, yytext());
          }
        case 709: break;
        case 146: 
          { return new Symbol (sym.RIGHT,yycolumn,yyline, yytext());
          }
        case 710: break;
        case 369: 
          { return new Symbol (sym.CURRENT_DATE,yycolumn,yyline, yytext());
          }
        case 711: break;
        case 359: 
          { return new Symbol (sym.REPLICATION,yycolumn,yyline, yytext());
          }
        case 712: break;
        case 46: 
          { return new Symbol (sym.BY,yycolumn,yyline, yytext());
          }
        case 713: break;
        case 356: 
          { return new Symbol (sym.TRANSLATION,yycolumn,yyline, yytext());
          }
        case 714: break;
        case 315: 
          { return new Symbol (sym.TIMESTAMP,yycolumn,yyline, yytext());
          }
        case 715: break;
        case 388: 
          { return new Symbol (sym.DELAYED_DURABILITY,yycolumn,yyline, yytext());
          }
        case 716: break;
        case 56: 
          { return new Symbol (sym.MB,yycolumn,yyline, yytext());
          }
        case 717: break;
        case 223: 
          { return new Symbol (sym.OUTPUT,yycolumn,yyline, yytext());
          }
        case 718: break;
        case 298: 
          { return new Symbol (sym.CONTAINS,yycolumn,yyline, yytext());
          }
        case 719: break;
        case 22: 
          { return new Symbol(sym.Apertura_de_llaves, yycolumn, yyline, yytext());
          }
        case 720: break;
        case 57: 
          { return new Symbol(sym.StringE, yycolumn, yyline, yytext());
          }
        case 721: break;
        case 165: 
          { return new Symbol (sym.UPPER,yycolumn,yyline, yytext());
          }
        case 722: break;
        case 192: 
          { return new Symbol (sym.DOMAIN,yycolumn,yyline, yytext());
          }
        case 723: break;
        case 174: 
          { return new Symbol (sym.SQLCA,yycolumn,yyline, yytext());
          }
        case 724: break;
        case 121: 
          { return new Symbol (sym.PROC,yycolumn,yyline, yytext());
          }
        case 725: break;
        case 122: 
          { return new Symbol (sym.PLAN,yycolumn,yyline, yytext());
          }
        case 726: break;
        case 382: 
          { return new Symbol (sym.SCHEMABINDING,yycolumn,yyline, yytext());
          }
        case 727: break;
        case 29: 
          { return new Symbol(sym.Comentario, yycolumn, yyline, yytext());
          }
        case 728: break;
        case 238: 
          { return new Symbol (sym.RESTORE,yycolumn,yyline, yytext());
          }
        case 729: break;
        case 258: 
          { return new Symbol (sym.BETWEEN,yycolumn,yyline, yytext());
          }
        case 730: break;
        case 188: 
          { return new Symbol (sym.ARYING,yycolumn,yyline, yytext());
          }
        case 731: break;
        case 212: 
          { return new Symbol (sym.UPDATE,yycolumn,yyline, yytext());
          }
        case 732: break;
        case 231: 
          { return new Symbol (sym.DECIMAL,yycolumn,yyline, yytext());
          }
        case 733: break;
        case 112: 
          { return new Symbol (sym.LIKE,yycolumn,yyline, yytext());
          }
        case 734: break;
        case 326: 
          { return new Symbol (sym.INTERSECT,yycolumn,yyline, yytext());
          }
        case 735: break;
        case 362: 
          { return new Symbol (sym.IDENTITYCOL,yycolumn,yyline, yytext());
          }
        case 736: break;
        case 225: 
          { return new Symbol (sym.KEYSET,yycolumn,yyline, yytext());
          }
        case 737: break;
        case 213: 
          { return new Symbol (sym.BACKUP,yycolumn,yyline, yytext());
          }
        case 738: break;
        case 69: 
          { return new Symbol (sym.DEC,yycolumn,yyline, yytext());
          }
        case 739: break;
        case 307: 
          { return new Symbol (sym.SQLERROR,yycolumn,yyline, yytext());
          }
        case 740: break;
        case 367: 
          { return new Symbol (sym.FAST_FORWARD,yycolumn,yyline, yytext());
          }
        case 741: break;
        case 169: 
          { return new Symbol (sym.BREAK,yycolumn,yyline, yytext());
          }
        case 742: break;
        case 45: 
          { return new Symbol (sym.NO,yycolumn,yyline, yytext());
          }
        case 743: break;
        case 374: 
          { return new Symbol (sym.OCTET_LENGTH,yycolumn,yyline, yytext());
          }
        case 744: break;
        case 324: 
          { return new Symbol (sym.UNLIMITED,yycolumn,yyline, yytext());
          }
        case 745: break;
        case 239: 
          { return new Symbol (sym.NATURAL,yycolumn,yyline, yytext());
          }
        case 746: break;
        case 242: 
          { return new Symbol (sym.LEADING,yycolumn,yyline, yytext());
          }
        case 747: break;
        case 23: 
          { return new Symbol(sym.Cierre_de_llaves, yycolumn, yyline, yytext());
          }
        case 748: break;
        case 273: 
          { return new Symbol (sym.ABSOLUTE,yycolumn,yyline, yytext());
          }
        case 749: break;
        case 39: 
          { return new Symbol(sym.Llaves, yycolumn, yyline, yytext());
          }
        case 750: break;
        case 8: 
          { return new Symbol(sym.Multiplicacion, yycolumn, yyline, yytext());
          }
        case 751: break;
        case 264: 
          { return new Symbol (sym.SQLCODE,yycolumn,yyline, yytext());
          }
        case 752: break;
        case 229: 
          { return new Symbol (sym.DEFAULT,yycolumn,yyline, yytext());
          }
        case 753: break;
        case 133: 
          { return new Symbol (sym.OVER,yycolumn,yyline, yytext());
          }
        case 754: break;
        case 164: 
          { return new Symbol (sym.UNION,yycolumn,yyline, yytext());
          }
        case 755: break;
        case 48: 
          { return new Symbol (sym.IF,yycolumn,yyline, yytext());
          }
        case 756: break;
        case 224: 
          { return new Symbol (sym.GLOBAL,yycolumn,yyline, yytext());
          }
        case 757: break;
        case 124: 
          { return new Symbol (sym.BULK,yycolumn,yyline, yytext());
          }
        case 758: break;
        case 296: 
          { return new Symbol (sym.CASCADED,yycolumn,yyline, yytext());
          }
        case 759: break;
        case 289: 
          { return new Symbol (sym.ROWCOUNT,yycolumn,yyline, yytext());
          }
        case 760: break;
        case 31: 
          { return new Symbol(sym.Menor_o_igual_que, yycolumn, yyline, yytext());
          }
        case 761: break;
        case 241: 
          { return new Symbol (sym.NOCHECK,yycolumn,yyline, yytext());
          }
        case 762: break;
        case 77: 
          { return new Symbol (sym.INT,yycolumn,yyline, yytext());
          }
        case 763: break;
        case 354: 
          { return new Symbol (sym.TABLESAMPLE,yycolumn,yyline, yytext());
          }
        case 764: break;
        case 106: 
          { return new Symbol (sym.NAME,yycolumn,yyline, yytext());
          }
        case 765: break;
        case 41: 
          { return new Symbol (sym.AT,yycolumn,yyline, yytext());
          }
        case 766: break;
        case 159: 
          { return new Symbol (sym.CHECK,yycolumn,yyline, yytext());
          }
        case 767: break;
        case 313: 
          { return new Symbol (sym.TEMPORARY,yycolumn,yyline, yytext());
          }
        case 768: break;
        case 345: 
          { return new Symbol (sym.PRIVILEGES,yycolumn,yyline, yytext());
          }
        case 769: break;
        case 387: 
          { return new Symbol (sym.CURRENT_TIMESTAMP,yycolumn,yyline, yytext());
          }
        case 770: break;
        case 290: 
          { return new Symbol (sym.NATIONAL,yycolumn,yyline, yytext());
          }
        case 771: break;
        case 88: 
          { return new Symbol (sym.DENY,yycolumn,yyline, yytext());
          }
        case 772: break;
        case 343: 
          { return new Symbol (sym.CONNECTION,yycolumn,yyline, yytext());
          }
        case 773: break;
        case 352: 
          { return new Symbol (sym.DIAGNOSTICS,yycolumn,yyline, yytext());
          }
        case 774: break;
        case 27: 
          { return new Symbol(sym.Apertura_signo_de_Interrogacion, yycolumn, yyline, yytext());
          }
        case 775: break;
        case 85: 
          { return new Symbol (sym.MAX,yycolumn,yyline, yytext());
          }
        case 776: break;
        case 248: 
          { return new Symbol (sym.CONNECT,yycolumn,yyline, yytext());
          }
        case 777: break;
        case 205: 
          { return new Symbol (sym.CURSOR,yycolumn,yyline, yytext());
          }
        case 778: break;
        case 16: 
          { return new Symbol(sym.Coma, yycolumn, yyline, yytext());
          }
        case 779: break;
        case 310: 
          { return new Symbol (sym.WHENEVER,yycolumn,yyline, yytext());
          }
        case 780: break;
        case 145: 
          { return new Symbol (sym.TABLE,yycolumn,yyline, yytext());
          }
        case 781: break;
        case 148: 
          { return new Symbol (sym.NCHAR,yycolumn,yyline, yytext());
          }
        case 782: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
