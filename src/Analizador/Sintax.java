
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Oct 29 11:50:53 CST 2019
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java_cup.runtime.virtual_parse_stack;
import java.lang.reflect.Field;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Oct 29 11:50:53 CST 2019
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0202\000\002\002\004\000\002\003\005\000\002\003" +
    "\005\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\010\003\000\002\010\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\012\003\000\002\012\005\000\002\013\004\000\002\014" +
    "\004\000\002\014\002\000\002\015\004\000\002\016\004" +
    "\000\002\016\002\000\002\017\004\000\002\020\004\000" +
    "\002\020\002\000\002\021\004\000\002\021\002\000\002" +
    "\022\004\000\002\023\004\000\002\024\003\000\002\024" +
    "\005\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\026\006\000\002\026\002\000\002\027\004\000" +
    "\002\027\002\000\002\030\004\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\032\006\000\002\033\005\000\002\033\002" +
    "\000\002\034\005\000\002\035\006\000\002\036\005\000" +
    "\002\036\002\000\002\037\006\000\002\040\005\000\002" +
    "\040\002\000\002\041\006\000\002\042\005\000\002\043" +
    "\005\000\002\043\002\000\002\044\005\000\002\045\004" +
    "\000\002\045\003\000\002\045\002\000\002\046\003\000" +
    "\002\046\003\000\002\047\004\000\002\050\005\000\002" +
    "\050\005\000\002\050\002\000\002\051\004\000\002\052" +
    "\005\000\002\052\005\000\002\052\002\000\002\053\006" +
    "\000\002\053\003\000\002\054\003\000\002\054\003\000" +
    "\002\054\003\000\002\054\003\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\005\000\002\054" +
    "\005\000\002\054\005\000\002\054\005\000\002\054\005" +
    "\000\002\055\004\000\002\055\004\000\002\055\004\000" +
    "\002\056\003\000\002\056\002\000\002\057\007\000\002" +
    "\057\002\000\002\060\003\000\002\060\002\000\002\061" +
    "\005\000\002\061\002\000\002\062\005\000\002\062\006" +
    "\000\002\063\004\000\002\063\004\000\002\063\002\000" +
    "\002\064\004\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\002" +
    "\003\000\002\065\004\000\002\065\005\000\002\065\004" +
    "\000\002\066\007\000\002\066\006\000\002\066\004\000" +
    "\002\067\004\000\002\067\002\000\002\070\005\000\002" +
    "\070\004\000\002\071\006\000\002\071\002\000\002\072" +
    "\005\000\002\073\004\000\002\074\005\000\002\074\002" +
    "\000\002\075\013\000\002\076\003\000\002\076\003\000" +
    "\002\076\002\000\002\077\004\000\002\077\002\000\002" +
    "\100\010\000\002\100\002\000\002\101\004\000\002\101" +
    "\002\000\002\102\003\000\002\102\003\000\002\102\002" +
    "\000\002\103\005\000\002\103\002\000\002\104\006\000" +
    "\002\104\002\000\002\105\005\000\002\105\002\000\002" +
    "\106\010\000\002\107\003\000\002\107\002\000\002\110" +
    "\003\000\002\110\002\000\002\111\004\000\002\112\003" +
    "\000\002\112\003\000\002\112\003\000\002\112\003\000" +
    "\002\112\003\000\002\113\005\000\002\113\002\000\002" +
    "\114\007\000\002\114\004\000\002\115\007\000\002\115" +
    "\002\000\002\116\006\000\002\117\003\000\002\117\002" +
    "\000\002\120\004\000\002\120\005\000\002\121\005\000" +
    "\002\122\005\000\002\122\002\000\002\123\007\000\002" +
    "\124\011\000\002\125\006\000\002\126\003\000\002\126" +
    "\003\000\002\127\004\000\002\127\002\000\002\130\005" +
    "\000\002\130\002\000\002\131\007\000\002\131\002\000" +
    "\002\132\006\000\002\132\002\000\002\133\011\000\002" +
    "\133\002\000\002\134\003\000\002\134\004\000\002\134" +
    "\004\000\002\134\004\000\002\134\002\000\002\135\003" +
    "\000\002\135\002\000\002\136\004\000\002\137\003\000" +
    "\002\137\003\000\002\137\003\000\002\137\003\000\002" +
    "\137\003\000\002\137\003\000\002\137\003\000\002\140" +
    "\004\000\002\141\005\000\002\142\004\000\002\143\005" +
    "\000\002\143\002\000\002\144\003\000\002\144\002\000" +
    "\002\145\005\000\002\145\003\000\002\146\014\000\002" +
    "\147\004\000\002\147\002\000\002\151\005\000\002\151" +
    "\002\000\002\153\003\000\002\153\003\000\002\153\003" +
    "\000\002\154\003\000\002\154\003\000\002\360\006\000" +
    "\002\361\005\000\002\155\003\000\002\155\003\000\002" +
    "\155\003\000\002\155\003\000\002\156\005\000\002\157" +
    "\004\000\002\157\003\000\002\160\006\000\002\161\003" +
    "\000\002\161\003\000\002\161\002\000\002\162\006\000" +
    "\002\163\014\000\002\164\003\000\002\164\002\000\002" +
    "\165\005\000\002\166\005\000\002\167\006\000\002\167" +
    "\002\000\002\170\004\000\002\170\002\000\002\171\007" +
    "\000\002\171\002\000\002\172\011\000\002\173\004\000" +
    "\002\173\002\000\002\174\004\000\002\174\002\000\002" +
    "\351\005\000\002\351\003\000\002\352\004\000\002\352" +
    "\002\000\002\175\003\000\002\175\003\000\002\175\003" +
    "\000\002\176\005\000\002\176\002\000\002\177\006\000" +
    "\002\356\005\000\002\356\003\000\002\356\002\000\002" +
    "\357\010\000\002\357\007\000\002\357\006\000\002\357" +
    "\004\000\002\357\004\000\002\354\003\000\002\354\002" +
    "\000\002\355\003\000\002\355\005\000\002\353\004\000" +
    "\002\353\003\000\002\353\002\000\002\200\004\000\002" +
    "\200\002\000\002\201\003\000\002\201\003\000\002\201" +
    "\003\000\002\201\003\000\002\201\003\000\002\202\004" +
    "\000\002\202\002\000\002\203\007\000\002\203\002\000" +
    "\002\204\003\000\002\204\002\000\002\205\003\000\002" +
    "\205\002\000\002\206\005\000\002\206\002\000\002\207" +
    "\004\000\002\207\002\000\002\210\005\000\002\210\004" +
    "\000\002\210\010\000\002\210\007\000\002\211\003\000" +
    "\002\211\003\000\002\211\002\000\002\212\004\000\002" +
    "\212\002\000\002\213\005\000\002\213\002\000\002\214" +
    "\005\000\002\214\002\000\002\215\004\000\002\215\004" +
    "\000\002\216\003\000\002\216\003\000\002\217\003\000" +
    "\002\217\004\000\002\220\004\000\002\221\006\000\002" +
    "\221\005\000\002\221\012\000\002\221\007\000\002\222" +
    "\007\000\002\223\006\000\002\223\002\000\002\224\006" +
    "\000\002\225\005\000\002\225\002\000\002\226\006\000" +
    "\002\227\004\000\002\230\003\000\002\230\003\000\002" +
    "\230\003\000\002\230\003\000\002\230\003\000\002\230" +
    "\003\000\002\231\005\000\002\232\003\000\002\232\003" +
    "\000\002\233\004\000\002\233\005\000\002\234\004\000" +
    "\002\235\007\000\002\236\003\000\002\236\002\000\002" +
    "\237\005\000\002\240\003\000\002\240\005\000\002\240" +
    "\003\000\002\241\006\000\002\242\003\000\002\242\004" +
    "\000\002\243\005\000\002\244\003\000\002\244\003\000" +
    "\002\245\003\000\002\245\005\000\002\246\005\000\002" +
    "\247\005\000\002\247\005\000\002\250\003\000\002\250" +
    "\002\000\002\251\005\000\002\251\002\000\002\253\005" +
    "\000\002\254\004\000\002\254\002\000\002\255\005\000" +
    "\002\255\002\000\002\256\003\000\002\256\002\000\002" +
    "\257\005\000\002\260\003\000\002\260\003\000\002\261" +
    "\003\000\002\261\003\000\002\261\002\000\002\262\003" +
    "\000\002\262\003\000\002\263\004\000\002\264\004\000" +
    "\002\264\002\000\002\265\004\000\002\266\004\000\002" +
    "\266\002\000\002\267\013\000\002\270\003\000\002\270" +
    "\003\000\002\271\004\000\002\271\002\000\002\272\003" +
    "\000\002\272\002\000\002\273\005\000\002\274\004\000" +
    "\002\274\002\000\002\275\005\000\002\275\005\000\002" +
    "\275\004\000\002\276\004\000\002\276\002\000\002\277" +
    "\003\000\002\277\002\000\002\300\003\000\002\300\003" +
    "\000\002\301\004\000\002\301\002\000\002\302\004\000" +
    "\002\303\003\000\002\303\003\000\002\303\005\000\002" +
    "\304\003\000\002\304\003\000\002\305\004\000\002\305" +
    "\002\000\002\306\003\000\002\306\003\000\002\306\003" +
    "\000\002\306\003\000\002\307\004\000\002\307\002\000" +
    "\002\310\005\000\002\311\005\000\002\312\005\000\002" +
    "\312\002\000\002\313\004\000\002\313\002\000\002\340" +
    "\015\000\002\341\003\000\002\341\003\000\002\341\002" +
    "\000\002\342\003\000\002\342\003\000\002\342\002\000" +
    "\002\343\003\000\002\343\003\000\002\343\003\000\002" +
    "\343\003\000\002\343\002\000\002\344\003\000\002\344" +
    "\003\000\002\344\003\000\002\344\002\000\002\345\003" +
    "\000\002\345\002\000\002\346\005\000\002\346\002\000" +
    "\002\347\004\000\002\347\002\000\002\314\012\000\002" +
    "\315\003\000\002\315\002\000\002\316\004\000\002\316" +
    "\002\000\002\317\006\000\002\320\004\000\002\321\004" +
    "\000\002\321\002\000\002\322\003\000\002\322\002\000" +
    "\002\323\003\000\002\323\002\000\002\324\003\000\002" +
    "\324\003\000\002\325\012\000\002\326\007\000\002\327" +
    "\005\000\002\327\003\000\002\330\003\000\002\330\003" +
    "\000\002\330\003\000\002\330\003\000\002\330\003\000" +
    "\002\331\004\000\002\332\004\000\002\333\003\000\002" +
    "\333\003\000\002\333\007\000\002\333\006\000\002\333" +
    "\003\000\002\333\005\000\002\334\004\000\002\334\002" +
    "\000\002\335\003\000\002\335\003\000\002\366\005\000" +
    "\002\362\004\000\002\362\007\000\002\362\005\000\002" +
    "\363\006\000\002\363\004\000\002\364\004\000\002\364" +
    "\002\000\002\365\003\000\002\365\003\000\002\365\003" +
    "\000\002\365\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0377\000\044\002\ufffe\003\023\066\015\111\020\132" +
    "\047\146\033\157\021\164\034\166\045\213\035\253\007" +
    "\254\026\262\014\274\013\306\037\332\044\335\012\001" +
    "\002\000\010\037\u026f\u0103\u0270\u0188\u0271\001\002\000\012" +
    "\037\ufff6\116\ufff6\u0103\ufff6\u0188\ufff6\001\002\000\010\037" +
    "\ufffc\u0103\ufffc\u0188\ufffc\001\002\000\004\220\u0376\001\002" +
    "\000\012\037\ufff7\116\ufff7\u0103\ufff7\u0188\ufff7\001\002\000" +
    "\010\037\ufffd\u0103\ufffd\u0188\ufffd\001\002\000\010\012\ufe55" +
    "\050\ufe55\076\ufe55\001\002\000\010\012\uff8d\050\uff8d\237" +
    "\u0284\001\002\000\014\012\uff8d\050\uff8d\107\uff8d\237\u0284" +
    "\273\uff8d\001\002\000\022\062\213\115\ufe2b\220\u031b\243" +
    "\u0315\305\u0317\315\u031c\344\ufe2b\372\ufe2b\001\002\000\010" +
    "\037\ufff3\u0103\ufff3\u0188\ufff3\001\002\000\012\037\ufff9\116" +
    "\ufff9\u0103\ufff9\u0188\ufff9\001\002\000\006\242\054\245\051" +
    "\001\002\000\046\010\uff69\012\uff69\016\uff69\017\uff69\020" +
    "\uff69\022\uff69\042\uff69\050\uff69\052\uff69\237\uff69\244\uff69" +
    "\275\u02c7\354\u02c8\377\uff69\u012c\uff69\u0131\uff69\u013c\uff69\u013d" +
    "\uff69\001\002\000\010\037\ufff0\u0103\ufff0\u0188\ufff0\001\002" +
    "\000\010\037\u026f\u0103\u0270\u0188\u0271\001\002\000\010\037" +
    "\ufffb\u0103\ufffb\u0188\ufffb\001\002\000\010\037\ufff2\u0103\ufff2" +
    "\u0188\ufff2\001\002\000\006\012\057\050\062\001\002\000" +
    "\010\037\ufffa\u0103\ufffa\u0188\ufffa\001\002\000\010\037\uffec" +
    "\u0103\uffec\u0188\uffec\001\002\000\012\037\ufff8\116\ufff8\u0103" +
    "\ufff8\u0188\ufff8\001\002\000\010\037\ufff5\u0103\ufff5\u0188\ufff5" +
    "\001\002\000\006\242\054\245\051\001\002\000\012\012" +
    "\uff8d\050\uff8d\172\uff8d\237\u0284\001\002\000\032\062\213" +
    "\115\ufe2b\152\ufeff\156\ufeff\220\207\236\ufeff\243\201\266" +
    "\204\305\203\315\210\344\ufe2b\372\ufe2b\001\002\000\010" +
    "\037\uffee\u0103\uffee\u0188\uffee\001\002\000\014\156\122\220" +
    "\126\243\121\305\123\315\125\001\002\000\010\037\uffef" +
    "\u0103\uffef\u0188\uffef\001\002\000\010\037\ufff1\u0103\ufff1\u0188" +
    "\ufff1\001\002\000\004\002\116\001\002\000\010\037\uffed" +
    "\u0103\uffed\u0188\uffed\001\002\000\010\012\ufe54\050\ufe54\076" +
    "\ufe54\001\002\000\014\037\ufe72\242\054\245\051\u0103\ufe72" +
    "\u0188\ufe72\001\002\000\006\012\057\050\062\001\002\000" +
    "\014\037\ufe6f\242\054\245\051\u0103\ufe6f\u0188\ufe6f\001\002" +
    "\000\010\037\ufff4\u0103\ufff4\u0188\ufff4\001\002\000\016\012" +
    "\ufe75\037\ufe75\042\ufe75\050\ufe75\u0103\ufe75\u0188\ufe75\001\002" +
    "\000\010\037\ufe71\u0103\ufe71\u0188\ufe71\001\002\000\016\012" +
    "\057\037\ufe77\042\060\050\062\u0103\ufe77\u0188\ufe77\001\002" +
    "\000\016\012\ufe76\037\ufe76\042\ufe76\050\ufe76\u0103\ufe76\u0188" +
    "\ufe76\001\002\000\010\037\ufe79\u0103\ufe79\u0188\ufe79\001\002" +
    "\000\010\037\ufe78\u0103\ufe78\u0188\ufe78\001\002\000\264\005" +
    "\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8\016\uffe8" +
    "\017\uffe8\020\uffe8\022\uffe8\024\uffe8\025\uffe8\026\uffe8\027" +
    "\uffe8\031\uffe8\037\uffe8\040\uffe8\041\uffe8\042\uffe8\050\uffe8" +
    "\052\uffe8\055\uffe8\060\uffe8\061\uffe8\062\uffe8\066\uffe8\074" +
    "\uffe8\076\uffe8\077\uffe8\102\uffe8\107\uffe8\111\uffe8\112\uffe8" +
    "\114\uffe8\116\uffe8\126\uffe8\127\uffe8\131\uffe8\137\uffe8\140" +
    "\uffe8\141\uffe8\152\uffe8\153\uffe8\160\uffe8\161\uffe8\174\uffe8" +
    "\175\uffe8\176\uffe8\200\uffe8\211\uffe8\214\uffe8\236\uffe8\240" +
    "\uffe8\241\uffe8\244\uffe8\257\uffe8\266\uffe8\267\uffe8\303\uffe8" +
    "\306\uffe8\307\uffe8\311\uffe8\326\uffe8\334\uffe8\336\uffe8\364" +
    "\uffe8\370\uffe8\376\uffe8\377\uffe8\u0103\uffe8\u0104\uffe8\u0111\uffe8" +
    "\u011a\uffe8\u011d\uffe8\u0120\uffe8\u012c\uffe8\u0131\uffe8\u0133\uffe8\u013c" +
    "\uffe8\u013d\uffe8\u013f\uffe8\u0149\uffe8\u014c\uffe8\u0159\uffe8\u015a\uffe8" +
    "\u015f\uffe8\u016a\uffe8\u0188\uffe8\u0189\uffe8\001\002\000\004\012" +
    "\065\001\002\000\010\037\ufe70\u0103\ufe70\u0188\ufe70\001\002" +
    "\000\004\012\063\001\002\000\004\053\064\001\002\000" +
    "\264\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7" +
    "\016\uffe7\017\uffe7\020\uffe7\022\uffe7\024\uffe7\025\uffe7\026" +
    "\uffe7\027\uffe7\031\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7" +
    "\050\uffe7\052\uffe7\055\uffe7\060\uffe7\061\uffe7\062\uffe7\066" +
    "\uffe7\074\uffe7\076\uffe7\077\uffe7\102\uffe7\107\uffe7\111\uffe7" +
    "\112\uffe7\114\uffe7\116\uffe7\126\uffe7\127\uffe7\131\uffe7\137" +
    "\uffe7\140\uffe7\141\uffe7\152\uffe7\153\uffe7\160\uffe7\161\uffe7" +
    "\174\uffe7\175\uffe7\176\uffe7\200\uffe7\211\uffe7\214\uffe7\236" +
    "\uffe7\240\uffe7\241\uffe7\244\uffe7\257\uffe7\266\uffe7\267\uffe7" +
    "\303\uffe7\306\uffe7\307\uffe7\311\uffe7\326\uffe7\334\uffe7\336" +
    "\uffe7\364\uffe7\370\uffe7\376\uffe7\377\uffe7\u0103\uffe7\u0104\uffe7" +
    "\u0111\uffe7\u011a\uffe7\u011d\uffe7\u0120\uffe7\u012c\uffe7\u0131\uffe7\u0133" +
    "\uffe7\u013c\uffe7\u013d\uffe7\u013f\uffe7\u0149\uffe7\u014c\uffe7\u0159\uffe7" +
    "\u015a\uffe7\u015f\uffe7\u016a\uffe7\u0188\uffe7\u0189\uffe7\001\002\000" +
    "\220\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\022\uffdb\024\uffdb\025\uffdb\026" +
    "\uffdb\027\uffdb\031\uffdb\037\uffdb\040\uffdb\042\uffdb\050\uffdb" +
    "\052\uffdb\055\uffdb\061\uffdb\062\uffdb\074\uffdb\076\uffdb\107" +
    "\uffdb\112\uffdb\114\uffdb\116\uffdb\126\uffdb\127\uffdb\131\uffdb" +
    "\153\uffdb\160\uffdb\161\uffdb\175\uffdb\200\uffdb\211\uffdb\214" +
    "\uffdb\240\uffdb\241\uffdb\244\uffdb\267\uffdb\303\uffdb\311\uffdb" +
    "\316\uffdb\326\uffdb\334\uffdb\364\uffdb\370\uffdb\376\uffdb\377" +
    "\uffdb\u0103\uffdb\u0104\uffdb\u0111\uffdb\u011a\uffdb\u011d\uffdb\u0120\uffdb" +
    "\u012c\uffdb\u0131\uffdb\u0133\uffdb\u013c\uffdb\u013d\uffdb\u013f\uffdb\u0149" +
    "\uffdb\u014c\uffdb\u0159\uffdb\u015a\uffdb\u015f\uffdb\u0188\uffdb\u0189\uffdb" +
    "\001\002\000\210\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011" +
    "\uffe4\012\uffe4\016\uffe4\017\uffe4\020\uffe4\022\uffe4\024\uffe4" +
    "\025\uffe4\026\uffe4\027\uffe4\031\uffe4\037\uffe4\040\uffe4\041" +
    "\111\042\uffe4\050\uffe4\052\uffe4\055\uffe4\060\uffe4\061\uffe4" +
    "\062\uffe4\066\uffe4\074\uffe4\076\uffe4\077\uffe4\102\uffe4\107" +
    "\uffe4\112\uffe4\114\uffe4\116\uffe4\126\uffe4\127\uffe4\131\uffe4" +
    "\141\uffe4\153\uffe4\160\uffe4\161\uffe4\174\uffe4\175\uffe4\176" +
    "\uffe4\200\uffe4\211\uffe4\214\uffe4\241\uffe4\244\uffe4\257\uffe4" +
    "\266\uffe4\267\uffe4\306\uffe4\307\uffe4\311\uffe4\326\uffe4\334" +
    "\uffe4\336\uffe4\370\uffe4\377\uffe4\u0103\uffe4\u012c\uffe4\u0131\uffe4" +
    "\u013c\uffe4\u013d\uffe4\u015f\uffe4\u0188\uffe4\001\002\000\024\016" +
    "\074\017\076\020\077\022\071\037\ufe0a\042\060\052\073" +
    "\u0103\ufe0a\u0188\ufe0a\001\002\000\004\005\105\001\002\000" +
    "\014\037\ufe02\040\ufe02\055\ufe02\u0103\ufe02\u0188\ufe02\001\002" +
    "\000\014\037\ufe04\040\102\055\ufe04\u0103\ufe04\u0188\ufe04\001" +
    "\002\000\014\016\074\017\076\020\077\022\071\042\060" +
    "\001\002\000\014\037\ufe03\040\ufe03\055\ufe03\u0103\ufe03\u0188" +
    "\ufe03\001\002\000\010\037\ufe08\u0103\ufe08\u0188\ufe08\001\002" +
    "\000\014\037\ufe00\040\ufe00\055\ufe00\u0103\ufe00\u0188\ufe00\001" +
    "\002\000\014\037\ufe01\040\ufe01\055\ufe01\u0103\ufe01\u0188\ufe01" +
    "\001\002\000\004\055\101\001\002\000\010\037\ufe09\u0103" +
    "\ufe09\u0188\ufe09\001\002\000\014\016\074\017\076\020\077" +
    "\022\071\042\060\001\002\000\012\037\ufe06\055\ufe06\u0103" +
    "\ufe06\u0188\ufe06\001\002\000\012\037\ufe05\055\ufe05\u0103\ufe05" +
    "\u0188\ufe05\001\002\000\012\016\074\017\076\020\077\022" +
    "\071\001\002\000\014\037\ufe04\040\102\055\ufe04\u0103\ufe04" +
    "\u0188\ufe04\001\002\000\012\037\ufe07\055\ufe07\u0103\ufe07\u0188" +
    "\ufe07\001\002\000\206\005\uffe6\006\uffe6\007\uffe6\010\uffe6" +
    "\011\uffe6\012\uffe6\016\uffe6\017\uffe6\020\uffe6\022\uffe6\024" +
    "\uffe6\025\uffe6\026\uffe6\027\uffe6\031\uffe6\037\uffe6\040\uffe6" +
    "\042\uffe6\050\uffe6\052\uffe6\055\uffe6\060\uffe6\061\uffe6\062" +
    "\uffe6\066\uffe6\074\uffe6\076\uffe6\077\uffe6\102\uffe6\107\uffe6" +
    "\112\uffe6\114\uffe6\116\uffe6\126\uffe6\127\uffe6\131\uffe6\141" +
    "\uffe6\153\uffe6\160\uffe6\161\uffe6\174\uffe6\175\uffe6\176\uffe6" +
    "\200\uffe6\211\uffe6\214\uffe6\241\uffe6\244\uffe6\257\uffe6\266" +
    "\uffe6\267\uffe6\306\uffe6\307\uffe6\311\uffe6\326\uffe6\334\uffe6" +
    "\336\uffe6\370\uffe6\377\uffe6\u0103\uffe6\u012c\uffe6\u0131\uffe6\u013c" +
    "\uffe6\u013d\uffe6\u015f\uffe6\u0188\uffe6\001\002\000\006\012\057" +
    "\050\062\001\002\000\206\005\uffe5\006\uffe5\007\uffe5\010" +
    "\uffe5\011\uffe5\012\uffe5\016\uffe5\017\uffe5\020\uffe5\022\uffe5" +
    "\024\uffe5\025\uffe5\026\uffe5\027\uffe5\031\uffe5\037\uffe5\040" +
    "\uffe5\042\uffe5\050\uffe5\052\uffe5\055\uffe5\060\uffe5\061\uffe5" +
    "\062\uffe5\066\uffe5\074\uffe5\076\uffe5\077\uffe5\102\uffe5\107" +
    "\uffe5\112\uffe5\114\uffe5\116\uffe5\126\uffe5\127\uffe5\131\uffe5" +
    "\141\uffe5\153\uffe5\160\uffe5\161\uffe5\174\uffe5\175\uffe5\176" +
    "\uffe5\200\uffe5\211\uffe5\214\uffe5\241\uffe5\244\uffe5\257\uffe5" +
    "\266\uffe5\267\uffe5\306\uffe5\307\uffe5\311\uffe5\326\uffe5\334" +
    "\uffe5\336\uffe5\370\uffe5\377\uffe5\u0103\uffe5\u012c\uffe5\u0131\uffe5" +
    "\u013c\uffe5\u013d\uffe5\u015f\uffe5\u0188\uffe5\001\002\000\010\037" +
    "\ufe74\u0103\ufe74\u0188\ufe74\001\002\000\016\012\057\037\ufe77" +
    "\042\060\050\062\u0103\ufe77\u0188\ufe77\001\002\000\010\037" +
    "\ufe73\u0103\ufe73\u0188\ufe73\001\002\000\004\002\001\001\002" +
    "\000\010\037\uffc2\u0103\uffc2\u0188\uffc2\001\002\000\010\037" +
    "\uffc0\u0103\uffc0\u0188\uffc0\001\002\000\010\012\uffdc\050\uffdc" +
    "\150\132\001\002\000\010\012\uffdc\050\uffdc\150\132\001" +
    "\002\000\010\012\uffdc\050\uffdc\150\132\001\002\000\010" +
    "\037\uffc1\u0103\uffc1\u0188\uffc1\001\002\000\010\012\uffdc\050" +
    "\uffdc\150\132\001\002\000\010\012\uffdc\050\uffdc\150\132" +
    "\001\002\000\010\037\uffc3\u0103\uffc3\u0188\uffc3\001\002\000" +
    "\010\037\uffbe\u0103\uffbe\u0188\uffbe\001\002\000\010\037\uffbf" +
    "\u0103\uffbf\u0188\uffbf\001\002\000\004\340\145\001\002\000" +
    "\006\012\057\050\062\001\002\000\172\005\uffe1\006\uffe1" +
    "\007\uffe1\010\uffe1\011\uffe1\012\uffe1\016\uffe1\017\uffe1\020" +
    "\uffe1\022\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\031\uffe1" +
    "\037\uffe1\040\uffe1\041\143\042\uffe1\050\uffe1\052\uffe1\055" +
    "\uffe1\060\uffe1\061\uffe1\062\uffe1\066\uffe1\074\uffe1\076\uffe1" +
    "\107\uffe1\112\uffe1\114\uffe1\116\uffe1\126\uffe1\127\uffe1\131" +
    "\uffe1\153\uffe1\160\uffe1\161\uffe1\175\uffe1\176\uffe1\200\uffe1" +
    "\211\uffe1\214\uffe1\241\uffe1\244\uffe1\257\uffe1\267\uffe1\306" +
    "\uffe1\307\uffe1\311\uffe1\326\uffe1\370\uffe1\377\uffe1\u0103\uffe1" +
    "\u012c\uffe1\u0131\uffe1\u013c\uffe1\u013d\uffe1\u015f\uffe1\u0188\uffe1\001" +
    "\002\000\012\037\uffbb\040\136\u0103\uffbb\u0188\uffbb\001\002" +
    "\000\006\012\057\050\062\001\002\000\010\037\uffbd\u0103" +
    "\uffbd\u0188\uffbd\001\002\000\012\037\uffbb\040\136\u0103\uffbb" +
    "\u0188\uffbb\001\002\000\010\037\uffbc\u0103\uffbc\u0188\uffbc\001" +
    "\002\000\170\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3" +
    "\012\uffe3\016\uffe3\017\uffe3\020\uffe3\022\uffe3\024\uffe3\025" +
    "\uffe3\026\uffe3\027\uffe3\031\uffe3\037\uffe3\040\uffe3\042\uffe3" +
    "\050\uffe3\052\uffe3\055\uffe3\060\uffe3\061\uffe3\062\uffe3\066" +
    "\uffe3\074\uffe3\076\uffe3\107\uffe3\112\uffe3\114\uffe3\116\uffe3" +
    "\126\uffe3\127\uffe3\131\uffe3\153\uffe3\160\uffe3\161\uffe3\175" +
    "\uffe3\176\uffe3\200\uffe3\211\uffe3\214\uffe3\241\uffe3\244\uffe3" +
    "\257\uffe3\267\uffe3\306\uffe3\307\uffe3\311\uffe3\326\uffe3\370" +
    "\uffe3\377\uffe3\u0103\uffe3\u012c\uffe3\u0131\uffe3\u013c\uffe3\u013d\uffe3" +
    "\u015f\uffe3\u0188\uffe3\001\002\000\006\012\057\050\062\001" +
    "\002\000\170\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2" +
    "\012\uffe2\016\uffe2\017\uffe2\020\uffe2\022\uffe2\024\uffe2\025" +
    "\uffe2\026\uffe2\027\uffe2\031\uffe2\037\uffe2\040\uffe2\042\uffe2" +
    "\050\uffe2\052\uffe2\055\uffe2\060\uffe2\061\uffe2\062\uffe2\066" +
    "\uffe2\074\uffe2\076\uffe2\107\uffe2\112\uffe2\114\uffe2\116\uffe2" +
    "\126\uffe2\127\uffe2\131\uffe2\153\uffe2\160\uffe2\161\uffe2\175" +
    "\uffe2\176\uffe2\200\uffe2\211\uffe2\214\uffe2\241\uffe2\244\uffe2" +
    "\257\uffe2\267\uffe2\306\uffe2\307\uffe2\311\uffe2\326\uffe2\370" +
    "\uffe2\377\uffe2\u0103\uffe2\u012c\uffe2\u0131\uffe2\u013c\uffe2\u013d\uffe2" +
    "\u015f\uffe2\u0188\uffe2\001\002\000\006\012\uffdd\050\uffdd\001" +
    "\002\000\006\012\057\050\062\001\002\000\012\037\uffb4" +
    "\040\150\u0103\uffb4\u0188\uffb4\001\002\000\006\012\057\050" +
    "\062\001\002\000\010\037\uffb6\u0103\uffb6\u0188\uffb6\001\002" +
    "\000\012\037\uffb4\040\150\u0103\uffb4\u0188\uffb4\001\002\000" +
    "\010\037\uffb5\u0103\uffb5\u0188\uffb5\001\002\000\006\012\057" +
    "\050\062\001\002\000\010\037\uffba\u0103\uffba\u0188\uffba\001" +
    "\002\000\006\012\057\050\062\001\002\000\004\u015f\165" +
    "\001\002\000\012\037\uffb0\040\162\u0103\uffb0\u0188\uffb0\001" +
    "\002\000\010\037\uffb3\u0103\uffb3\u0188\uffb3\001\002\000\006" +
    "\012\057\050\062\001\002\000\012\037\uffb0\040\162\u0103" +
    "\uffb0\u0188\uffb0\001\002\000\010\037\uffb1\u0103\uffb1\u0188\uffb1" +
    "\001\002\000\006\012\057\050\062\001\002\000\012\037" +
    "\uffb2\040\uffb2\u0103\uffb2\u0188\uffb2\001\002\000\006\012\057" +
    "\050\062\001\002\000\012\037\uffb7\040\171\u0103\uffb7\u0188" +
    "\uffb7\001\002\000\006\012\057\050\062\001\002\000\010" +
    "\037\uffb9\u0103\uffb9\u0188\uffb9\001\002\000\012\037\uffb7\040" +
    "\171\u0103\uffb7\u0188\uffb7\001\002\000\010\037\uffb8\u0103\uffb8" +
    "\u0188\uffb8\001\002\000\010\037\uff23\u0103\uff23\u0188\uff23\001" +
    "\002\000\010\037\uff25\u0103\uff25\u0188\uff25\001\002\000\010" +
    "\115\u0203\344\u0202\372\u0200\001\002\000\010\037\uff29\u0103" +
    "\uff29\u0188\uff29\001\002\000\006\012\057\050\062\001\002" +
    "\000\010\037\uff24\u0103\uff24\u0188\uff24\001\002\000\004\012" +
    "\u01cc\001\002\000\010\152\uff00\156\uff00\236\uff00\001\002" +
    "\000\010\037\uff28\u0103\uff28\u0188\uff28\001\002\000\010\037" +
    "\uff2a\u0103\uff2a\u0188\uff2a\001\002\000\006\012\057\050\062" +
    "\001\002\000\006\012\057\050\062\001\002\000\010\037" +
    "\uff27\u0103\uff27\u0188\uff27\001\002\000\010\037\uff26\u0103\uff26" +
    "\u0188\uff26\001\002\000\004\066\u0113\001\002\000\010\152" +
    "\215\156\ufebf\236\216\001\002\000\034\037\ufec1\040\ufec1" +
    "\052\ufec1\055\ufec1\077\ufec1\102\ufec1\141\ufec1\156\ufec1\174" +
    "\ufec1\266\ufec1\336\ufec1\u0103\ufec1\u0188\ufec1\001\002\000\034" +
    "\037\ufec0\040\ufec0\052\ufec0\055\ufec0\077\ufec0\102\ufec0\141" +
    "\ufec0\156\ufec0\174\ufec0\266\ufec0\336\ufec0\u0103\ufec0\u0188\ufec0" +
    "\001\002\000\004\156\220\001\002\000\006\012\057\050" +
    "\062\001\002\000\004\u015f\222\001\002\000\006\012\057" +
    "\050\062\001\002\000\004\052\224\001\002\000\006\012" +
    "\057\050\062\001\002\000\016\037\ufef9\326\ufef9\u0103\ufef9" +
    "\u0110\226\u015f\ufef9\u0188\ufef9\001\002\000\004\052\u0100\001" +
    "\002\000\014\037\uff75\326\230\u0103\uff75\u015f\uff75\u0188\uff75" +
    "\001\002\000\040\012\uff8f\016\uff8f\017\uff8f\020\uff8f\022" +
    "\uff8f\042\uff8f\050\uff8f\052\240\241\243\244\uff8f\377\uff8f" +
    "\u012c\uff8f\u0131\uff8f\u013c\uff8f\u013d\uff8f\001\002\000\012\037" +
    "\ufef7\u0103\ufef7\u015f\232\u0188\ufef7\001\002\000\006\012\057" +
    "\050\062\001\002\000\010\037\uff01\u0103\uff01\u0188\uff01\001" +
    "\002\000\004\052\235\001\002\000\006\012\057\050\062" +
    "\001\002\000\004\055\237\001\002\000\010\037\ufef8\u0103" +
    "\ufef8\u0188\ufef8\001\002\000\040\012\uff8f\016\uff8f\017\uff8f" +
    "\020\uff8f\022\uff8f\042\uff8f\050\uff8f\052\240\241\243\244" +
    "\uff8f\377\uff8f\u012c\uff8f\u0131\uff8f\u013c\uff8f\u013d\uff8f\001\002" +
    "\000\036\012\057\016\251\017\260\020\265\022\245\042" +
    "\060\050\062\052\262\244\263\377\255\u012c\244\u0131\264" +
    "\u013c\261\u013d\257\001\002\000\026\037\uff76\055\uff76\074" +
    "\uff76\116\uff76\126\uff76\131\uff76\311\uff76\u0103\uff76\u015f\uff76" +
    "\u0188\uff76\001\002\000\044\012\uff90\016\uff90\017\uff90\020" +
    "\uff90\022\uff90\042\uff90\050\uff90\052\uff90\114\uff90\153\uff90" +
    "\214\uff90\244\uff90\377\uff90\u012c\uff90\u0131\uff90\u013c\uff90\u013d" +
    "\uff90\001\002\000\004\052\372\001\002\000\154\005\uff9d" +
    "\006\uff9d\007\uff9d\010\uff9d\011\uff9d\012\uff9d\016\uff9d\017" +
    "\uff9d\020\uff9d\022\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d" +
    "\031\uff9d\037\uff9d\040\uff9d\042\uff9d\050\uff9d\052\uff9d\055" +
    "\uff9d\061\uff9d\062\uff9d\074\uff9d\076\uff9d\107\uff9d\112\uff9d" +
    "\114\uff9d\116\uff9d\126\uff9d\127\uff9d\131\uff9d\153\uff9d\160" +
    "\uff9d\161\uff9d\175\uff9d\200\uff9d\211\uff9d\214\uff9d\241\uff9d" +
    "\244\uff9d\267\uff9d\311\uff9d\326\uff9d\370\uff9d\377\uff9d\u0103" +
    "\uff9d\u012c\uff9d\u0131\uff9d\u013c\uff9d\u013d\uff9d\u015f\uff9d\u0188\uff9d" +
    "\001\002\000\154\005\uffa0\006\uffa0\007\uffa0\010\uffa0\011" +
    "\uffa0\012\uffa0\016\uffa0\017\uffa0\020\uffa0\022\uffa0\024\uffa0" +
    "\025\uffa0\026\uffa0\027\uffa0\031\uffa0\037\uffa0\040\uffa0\042" +
    "\uffa0\050\uffa0\052\uffa0\055\uffa0\061\uffa0\062\uffa0\074\uffa0" +
    "\076\uffa0\107\uffa0\112\uffa0\114\uffa0\116\uffa0\126\uffa0\127" +
    "\uffa0\131\uffa0\153\uffa0\160\uffa0\161\uffa0\175\uffa0\200\uffa0" +
    "\211\uffa0\214\uffa0\241\uffa0\244\uffa0\267\uffa0\311\uffa0\326" +
    "\uffa0\370\uffa0\377\uffa0\u0103\uffa0\u012c\uffa0\u0131\uffa0\u013c\uffa0" +
    "\u013d\uffa0\u015f\uffa0\u0188\uffa0\001\002\000\030\005\362\024" +
    "\363\025\361\026\356\027\354\031\357\114\uff8f\153\uff8f" +
    "\175\365\214\uff8f\241\243\001\002\000\154\005\uffa2\006" +
    "\uffa2\007\uffa2\010\347\011\345\012\uffa2\016\uffa2\017\uffa2" +
    "\020\uffa2\022\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\031" +
    "\uffa2\037\uffa2\040\uffa2\042\uffa2\050\uffa2\052\uffa2\055\uffa2" +
    "\061\uffa2\062\uffa2\074\uffa2\076\uffa2\107\uffa2\112\uffa2\114" +
    "\uffa2\116\uffa2\126\uffa2\127\uffa2\131\uffa2\153\uffa2\160\uffa2" +
    "\161\uffa2\175\uffa2\200\uffa2\211\uffa2\214\uffa2\241\uffa2\244" +
    "\uffa2\267\uffa2\311\uffa2\326\uffa2\370\uffa2\377\uffa2\u0103\uffa2" +
    "\u012c\uffa2\u0131\uffa2\u013c\uffa2\u013d\uffa2\u015f\uffa2\u0188\uffa2\001" +
    "\002\000\154\005\uff9e\006\uff9e\007\uff9e\010\uff9e\011\uff9e" +
    "\012\uff9e\016\uff9e\017\uff9e\020\uff9e\022\uff9e\024\uff9e\025" +
    "\uff9e\026\uff9e\027\uff9e\031\uff9e\037\uff9e\040\uff9e\042\uff9e" +
    "\050\uff9e\052\uff9e\055\uff9e\061\uff9e\062\uff9e\074\uff9e\076" +
    "\uff9e\107\uff9e\112\uff9e\114\uff9e\116\uff9e\126\uff9e\127\uff9e" +
    "\131\uff9e\153\uff9e\160\uff9e\161\uff9e\175\uff9e\200\uff9e\211" +
    "\uff9e\214\uff9e\241\uff9e\244\uff9e\267\uff9e\311\uff9e\326\uff9e" +
    "\370\uff9e\377\uff9e\u0103\uff9e\u012c\uff9e\u0131\uff9e\u013c\uff9e\u013d" +
    "\uff9e\u015f\uff9e\u0188\uff9e\001\002\000\150\005\uffa6\006\337" +
    "\007\336\012\uffa6\016\uffa6\017\uffa6\020\uffa6\022\uffa6\024" +
    "\uffa6\025\uffa6\026\uffa6\027\uffa6\031\uffa6\037\uffa6\040\uffa6" +
    "\042\uffa6\050\uffa6\052\uffa6\055\uffa6\061\uffa6\062\uffa6\074" +
    "\uffa6\076\uffa6\107\uffa6\112\uffa6\114\uffa6\116\uffa6\126\uffa6" +
    "\127\uffa6\131\uffa6\153\uffa6\160\uffa6\161\uffa6\175\uffa6\200" +
    "\uffa6\211\uffa6\214\uffa6\241\uffa6\244\uffa6\267\uffa6\311\uffa6" +
    "\326\uffa6\370\uffa6\377\uffa6\u0103\uffa6\u012c\uffa6\u0131\uffa6\u013c" +
    "\uffa6\u013d\uffa6\u015f\uffa6\u0188\uffa6\001\002\000\156\005\uffde" +
    "\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\016\uffde\017" +
    "\uffde\020\uffde\022\uffde\024\uffde\025\uffde\026\uffde\027\uffde" +
    "\031\uffde\037\uffde\040\uffde\041\334\042\uffde\050\uffde\052" +
    "\uffde\055\uffde\061\uffde\062\uffde\074\uffde\076\uffde\107\uffde" +
    "\112\uffde\114\uffde\116\uffde\126\uffde\127\uffde\131\uffde\153" +
    "\uffde\160\uffde\161\uffde\175\uffde\200\uffde\211\uffde\214\uffde" +
    "\241\uffde\244\uffde\267\uffde\311\uffde\326\uffde\370\uffde\377" +
    "\uffde\u0103\uffde\u012c\uffde\u0131\uffde\u013c\uffde\u013d\uffde\u015f\uffde" +
    "\u0188\uffde\001\002\000\050\037\uff84\040\uff84\055\uff84\061" +
    "\326\062\327\074\uff84\112\uff84\116\uff84\126\uff84\127\uff84" +
    "\131\uff84\161\uff84\200\uff84\211\uff84\311\uff84\326\uff84\u0103" +
    "\uff84\u015f\uff84\u0188\uff84\001\002\000\004\052\324\001\002" +
    "\000\154\005\uff99\006\uff99\007\uff99\010\uff99\011\uff99\012" +
    "\uff99\016\uff99\017\uff99\020\uff99\022\uff99\024\uff99\025\uff99" +
    "\026\uff99\027\uff99\031\uff99\037\uff99\040\uff99\042\uff99\050" +
    "\uff99\052\uff99\055\uff99\061\uff99\062\uff99\074\uff99\076\uff99" +
    "\107\uff99\112\uff99\114\uff99\116\uff99\126\uff99\127\uff99\131" +
    "\uff99\153\uff99\160\uff99\161\uff99\175\uff99\200\uff99\211\uff99" +
    "\214\uff99\241\uff99\244\uff99\267\uff99\311\uff99\326\uff99\370" +
    "\uff99\377\uff99\u0103\uff99\u012c\uff99\u0131\uff99\u013c\uff99\u013d\uff99" +
    "\u015f\uff99\u0188\uff99\001\002\000\004\052\322\001\002\000" +
    "\154\005\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b" +
    "\016\uff9b\017\uff9b\020\uff9b\022\uff9b\024\uff9b\025\uff9b\026" +
    "\uff9b\027\uff9b\031\uff9b\037\uff9b\040\uff9b\042\uff9b\050\uff9b" +
    "\052\uff9b\055\uff9b\061\uff9b\062\uff9b\074\uff9b\076\uff9b\107" +
    "\uff9b\112\uff9b\114\uff9b\116\uff9b\126\uff9b\127\uff9b\131\uff9b" +
    "\153\uff9b\160\uff9b\161\uff9b\175\uff9b\200\uff9b\211\uff9b\214" +
    "\uff9b\241\uff9b\244\uff9b\267\uff9b\311\uff9b\326\uff9b\370\uff9b" +
    "\377\uff9b\u0103\uff9b\u012c\uff9b\u0131\uff9b\u013c\uff9b\u013d\uff9b\u015f" +
    "\uff9b\u0188\uff9b\001\002\000\004\052\320\001\002\000\036" +
    "\012\057\016\251\017\260\020\265\022\245\042\060\050" +
    "\062\052\262\244\263\377\255\u012c\244\u0131\264\u013c\261" +
    "\u013d\257\001\002\000\154\005\uff9a\006\uff9a\007\uff9a\010" +
    "\uff9a\011\uff9a\012\uff9a\016\uff9a\017\uff9a\020\uff9a\022\uff9a" +
    "\024\uff9a\025\uff9a\026\uff9a\027\uff9a\031\uff9a\037\uff9a\040" +
    "\uff9a\042\uff9a\050\uff9a\052\uff9a\055\uff9a\061\uff9a\062\uff9a" +
    "\074\uff9a\076\uff9a\107\uff9a\112\uff9a\114\uff9a\116\uff9a\126" +
    "\uff9a\127\uff9a\131\uff9a\153\uff9a\160\uff9a\161\uff9a\175\uff9a" +
    "\200\uff9a\211\uff9a\214\uff9a\241\uff9a\244\uff9a\267\uff9a\311" +
    "\uff9a\326\uff9a\370\uff9a\377\uff9a\u0103\uff9a\u012c\uff9a\u0131\uff9a" +
    "\u013c\uff9a\u013d\uff9a\u015f\uff9a\u0188\uff9a\001\002\000\004\052" +
    "\267\001\002\000\154\005\uff9c\006\uff9c\007\uff9c\010\uff9c" +
    "\011\uff9c\012\uff9c\016\uff9c\017\uff9c\020\uff9c\022\uff9c\024" +
    "\uff9c\025\uff9c\026\uff9c\027\uff9c\031\uff9c\037\uff9c\040\uff9c" +
    "\042\uff9c\050\uff9c\052\uff9c\055\uff9c\061\uff9c\062\uff9c\074" +
    "\uff9c\076\uff9c\107\uff9c\112\uff9c\114\uff9c\116\uff9c\126\uff9c" +
    "\127\uff9c\131\uff9c\153\uff9c\160\uff9c\161\uff9c\175\uff9c\200" +
    "\uff9c\211\uff9c\214\uff9c\241\uff9c\244\uff9c\267\uff9c\311\uff9c" +
    "\326\uff9c\370\uff9c\377\uff9c\u0103\uff9c\u012c\uff9c\u0131\uff9c\u013c" +
    "\uff9c\u013d\uff9c\u015f\uff9c\u0188\uff9c\001\002\000\154\005\uff9f" +
    "\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\016\uff9f\017" +
    "\uff9f\020\uff9f\022\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f" +
    "\031\uff9f\037\uff9f\040\uff9f\042\uff9f\050\uff9f\052\uff9f\055" +
    "\uff9f\061\uff9f\062\uff9f\074\uff9f\076\uff9f\107\uff9f\112\uff9f" +
    "\114\uff9f\116\uff9f\126\uff9f\127\uff9f\131\uff9f\153\uff9f\160" +
    "\uff9f\161\uff9f\175\uff9f\200\uff9f\211\uff9f\214\uff9f\241\uff9f" +
    "\244\uff9f\267\uff9f\311\uff9f\326\uff9f\370\uff9f\377\uff9f\u0103" +
    "\uff9f\u012c\uff9f\u0131\uff9f\u013c\uff9f\u013d\uff9f\u015f\uff9f\u0188\uff9f" +
    "\001\002\000\012\010\273\012\057\016\272\050\062\001" +
    "\002\000\004\055\276\001\002\000\154\005\uff94\006\uff94" +
    "\007\uff94\010\uff94\011\uff94\012\uff94\016\uff94\017\uff94\020" +
    "\uff94\022\uff94\024\uff94\025\uff94\026\uff94\027\uff94\031\uff94" +
    "\037\uff94\040\uff94\042\uff94\050\uff94\052\uff94\055\uff94\061" +
    "\uff94\062\uff94\074\uff94\076\uff94\107\uff94\112\uff94\114\uff94" +
    "\116\uff94\126\uff94\127\uff94\131\uff94\153\uff94\160\uff94\161" +
    "\uff94\175\uff94\200\uff94\211\uff94\214\uff94\241\uff94\244\uff94" +
    "\267\uff94\311\uff94\326\uff94\370\uff94\377\uff94\u0103\uff94\u012c" +
    "\uff94\u0131\uff94\u013c\uff94\u013d\uff94\u015f\uff94\u0188\uff94\001\002" +
    "\000\004\055\275\001\002\000\004\055\274\001\002\000" +
    "\154\005\uff91\006\uff91\007\uff91\010\uff91\011\uff91\012\uff91" +
    "\016\uff91\017\uff91\020\uff91\022\uff91\024\uff91\025\uff91\026" +
    "\uff91\027\uff91\031\uff91\037\uff91\040\uff91\042\uff91\050\uff91" +
    "\052\uff91\055\uff91\061\uff91\062\uff91\074\uff91\076\uff91\107" +
    "\uff91\112\uff91\114\uff91\116\uff91\126\uff91\127\uff91\131\uff91" +
    "\153\uff91\160\uff91\161\uff91\175\uff91\200\uff91\211\uff91\214" +
    "\uff91\241\uff91\244\uff91\267\uff91\311\uff91\326\uff91\370\uff91" +
    "\377\uff91\u0103\uff91\u012c\uff91\u0131\uff91\u013c\uff91\u013d\uff91\u015f" +
    "\uff91\u0188\uff91\001\002\000\154\005\uff92\006\uff92\007\uff92" +
    "\010\uff92\011\uff92\012\uff92\016\uff92\017\uff92\020\uff92\022" +
    "\uff92\024\uff92\025\uff92\026\uff92\027\uff92\031\uff92\037\uff92" +
    "\040\uff92\042\uff92\050\uff92\052\uff92\055\uff92\061\uff92\062" +
    "\uff92\074\uff92\076\uff92\107\uff92\112\uff92\114\uff92\116\uff92" +
    "\126\uff92\127\uff92\131\uff92\153\uff92\160\uff92\161\uff92\175" +
    "\uff92\200\uff92\211\uff92\214\uff92\241\uff92\244\uff92\267\uff92" +
    "\311\uff92\326\uff92\370\uff92\377\uff92\u0103\uff92\u012c\uff92\u0131" +
    "\uff92\u013c\uff92\u013d\uff92\u015f\uff92\u0188\uff92\001\002\000\154" +
    "\005\uff93\006\uff93\007\uff93\010\uff93\011\uff93\012\uff93\016" +
    "\uff93\017\uff93\020\uff93\022\uff93\024\uff93\025\uff93\026\uff93" +
    "\027\uff93\031\uff93\037\uff93\040\uff93\042\uff93\050\uff93\052" +
    "\uff93\055\uff93\061\uff93\062\uff93\074\uff93\076\uff93\107\uff93" +
    "\112\uff93\114\uff93\116\uff93\126\uff93\127\uff93\131\uff93\153" +
    "\uff93\160\uff93\161\uff93\175\uff93\200\uff93\211\uff93\214\uff93" +
    "\241\uff93\244\uff93\267\uff93\311\uff93\326\uff93\370\uff93\377" +
    "\uff93\u0103\uff93\u012c\uff93\u0131\uff93\u013c\uff93\u013d\uff93\u015f\uff93" +
    "\u0188\uff93\001\002\000\010\114\302\153\301\214\300\001" +
    "\002\000\036\012\057\016\251\017\260\020\265\022\245" +
    "\042\060\050\062\052\262\244\263\377\255\u012c\244\u0131" +
    "\264\u013c\261\u013d\257\001\002\000\004\052\310\001\002" +
    "\000\036\012\057\016\251\017\260\020\265\022\245\042" +
    "\060\050\062\052\262\244\263\377\255\u012c\244\u0131\264" +
    "\u013c\261\u013d\257\001\002\000\004\055\304\001\002\000" +
    "\154\005\uffa1\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1" +
    "\016\uffa1\017\uffa1\020\uffa1\022\uffa1\024\uffa1\025\uffa1\026" +
    "\uffa1\027\uffa1\031\uffa1\037\uffa1\040\uffa1\042\uffa1\050\uffa1" +
    "\052\uffa1\055\uffa1\061\uffa1\062\uffa1\074\uffa1\076\uffa1\107" +
    "\uffa1\112\uffa1\114\uffa1\116\uffa1\126\uffa1\127\uffa1\131\uffa1" +
    "\153\uffa1\160\uffa1\161\uffa1\175\uffa1\200\uffa1\211\uffa1\214" +
    "\uffa1\241\uffa1\244\uffa1\267\uffa1\311\uffa1\326\uffa1\370\uffa1" +
    "\377\uffa1\u0103\uffa1\u012c\uffa1\u0131\uffa1\u013c\uffa1\u013d\uffa1\u015f" +
    "\uffa1\u0188\uffa1\001\002\000\004\061\306\001\002\000\036" +
    "\012\057\016\251\017\260\020\265\022\245\042\060\050" +
    "\062\052\262\244\263\377\255\u012c\244\u0131\264\u013c\261" +
    "\u013d\257\001\002\000\050\037\uff78\040\uff78\055\uff78\061" +
    "\uff78\062\uff78\074\uff78\112\uff78\116\uff78\126\uff78\127\uff78" +
    "\131\uff78\161\uff78\200\uff78\211\uff78\311\uff78\326\uff78\u0103" +
    "\uff78\u015f\uff78\u0188\uff78\001\002\000\036\012\057\016\251" +
    "\017\260\020\265\022\245\042\060\050\062\052\262\244" +
    "\263\377\255\u012c\244\u0131\264\u013c\261\u013d\257\001\002" +
    "\000\006\040\312\055\uff89\001\002\000\036\012\057\016" +
    "\251\017\260\020\265\022\245\042\060\050\062\052\262" +
    "\244\263\377\255\u012c\244\u0131\264\u013c\261\u013d\257\001" +
    "\002\000\004\055\314\001\002\000\050\037\uff79\040\uff79" +
    "\055\uff79\061\uff79\062\uff79\074\uff79\112\uff79\116\uff79\126" +
    "\uff79\127\uff79\131\uff79\161\uff79\200\uff79\211\uff79\311\uff79" +
    "\326\uff79\u0103\uff79\u015f\uff79\u0188\uff79\001\002\000\006\040" +
    "\312\055\uff89\001\002\000\004\055\uff8a\001\002\000\050" +
    "\037\uff77\040\uff77\055\uff77\061\uff77\062\uff77\074\uff77\112" +
    "\uff77\116\uff77\126\uff77\127\uff77\131\uff77\161\uff77\200\uff77" +
    "\211\uff77\311\uff77\326\uff77\u0103\uff77\u015f\uff77\u0188\uff77\001" +
    "\002\000\012\010\273\012\057\016\272\050\062\001\002" +
    "\000\154\005\uff95\006\uff95\007\uff95\010\uff95\011\uff95\012" +
    "\uff95\016\uff95\017\uff95\020\uff95\022\uff95\024\uff95\025\uff95" +
    "\026\uff95\027\uff95\031\uff95\037\uff95\040\uff95\042\uff95\050" +
    "\uff95\052\uff95\055\uff95\061\uff95\062\uff95\074\uff95\076\uff95" +
    "\107\uff95\112\uff95\114\uff95\116\uff95\126\uff95\127\uff95\131" +
    "\uff95\153\uff95\160\uff95\161\uff95\175\uff95\200\uff95\211\uff95" +
    "\214\uff95\241\uff95\244\uff95\267\uff95\311\uff95\326\uff95\370" +
    "\uff95\377\uff95\u0103\uff95\u012c\uff95\u0131\uff95\u013c\uff95\u013d\uff95" +
    "\u015f\uff95\u0188\uff95\001\002\000\012\010\273\012\057\016" +
    "\272\050\062\001\002\000\154\005\uff96\006\uff96\007\uff96" +
    "\010\uff96\011\uff96\012\uff96\016\uff96\017\uff96\020\uff96\022" +
    "\uff96\024\uff96\025\uff96\026\uff96\027\uff96\031\uff96\037\uff96" +
    "\040\uff96\042\uff96\050\uff96\052\uff96\055\uff96\061\uff96\062" +
    "\uff96\074\uff96\076\uff96\107\uff96\112\uff96\114\uff96\116\uff96" +
    "\126\uff96\127\uff96\131\uff96\153\uff96\160\uff96\161\uff96\175" +
    "\uff96\200\uff96\211\uff96\214\uff96\241\uff96\244\uff96\267\uff96" +
    "\311\uff96\326\uff96\370\uff96\377\uff96\u0103\uff96\u012c\uff96\u0131" +
    "\uff96\u013c\uff96\u013d\uff96\u015f\uff96\u0188\uff96\001\002\000\012" +
    "\010\273\012\057\016\272\050\062\001\002\000\154\005" +
    "\uff97\006\uff97\007\uff97\010\uff97\011\uff97\012\uff97\016\uff97" +
    "\017\uff97\020\uff97\022\uff97\024\uff97\025\uff97\026\uff97\027" +
    "\uff97\031\uff97\037\uff97\040\uff97\042\uff97\050\uff97\052\uff97" +
    "\055\uff97\061\uff97\062\uff97\074\uff97\076\uff97\107\uff97\112" +
    "\uff97\114\uff97\116\uff97\126\uff97\127\uff97\131\uff97\153\uff97" +
    "\160\uff97\161\uff97\175\uff97\200\uff97\211\uff97\214\uff97\241" +
    "\uff97\244\uff97\267\uff97\311\uff97\326\uff97\370\uff97\377\uff97" +
    "\u0103\uff97\u012c\uff97\u0131\uff97\u013c\uff97\u013d\uff97\u015f\uff97\u0188" +
    "\uff97\001\002\000\040\012\uff8f\016\uff8f\017\uff8f\020\uff8f" +
    "\022\uff8f\042\uff8f\050\uff8f\052\240\241\243\244\uff8f\377" +
    "\uff8f\u012c\uff8f\u0131\uff8f\u013c\uff8f\u013d\uff8f\001\002\000\040" +
    "\012\uff8f\016\uff8f\017\uff8f\020\uff8f\022\uff8f\042\uff8f\050" +
    "\uff8f\052\240\241\243\244\uff8f\377\uff8f\u012c\uff8f\u0131\uff8f" +
    "\u013c\uff8f\u013d\uff8f\001\002\000\044\037\uff88\040\uff88\055" +
    "\uff88\074\uff88\112\uff88\116\uff88\126\uff88\127\uff88\131\uff88" +
    "\161\uff88\200\uff88\211\uff88\311\uff88\326\uff88\u0103\uff88\u015f" +
    "\uff88\u0188\uff88\001\002\000\044\037\uff85\040\uff85\055\uff85" +
    "\074\uff85\112\uff85\116\uff85\126\uff85\127\uff85\131\uff85\161" +
    "\uff85\200\uff85\211\uff85\311\uff85\326\uff85\u0103\uff85\u015f\uff85" +
    "\u0188\uff85\001\002\000\044\037\uff86\040\uff86\055\uff86\074" +
    "\uff86\112\uff86\116\uff86\126\uff86\127\uff86\131\uff86\161\uff86" +
    "\200\uff86\211\uff86\311\uff86\326\uff86\u0103\uff86\u015f\uff86\u0188" +
    "\uff86\001\002\000\154\005\uffe0\006\uffe0\007\uffe0\010\uffe0" +
    "\011\uffe0\012\uffe0\016\uffe0\017\uffe0\020\uffe0\022\uffe0\024" +
    "\uffe0\025\uffe0\026\uffe0\027\uffe0\031\uffe0\037\uffe0\040\uffe0" +
    "\042\uffe0\050\uffe0\052\uffe0\055\uffe0\061\uffe0\062\uffe0\074" +
    "\uffe0\076\uffe0\107\uffe0\112\uffe0\114\uffe0\116\uffe0\126\uffe0" +
    "\127\uffe0\131\uffe0\153\uffe0\160\uffe0\161\uffe0\175\uffe0\200" +
    "\uffe0\211\uffe0\214\uffe0\241\uffe0\244\uffe0\267\uffe0\311\uffe0" +
    "\326\uffe0\370\uffe0\377\uffe0\u0103\uffe0\u012c\uffe0\u0131\uffe0\u013c" +
    "\uffe0\u013d\uffe0\u015f\uffe0\u0188\uffe0\001\002\000\006\012\057" +
    "\050\062\001\002\000\154\005\uffdf\006\uffdf\007\uffdf\010" +
    "\uffdf\011\uffdf\012\uffdf\016\uffdf\017\uffdf\020\uffdf\022\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\027\uffdf\031\uffdf\037\uffdf\040" +
    "\uffdf\042\uffdf\050\uffdf\052\uffdf\055\uffdf\061\uffdf\062\uffdf" +
    "\074\uffdf\076\uffdf\107\uffdf\112\uffdf\114\uffdf\116\uffdf\126" +
    "\uffdf\127\uffdf\131\uffdf\153\uffdf\160\uffdf\161\uffdf\175\uffdf" +
    "\200\uffdf\211\uffdf\214\uffdf\241\uffdf\244\uffdf\267\uffdf\311" +
    "\uffdf\326\uffdf\370\uffdf\377\uffdf\u0103\uffdf\u012c\uffdf\u0131\uffdf" +
    "\u013c\uffdf\u013d\uffdf\u015f\uffdf\u0188\uffdf\001\002\000\036\012" +
    "\057\016\251\017\260\020\265\022\245\042\060\050\062" +
    "\052\262\244\263\377\255\u012c\244\u0131\264\u013c\261\u013d" +
    "\257\001\002\000\036\012\057\016\251\017\260\020\265" +
    "\022\245\042\060\050\062\052\262\244\263\377\255\u012c" +
    "\244\u0131\264\u013c\261\u013d\257\001\002\000\144\005\uffa9" +
    "\012\uffa9\016\uffa9\017\uffa9\020\uffa9\022\uffa9\024\uffa9\025" +
    "\uffa9\026\uffa9\027\uffa9\031\uffa9\037\uffa9\040\uffa9\042\uffa9" +
    "\050\uffa9\052\uffa9\055\uffa9\061\uffa9\062\uffa9\074\uffa9\076" +
    "\uffa9\107\uffa9\112\uffa9\114\uffa9\116\uffa9\126\uffa9\127\uffa9" +
    "\131\uffa9\153\uffa9\160\uffa9\161\uffa9\175\uffa9\200\uffa9\211" +
    "\uffa9\214\uffa9\241\uffa9\244\uffa9\267\uffa9\311\uffa9\326\uffa9" +
    "\370\uffa9\377\uffa9\u0103\uffa9\u012c\uffa9\u0131\uffa9\u013c\uffa9\u013d" +
    "\uffa9\u015f\uffa9\u0188\uffa9\001\002\000\150\005\uffa6\006\337" +
    "\007\336\012\uffa6\016\uffa6\017\uffa6\020\uffa6\022\uffa6\024" +
    "\uffa6\025\uffa6\026\uffa6\027\uffa6\031\uffa6\037\uffa6\040\uffa6" +
    "\042\uffa6\050\uffa6\052\uffa6\055\uffa6\061\uffa6\062\uffa6\074" +
    "\uffa6\076\uffa6\107\uffa6\112\uffa6\114\uffa6\116\uffa6\126\uffa6" +
    "\127\uffa6\131\uffa6\153\uffa6\160\uffa6\161\uffa6\175\uffa6\200" +
    "\uffa6\211\uffa6\214\uffa6\241\uffa6\244\uffa6\267\uffa6\311\uffa6" +
    "\326\uffa6\370\uffa6\377\uffa6\u0103\uffa6\u012c\uffa6\u0131\uffa6\u013c" +
    "\uffa6\u013d\uffa6\u015f\uffa6\u0188\uffa6\001\002\000\144\005\uffa8" +
    "\012\uffa8\016\uffa8\017\uffa8\020\uffa8\022\uffa8\024\uffa8\025" +
    "\uffa8\026\uffa8\027\uffa8\031\uffa8\037\uffa8\040\uffa8\042\uffa8" +
    "\050\uffa8\052\uffa8\055\uffa8\061\uffa8\062\uffa8\074\uffa8\076" +
    "\uffa8\107\uffa8\112\uffa8\114\uffa8\116\uffa8\126\uffa8\127\uffa8" +
    "\131\uffa8\153\uffa8\160\uffa8\161\uffa8\175\uffa8\200\uffa8\211" +
    "\uffa8\214\uffa8\241\uffa8\244\uffa8\267\uffa8\311\uffa8\326\uffa8" +
    "\370\uffa8\377\uffa8\u0103\uffa8\u012c\uffa8\u0131\uffa8\u013c\uffa8\u013d" +
    "\uffa8\u015f\uffa8\u0188\uffa8\001\002\000\150\005\uffa6\006\337" +
    "\007\336\012\uffa6\016\uffa6\017\uffa6\020\uffa6\022\uffa6\024" +
    "\uffa6\025\uffa6\026\uffa6\027\uffa6\031\uffa6\037\uffa6\040\uffa6" +
    "\042\uffa6\050\uffa6\052\uffa6\055\uffa6\061\uffa6\062\uffa6\074" +
    "\uffa6\076\uffa6\107\uffa6\112\uffa6\114\uffa6\116\uffa6\126\uffa6" +
    "\127\uffa6\131\uffa6\153\uffa6\160\uffa6\161\uffa6\175\uffa6\200" +
    "\uffa6\211\uffa6\214\uffa6\241\uffa6\244\uffa6\267\uffa6\311\uffa6" +
    "\326\uffa6\370\uffa6\377\uffa6\u0103\uffa6\u012c\uffa6\u0131\uffa6\u013c" +
    "\uffa6\u013d\uffa6\u015f\uffa6\u0188\uffa6\001\002\000\144\005\uffa7" +
    "\012\uffa7\016\uffa7\017\uffa7\020\uffa7\022\uffa7\024\uffa7\025" +
    "\uffa7\026\uffa7\027\uffa7\031\uffa7\037\uffa7\040\uffa7\042\uffa7" +
    "\050\uffa7\052\uffa7\055\uffa7\061\uffa7\062\uffa7\074\uffa7\076" +
    "\uffa7\107\uffa7\112\uffa7\114\uffa7\116\uffa7\126\uffa7\127\uffa7" +
    "\131\uffa7\153\uffa7\160\uffa7\161\uffa7\175\uffa7\200\uffa7\211" +
    "\uffa7\214\uffa7\241\uffa7\244\uffa7\267\uffa7\311\uffa7\326\uffa7" +
    "\370\uffa7\377\uffa7\u0103\uffa7\u012c\uffa7\u0131\uffa7\u013c\uffa7\u013d" +
    "\uffa7\u015f\uffa7\u0188\uffa7\001\002\000\036\012\057\016\251" +
    "\017\260\020\265\022\245\042\060\050\062\052\262\244" +
    "\263\377\255\u012c\244\u0131\264\u013c\261\u013d\257\001\002" +
    "\000\150\005\uffa5\006\uffa5\007\uffa5\012\uffa5\016\uffa5\017" +
    "\uffa5\020\uffa5\022\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5" +
    "\031\uffa5\037\uffa5\040\uffa5\042\uffa5\050\uffa5\052\uffa5\055" +
    "\uffa5\061\uffa5\062\uffa5\074\uffa5\076\uffa5\107\uffa5\112\uffa5" +
    "\114\uffa5\116\uffa5\126\uffa5\127\uffa5\131\uffa5\153\uffa5\160" +
    "\uffa5\161\uffa5\175\uffa5\200\uffa5\211\uffa5\214\uffa5\241\uffa5" +
    "\244\uffa5\267\uffa5\311\uffa5\326\uffa5\370\uffa5\377\uffa5\u0103" +
    "\uffa5\u012c\uffa5\u0131\uffa5\u013c\uffa5\u013d\uffa5\u015f\uffa5\u0188\uffa5" +
    "\001\002\000\036\012\057\016\251\017\260\020\265\022" +
    "\245\042\060\050\062\052\262\244\263\377\255\u012c\244" +
    "\u0131\264\u013c\261\u013d\257\001\002\000\154\005\uffa2\006" +
    "\uffa2\007\uffa2\010\347\011\345\012\uffa2\016\uffa2\017\uffa2" +
    "\020\uffa2\022\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\031" +
    "\uffa2\037\uffa2\040\uffa2\042\uffa2\050\uffa2\052\uffa2\055\uffa2" +
    "\061\uffa2\062\uffa2\074\uffa2\076\uffa2\107\uffa2\112\uffa2\114" +
    "\uffa2\116\uffa2\126\uffa2\127\uffa2\131\uffa2\153\uffa2\160\uffa2" +
    "\161\uffa2\175\uffa2\200\uffa2\211\uffa2\214\uffa2\241\uffa2\244" +
    "\uffa2\267\uffa2\311\uffa2\326\uffa2\370\uffa2\377\uffa2\u0103\uffa2" +
    "\u012c\uffa2\u0131\uffa2\u013c\uffa2\u013d\uffa2\u015f\uffa2\u0188\uffa2\001" +
    "\002\000\150\005\uffa4\006\uffa4\007\uffa4\012\uffa4\016\uffa4" +
    "\017\uffa4\020\uffa4\022\uffa4\024\uffa4\025\uffa4\026\uffa4\027" +
    "\uffa4\031\uffa4\037\uffa4\040\uffa4\042\uffa4\050\uffa4\052\uffa4" +
    "\055\uffa4\061\uffa4\062\uffa4\074\uffa4\076\uffa4\107\uffa4\112" +
    "\uffa4\114\uffa4\116\uffa4\126\uffa4\127\uffa4\131\uffa4\153\uffa4" +
    "\160\uffa4\161\uffa4\175\uffa4\200\uffa4\211\uffa4\214\uffa4\241" +
    "\uffa4\244\uffa4\267\uffa4\311\uffa4\326\uffa4\370\uffa4\377\uffa4" +
    "\u0103\uffa4\u012c\uffa4\u0131\uffa4\u013c\uffa4\u013d\uffa4\u015f\uffa4\u0188" +
    "\uffa4\001\002\000\154\005\uffa2\006\uffa2\007\uffa2\010\347" +
    "\011\345\012\uffa2\016\uffa2\017\uffa2\020\uffa2\022\uffa2\024" +
    "\uffa2\025\uffa2\026\uffa2\027\uffa2\031\uffa2\037\uffa2\040\uffa2" +
    "\042\uffa2\050\uffa2\052\uffa2\055\uffa2\061\uffa2\062\uffa2\074" +
    "\uffa2\076\uffa2\107\uffa2\112\uffa2\114\uffa2\116\uffa2\126\uffa2" +
    "\127\uffa2\131\uffa2\153\uffa2\160\uffa2\161\uffa2\175\uffa2\200" +
    "\uffa2\211\uffa2\214\uffa2\241\uffa2\244\uffa2\267\uffa2\311\uffa2" +
    "\326\uffa2\370\uffa2\377\uffa2\u0103\uffa2\u012c\uffa2\u0131\uffa2\u013c" +
    "\uffa2\u013d\uffa2\u015f\uffa2\u0188\uffa2\001\002\000\150\005\uffa3" +
    "\006\uffa3\007\uffa3\012\uffa3\016\uffa3\017\uffa3\020\uffa3\022" +
    "\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\031\uffa3\037\uffa3" +
    "\040\uffa3\042\uffa3\050\uffa3\052\uffa3\055\uffa3\061\uffa3\062" +
    "\uffa3\074\uffa3\076\uffa3\107\uffa3\112\uffa3\114\uffa3\116\uffa3" +
    "\126\uffa3\127\uffa3\131\uffa3\153\uffa3\160\uffa3\161\uffa3\175" +
    "\uffa3\200\uffa3\211\uffa3\214\uffa3\241\uffa3\244\uffa3\267\uffa3" +
    "\311\uffa3\326\uffa3\370\uffa3\377\uffa3\u0103\uffa3\u012c\uffa3\u0131" +
    "\uffa3\u013c\uffa3\u013d\uffa3\u015f\uffa3\u0188\uffa3\001\002\000\036" +
    "\012\uff7f\016\uff7f\017\uff7f\020\uff7f\022\uff7f\042\uff7f\050" +
    "\uff7f\052\uff7f\244\uff7f\377\uff7f\u012c\uff7f\u0131\uff7f\u013c\uff7f" +
    "\u013d\uff7f\001\002\000\010\114\302\153\301\214\300\001" +
    "\002\000\036\012\uff80\016\uff80\017\uff80\020\uff80\022\uff80" +
    "\042\uff80\050\uff80\052\uff80\244\uff80\377\uff80\u012c\uff80\u0131" +
    "\uff80\u013c\uff80\u013d\uff80\001\002\000\036\012\uff81\016\uff81" +
    "\017\uff81\020\uff81\022\uff81\042\uff81\050\uff81\052\uff81\244" +
    "\uff81\377\uff81\u012c\uff81\u0131\uff81\u013c\uff81\u013d\uff81\001\002" +
    "\000\036\012\057\016\251\017\260\020\265\022\245\042" +
    "\060\050\062\052\262\244\263\377\255\u012c\244\u0131\264" +
    "\u013c\261\u013d\257\001\002\000\036\012\uff7d\016\uff7d\017" +
    "\uff7d\020\uff7d\022\uff7d\042\uff7d\050\uff7d\052\uff7d\244\uff7d" +
    "\377\uff7d\u012c\uff7d\u0131\uff7d\u013c\uff7d\u013d\uff7d\001\002\000" +
    "\036\012\uff82\016\uff82\017\uff82\020\uff82\022\uff82\042\uff82" +
    "\050\uff82\052\uff82\244\uff82\377\uff82\u012c\uff82\u0131\uff82\u013c" +
    "\uff82\u013d\uff82\001\002\000\036\012\uff7e\016\uff7e\017\uff7e" +
    "\020\uff7e\022\uff7e\042\uff7e\050\uff7e\052\uff7e\244\uff7e\377" +
    "\uff7e\u012c\uff7e\u0131\uff7e\u013c\uff7e\u013d\uff7e\001\002\000\050" +
    "\037\uff83\040\uff83\055\uff83\061\uff83\062\uff83\074\uff83\112" +
    "\uff83\116\uff83\126\uff83\127\uff83\131\uff83\161\uff83\200\uff83" +
    "\211\uff83\311\uff83\326\uff83\u0103\uff83\u015f\uff83\u0188\uff83\001" +
    "\002\000\006\241\243\244\uff8f\001\002\000\004\244\367" +
    "\001\002\000\050\037\uff7b\040\uff7b\055\uff7b\061\uff7b\062" +
    "\uff7b\074\uff7b\112\uff7b\116\uff7b\126\uff7b\127\uff7b\131\uff7b" +
    "\161\uff7b\200\uff7b\211\uff7b\311\uff7b\326\uff7b\u0103\uff7b\u015f" +
    "\uff7b\u0188\uff7b\001\002\000\050\037\uff7c\040\uff7c\055\uff7c" +
    "\061\uff7c\062\uff7c\074\uff7c\112\uff7c\116\uff7c\126\uff7c\127" +
    "\uff7c\131\uff7c\161\uff7c\200\uff7c\211\uff7c\311\uff7c\326\uff7c" +
    "\u0103\uff7c\u015f\uff7c\u0188\uff7c\001\002\000\050\037\uff7a\040" +
    "\uff7a\055\uff7a\061\uff7a\062\uff7a\074\uff7a\112\uff7a\116\uff7a" +
    "\126\uff7a\127\uff7a\131\uff7a\161\uff7a\200\uff7a\211\uff7a\311" +
    "\uff7a\326\uff7a\u0103\uff7a\u015f\uff7a\u0188\uff7a\001\002\000\012" +
    "\010\273\012\057\016\272\050\062\001\002\000\154\005" +
    "\uff98\006\uff98\007\uff98\010\uff98\011\uff98\012\uff98\016\uff98" +
    "\017\uff98\020\uff98\022\uff98\024\uff98\025\uff98\026\uff98\027" +
    "\uff98\031\uff98\037\uff98\040\uff98\042\uff98\050\uff98\052\uff98" +
    "\055\uff98\061\uff98\062\uff98\074\uff98\076\uff98\107\uff98\112" +
    "\uff98\114\uff98\116\uff98\126\uff98\127\uff98\131\uff98\153\uff98" +
    "\160\uff98\161\uff98\175\uff98\200\uff98\211\uff98\214\uff98\241" +
    "\uff98\244\uff98\267\uff98\311\uff98\326\uff98\370\uff98\377\uff98" +
    "\u0103\uff98\u012c\uff98\u0131\uff98\u013c\uff98\u013d\uff98\u015f\uff98\u0188" +
    "\uff98\001\002\000\004\055\375\001\002\000\050\037\uff84" +
    "\040\uff84\055\uff84\061\326\062\327\074\uff84\112\uff84\116" +
    "\uff84\126\uff84\127\uff84\131\uff84\161\uff84\200\uff84\211\uff84" +
    "\311\uff84\326\uff84\u0103\uff84\u015f\uff84\u0188\uff84\001\002\000" +
    "\044\037\uff87\040\uff87\055\uff87\074\uff87\112\uff87\116\uff87" +
    "\126\uff87\127\uff87\131\uff87\161\uff87\200\uff87\211\uff87\311" +
    "\uff87\326\uff87\u0103\uff87\u015f\uff87\u0188\uff87\001\002\000\014" +
    "\037\ufefa\326\ufefa\u0103\ufefa\u015f\ufefa\u0188\ufefa\001\002\000" +
    "\006\012\057\050\062\001\002\000\014\037\uff6d\040\u0105" +
    "\055\uff6d\u0103\uff6d\u0188\uff6d\001\002\000\004\055\u0103\001" +
    "\002\000\022\037\uff70\076\uff70\257\uff70\307\uff70\326\uff70" +
    "\u0103\uff70\u015f\uff70\u0188\uff70\001\002\000\012\037\uff6f\055" +
    "\uff6f\u0103\uff6f\u0188\uff6f\001\002\000\006\012\057\050\062" +
    "\001\002\000\014\037\uff6d\040\u0105\055\uff6d\u0103\uff6d\u0188" +
    "\uff6d\001\002\000\012\037\uff6e\055\uff6e\u0103\uff6e\u0188\uff6e" +
    "\001\002\000\012\040\uff60\055\uff60\267\u010b\370\u010c\001" +
    "\002\000\004\055\u010a\001\002\000\016\037\ufefe\326\ufefe" +
    "\u0103\ufefe\u0110\ufefe\u015f\ufefe\u0188\ufefe\001\002\000\054\012" +
    "\uff61\016\uff61\017\uff61\020\uff61\022\uff61\037\uff61\040\uff61" +
    "\042\uff61\050\uff61\052\uff61\055\uff61\074\uff61\116\uff61\244" +
    "\uff61\377\uff61\u0103\uff61\u012c\uff61\u0131\uff61\u013c\uff61\u013d\uff61" +
    "\u0188\uff61\001\002\000\054\012\uff62\016\uff62\017\uff62\020" +
    "\uff62\022\uff62\037\uff62\040\uff62\042\uff62\050\uff62\052\uff62" +
    "\055\uff62\074\uff62\116\uff62\244\uff62\377\uff62\u0103\uff62\u012c" +
    "\uff62\u0131\uff62\u013c\uff62\u013d\uff62\u0188\uff62\001\002\000\006" +
    "\040\u010f\055\ufefb\001\002\000\004\055\ufefd\001\002\000" +
    "\006\012\057\050\062\001\002\000\012\040\uff60\055\uff60" +
    "\267\u010b\370\u010c\001\002\000\006\040\u010f\055\ufefb\001" +
    "\002\000\004\055\ufefc\001\002\000\010\115\ufe2c\344\ufe2c" +
    "\372\ufe2c\001\002\000\004\076\u0115\001\002\000\004\157" +
    "\021\001\002\000\010\037\uff02\u0103\uff02\u0188\uff02\001\002" +
    "\000\004\052\u0118\001\002\000\022\012\057\050\062\077" +
    "\ufec6\141\ufec6\156\u0119\174\u011d\266\ufec6\336\ufec6\001\002" +
    "\000\006\012\057\050\062\001\002\000\014\037\ufeed\040" +
    "\ufeed\055\ufeed\u0103\ufeed\u0188\ufeed\001\002\000\014\037\ufeec" +
    "\040\ufeec\055\ufeec\u0103\ufeec\u0188\ufeec\001\002\000\006\040" +
    "\u01c1\055\ufee9\001\002\000\006\012\057\050\062\001\002" +
    "\000\044\050\u0164\240\u0162\303\u0171\364\u0167\376\u016e\u0104" +
    "\u0168\u0111\u0160\u011a\u0169\u011d\u015e\u0120\u016b\u0133\u016a\u013f\u0161" +
    "\u0149\u015f\u014c\u0163\u0159\u016d\u015a\u0165\u0189\u0170\001\002\000" +
    "\012\077\u0122\141\u0121\266\u0125\336\u0123\001\002\000\014" +
    "\037\ufeeb\040\ufeeb\055\ufeeb\u0103\ufeeb\u0188\ufeeb\001\002\000" +
    "\006\052\ufef2\241\u013d\001\002\000\004\203\u0134\001\002" +
    "\000\004\203\u0131\001\002\000\014\037\ufeb2\040\ufeb2\055" +
    "\ufeb2\u0103\ufeb2\u0188\ufeb2\001\002\000\010\052\ufebf\152\215" +
    "\236\216\001\002\000\004\052\u0127\001\002\000\006\012" +
    "\057\050\062\001\002\000\014\037\ufeb0\040\ufeb0\055\ufeb0" +
    "\u0103\ufeb0\u0188\ufeb0\001\002\000\012\040\uff60\055\uff60\267" +
    "\u010b\370\u010c\001\002\000\006\040\u012b\055\ufeab\001\002" +
    "\000\006\012\057\050\062\001\002\000\004\055\u012d\001" +
    "\002\000\014\037\ufead\040\ufead\055\ufead\u0103\ufead\u0188\ufead" +
    "\001\002\000\012\040\uff60\055\uff60\267\u010b\370\u010c\001" +
    "\002\000\006\040\u012b\055\ufeab\001\002\000\004\055\ufeac" +
    "\001\002\000\010\052\ufebf\152\215\236\216\001\002\000" +
    "\004\052\u0127\001\002\000\014\037\ufeb1\040\ufeb1\055\ufeb1" +
    "\u0103\ufeb1\u0188\ufeb1\001\002\000\004\052\u0135\001\002\000" +
    "\006\012\057\050\062\001\002\000\004\102\u0137\001\002" +
    "\000\006\012\057\050\062\001\002\000\022\037\ufebb\040" +
    "\ufebb\052\u0139\055\ufebb\241\ufebb\u0103\ufebb\u015f\ufebb\u0188\ufebb" +
    "\001\002\000\006\012\057\050\062\001\002\000\020\037" +
    "\ufeb9\040\ufeb9\055\ufeb9\241\ufeb9\u0103\ufeb9\u015f\u013b\u0188\ufeb9" +
    "\001\002\000\006\262\u0148\274\u0149\001\002\000\016\037" +
    "\ufef2\040\ufef2\055\ufef2\241\u013d\u0103\ufef2\u0188\ufef2\001\002" +
    "\000\006\074\u013f\244\u0141\001\002\000\014\037\ufeaf\040" +
    "\ufeaf\055\ufeaf\u0103\ufeaf\u0188\ufeaf\001\002\000\004\105\u0142" +
    "\001\002\000\034\037\ufef3\040\ufef3\052\ufef3\055\ufef3\077" +
    "\ufef3\102\ufef3\140\ufef3\141\ufef3\174\ufef3\266\ufef3\336\ufef3" +
    "\u0103\ufef3\u0188\ufef3\001\002\000\034\037\ufef0\040\ufef0\052" +
    "\ufef0\055\ufef0\077\ufef0\102\ufef0\140\ufef0\141\ufef0\174\ufef0" +
    "\266\ufef0\336\ufef0\u0103\ufef0\u0188\ufef0\001\002\000\036\037" +
    "\ufeee\040\ufeee\052\ufeee\055\ufeee\077\ufeee\102\ufeee\140\ufeee" +
    "\141\ufeee\174\ufeee\241\u0143\266\ufeee\336\ufeee\u0103\ufeee\u0188" +
    "\ufeee\001\002\000\036\037\ufecc\040\ufecc\052\ufecc\055\ufecc" +
    "\077\ufecc\102\ufecc\140\ufecc\141\ufecc\174\ufecc\244\u0146\266" +
    "\ufecc\336\ufecc\u0103\ufecc\u0188\ufecc\001\002\000\034\037\ufef1" +
    "\040\ufef1\052\ufef1\055\ufef1\077\ufef1\102\ufef1\140\ufef1\141" +
    "\ufef1\174\ufef1\266\ufef1\336\ufef1\u0103\ufef1\u0188\ufef1\001\002" +
    "\000\034\037\ufeef\040\ufeef\052\ufeef\055\ufeef\077\ufeef\102" +
    "\ufeef\140\ufeef\141\ufeef\174\ufeef\266\ufeef\336\ufeef\u0103\ufeef" +
    "\u0188\ufeef\001\002\000\034\037\ufecd\040\ufecd\052\ufecd\055" +
    "\ufecd\077\ufecd\102\ufecd\140\ufecd\141\ufecd\174\ufecd\266\ufecd" +
    "\336\ufecd\u0103\ufecd\u0188\ufecd\001\002\000\034\037\ufeb9\040" +
    "\ufeb9\055\ufeb9\077\ufeb9\102\ufeb9\141\ufeb9\174\ufeb9\241\ufeb9" +
    "\266\ufeb9\336\ufeb9\u0103\ufeb9\u015f\u013b\u0188\ufeb9\001\002\000" +
    "\006\133\u014c\176\u014b\001\002\000\006\133\u014c\176\u014b" +
    "\001\002\000\034\037\ufeb7\040\ufeb7\055\ufeb7\077\ufeb7\102" +
    "\ufeb7\141\ufeb7\174\ufeb7\241\ufeb7\266\ufeb7\336\ufeb7\u0103\ufeb7" +
    "\u015f\ufeb7\u0188\ufeb7\001\002\000\006\244\u014f\257\u014d\001" +
    "\002\000\034\037\ufeb4\040\ufeb4\055\ufeb4\077\ufeb4\102\ufeb4" +
    "\141\ufeb4\174\ufeb4\241\ufeb4\266\ufeb4\336\ufeb4\u0103\ufeb4\u015f" +
    "\ufeb4\u0188\ufeb4\001\002\000\034\037\ufeb5\040\ufeb5\055\ufeb5" +
    "\077\ufeb5\102\ufeb5\141\ufeb5\174\ufeb5\241\ufeb5\266\ufeb5\336" +
    "\ufeb5\u0103\ufeb5\u015f\ufeb5\u0188\ufeb5\001\002\000\034\037\ufeb3" +
    "\040\ufeb3\055\ufeb3\077\ufeb3\102\ufeb3\141\ufeb3\174\ufeb3\241" +
    "\ufeb3\266\ufeb3\336\ufeb3\u0103\ufeb3\u015f\ufeb3\u0188\ufeb3\001\002" +
    "\000\034\037\ufeb6\040\ufeb6\055\ufeb6\077\ufeb6\102\ufeb6\141" +
    "\ufeb6\174\ufeb6\241\ufeb6\266\ufeb6\336\ufeb6\u0103\ufeb6\u015f\ufeb6" +
    "\u0188\ufeb6\001\002\000\034\037\ufeb8\040\ufeb8\055\ufeb8\077" +
    "\ufeb8\102\ufeb8\141\ufeb8\174\ufeb8\241\ufeb8\266\ufeb8\336\ufeb8" +
    "\u0103\ufeb8\u015f\ufeb8\u0188\ufeb8\001\002\000\032\037\ufeba\040" +
    "\ufeba\055\ufeba\077\ufeba\102\ufeba\141\ufeba\174\ufeba\241\ufeba" +
    "\266\ufeba\336\ufeba\u0103\ufeba\u0188\ufeba\001\002\000\004\055" +
    "\u0153\001\002\000\034\037\ufebc\040\ufebc\055\ufebc\077\ufebc" +
    "\102\ufebc\141\ufebc\174\ufebc\241\ufebc\266\ufebc\336\ufebc\u0103" +
    "\ufebc\u015f\ufebc\u0188\ufebc\001\002\000\006\040\u0156\055\ufea8" +
    "\001\002\000\004\055\u0159\001\002\000\006\012\057\050" +
    "\062\001\002\000\006\040\u0156\055\ufea8\001\002\000\004" +
    "\055\ufea9\001\002\000\004\102\ufeaa\001\002\000\004\052" +
    "\u015b\001\002\000\040\012\uff8f\016\uff8f\017\uff8f\020\uff8f" +
    "\022\uff8f\042\uff8f\050\uff8f\052\240\241\243\244\uff8f\377" +
    "\uff8f\u012c\uff8f\u0131\uff8f\u013c\uff8f\u013d\uff8f\001\002\000\004" +
    "\055\u015d\001\002\000\014\037\ufeae\040\ufeae\055\ufeae\u0103" +
    "\ufeae\u0188\ufeae\001\002\000\066\005\uffcc\037\uffcc\040\uffcc" +
    "\052\uffcc\053\uffcc\055\uffcc\074\uffcc\076\uffcc\077\uffcc\102" +
    "\uffcc\137\uffcc\140\uffcc\141\uffcc\160\uffcc\174\uffcc\241\uffcc" +
    "\244\uffcc\257\uffcc\266\uffcc\334\uffcc\336\uffcc\u0103\uffcc\u0166" +
    "\uffcc\u0169\uffcc\u016a\uffcc\u0188\uffcc\001\002\000\066\005\uffcb" +
    "\037\uffcb\040\uffcb\052\uffcb\053\uffcb\055\uffcb\074\uffcb\076" +
    "\uffcb\077\uffcb\102\uffcb\137\uffcb\140\uffcb\141\uffcb\160\uffcb" +
    "\174\uffcb\241\uffcb\244\uffcb\257\uffcb\266\uffcb\334\uffcb\336" +
    "\uffcb\u0103\uffcb\u0166\uffcb\u0169\uffcb\u016a\uffcb\u0188\uffcb\001\002" +
    "\000\066\005\uffd1\037\uffd1\040\uffd1\052\uffd1\053\uffd1\055" +
    "\uffd1\074\uffd1\076\uffd1\077\uffd1\102\uffd1\137\uffd1\140\uffd1" +
    "\141\uffd1\160\uffd1\174\uffd1\241\uffd1\244\uffd1\257\uffd1\266" +
    "\uffd1\334\uffd1\336\uffd1\u0103\uffd1\u0166\uffd1\u0169\uffd1\u016a\uffd1" +
    "\u0188\uffd1\001\002\000\066\005\uffd4\037\uffd4\040\uffd4\052" +
    "\uffd4\053\uffd4\055\uffd4\074\uffd4\076\uffd4\077\uffd4\102\uffd4" +
    "\137\uffd4\140\uffd4\141\uffd4\160\uffd4\174\uffd4\241\uffd4\244" +
    "\uffd4\257\uffd4\266\uffd4\334\uffd4\336\uffd4\u0103\uffd4\u0166\uffd4" +
    "\u0169\uffd4\u016a\uffd4\u0188\uffd4\001\002\000\056\037\uffd0\040" +
    "\uffd0\052\uffd0\053\uffd0\055\uffd0\074\uffd0\077\uffd0\102\uffd0" +
    "\137\uffd0\140\uffd0\141\uffd0\160\uffd0\174\uffd0\241\uffd0\244" +
    "\uffd0\257\uffd0\266\uffd0\334\uffd0\336\uffd0\u0103\uffd0\u016a\uffd0" +
    "\u0188\uffd0\001\002\000\066\005\uffcf\037\uffcf\040\uffcf\052" +
    "\uffcf\053\uffcf\055\uffcf\074\uffcf\076\uffcf\077\uffcf\102\uffcf" +
    "\137\uffcf\140\uffcf\141\uffcf\160\uffcf\174\uffcf\241\uffcf\244" +
    "\uffcf\257\uffcf\266\uffcf\334\uffcf\336\uffcf\u0103\uffcf\u0166\uffcf" +
    "\u0169\uffcf\u016a\uffcf\u0188\uffcf\001\002\000\042\240\u0162\303" +
    "\u0171\364\u0167\376\u016e\u0104\u0168\u0111\u0160\u011a\u0169\u011d\u015e" +
    "\u0120\u016b\u0133\u016a\u013f\u0161\u0149\u015f\u014c\u0163\u0159\u016d\u015a" +
    "\u0165\u0189\u0170\001\002\000\066\005\uffd7\037\uffd7\040\uffd7" +
    "\052\uffd7\053\uffd7\055\uffd7\074\uffd7\076\uffd7\077\uffd7\102" +
    "\uffd7\137\uffd7\140\uffd7\141\uffd7\160\uffd7\174\uffd7\241\uffd7" +
    "\244\uffd7\257\uffd7\266\uffd7\334\uffd7\336\uffd7\u0103\uffd7\u0166" +
    "\uffd7\u0169\uffd7\u016a\uffd7\u0188\uffd7\001\002\000\046\037\ufed7" +
    "\040\ufed7\055\ufed7\074\ufed7\077\ufed7\102\ufed7\137\ufed7\140" +
    "\ufed7\141\ufed7\160\u0179\174\ufed7\241\ufed7\244\ufed7\257\ufed7" +
    "\266\ufed7\336\ufed7\u0103\ufed7\u0188\ufed7\001\002\000\066\005" +
    "\uffd5\037\uffd5\040\uffd5\052\uffd5\053\uffd5\055\uffd5\074\uffd5" +
    "\076\uffd5\077\uffd5\102\uffd5\137\uffd5\140\uffd5\141\uffd5\160" +
    "\uffd5\174\uffd5\241\uffd5\244\uffd5\257\uffd5\266\uffd5\334\uffd5" +
    "\336\uffd5\u0103\uffd5\u0166\uffd5\u0169\uffd5\u016a\uffd5\u0188\uffd5\001" +
    "\002\000\066\005\uffd3\037\uffd3\040\uffd3\052\uffd3\053\uffd3" +
    "\055\uffd3\074\uffd3\076\uffd3\077\uffd3\102\uffd3\137\uffd3\140" +
    "\uffd3\141\uffd3\160\uffd3\174\uffd3\241\uffd3\244\uffd3\257\uffd3" +
    "\266\uffd3\334\uffd3\336\uffd3\u0103\uffd3\u0166\uffd3\u0169\uffd3\u016a" +
    "\uffd3\u0188\uffd3\001\002\000\066\005\uffca\037\uffca\040\uffca" +
    "\052\uffca\053\uffca\055\uffca\074\uffca\076\uffca\077\uffca\102" +
    "\uffca\137\uffca\140\uffca\141\uffca\160\uffca\174\uffca\241\uffca" +
    "\244\uffca\257\uffca\266\uffca\334\uffca\336\uffca\u0103\uffca\u0166" +
    "\uffca\u0169\uffca\u016a\uffca\u0188\uffca\001\002\000\066\005\uffcd" +
    "\037\uffcd\040\uffcd\052\uffcd\053\uffcd\055\uffcd\074\uffcd\076" +
    "\uffcd\077\uffcd\102\uffcd\137\uffcd\140\uffcd\141\uffcd\160\uffcd" +
    "\174\uffcd\241\uffcd\244\uffcd\257\uffcd\266\uffcd\334\uffcd\336" +
    "\uffcd\u0103\uffcd\u0166\uffcd\u0169\uffcd\u016a\uffcd\u0188\uffcd\001\002" +
    "\000\066\005\uffd6\037\uffd6\040\uffd6\052\uffd6\053\uffd6\055" +
    "\uffd6\074\uffd6\076\uffd6\077\uffd6\102\uffd6\137\uffd6\140\uffd6" +
    "\141\uffd6\160\uffd6\174\uffd6\241\uffd6\244\uffd6\257\uffd6\266" +
    "\uffd6\334\uffd6\336\uffd6\u0103\uffd6\u0166\uffd6\u0169\uffd6\u016a\uffd6" +
    "\u0188\uffd6\001\002\000\062\005\uffc6\037\uffc6\040\uffc6\052" +
    "\u0172\055\uffc6\074\uffc6\076\uffc6\077\uffc6\102\uffc6\137\uffc6" +
    "\140\uffc6\141\uffc6\160\uffc6\174\uffc6\241\uffc6\244\uffc6\257" +
    "\uffc6\266\uffc6\334\uffc6\336\uffc6\u0103\uffc6\u0166\uffc6\u0169\uffc6" +
    "\u0188\uffc6\001\002\000\066\005\uffc9\037\uffc9\040\uffc9\052" +
    "\uffc9\053\uffc9\055\uffc9\074\uffc9\076\uffc9\077\uffc9\102\uffc9" +
    "\137\uffc9\140\uffc9\141\uffc9\160\uffc9\174\uffc9\241\uffc9\244" +
    "\uffc9\257\uffc9\266\uffc9\334\uffc9\336\uffc9\u0103\uffc9\u0166\uffc9" +
    "\u0169\uffc9\u016a\uffc9\u0188\uffc9\001\002\000\066\005\uffce\037" +
    "\uffce\040\uffce\052\uffce\053\uffce\055\uffce\074\uffce\076\uffce" +
    "\077\uffce\102\uffce\137\uffce\140\uffce\141\uffce\160\uffce\174" +
    "\uffce\241\uffce\244\uffce\257\uffce\266\uffce\334\uffce\336\uffce" +
    "\u0103\uffce\u0166\uffce\u0169\uffce\u016a\uffce\u0188\uffce\001\002\000" +
    "\062\005\uffd9\037\uffd9\040\uffd9\052\uffd9\055\uffd9\074\uffd9" +
    "\076\uffd9\077\uffd9\102\uffd9\137\uffd9\140\uffd9\141\uffd9\160" +
    "\uffd9\174\uffd9\241\uffd9\244\uffd9\257\uffd9\266\uffd9\334\uffd9" +
    "\336\uffd9\u0103\uffd9\u0166\uffd9\u0169\uffd9\u0188\uffd9\001\002\000" +
    "\066\005\uffc8\037\uffc8\040\uffc8\052\uffc8\053\uffc8\055\uffc8" +
    "\074\uffc8\076\uffc8\077\uffc8\102\uffc8\137\uffc8\140\uffc8\141" +
    "\uffc8\160\uffc8\174\uffc8\241\uffc8\244\uffc8\257\uffc8\266\uffc8" +
    "\334\uffc8\336\uffc8\u0103\uffc8\u0166\uffc8\u0169\uffc8\u016a\uffc8\u0188" +
    "\uffc8\001\002\000\066\005\uffd2\037\uffd2\040\uffd2\052\uffd2" +
    "\053\uffd2\055\uffd2\074\uffd2\076\uffd2\077\uffd2\102\uffd2\137" +
    "\uffd2\140\uffd2\141\uffd2\160\uffd2\174\uffd2\241\uffd2\244\uffd2" +
    "\257\uffd2\266\uffd2\334\uffd2\336\uffd2\u0103\uffd2\u0166\uffd2\u0169" +
    "\uffd2\u016a\uffd2\u0188\uffd2\001\002\000\004\016\u0174\001\002" +
    "\000\060\005\uffda\037\uffda\040\uffda\055\uffda\074\uffda\076" +
    "\uffda\077\uffda\102\uffda\137\uffda\140\uffda\141\uffda\160\uffda" +
    "\174\uffda\241\uffda\244\uffda\257\uffda\266\uffda\334\uffda\336" +
    "\uffda\u0103\uffda\u0166\uffda\u0169\uffda\u0188\uffda\001\002\000\006" +
    "\040\u0175\055\uffc4\001\002\000\004\016\u0178\001\002\000" +
    "\004\055\u0177\001\002\000\060\005\uffc7\037\uffc7\040\uffc7" +
    "\055\uffc7\074\uffc7\076\uffc7\077\uffc7\102\uffc7\137\uffc7\140" +
    "\uffc7\141\uffc7\160\uffc7\174\uffc7\241\uffc7\244\uffc7\257\uffc7" +
    "\266\uffc7\334\uffc7\336\uffc7\u0103\uffc7\u0166\uffc7\u0169\uffc7\u0188" +
    "\uffc7\001\002\000\004\055\uffc5\001\002\000\006\012\057" +
    "\050\062\001\002\000\044\037\ufee5\040\ufee5\055\ufee5\074" +
    "\ufede\077\u0188\102\ufebd\137\u017b\140\u0182\141\u0186\174\u0181" +
    "\241\u0185\244\ufede\257\u0180\266\u017f\336\u0187\u0103\ufee5\u0188" +
    "\ufee5\001\002\000\036\037\ufece\040\ufece\052\u01a8\055\ufece" +
    "\077\ufece\102\ufece\140\ufece\141\ufece\174\ufece\241\ufece\266" +
    "\ufece\336\ufece\u0103\ufece\u0188\ufece\001\002\000\014\037\ufee8" +
    "\040\ufee8\055\ufee8\u0103\ufee8\u0188\ufee8\001\002\000\014\037" +
    "\ufee6\040\ufee6\055\ufee6\u0103\ufee6\u0188\ufee6\001\002\000\006" +
    "\074\u01af\244\u01b0\001\002\000\034\037\ufebf\040\ufebf\055" +
    "\ufebf\077\ufebf\102\ufebf\141\ufebf\152\215\174\ufebf\236\216" +
    "\266\ufebf\336\ufebf\u0103\ufebf\u0188\ufebf\001\002\000\014\016" +
    "\u01a1\017\u019e\020\u019c\022\u019d\244\u019f\001\002\000\006" +
    "\012\057\050\062\001\002\000\030\037\ufec8\040\ufec8\055" +
    "\ufec8\077\ufec6\102\ufec6\141\ufec6\174\u011d\266\ufec6\336\ufec6" +
    "\u0103\ufec8\u0188\ufec8\001\002\000\004\102\u0194\001\002\000" +
    "\030\037\ufec8\040\ufec8\055\ufec8\077\ufec6\102\ufec6\141\ufec6" +
    "\174\u011d\266\ufec6\336\ufec6\u0103\ufec8\u0188\ufec8\001\002\000" +
    "\006\074\ufedf\244\ufedf\001\002\000\006\052\ufef2\241\u013d" +
    "\001\002\000\004\203\u018a\001\002\000\004\203\u0189\001" +
    "\002\000\004\102\ufebe\001\002\000\034\037\ufebf\040\ufebf" +
    "\055\ufebf\077\ufebf\102\ufebf\141\ufebf\152\215\174\ufebf\236" +
    "\216\266\ufebf\336\ufebf\u0103\ufebf\u0188\ufebf\001\002\000\030" +
    "\037\ufec5\040\ufec5\055\ufec5\077\ufec5\102\ufec5\141\ufec5\174" +
    "\ufec5\266\ufec5\336\ufec5\u0103\ufec5\u0188\ufec5\001\002\000\004" +
    "\052\u018d\001\002\000\040\012\uff8f\016\uff8f\017\uff8f\020" +
    "\uff8f\022\uff8f\042\uff8f\050\uff8f\052\240\241\243\244\uff8f" +
    "\377\uff8f\u012c\uff8f\u0131\uff8f\u013c\uff8f\u013d\uff8f\001\002\000" +
    "\004\055\u018f\001\002\000\030\037\ufec2\040\ufec2\055\ufec2" +
    "\077\ufec2\102\ufec2\141\ufec2\174\ufec2\266\ufec2\336\ufec2\u0103" +
    "\ufec2\u0188\ufec2\001\002\000\014\037\ufee0\040\ufee0\055\ufee0" +
    "\u0103\ufee0\u0188\ufee0\001\002\000\014\077\u0188\102\ufebd\141" +
    "\u0186\266\u017f\336\u0187\001\002\000\030\037\ufec8\040\ufec8" +
    "\055\ufec8\077\ufec6\102\ufec6\141\ufec6\174\u011d\266\ufec6\336" +
    "\ufec6\u0103\ufec8\u0188\ufec8\001\002\000\014\037\ufec9\040\ufec9" +
    "\055\ufec9\u0103\ufec9\u0188\ufec9\001\002\000\006\012\057\050" +
    "\062\001\002\000\036\037\ufebb\040\ufebb\052\u0139\055\ufebb" +
    "\077\ufebb\102\ufebb\141\ufebb\174\ufebb\241\ufebb\266\ufebb\336" +
    "\ufebb\u0103\ufebb\u015f\ufebb\u0188\ufebb\001\002\000\034\037\ufeb9" +
    "\040\ufeb9\055\ufeb9\077\ufeb9\102\ufeb9\141\ufeb9\174\ufeb9\241" +
    "\ufeb9\266\ufeb9\336\ufeb9\u0103\ufeb9\u015f\u013b\u0188\ufeb9\001\002" +
    "\000\032\037\ufef2\040\ufef2\055\ufef2\077\ufef2\102\ufef2\141" +
    "\ufef2\174\ufef2\241\u013d\266\ufef2\336\ufef2\u0103\ufef2\u0188\ufef2" +
    "\001\002\000\030\037\ufec3\040\ufec3\055\ufec3\077\ufec3\102" +
    "\ufec3\141\ufec3\174\ufec3\266\ufec3\336\ufec3\u0103\ufec3\u0188\ufec3" +
    "\001\002\000\014\037\ufee1\040\ufee1\055\ufee1\u0103\ufee1\u0188" +
    "\ufee1\001\002\000\030\074\ufede\077\u0188\102\ufebd\137\u017b" +
    "\140\u0182\141\u0186\241\u0185\244\ufede\257\u0180\266\u017f\336" +
    "\u0187\001\002\000\014\037\ufee7\040\ufee7\055\ufee7\u0103\ufee7" +
    "\u0188\ufee7\001\002\000\036\037\ufed4\040\ufed4\055\ufed4\077" +
    "\ufed4\102\ufed4\137\ufed4\140\ufed4\141\ufed4\174\ufed4\241\ufed4" +
    "\266\ufed4\336\ufed4\u0103\ufed4\u0188\ufed4\001\002\000\036\037" +
    "\ufed5\040\ufed5\055\ufed5\077\ufed5\102\ufed5\137\ufed5\140\ufed5" +
    "\141\ufed5\174\ufed5\241\ufed5\266\ufed5\336\ufed5\u0103\ufed5\u0188" +
    "\ufed5\001\002\000\036\037\ufed3\040\ufed3\055\ufed3\077\ufed3" +
    "\102\ufed3\137\ufed3\140\ufed3\141\ufed3\174\ufed3\241\ufed3\266" +
    "\ufed3\336\ufed3\u0103\ufed3\u0188\ufed3\001\002\000\036\037\ufed2" +
    "\040\ufed2\055\ufed2\077\ufed2\102\ufed2\137\ufed2\140\ufed2\141" +
    "\ufed2\174\ufed2\241\ufed2\266\ufed2\336\ufed2\u0103\ufed2\u0188\ufed2" +
    "\001\002\000\036\037\ufed0\040\ufed0\055\ufed0\077\ufed0\102" +
    "\ufed0\137\u01a2\140\ufed0\141\ufed0\174\ufed0\241\ufed0\266\ufed0" +
    "\336\ufed0\u0103\ufed0\u0188\ufed0\001\002\000\036\037\ufed6\040" +
    "\ufed6\055\ufed6\077\ufed6\102\ufed6\137\ufed6\140\ufed6\141\ufed6" +
    "\174\ufed6\241\ufed6\266\ufed6\336\ufed6\u0103\ufed6\u0188\ufed6\001" +
    "\002\000\036\037\ufece\040\ufece\052\u01a8\055\ufece\077\ufece" +
    "\102\ufece\140\ufece\141\ufece\174\ufece\241\ufece\266\ufece\336" +
    "\ufece\u0103\ufece\u0188\ufece\001\002\000\034\037\ufef2\040\ufef2" +
    "\055\ufef2\077\ufef2\102\ufef2\140\ufef2\141\ufef2\174\ufef2\241" +
    "\u013d\266\ufef2\336\ufef2\u0103\ufef2\u0188\ufef2\001\002\000\032" +
    "\037\ufeca\040\ufeca\055\ufeca\077\ufeca\102\ufeca\140\u01a5\141" +
    "\ufeca\174\ufeca\266\ufeca\336\ufeca\u0103\ufeca\u0188\ufeca\001\002" +
    "\000\030\037\ufecb\040\ufecb\055\ufecb\077\ufecb\102\ufecb\141" +
    "\ufecb\174\ufecb\266\ufecb\336\ufecb\u0103\ufecb\u0188\ufecb\001\002" +
    "\000\030\037\ufec8\040\ufec8\055\ufec8\077\ufec6\102\ufec6\141" +
    "\ufec6\174\u011d\266\ufec6\336\ufec6\u0103\ufec8\u0188\ufec8\001\002" +
    "\000\014\037\ufee4\040\ufee4\055\ufee4\u0103\ufee4\u0188\ufee4\001" +
    "\002\000\004\016\u01aa\001\002\000\034\037\ufed1\040\ufed1" +
    "\055\ufed1\077\ufed1\102\ufed1\140\ufed1\141\ufed1\174\ufed1\241" +
    "\ufed1\266\ufed1\336\ufed1\u0103\ufed1\u0188\ufed1\001\002\000\004" +
    "\040\u01ab\001\002\000\004\016\u01ac\001\002\000\004\055" +
    "\u01ad\001\002\000\034\037\ufecf\040\ufecf\055\ufecf\077\ufecf" +
    "\102\ufecf\140\ufecf\141\ufecf\174\ufecf\241\ufecf\266\ufecf\336" +
    "\ufecf\u0103\ufecf\u0188\ufecf\001\002\000\030\037\ufec4\040\ufec4" +
    "\055\ufec4\077\ufec4\102\ufec4\141\ufec4\174\ufec4\266\ufec4\336" +
    "\ufec4\u0103\ufec4\u0188\ufec4\001\002\000\004\105\u01b4\001\002" +
    "\000\032\037\ufedd\040\ufedd\055\ufedd\077\ufedd\102\ufedd\140" +
    "\ufedd\141\ufedd\174\ufedd\266\ufedd\336\ufedd\u0103\ufedd\u0188\ufedd" +
    "\001\002\000\032\037\ufeca\040\ufeca\055\ufeca\077\ufeca\102" +
    "\ufeca\140\u01a5\141\ufeca\174\ufeca\266\ufeca\336\ufeca\u0103\ufeca" +
    "\u0188\ufeca\001\002\000\030\037\ufec8\040\ufec8\055\ufec8\077" +
    "\ufec6\102\ufec6\141\ufec6\174\u011d\266\ufec6\336\ufec6\u0103\ufec8" +
    "\u0188\ufec8\001\002\000\014\037\ufee2\040\ufee2\055\ufee2\u0103" +
    "\ufee2\u0188\ufee2\001\002\000\036\037\ufed9\040\ufed9\055\ufed9" +
    "\077\ufed9\102\ufed9\140\ufed9\141\ufed9\174\ufed9\241\u01b6\244" +
    "\u01b7\266\ufed9\336\ufed9\u0103\ufed9\u0188\ufed9\001\002\000\032" +
    "\037\ufedc\040\ufedc\055\ufedc\077\ufedc\102\ufedc\140\ufedc\141" +
    "\ufedc\174\ufedc\266\ufedc\336\ufedc\u0103\ufedc\u0188\ufedc\001\002" +
    "\000\004\244\u01b8\001\002\000\032\037\ufeda\040\ufeda\055" +
    "\ufeda\077\ufeda\102\ufeda\140\ufeda\141\ufeda\174\ufeda\266\ufeda" +
    "\336\ufeda\u0103\ufeda\u0188\ufeda\001\002\000\032\037\ufedb\040" +
    "\ufedb\055\ufedb\077\ufedb\102\ufedb\140\ufedb\141\ufedb\174\ufedb" +
    "\266\ufedb\336\ufedb\u0103\ufedb\u0188\ufedb\001\002\000\034\037" +
    "\ufef2\040\ufef2\055\ufef2\077\ufef2\102\ufef2\140\ufef2\141\ufef2" +
    "\174\ufef2\241\u013d\266\ufef2\336\ufef2\u0103\ufef2\u0188\ufef2\001" +
    "\002\000\032\037\ufeca\040\ufeca\055\ufeca\077\ufeca\102\ufeca" +
    "\140\u01a5\141\ufeca\174\ufeca\266\ufeca\336\ufeca\u0103\ufeca\u0188" +
    "\ufeca\001\002\000\030\037\ufec8\040\ufec8\055\ufec8\077\ufec6" +
    "\102\ufec6\141\ufec6\174\u011d\266\ufec6\336\ufec6\u0103\ufec8\u0188" +
    "\ufec8\001\002\000\014\037\ufee3\040\ufee3\055\ufee3\u0103\ufee3" +
    "\u0188\ufee3\001\002\000\044\037\ufed8\040\ufed8\055\ufed8\074" +
    "\ufed8\077\ufed8\102\ufed8\137\ufed8\140\ufed8\141\ufed8\174\ufed8" +
    "\241\ufed8\244\ufed8\257\ufed8\266\ufed8\336\ufed8\u0103\ufed8\u0188" +
    "\ufed8\001\002\000\004\053\u01bf\001\002\000\062\005\uffd8" +
    "\037\uffd8\040\uffd8\052\uffd8\055\uffd8\074\uffd8\076\uffd8\077" +
    "\uffd8\102\uffd8\137\uffd8\140\uffd8\141\uffd8\160\uffd8\174\uffd8" +
    "\241\uffd8\244\uffd8\257\uffd8\266\uffd8\334\uffd8\336\uffd8\u0103" +
    "\uffd8\u0166\uffd8\u0169\uffd8\u0188\uffd8\001\002\000\014\077\ufec7" +
    "\102\ufec7\141\ufec7\266\ufec7\336\ufec7\001\002\000\022\012" +
    "\057\050\062\077\ufec6\141\ufec6\156\u0119\174\u011d\266\ufec6" +
    "\336\ufec6\001\002\000\004\055\u01c3\001\002\000\012\037" +
    "\ufef4\u0103\ufef4\u015f\u01c5\u0188\ufef4\001\002\000\010\037\ufef6" +
    "\u0103\ufef6\u0188\ufef6\001\002\000\004\336\u01c6\001\002\000" +
    "\010\037\ufef5\u0103\ufef5\u0188\ufef5\001\002\000\014\037\ufee9" +
    "\040\u01c1\055\ufee9\u0103\ufee9\u0188\ufee9\001\002\000\012\037" +
    "\ufeea\055\ufeea\u0103\ufeea\u0188\ufeea\001\002\000\010\052\ufebf" +
    "\152\215\236\216\001\002\000\004\052\u0127\001\002\000" +
    "\014\037\ufea7\040\ufea7\055\ufea7\u0103\ufea7\u0188\ufea7\001\002" +
    "\000\010\037\uff22\u0103\uff22\u0188\uff22\001\002\000\014\037" +
    "\uff1e\160\uff1e\u0103\uff1e\u015f\u01ce\u0188\uff1e\001\002\000\006" +
    "\052\uff1c\336\u01d4\001\002\000\012\037\uff17\160\u01d1\u0103" +
    "\uff17\u0188\uff17\001\002\000\010\037\uff21\u0103\uff21\u0188\uff21" +
    "\001\002\000\006\012\057\050\062\001\002\000\010\037" +
    "\uff20\u0103\uff20\u0188\uff20\001\002\000\010\037\uff18\u0103\uff18" +
    "\u0188\uff18\001\002\000\004\052\uff1d\001\002\000\004\052" +
    "\u01d6\001\002\000\004\u017e\u01db\001\002\000\012\037\uff1f" +
    "\160\uff1f\u0103\uff1f\u0188\uff1f\001\002\000\014\037\uff1a\040" +
    "\u01d9\160\uff1a\u0103\uff1a\u0188\uff1a\001\002\000\004\052\u01d6" +
    "\001\002\000\012\037\uff1b\160\uff1b\u0103\uff1b\u0188\uff1b\001" +
    "\002\000\004\005\u01dc\001\002\000\004\020\u01dd\001\002" +
    "\000\004\040\u01de\001\002\000\004\u017f\u01df\001\002\000" +
    "\004\005\u01e0\001\002\000\004\020\u01e1\001\002\000\006" +
    "\040\u01e3\055\uff15\001\002\000\004\055\u01ff\001\002\000" +
    "\010\u0118\u01ec\u0184\u01eb\u0186\u01ea\001\002\000\006\040\uff10" +
    "\055\uff10\001\002\000\006\040\uff13\055\uff13\001\002\000" +
    "\006\040\uff14\055\uff14\001\002\000\006\040\uff12\055\uff12" +
    "\001\002\000\006\040\u01e3\055\uff15\001\002\000\006\040" +
    "\uff11\055\uff11\001\002\000\004\005\u01f9\001\002\000\004" +
    "\005\u01f4\001\002\000\004\005\u01ed\001\002\000\004\016" +
    "\u01ee\001\002\000\016\040\uff0e\055\uff0e\u0180\u01f1\u0181\u01f2" +
    "\u0182\u01f0\u0183\u01f3\001\002\000\006\040\uff0f\055\uff0f\001" +
    "\002\000\006\040\uff0a\055\uff0a\001\002\000\006\040\uff0d" +
    "\055\uff0d\001\002\000\006\040\uff0b\055\uff0b\001\002\000" +
    "\006\040\uff0c\055\uff0c\001\002\000\006\016\u01f6\u0185\u01f7" +
    "\001\002\000\006\040\uff09\055\uff09\001\002\000\012\u0180" +
    "\u01f1\u0181\u01f2\u0182\u01f0\u0183\u01f3\001\002\000\006\040\uff07" +
    "\055\uff07\001\002\000\006\040\uff08\055\uff08\001\002\000" +
    "\004\016\u01fa\001\002\000\020\040\uff03\055\uff03\u0180\u01f1" +
    "\u0181\u01f2\u0182\u01f0\u0183\u01f3\u0187\u01fb\001\002\000\006\040" +
    "\uff04\055\uff04\001\002\000\006\040\uff05\055\uff05\001\002" +
    "\000\006\040\uff06\055\uff06\001\002\000\004\055\uff16\001" +
    "\002\000\014\037\uff19\040\uff19\160\uff19\u0103\uff19\u0188\uff19" +
    "\001\002\000\006\012\ufe6c\050\ufe6c\001\002\000\006\012" +
    "\057\050\062\001\002\000\006\012\ufe6d\050\ufe6d\001\002" +
    "\000\006\012\057\050\062\001\002\000\004\052\u0205\001" +
    "\002\000\006\042\060\055\ufe2d\001\002\000\004\055\ufe2e" +
    "\001\002\000\044\076\u0213\240\ufe25\303\ufe25\364\ufe25\376" +
    "\ufe25\u0104\ufe25\u0111\ufe25\u011a\ufe25\u011d\ufe25\u0120\ufe25\u0133\ufe25" +
    "\u013f\ufe25\u0149\ufe25\u014c\ufe25\u0159\ufe25\u015a\ufe25\u0189\ufe25\001" +
    "\002\000\006\040\u0245\055\ufe27\001\002\000\004\055\u020a" +
    "\001\002\000\004\u016c\u020b\001\002\000\044\220\u020e\240" +
    "\u0162\303\u0171\364\u0167\376\u016e\u0104\u0168\u0111\u0160\u011a\u0169" +
    "\u011d\u015e\u0120\u016b\u0133\u016a\u013f\u0161\u0149\u015f\u014c\u0163\u0159" +
    "\u016d\u015a\u0165\u0189\u0170\001\002\000\010\037\ufe21\u0103\ufe21" +
    "\u0188\ufe21\001\002\000\010\037\ufe22\u0103\ufe22\u0188\ufe22\001" +
    "\002\000\004\334\u0211\001\002\000\010\037\ufe2f\u0103\ufe2f" +
    "\u0188\ufe2f\001\002\000\004\334\u0211\001\002\000\020\332" +
    "\044\335\012\u016b\u0227\u016c\u021f\u016d\u0224\u016e\u0222\u016f\u0225" +
    "\001\002\000\006\076\u0213\111\ufe25\001\002\000\046\111" +
    "\ufe26\116\ufe26\240\ufe26\303\ufe26\364\ufe26\376\ufe26\u0104\ufe26" +
    "\u0111\ufe26\u011a\ufe26\u011d\ufe26\u0120\ufe26\u0133\ufe26\u013f\ufe26\u0149" +
    "\ufe26\u014c\ufe26\u0159\ufe26\u015a\ufe26\u0189\ufe26\001\002\000\004" +
    "\111\u0215\001\002\000\012\157\021\164\034\262\014\274" +
    "\013\001\002\000\004\116\u0217\001\002\000\014\016\u021d" +
    "\017\u021c\020\u0218\022\u021a\042\060\001\002\000\004\316" +
    "\ufe19\001\002\000\004\316\u021e\001\002\000\004\316\ufe1a" +
    "\001\002\000\004\316\ufe1c\001\002\000\004\316\ufe18\001" +
    "\002\000\004\316\ufe1b\001\002\000\010\037\ufe20\u0103\ufe20" +
    "\u0188\ufe20\001\002\000\004\244\u0238\001\002\000\010\076" +
    "\ufe17\111\ufe17\116\ufe17\001\002\000\004\076\u0232\001\002" +
    "\000\004\u015f\u022f\001\002\000\012\040\u022c\076\ufe0e\111" +
    "\ufe0e\116\ufe0e\001\002\000\012\040\ufe14\076\ufe14\111\ufe14" +
    "\116\ufe14\001\002\000\004\005\u0228\001\002\000\012\040" +
    "\ufe11\076\ufe11\111\ufe11\116\ufe11\001\002\000\012\040\ufe15" +
    "\076\ufe15\111\ufe15\116\ufe15\001\002\000\006\255\u022b\u015f" +
    "\u0229\001\002\000\012\040\ufe0d\076\ufe0d\111\ufe0d\116\ufe0d" +
    "\001\002\000\012\040\ufe10\076\ufe10\111\ufe10\116\ufe10\001" +
    "\002\000\012\040\ufe0c\076\ufe0c\111\ufe0c\116\ufe0c\001\002" +
    "\000\020\332\044\335\012\u016b\u0227\u016c\u021f\u016d\u0224\u016e" +
    "\u0222\u016f\u0225\001\002\000\010\076\ufe16\111\ufe16\116\ufe16" +
    "\001\002\000\010\076\ufe0f\111\ufe0f\116\ufe0f\001\002\000" +
    "\004\244\u0230\001\002\000\004\u0119\u0231\001\002\000\012" +
    "\040\ufe12\076\ufe12\111\ufe12\116\ufe12\001\002\000\014\012" +
    "\057\050\062\u0170\u0233\u0171\u0237\u0172\u0235\001\002\000\014" +
    "\040\ufe51\074\ufe51\076\ufe51\111\ufe51\116\ufe51\001\002\000" +
    "\014\040\ufe4e\074\ufe4e\076\ufe4e\111\ufe4e\116\ufe4e\001\002" +
    "\000\014\040\ufe4f\074\ufe4f\076\ufe4f\111\ufe4f\116\ufe4f\001" +
    "\002\000\012\040\ufe0b\076\ufe0b\111\ufe0b\116\ufe0b\001\002" +
    "\000\014\040\ufe50\074\ufe50\076\ufe50\111\ufe50\116\ufe50\001" +
    "\002\000\004\u015f\u0239\001\002\000\004\244\u023a\001\002" +
    "\000\004\u0119\u023b\001\002\000\012\040\ufe13\076\ufe13\111" +
    "\ufe13\116\ufe13\001\002\000\006\076\u0213\116\ufe25\001\002" +
    "\000\004\116\u023e\001\002\000\006\052\u023f\157\021\001" +
    "\002\000\004\157\021\001\002\000\010\037\ufe1f\u0103\ufe1f" +
    "\u0188\ufe1f\001\002\000\010\037\ufe1d\u0103\ufe1d\u0188\ufe1d\001" +
    "\002\000\004\055\u0243\001\002\000\010\037\ufe1e\u0103\ufe1e" +
    "\u0188\ufe1e\001\002\000\004\055\ufe29\001\002\000\004\042" +
    "\060\001\002\000\004\055\ufe28\001\002\000\042\240\u0162" +
    "\303\u0171\364\u0167\376\u016e\u0104\u0168\u0111\u0160\u011a\u0169\u011d" +
    "\u015e\u0120\u016b\u0133\u016a\u013f\u0161\u0149\u015f\u014c\u0163\u0159\u016d" +
    "\u015a\u0165\u0189\u0170\001\002\000\010\040\ufe23\055\ufe23\u016a" +
    "\u024a\001\002\000\006\040\ufe2a\055\ufe2a\001\002\000\006" +
    "\040\ufe24\055\ufe24\001\002\000\014\037\u024c\042\ufe6a\074" +
    "\ufe6a\076\ufe6a\334\ufe6a\001\002\000\004\016\u0282\001\002" +
    "\000\012\042\060\074\ufe68\076\ufe68\334\ufe68\001\002\000" +
    "\010\074\ufe5a\076\ufe5a\334\u0263\001\002\000\046\012\057" +
    "\050\u0253\240\u0251\303\u0171\364\u0167\376\u016e\u0104\u0168\u0111" +
    "\u0160\u011a\u0169\u011d\u015e\u0120\u016b\u0133\u016a\u013f\u0161\u0149\u015f" +
    "\u014c\u0163\u0159\u016d\u015a\u0165\u0189\u0170\001\002\000\010\074" +
    "\ufe69\076\ufe69\334\ufe69\001\002\000\024\005\uffd0\040\uffd0" +
    "\052\uffd0\074\uffd0\076\uffd0\334\uffd0\u015d\u0261\u0166\uffd0\u0169" +
    "\uffd0\001\002\000\004\u016a\u0260\001\002\000\044\012\063" +
    "\240\u0162\303\u0171\364\u0167\376\u016e\u0104\u0168\u0111\u0160\u011a" +
    "\u0169\u011d\u015e\u0120\u016b\u0133\u016a\u013f\u0161\u0149\u015f\u014c\u0163" +
    "\u0159\u016d\u015a\u0165\u0189\u0170\001\002\000\020\005\u025a\040" +
    "\ufe60\074\ufe60\076\ufe60\334\ufe60\u0166\ufe60\u0169\ufe60\001\002" +
    "\000\012\040\u0257\074\ufe65\076\ufe65\334\ufe65\001\002\000" +
    "\010\074\ufe67\076\ufe67\334\ufe67\001\002\000\004\042\060" +
    "\001\002\000\010\074\ufe66\076\ufe66\334\ufe66\001\002\000" +
    "\016\040\ufe5e\074\ufe5e\076\ufe5e\334\ufe5e\u0166\u025e\u0169\u025d" +
    "\001\002\000\004\257\u025b\001\002\000\016\040\ufe61\074" +
    "\ufe61\076\ufe61\334\ufe61\u0166\ufe61\u0169\ufe61\001\002\000\012" +
    "\040\ufe64\074\ufe64\076\ufe64\334\ufe64\001\002\000\012\040" +
    "\ufe5d\074\ufe5d\076\ufe5d\334\ufe5d\001\002\000\012\040\ufe5c" +
    "\074\ufe5c\076\ufe5c\334\ufe5c\001\002\000\012\040\ufe5f\074" +
    "\ufe5f\076\ufe5f\334\ufe5f\001\002\000\012\040\ufe62\074\ufe62" +
    "\076\ufe62\334\ufe62\001\002\000\006\u0166\u025e\u0169\u025d\001" +
    "\002\000\012\040\ufe63\074\ufe63\076\ufe63\334\ufe63\001\002" +
    "\000\012\332\044\335\012\u016b\u027a\u0173\u027c\001\002\000" +
    "\006\074\u0266\076\ufe4c\001\002\000\004\076\u0268\001\002" +
    "\000\004\105\u0267\001\002\000\004\076\ufe4d\001\002\000" +
    "\004\111\u026a\001\002\000\010\037\ufe6e\u0103\ufe6e\u0188\ufe6e" +
    "\001\002\000\012\157\021\164\034\262\014\274\013\001" +
    "\002\000\010\037\u026f\u0103\u0270\u0188\u0271\001\002\000\004" +
    "\316\u026d\001\002\000\010\037\ufe4b\u0103\ufe4b\u0188\ufe4b\001" +
    "\002\000\014\157\021\164\034\262\014\274\013\316\ufe48" +
    "\001\002\000\046\002\uffeb\003\uffeb\066\uffeb\111\uffeb\132" +
    "\uffeb\146\uffeb\157\uffeb\164\uffeb\166\uffeb\213\uffeb\253\uffeb" +
    "\254\uffeb\262\uffeb\274\uffeb\306\uffeb\316\uffeb\332\uffeb\335" +
    "\uffeb\001\002\000\046\002\uffea\003\uffea\066\uffea\111\uffea" +
    "\132\uffea\146\uffea\157\uffea\164\uffea\166\uffea\213\uffea\253" +
    "\uffea\254\uffea\262\uffea\274\uffea\306\uffea\316\uffea\332\uffea" +
    "\335\uffea\001\002\000\046\002\uffe9\003\uffe9\066\uffe9\111" +
    "\uffe9\132\uffe9\146\uffe9\157\uffe9\164\uffe9\166\uffe9\213\uffe9" +
    "\253\uffe9\254\uffe9\262\uffe9\274\uffe9\306\uffe9\316\uffe9\332" +
    "\uffe9\335\uffe9\001\002\000\010\037\u026f\u0103\u0270\u0188\u0271" +
    "\001\002\000\004\316\ufe4a\001\002\000\014\157\021\164" +
    "\034\262\014\274\013\316\ufe46\001\002\000\010\037\u026f" +
    "\u0103\u0270\u0188\u0271\001\002\000\004\316\ufe49\001\002\000" +
    "\004\316\ufe47\001\002\000\010\040\u0280\074\ufe52\076\ufe52" +
    "\001\002\000\006\074\ufe5b\076\ufe5b\001\002\000\010\040" +
    "\ufe58\074\ufe58\076\ufe58\001\002\000\004\076\u027d\001\002" +
    "\000\010\040\ufe57\074\ufe57\076\ufe57\001\002\000\014\012" +
    "\057\050\062\u0170\u0233\u0171\u0237\u0172\u0235\001\002\000\010" +
    "\040\ufe56\074\ufe56\076\ufe56\001\002\000\006\074\ufe59\076" +
    "\ufe59\001\002\000\012\332\044\335\012\u016b\u027a\u0173\u027c" +
    "\001\002\000\006\074\ufe53\076\ufe53\001\002\000\012\042" +
    "\ufe6b\074\ufe6b\076\ufe6b\334\ufe6b\001\002\000\010\012\uff57" +
    "\050\uff57\172\u028b\001\002\000\004\052\u0285\001\002\000" +
    "\004\016\u0286\001\002\000\004\055\u0287\001\002\000\050" +
    "\010\uff8b\012\uff8b\016\uff8b\017\uff8b\020\uff8b\022\uff8b\042" +
    "\uff8b\050\uff8b\052\uff8b\107\uff8b\172\uff8b\244\uff8b\273\uff8b" +
    "\322\u0289\377\uff8b\u012c\uff8b\u0131\uff8b\u013c\uff8b\u013d\uff8b\001" +
    "\002\000\046\010\uff8e\012\uff8e\016\uff8e\017\uff8e\020\uff8e" +
    "\022\uff8e\042\uff8e\050\uff8e\052\uff8e\107\uff8e\172\uff8e\244" +
    "\uff8e\273\uff8e\377\uff8e\u012c\uff8e\u0131\uff8e\u013c\uff8e\u013d\uff8e" +
    "\001\002\000\046\010\uff8c\012\uff8c\016\uff8c\017\uff8c\020" +
    "\uff8c\022\uff8c\042\uff8c\050\uff8c\052\uff8c\107\uff8c\172\uff8c" +
    "\244\uff8c\273\uff8c\377\uff8c\u012c\uff8c\u0131\uff8c\u013c\uff8c\u013d" +
    "\uff8c\001\002\000\006\012\057\050\062\001\002\000\006" +
    "\012\uff58\050\uff58\001\002\000\010\052\u0100\257\uff55\307" +
    "\uff55\001\002\000\006\257\uff56\307\uff56\001\002\000\006" +
    "\257\u028f\307\u0290\001\002\000\004\307\u02a5\001\002\000" +
    "\004\052\u0292\001\002\000\012\037\uff59\116\uff59\u0103\uff59" +
    "\u0188\uff59\001\002\000\014\016\u0299\017\u0297\020\u0294\022" +
    "\u0295\257\u0293\001\002\000\006\040\uff53\055\uff53\001\002" +
    "\000\006\040\uff50\055\uff50\001\002\000\006\040\uff51\055" +
    "\uff51\001\002\000\004\055\u029e\001\002\000\006\040\uff4f" +
    "\055\uff4f\001\002\000\006\040\u029a\055\uff4d\001\002\000" +
    "\006\040\uff52\055\uff52\001\002\000\014\016\u0299\017\u0297" +
    "\020\u0294\022\u0295\257\u0293\001\002\000\004\055\uff54\001" +
    "\002\000\006\040\u029a\055\uff4d\001\002\000\004\055\uff4e" +
    "\001\002\000\014\037\uff49\040\u02a0\116\uff49\u0103\uff49\u0188" +
    "\uff49\001\002\000\012\037\uff4c\116\uff4c\u0103\uff4c\u0188\uff4c" +
    "\001\002\000\004\052\u02a1\001\002\000\014\016\u0299\017" +
    "\u0297\020\u0294\022\u0295\257\u0293\001\002\000\004\055\u02a3" +
    "\001\002\000\014\037\uff49\040\u02a0\116\uff49\u0103\uff49\u0188" +
    "\uff49\001\002\000\012\037\uff4a\116\uff4a\u0103\uff4a\u0188\uff4a" +
    "\001\002\000\012\037\uff4b\116\uff4b\u0103\uff4b\u0188\uff4b\001" +
    "\002\000\010\012\057\042\060\050\062\001\002\000\010" +
    "\037\ufe7c\u0103\ufe7c\u0188\ufe7c\001\002\000\012\037\ufe7b\334" +
    "\ufe7b\u0103\ufe7b\u0188\ufe7b\001\002\000\012\037\ufe7a\334\ufe7a" +
    "\u0103\ufe7a\u0188\ufe7a\001\002\000\004\240\u02ab\001\002\000" +
    "\034\074\ufe42\u0101\u02ac\u010a\ufe42\u0137\u02ad\u0175\ufe42\u0176\ufe42" +
    "\u0177\ufe42\u0178\ufe42\u0179\ufe42\u017a\ufe42\u017b\ufe42\u017c\ufe42\u017d" +
    "\ufe42\001\002\000\030\074\ufe43\u010a\ufe43\u0175\ufe43\u0176\ufe43" +
    "\u0177\ufe43\u0178\ufe43\u0179\ufe43\u017a\ufe43\u017b\ufe43\u017c\ufe43\u017d" +
    "\ufe43\001\002\000\030\074\ufe44\u010a\ufe44\u0175\ufe44\u0176\ufe44" +
    "\u0177\ufe44\u0178\ufe44\u0179\ufe44\u017a\ufe44\u017b\ufe44\u017c\ufe44\u017d" +
    "\ufe44\001\002\000\030\074\ufe3f\u010a\u02b1\u0175\u02af\u0176\ufe3f" +
    "\u0177\ufe3f\u0178\ufe3f\u0179\ufe3f\u017a\ufe3f\u017b\ufe3f\u017c\ufe3f\u017d" +
    "\ufe3f\001\002\000\024\074\ufe40\u0176\ufe40\u0177\ufe40\u0178\ufe40" +
    "\u0179\ufe40\u017a\ufe40\u017b\ufe40\u017c\ufe40\u017d\ufe40\001\002\000" +
    "\024\074\ufe3a\u0176\u02b2\u0177\u02b3\u0178\u02b5\u0179\u02b4\u017a\ufe3a" +
    "\u017b\ufe3a\u017c\ufe3a\u017d\ufe3a\001\002\000\024\074\ufe41\u0176" +
    "\ufe41\u0177\ufe41\u0178\ufe41\u0179\ufe41\u017a\ufe41\u017b\ufe41\u017c\ufe41" +
    "\u017d\ufe41\001\002\000\014\074\ufe3e\u017a\ufe3e\u017b\ufe3e\u017c" +
    "\ufe3e\u017d\ufe3e\001\002\000\014\074\ufe3d\u017a\ufe3d\u017b\ufe3d" +
    "\u017c\ufe3d\u017d\ufe3d\001\002\000\014\074\ufe3b\u017a\ufe3b\u017b" +
    "\ufe3b\u017c\ufe3b\u017d\ufe3b\001\002\000\014\074\ufe3c\u017a\ufe3c" +
    "\u017b\ufe3c\u017c\ufe3c\u017d\ufe3c\001\002\000\014\074\ufe36\u017a" +
    "\u02ba\u017b\u02b8\u017c\u02b9\u017d\ufe36\001\002\000\006\074\ufe34" +
    "\u017d\u02bc\001\002\000\006\074\ufe38\u017d\ufe38\001\002\000" +
    "\006\074\ufe37\u017d\ufe37\001\002\000\006\074\ufe39\u017d\ufe39" +
    "\001\002\000\004\074\u02bd\001\002\000\004\074\ufe35\001" +
    "\002\000\004\157\021\001\002\000\012\037\ufe32\074\u02c0" +
    "\u0103\ufe32\u0188\ufe32\001\002\000\010\037\ufe45\u0103\ufe45\u0188" +
    "\ufe45\001\002\000\004\274\u02c1\001\002\000\012\037\ufe30" +
    "\252\u02c3\u0103\ufe30\u0188\ufe30\001\002\000\010\037\ufe33\u0103" +
    "\ufe33\u0188\ufe33\001\002\000\006\012\057\050\062\001\002" +
    "\000\010\037\ufe31\u0103\ufe31\u0188\ufe31\001\002\000\044\002" +
    "\ufffe\003\023\066\015\111\020\132\047\146\033\157\021" +
    "\164\034\166\045\213\035\253\007\254\026\262\014\274" +
    "\013\306\037\332\044\335\012\001\002\000\004\002\uffff" +
    "\001\002\000\042\010\uff6a\012\uff6a\016\uff6a\017\uff6a\020" +
    "\uff6a\022\uff6a\042\uff6a\050\uff6a\052\uff6a\237\uff6a\244\uff6a" +
    "\377\uff6a\u012c\uff6a\u0131\uff6a\u013c\uff6a\u013d\uff6a\001\002\000" +
    "\042\010\uff6b\012\uff6b\016\uff6b\017\uff6b\020\uff6b\022\uff6b" +
    "\042\uff6b\050\uff6b\052\uff6b\237\uff6b\244\uff6b\377\uff6b\u012c" +
    "\uff6b\u0131\uff6b\u013c\uff6b\u013d\uff6b\001\002\000\042\010\uff8d" +
    "\012\uff8d\016\uff8d\017\uff8d\020\uff8d\022\uff8d\042\uff8d\050" +
    "\uff8d\052\uff8d\237\u0284\244\uff8d\377\uff8d\u012c\uff8d\u0131\uff8d" +
    "\u013c\uff8d\u013d\uff8d\001\002\000\040\010\u02cd\012\057\016" +
    "\251\017\260\020\265\022\245\042\060\050\062\052\262" +
    "\244\263\377\255\u012c\244\u0131\264\u013c\261\u013d\257\001" +
    "\002\000\042\012\057\020\u02d4\037\uffac\040\uffac\050\062" +
    "\055\uffac\074\uffac\076\u02d3\107\uffac\116\uffac\126\uffac\131" +
    "\uffac\311\uffac\326\uffac\u0103\uffac\u0188\uffac\001\002\000\030" +
    "\037\uff36\055\uff36\074\uff36\107\u02d9\116\uff36\126\uff36\131" +
    "\uff36\311\uff36\326\uff36\u0103\uff36\u0188\uff36\001\002\000\032" +
    "\037\uff71\040\u02ce\055\uff71\074\uff71\107\uff71\116\uff71\126" +
    "\uff71\131\uff71\311\uff71\326\uff71\u0103\uff71\u0188\uff71\001\002" +
    "\000\036\012\057\016\251\017\260\020\265\022\245\042" +
    "\060\050\062\052\262\244\263\377\255\u012c\244\u0131\264" +
    "\u013c\261\u013d\257\001\002\000\030\037\uff73\055\uff73\074" +
    "\uff73\107\uff73\116\uff73\126\uff73\131\uff73\311\uff73\326\uff73" +
    "\u0103\uff73\u0188\uff73\001\002\000\042\012\057\020\u02d4\037" +
    "\uffac\040\uffac\050\062\055\uffac\074\uffac\076\u02d3\107\uffac" +
    "\116\uffac\126\uffac\131\uffac\311\uffac\326\uffac\u0103\uffac\u0188" +
    "\uffac\001\002\000\046\037\uffab\040\uffab\055\uffab\074\uffab" +
    "\107\uffab\112\uffab\116\uffab\126\uffab\127\uffab\131\uffab\161" +
    "\uffab\200\uffab\211\uffab\311\uffab\326\uffab\u0103\uffab\u015f\uffab" +
    "\u0188\uffab\001\002\000\046\037\uffad\040\uffad\055\uffad\074" +
    "\uffad\107\uffad\112\uffad\116\uffad\126\uffad\127\uffad\131\uffad" +
    "\161\uffad\200\uffad\211\uffad\311\uffad\326\uffad\u0103\uffad\u015f" +
    "\uffad\u0188\uffad\001\002\000\010\012\057\020\u02d4\050\062" +
    "\001\002\000\046\037\uffaa\040\uffaa\055\uffaa\074\uffaa\107" +
    "\uffaa\112\uffaa\116\uffaa\126\uffaa\127\uffaa\131\uffaa\161\uffaa" +
    "\200\uffaa\211\uffaa\311\uffaa\326\uffaa\u0103\uffaa\u015f\uffaa\u0188" +
    "\uffaa\001\002\000\032\037\uff71\040\u02ce\055\uff71\074\uff71" +
    "\107\uff71\116\uff71\126\uff71\131\uff71\311\uff71\326\uff71\u0103" +
    "\uff71\u0188\uff71\001\002\000\030\037\uff72\055\uff72\074\uff72" +
    "\107\uff72\116\uff72\126\uff72\131\uff72\311\uff72\326\uff72\u0103" +
    "\uff72\u0188\uff72\001\002\000\046\037\uffae\040\uffae\055\uffae" +
    "\074\uffae\107\uffae\112\uffae\116\uffae\126\uffae\127\uffae\131" +
    "\uffae\161\uffae\200\uffae\211\uffae\311\uffae\326\uffae\u0103\uffae" +
    "\u015f\uffae\u0188\uffae\001\002\000\026\037\uff75\055\uff75\074" +
    "\uff75\116\uff75\126\uff75\131\uff75\311\uff75\326\230\u0103\uff75" +
    "\u0188\uff75\001\002\000\006\012\057\050\062\001\002\000" +
    "\052\012\057\020\u02d4\037\uffac\040\uffac\050\062\055\uffac" +
    "\074\uffac\076\u02d3\112\uffac\116\uffac\126\uffac\127\uffac\131" +
    "\uffac\161\uffac\200\uffac\211\uffac\311\uffac\326\uffac\u0103\uffac" +
    "\u0188\uffac\001\002\000\042\037\uff32\040\uff32\055\uff32\074" +
    "\uff32\112\u02e1\116\uff32\126\uff32\127\u02df\131\uff32\161\u02dd" +
    "\200\uff2d\211\u02dc\311\uff32\326\uff32\u0103\uff32\u0188\uff32\001" +
    "\002\000\006\200\uff2b\314\u02e2\001\002\000\004\200\uff31" +
    "\001\002\000\004\200\u02ea\001\002\000\006\200\uff2b\314" +
    "\u02e2\001\002\000\030\037\uff34\040\u02e4\055\uff34\074\uff34" +
    "\116\uff34\126\uff34\131\uff34\311\uff34\326\uff34\u0103\uff34\u0188" +
    "\uff34\001\002\000\006\200\uff2b\314\u02e2\001\002\000\004" +
    "\200\uff2c\001\002\000\004\200\uff2e\001\002\000\006\012" +
    "\057\050\062\001\002\000\026\037\uff37\055\uff37\074\uff37" +
    "\116\uff37\126\uff37\131\uff37\311\uff37\326\uff37\u0103\uff37\u0188" +
    "\uff37\001\002\000\050\012\057\020\u02d4\037\uffac\050\062" +
    "\055\uffac\074\uffac\076\u02d3\112\uffac\116\uffac\126\uffac\127" +
    "\uffac\131\uffac\161\uffac\200\uffac\211\uffac\311\uffac\326\uffac" +
    "\u0103\uffac\u0188\uffac\001\002\000\040\037\uff32\055\uff32\074" +
    "\uff32\112\u02e1\116\uff32\126\uff32\127\u02df\131\uff32\161\u02dd" +
    "\200\uff2d\211\u02dc\311\uff32\326\uff32\u0103\uff32\u0188\uff32\001" +
    "\002\000\026\037\uff35\055\uff35\074\uff35\116\uff35\126\uff35" +
    "\131\uff35\311\uff35\326\uff35\u0103\uff35\u0188\uff35\001\002\000" +
    "\004\200\uff30\001\002\000\006\012\057\050\062\001\002" +
    "\000\014\012\057\020\u02d4\050\062\076\u02d3\u015f\uffac\001" +
    "\002\000\004\u015f\u02ed\001\002\000\040\012\uff8f\016\uff8f" +
    "\017\uff8f\020\uff8f\022\uff8f\042\uff8f\050\uff8f\052\240\241" +
    "\243\244\uff8f\377\uff8f\u012c\uff8f\u0131\uff8f\u013c\uff8f\u013d\uff8f" +
    "\001\002\000\042\037\uff32\040\uff32\055\uff32\074\uff32\112" +
    "\u02e1\116\uff32\126\uff32\127\u02df\131\uff32\161\u02dd\200\uff2d" +
    "\211\u02dc\311\uff32\326\uff32\u0103\uff32\u0188\uff32\001\002\000" +
    "\030\037\uff33\040\uff33\055\uff33\074\uff33\116\uff33\126\uff33" +
    "\131\uff33\311\uff33\326\uff33\u0103\uff33\u0188\uff33\001\002\000" +
    "\004\200\uff2f\001\002\000\024\037\uff5c\055\uff5c\074\uff5c" +
    "\116\uff5c\126\u02f3\131\uff5c\311\uff5c\u0103\uff5c\u0188\uff5c\001" +
    "\002\000\022\037\uff67\055\uff67\074\uff67\116\uff67\131\u02fa" +
    "\311\uff67\u0103\uff67\u0188\uff67\001\002\000\004\130\u02f4\001" +
    "\002\000\036\012\057\016\251\017\260\020\265\022\245" +
    "\042\060\050\062\052\262\244\263\377\255\u012c\244\u0131" +
    "\264\u013c\261\u013d\257\001\002\000\024\037\uff5a\040\u02f6" +
    "\055\uff5a\074\uff5a\116\uff5a\131\uff5a\311\uff5a\u0103\uff5a\u0188" +
    "\uff5a\001\002\000\036\012\057\016\251\017\260\020\265" +
    "\022\245\042\060\050\062\052\262\244\263\377\255\u012c" +
    "\244\u0131\264\u013c\261\u013d\257\001\002\000\022\037\uff5d" +
    "\055\uff5d\074\uff5d\116\uff5d\131\uff5d\311\uff5d\u0103\uff5d\u0188" +
    "\uff5d\001\002\000\024\037\uff5a\040\u02f6\055\uff5a\074\uff5a" +
    "\116\uff5a\131\uff5a\311\uff5a\u0103\uff5a\u0188\uff5a\001\002\000" +
    "\022\037\uff5b\055\uff5b\074\uff5b\116\uff5b\131\uff5b\311\uff5b" +
    "\u0103\uff5b\u0188\uff5b\001\002\000\040\012\uff8f\016\uff8f\017" +
    "\uff8f\020\uff8f\022\uff8f\042\uff8f\050\uff8f\052\240\241\243" +
    "\244\uff8f\377\uff8f\u012c\uff8f\u0131\uff8f\u013c\uff8f\u013d\uff8f\001" +
    "\002\000\020\037\uff65\055\uff65\074\uff65\116\uff65\311\u02fc" +
    "\u0103\uff65\u0188\uff65\001\002\000\004\130\u02fe\001\002\000" +
    "\016\037\uff6c\055\uff6c\074\uff6c\116\uff6c\u0103\uff6c\u0188\uff6c" +
    "\001\002\000\036\012\057\016\251\017\260\020\265\022" +
    "\245\042\060\050\062\052\262\244\263\377\255\u012c\244" +
    "\u0131\264\u013c\261\u013d\257\001\002\000\060\012\uff63\016" +
    "\uff63\017\uff63\020\uff63\022\uff63\037\uff63\042\uff63\050\uff63" +
    "\052\uff63\055\uff63\074\uff63\116\uff63\160\u0300\244\uff63\267" +
    "\uff63\370\uff63\377\uff63\u0103\uff63\u012c\uff63\u0131\uff63\u013c\uff63" +
    "\u013d\uff63\u0188\uff63\001\002\000\006\012\057\050\062\001" +
    "\002\000\056\012\uff60\016\uff60\017\uff60\020\uff60\022\uff60" +
    "\037\uff60\042\uff60\050\uff60\052\uff60\055\uff60\074\uff60\116" +
    "\uff60\244\uff60\267\u010b\370\u010c\377\uff60\u0103\uff60\u012c\uff60" +
    "\u0131\uff60\u013c\uff60\u013d\uff60\u0188\uff60\001\002\000\052\012" +
    "\057\016\251\017\260\020\265\022\245\037\uff5e\042\060" +
    "\050\062\052\262\055\uff5e\074\uff5e\116\uff5e\244\263\377" +
    "\255\u0103\uff5e\u012c\244\u0131\264\u013c\261\u013d\257\u0188\uff5e" +
    "\001\002\000\016\037\uff66\055\uff66\074\uff66\116\uff66\u0103" +
    "\uff66\u0188\uff66\001\002\000\024\037\uff63\055\uff63\074\uff63" +
    "\116\uff63\160\u0300\267\uff63\370\uff63\u0103\uff63\u0188\uff63\001" +
    "\002\000\022\037\uff60\055\uff60\074\uff60\116\uff60\267\u010b" +
    "\370\u010c\u0103\uff60\u0188\uff60\001\002\000\016\037\uff5f\055" +
    "\uff5f\074\uff5f\116\uff5f\u0103\uff5f\u0188\uff5f\001\002\000\056" +
    "\012\uff64\016\uff64\017\uff64\020\uff64\022\uff64\037\uff64\042" +
    "\uff64\050\uff64\052\uff64\055\uff64\074\uff64\116\uff64\244\uff64" +
    "\267\uff64\370\uff64\377\uff64\u0103\uff64\u012c\uff64\u0131\uff64\u013c" +
    "\uff64\u013d\uff64\u0188\uff64\001\002\000\020\037\uff68\055\uff68" +
    "\074\uff68\116\uff68\311\uff68\u0103\uff68\u0188\uff68\001\002\000" +
    "\032\037\uff71\040\u02ce\055\uff71\074\uff71\107\uff71\116\uff71" +
    "\126\uff71\131\uff71\311\uff71\326\uff71\u0103\uff71\u0188\uff71\001" +
    "\002\000\030\037\uff74\055\uff74\074\uff74\107\uff74\116\uff74" +
    "\126\uff74\131\uff74\311\uff74\326\uff74\u0103\uff74\u0188\uff74\001" +
    "\002\000\016\012\057\037\ufe81\042\060\050\062\u0103\ufe81" +
    "\u0188\ufe81\001\002\000\012\037\ufe7f\334\u030e\u0103\ufe7f\u0188" +
    "\ufe7f\001\002\000\010\037\ufe83\u0103\ufe83\u0188\ufe83\001\002" +
    "\000\004\u0174\u0310\001\002\000\010\037\ufe82\u0103\ufe82\u0188" +
    "\ufe82\001\002\000\012\020\u0311\037\ufe7d\u0103\ufe7d\u0188\ufe7d" +
    "\001\002\000\010\037\ufe7e\u0103\ufe7e\u0188\ufe7e\001\002\000" +
    "\010\037\ufe80\u0103\ufe80\u0188\ufe80\001\002\000\010\037\ufea5" +
    "\u0103\ufea5\u0188\ufea5\001\002\000\010\037\ufea0\u0103\ufea0\u0188" +
    "\ufea0\001\002\000\010\012\057\050\062\221\u0349\001\002" +
    "\000\010\037\ufea1\u0103\ufea1\u0188\ufea1\001\002\000\006\012" +
    "\057\050\062\001\002\000\010\037\ufea4\u0103\ufea4\u0188\ufea4" +
    "\001\002\000\010\037\ufea3\u0103\ufea3\u0188\ufea3\001\002\000" +
    "\010\037\ufea6\u0103\ufea6\u0188\ufea6\001\002\000\006\012\057" +
    "\050\062\001\002\000\006\012\057\050\062\001\002\000" +
    "\010\037\ufea2\u0103\ufea2\u0188\ufea2\001\002\000\006\052\u0100" +
    "\076\ufe97\001\002\000\004\076\ufe98\001\002\000\004\076" +
    "\u0321\001\002\000\004\157\021\001\002\000\010\037\ufe99" +
    "\u0103\ufe99\u0188\ufe99\001\002\000\010\060\u0326\066\u0325\306" +
    "\u0329\001\002\000\010\037\ufe96\u0103\ufe96\u0188\ufe96\001\002" +
    "\000\004\163\u0338\001\002\000\022\012\057\050\062\077" +
    "\ufec6\141\ufec6\156\u0119\174\u011d\266\ufec6\336\ufec6\001\002" +
    "\000\010\037\ufe93\u0103\ufe93\u0188\ufe93\001\002\000\010\037" +
    "\ufe95\u0103\ufe95\u0188\ufe95\001\002\000\014\012\ufe86\050\ufe86" +
    "\150\ufe86\163\u032b\174\u032c\001\002\000\012\037\ufe84\040" +
    "\u0332\u0103\ufe84\u0188\ufe84\001\002\000\010\012\uffdc\050\uffdc" +
    "\150\132\001\002\000\010\012\ufe87\050\ufe87\150\ufe87\001" +
    "\002\000\010\012\uffdc\050\uffdc\150\132\001\002\000\006" +
    "\012\057\050\062\001\002\000\012\037\ufe89\040\ufe89\u0103" +
    "\ufe89\u0188\ufe89\001\002\000\006\012\057\050\062\001\002" +
    "\000\012\037\ufe88\040\ufe88\u0103\ufe88\u0188\ufe88\001\002\000" +
    "\014\012\ufe86\050\ufe86\150\ufe86\163\u032b\174\u032c\001\002" +
    "\000\010\037\ufe8a\u0103\ufe8a\u0188\ufe8a\001\002\000\012\037" +
    "\ufe84\040\u0332\u0103\ufe84\u0188\ufe84\001\002\000\010\037\ufe85" +
    "\u0103\ufe85\u0188\ufe85\001\002\000\012\037\ufee9\040\u01c1\u0103" +
    "\ufee9\u0188\ufee9\001\002\000\010\037\ufe94\u0103\ufe94\u0188\ufe94" +
    "\001\002\000\006\012\057\050\062\001\002\000\050\050" +
    "\u0164\060\u033b\240\u0162\303\u0171\306\u033c\364\u0167\376\u016e" +
    "\u0104\u0168\u0111\u0160\u011a\u0169\u011d\u015e\u0120\u016b\u0133\u016a\u013f" +
    "\u0161\u0149\u015f\u014c\u0163\u0159\u016d\u015a\u0165\u0189\u0170\001\002" +
    "\000\014\037\ufed7\160\u0179\244\ufed7\u0103\ufed7\u0188\ufed7\001" +
    "\002\000\006\140\ufe8e\241\ufe8e\001\002\000\006\140\ufe8d" +
    "\241\ufe8d\001\002\000\006\140\u0340\241\u0341\001\002\000" +
    "\010\037\ufe92\u0103\ufe92\u0188\ufe92\001\002\000\010\037\ufe91" +
    "\u0103\ufe91\u0188\ufe91\001\002\000\010\037\ufe8c\u0103\ufe8c\u0188" +
    "\ufe8c\001\002\000\004\074\u0343\001\002\000\010\037\ufe90" +
    "\u0103\ufe90\u0188\ufe90\001\002\000\004\105\u0344\001\002\000" +
    "\010\037\ufe8b\u0103\ufe8b\u0188\ufe8b\001\002\000\012\037\ufecc" +
    "\244\u0146\u0103\ufecc\u0188\ufecc\001\002\000\010\037\ufe8f\u0103" +
    "\ufe8f\u0188\ufe8f\001\002\000\010\037\ufe9a\u0103\ufe9a\u0188\ufe9a" +
    "\001\002\000\006\160\ufe9e\176\ufe9e\001\002\000\006\160" +
    "\ufe9d\176\ufe9d\001\002\000\006\160\u034b\176\u034d\001\002" +
    "\000\006\012\057\050\062\001\002\000\010\037\ufe9f\u0103" +
    "\ufe9f\u0188\ufe9f\001\002\000\004\132\u034e\001\002\000\004" +
    "\u010b\u034f\001\002\000\010\037\ufe9b\u0103\ufe9b\u0188\ufe9b\001" +
    "\002\000\010\037\ufe9c\u0103\ufe9c\u0188\ufe9c\001\002\000\012" +
    "\012\uff46\050\uff46\107\u0352\273\uff46\001\002\000\010\012" +
    "\uff47\050\uff47\273\uff47\001\002\000\010\012\057\050\062" +
    "\273\u0356\001\002\000\012\037\uff48\116\uff48\u0103\uff48\u0188" +
    "\uff48\001\002\000\004\107\u035d\001\002\000\004\052\u0357" +
    "\001\002\000\006\012\057\050\062\001\002\000\012\037" +
    "\uff45\116\uff45\u0103\uff45\u0188\uff45\001\002\000\004\040\u035a" +
    "\001\002\000\004\016\u035b\001\002\000\004\055\u035c\001" +
    "\002\000\012\037\uff40\116\uff40\u0103\uff40\u0188\uff40\001\002" +
    "\000\006\012\057\050\062\001\002\000\014\037\uff75\116" +
    "\uff75\326\230\u0103\uff75\u0188\uff75\001\002\000\012\037\uff44" +
    "\116\uff44\u0103\uff44\u0188\uff44\001\002\000\016\037\uff41\040" +
    "\u0361\116\uff41\326\uff41\u0103\uff41\u0188\uff41\001\002\000\006" +
    "\012\057\050\062\001\002\000\014\037\uff43\116\uff43\326" +
    "\uff43\u0103\uff43\u0188\uff43\001\002\000\016\037\uff41\040\u0361" +
    "\116\uff41\326\uff41\u0103\uff41\u0188\uff41\001\002\000\014\037" +
    "\uff42\116\uff42\326\uff42\u0103\uff42\u0188\uff42\001\002\000\006" +
    "\012\057\050\062\001\002\000\004\176\u0367\001\002\000" +
    "\006\012\057\050\062\001\002\000\004\005\u036f\001\002" +
    "\000\016\037\uff38\107\u036b\116\uff38\326\uff38\u0103\uff38\u0188" +
    "\uff38\001\002\000\014\037\uff75\116\uff75\326\230\u0103\uff75" +
    "\u0188\uff75\001\002\000\006\012\057\050\062\001\002\000" +
    "\016\037\uff41\040\u0361\116\uff41\326\uff41\u0103\uff41\u0188\uff41" +
    "\001\002\000\014\037\uff39\116\uff39\326\uff39\u0103\uff39\u0188" +
    "\uff39\001\002\000\012\037\uff3f\116\uff3f\u0103\uff3f\u0188\uff3f" +
    "\001\002\000\040\012\057\016\251\017\260\020\265\022" +
    "\245\042\060\050\062\052\262\244\263\257\u0372\377\255" +
    "\u012c\244\u0131\264\u013c\261\u013d\257\001\002\000\020\037" +
    "\uff3a\040\u0373\107\uff3a\116\uff3a\326\uff3a\u0103\uff3a\u0188\uff3a" +
    "\001\002\000\020\037\uff3c\040\uff3c\107\uff3c\116\uff3c\326" +
    "\uff3c\u0103\uff3c\u0188\uff3c\001\002\000\020\037\uff3d\040\uff3d" +
    "\107\uff3d\116\uff3d\326\uff3d\u0103\uff3d\u0188\uff3d\001\002\000" +
    "\006\012\057\050\062\001\002\000\016\037\uff3e\107\uff3e" +
    "\116\uff3e\326\uff3e\u0103\uff3e\u0188\uff3e\001\002\000\016\037" +
    "\uff3b\107\uff3b\116\uff3b\326\uff3b\u0103\uff3b\u0188\uff3b\001\002" +
    "\000\006\012\057\050\062\001\002\000\010\037\uffaf\u0103" +
    "\uffaf\u0188\uffaf\001\002\000\044\002\ufffe\003\023\066\015" +
    "\111\020\132\047\146\033\157\021\164\034\166\045\213" +
    "\035\253\007\254\026\262\014\274\013\306\037\332\044" +
    "\335\012\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0377\000\054\003\041\004\003\005\010\006\005\007" +
    "\023\010\026\030\015\044\024\075\016\106\030\116\007" +
    "\124\004\136\031\227\047\253\040\257\035\263\037\265" +
    "\021\304\045\340\042\362\027\001\001\000\004\011\u0377" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\057\u0364\001\001\000\004\057\u0350\001\001\000" +
    "\022\230\u0319\231\u0318\234\u0317\235\u031c\237\u0312\267\u0315" +
    "\314\u0313\316\176\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\262\u030a\001\001\000\004\076\u02c8\001\001" +
    "\000\002\001\001\000\004\011\u02c4\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\u02a9\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\262\u02a5\001\001\000\004\057\u0282\001\001" +
    "\000\026\137\205\140\211\141\204\162\175\163\210\164" +
    "\213\172\177\267\201\314\174\316\176\001\001\000\002" +
    "\001\001\000\016\031\126\032\116\034\123\035\117\037" +
    "\130\041\127\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\262\113\264\112\001\001\000\006\012\065\013\066" +
    "\001\001\000\006\262\052\266\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\054" +
    "\022\055\261\060\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\107\001\001" +
    "\000\010\022\067\363\074\365\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\364\102\001\001\000\010" +
    "\022\067\363\077\365\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\022\067\363\103\365" +
    "\071\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\365\105\001\001\000\004\364\106\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\054\022\055\261" +
    "\114\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\166\001\001\000" +
    "\004\021\155\001\001\000\004\021\153\001\001\000\002" +
    "\001\001\000\004\021\145\001\001\000\004\021\132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\133\015\134\001\001\000" +
    "\004\016\141\001\001\000\004\033\136\001\001\000\006" +
    "\012\133\015\137\001\001\000\002\001\001\000\004\033" +
    "\140\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\065\013\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\065\013\146\001\001\000\004\040\150" +
    "\001\001\000\006\012\065\013\151\001\001\000\002\001" +
    "\001\000\004\040\152\001\001\000\002\001\001\000\004" +
    "\012\154\001\001\000\002\001\001\000\006\012\156\042" +
    "\157\001\001\000\002\001\001\000\004\043\160\001\001" +
    "\000\002\001\001\000\006\012\156\042\162\001\001\000" +
    "\004\043\163\001\001\000\002\001\001\000\006\012\133" +
    "\015\165\001\001\000\002\001\001\000\004\012\167\001" +
    "\001\000\004\036\171\001\001\000\004\012\172\001\001" +
    "\000\002\001\001\000\004\036\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\270\u0200" +
    "\001\001\000\002\001\001\000\004\012\u01cc\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\133\015\u0116\001" +
    "\001\000\006\012\065\013\u0113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\211\216\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\220\001\001\000\002\001\001\000\006\012" +
    "\133\015\222\001\001\000\004\165\224\001\001\000\006" +
    "\012\u0107\166\u0108\001\001\000\004\170\226\001\001\000" +
    "\004\072\376\001\001\000\004\067\230\001\001\000\006" +
    "\056\240\062\241\001\001\000\004\171\232\001\001\000" +
    "\004\012\233\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\235\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\056\240\062\373\001\001\000\022\012\252" +
    "\017\265\022\255\047\246\051\251\053\247\054\245\064" +
    "\253\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\002" +
    "\357\056\354\065\363\001\001\000\004\052\345\001\001" +
    "\000\002\001\001\000\004\050\337\001\001\000\004\020" +
    "\332\001\001\000\004\063\327\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\012\252\017\265\022\255\047\276" +
    "\051\251\053\247\054\245\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\252\017\267\055\270\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\066" +
    "\302\001\001\000\020\012\252\017\265\022\255\047\316" +
    "\051\251\053\247\054\245\001\001\000\002\001\001\000" +
    "\020\012\252\017\265\022\255\047\304\051\251\053\247" +
    "\054\245\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\012\252\017\265\022\255\047\306" +
    "\051\251\053\247\054\245\001\001\000\002\001\001\000" +
    "\020\012\252\017\265\022\255\047\310\051\251\053\247" +
    "\054\245\001\001\000\004\061\312\001\001\000\020\012" +
    "\252\017\265\022\255\047\314\051\251\053\247\054\245" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\061" +
    "\315\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\252\017\267\055\320\001\001\000\002\001\001\000" +
    "\010\012\252\017\267\055\322\001\001\000\002\001\001" +
    "\000\010\012\252\017\267\055\324\001\001\000\002\001" +
    "\001\000\006\056\240\062\331\001\001\000\006\056\240" +
    "\062\330\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\133\015\334" +
    "\001\001\000\002\001\001\000\016\012\252\017\265\022" +
    "\255\051\342\053\247\054\245\001\001\000\016\012\252" +
    "\017\265\022\255\051\340\053\247\054\245\001\001\000" +
    "\002\001\001\000\004\050\341\001\001\000\002\001\001" +
    "\000\004\050\343\001\001\000\002\001\001\000\014\012" +
    "\252\017\265\022\255\053\351\054\245\001\001\000\002" +
    "\001\001\000\014\012\252\017\265\022\255\053\347\054" +
    "\245\001\001\000\004\052\350\001\001\000\002\001\001" +
    "\000\004\052\352\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\066\370\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\012\252\017\265\022\255\047\367\051" +
    "\251\053\247\054\245\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\056" +
    "\365\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\252\017\267\055" +
    "\372\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\063\375\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\u0100\073\u0101\001\001\000\004\074\u0103\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\u0105\001\001\000\004\074\u0106\001\001\000\002" +
    "\001\001\000\004\102\u010c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\167\u010d\001\001\000\002\001\001\000\004\012\u010f\001" +
    "\001\000\004\102\u0110\001\001\000\004\167\u0111\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\075\u0115\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\012\u011d\175\u011b\177\u0119\207\u011e\220\u011a\226" +
    "\u011f\001\001\000\004\012\u01c8\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\176\u01c1\001\001\000\004\012" +
    "\u01bf\001\001\000\010\023\u0165\024\u016b\025\u016e\001\001" +
    "\000\004\221\u0123\001\001\000\002\001\001\000\004\174" +
    "\u0159\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\211\u0125\001\001\000\004\222\u0127\001" +
    "\001\000\004\012\u0128\001\001\000\002\001\001\000\004" +
    "\102\u0129\001\001\000\004\223\u012b\001\001\000\004\012" +
    "\u012d\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\102\u012e\001\001\000\004\223\u012f\001\001\000\002\001" +
    "\001\000\004\211\u0131\001\001\000\004\222\u0132\001\001" +
    "\000\002\001\001\000\004\224\u0135\001\001\000\004\012" +
    "\u0153\001\001\000\002\001\001\000\006\012\065\013\u0137" +
    "\001\001\000\004\213\u0139\001\001\000\004\012\u0151\001" +
    "\001\000\004\214\u013b\001\001\000\004\215\u0146\001\001" +
    "\000\004\174\u013d\001\001\000\004\351\u013f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\352\u0143\001\001\000\004\204\u0144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\214\u0150\001\001\000\004\217\u014f\001\001\000" +
    "\004\217\u0149\001\001\000\002\001\001\000\004\216\u014d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\225\u0154\001" +
    "\001\000\002\001\001\000\004\012\u0156\001\001\000\004" +
    "\225\u0157\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\056\240\062\u015b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\u01bd\001\001\000\002\001" +
    "\001\000\004\200\u0179\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\u0172\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\027\u0175" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\u01bc\001\001\000\014" +
    "\210\u0183\212\u0182\354\u017d\356\u017b\357\u017c\001\001\000" +
    "\004\203\u01b8\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\355\u01b0\001\001\000\004\211\u01ad\001\001\000" +
    "\004\201\u019f\001\001\000\004\012\u0199\001\001\000\006" +
    "\206\u0198\207\u0190\001\001\000\002\001\001\000\006\206" +
    "\u018f\207\u0190\001\001\000\002\001\001\000\004\174\u018b" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\211\u018a\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\056\240\062\u018d\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\210\u0191" +
    "\212\u0182\001\001\000\006\206\u0192\207\u0190\001\001\000" +
    "\002\001\001\000\006\012\065\013\u0194\001\001\000\004" +
    "\213\u0195\001\001\000\004\214\u0196\001\001\000\004\174" +
    "\u0197\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\210\u0183\212\u0182\354\u017d\357\u019a\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\202\u01a2\001\001\000\002\001" +
    "\001\000\004\203\u01a8\001\001\000\004\174\u01a3\001\001" +
    "\000\004\205\u01a5\001\001\000\002\001\001\000\006\206" +
    "\u01a6\207\u0190\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\205\u01b1\001\001\000" +
    "\006\206\u01b2\207\u0190\001\001\000\002\001\001\000\004" +
    "\353\u01b4\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\174\u01b9\001\001" +
    "\000\004\205\u01ba\001\001\000\006\206\u01bb\207\u0190\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\012\u011d\175" +
    "\u01c6\177\u0119\207\u011e\220\u011a\226\u011f\001\001\000\002" +
    "\001\001\000\004\173\u01c3\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\176\u01c7\001\001" +
    "\000\002\001\001\000\004\211\u01c9\001\001\000\004\222" +
    "\u01ca\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\142\u01cf\143\u01ce\001\001\000\004\144\u01d4\001\001\000" +
    "\004\147\u01d1\001\001\000\002\001\001\000\004\012\u01d2" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\145\u01d6\146\u01d7\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\145\u01d9\146" +
    "\u01d7\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\151\u01e1\001\001\000\002" +
    "\001\001\000\016\153\u01e7\154\u01e5\156\u01e4\160\u01e6\360" +
    "\u01e8\361\u01e3\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\151\u01fd\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\155\u01ee\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\157\u01f4\001" +
    "\001\000\002\001\001\000\004\155\u01f7\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\155" +
    "\u01fb\161\u01fc\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\065\013\u024a\001\001\000\002" +
    "\001\001\000\006\012\065\013\u0203\001\001\000\002\001" +
    "\001\000\012\022\u0206\315\u0208\317\u0207\320\u0205\001\001" +
    "\000\002\001\001\000\004\322\u0246\001\001\000\004\321" +
    "\u0243\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\025\u020f\324\u020e\325\u020c\326\u020b\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\331\u023b\001\001\000\002" +
    "\001\001\000\004\331\u0211\001\001\000\012\304\u0220\332" +
    "\u021f\333\u0222\366\u0225\001\001\000\004\322\u0213\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\005\u0215\075" +
    "\016\106\030\116\007\124\004\001\001\000\002\001\001" +
    "\000\006\022\u021a\330\u0218\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\334\u022c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\335\u0229" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\304\u0220\332\u022d\333\u0222\366\u0225\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\u0233\306\u0235" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\322\u023c\001\001\000\002\001\001\000\006\075\u0240" +
    "\327\u023f\001\001\000\004\075\u0241\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\022\u0206\317\u0207\320\u0245\001" +
    "\001\000\002\001\001\000\004\025\u0247\001\001\000\004" +
    "\323\u0248\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\271\u024c\001\001\000\002\001\001\000\010\022\u024e" +
    "\272\u024d\273\u024f\001\001\000\004\301\u0263\001\001\000" +
    "\014\012\u0251\023\u0253\024\u016b\025\u016e\275\u0254\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\u01bd\001\001\000\004\276\u0258\001\001\000\004" +
    "\274\u0255\001\001\000\002\001\001\000\006\022\u024e\273" +
    "\u0257\001\001\000\002\001\001\000\006\277\u025b\300\u025e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\300\u0261\001\001\000\002\001" +
    "\001\000\010\302\u0278\303\u0277\304\u027a\001\001\000\004" +
    "\307\u0264\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\310\u0268\001\001\000\002\001\001" +
    "\000\016\005\u026a\075\016\106\030\116\007\124\004\311" +
    "\u026b\001\001\000\004\011\u026d\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\u0271\075\016\106\030\116" +
    "\007\124\004\312\u0272\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\u0273\001\001\000" +
    "\002\001\001\000\016\005\u0274\075\016\106\030\116\007" +
    "\124\004\313\u0275\001\001\000\004\011\u0276\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\305\u027e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\u0233\306\u027d\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\302\u0280\303\u0277\304" +
    "\u027a\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\107\u0289\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\060\u0287\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\133\015\u028b\001\001\000" +
    "\002\001\001\000\006\072\u028c\110\u028d\001\001\000\002" +
    "\001\001\000\004\114\u0290\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\111\u0295\112\u0297" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\113\u029a" +
    "\001\001\000\002\001\001\000\004\112\u029b\001\001\000" +
    "\002\001\001\000\004\113\u029c\001\001\000\002\001\001" +
    "\000\004\115\u029e\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\111\u02a1\112\u0297\001\001\000\002\001\001" +
    "\000\004\115\u02a3\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\u02a7\022\u02a8\260\u02a6\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\341\u02ad\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\342\u02af\001\001\000\002\001\001\000" +
    "\004\343\u02b5\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\344\u02b6\001\001\000\004\345\u02ba\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\075\u02bd\001\001\000\004" +
    "\346\u02be\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\347\u02c1\001\001\000\002\001\001\000\006\012\u0100" +
    "\073\u02c3\001\001\000\002\001\001\000\054\003\u02c5\004" +
    "\003\005\010\006\005\007\023\010\026\030\015\044\024" +
    "\075\016\106\030\116\007\124\004\136\031\227\047\253" +
    "\040\257\035\263\037\265\021\304\045\340\042\362\027" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\057\u02c9\001\001\000\022\012\252\017\265" +
    "\022\255\047\u02ca\051\251\053\247\054\245\070\u02cb\001" +
    "\001\000\010\012\u02d0\045\u0308\046\u02d1\001\001\000\004" +
    "\131\u02d7\001\001\000\004\071\u02ce\001\001\000\020\012" +
    "\252\017\265\022\255\047\u02cf\051\251\053\247\054\245" +
    "\001\001\000\002\001\001\000\010\012\u02d0\045\u02d4\046" +
    "\u02d1\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\u02d0\046\u02d6\001\001\000\002\001\001\000\004\071" +
    "\u02d5\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\067\u02f0\001\001\000\006\012\133\015\u02d9\001\001\000" +
    "\010\012\u02d0\045\u02da\046\u02d1\001\001\000\006\133\u02df" +
    "\134\u02dd\001\001\000\004\135\u02ef\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\135\u02e8\001\001\000\004" +
    "\132\u02e4\001\001\000\004\135\u02e2\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\133\015\u02e5\001\001" +
    "\000\002\001\001\000\010\012\u02d0\045\u02e6\046\u02d1\001" +
    "\001\000\006\133\u02e7\134\u02dd\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\133\015\u02ea\001\001\000" +
    "\010\012\u02d0\045\u02eb\046\u02d1\001\001\000\002\001\001" +
    "\000\006\056\240\062\u02ed\001\001\000\006\133\u02ee\134" +
    "\u02dd\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\104\u02f1\001\001\000\004\077\u02fa\001\001\000\002\001" +
    "\001\000\020\012\252\017\265\022\255\047\u02f4\051\251" +
    "\053\247\054\245\001\001\000\004\105\u02f6\001\001\000" +
    "\020\012\252\017\265\022\255\047\u02f7\051\251\053\247" +
    "\054\245\001\001\000\002\001\001\000\004\105\u02f8\001" +
    "\001\000\002\001\001\000\006\056\240\062\u0307\001\001" +
    "\000\004\100\u02fc\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\012\252\017\265\022\255\047\u02fe\051\251" +
    "\053\247\054\245\001\001\000\004\101\u0300\001\001\000" +
    "\004\012\u0306\001\001\000\004\102\u0301\001\001\000\022" +
    "\012\252\017\265\022\255\047\u0303\051\251\053\247\054" +
    "\245\103\u0302\001\001\000\002\001\001\000\004\101\u0304" +
    "\001\001\000\004\102\u0305\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\071\u0309\001\001" +
    "\000\002\001\001\000\012\012\u02a7\022\u02a8\254\u030c\260" +
    "\u030b\001\001\000\004\255\u030e\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\256\u0311\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\u0347\232\u0349\001\001\000" +
    "\002\001\001\000\004\012\u0346\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\133\015" +
    "\u0322\001\001\000\006\012\065\013\u031d\001\001\000\002" +
    "\001\001\000\006\072\u031e\236\u031f\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\075\u0321\001\001\000\002" +
    "\001\001\000\010\240\u0323\241\u0327\246\u0326\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\012\u011d\175\u0335" +
    "\177\u0119\207\u011e\220\u011a\226\u011f\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\247\u0329\250\u032c\001\001" +
    "\000\004\251\u0332\001\001\000\004\021\u032f\001\001\000" +
    "\002\001\001\000\004\021\u032d\001\001\000\004\012\u032e" +
    "\001\001\000\002\001\001\000\004\012\u0330\001\001\000" +
    "\002\001\001\000\006\247\u0333\250\u032c\001\001\000\002" +
    "\001\001\000\004\251\u0334\001\001\000\002\001\001\000" +
    "\004\176\u0336\001\001\000\002\001\001\000\004\012\u0338" +
    "\001\001\000\016\023\u0339\024\u016b\025\u016e\242\u033d\243" +
    "\u033e\244\u033c\001\001\000\004\200\u0344\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\245\u0341\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\204\u0345\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\233" +
    "\u034b\001\001\000\004\012\u034f\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\117\u0352\001\001\000\002\001\001" +
    "\000\010\012\133\015\u0354\120\u0353\001\001\000\002\001" +
    "\001\000\004\121\u035d\001\001\000\004\123\u0357\001\001" +
    "\000\004\012\u0358\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\133\015\u035f\001\001\000\004\067\u035e\001" +
    "\001\000\002\001\001\000\004\122\u0361\001\001\000\006" +
    "\012\133\015\u0362\001\001\000\002\001\001\000\004\122" +
    "\u0363\001\001\000\002\001\001\000\006\012\133\015\u0365" +
    "\001\001\000\002\001\001\000\006\012\u0367\125\u0368\001" +
    "\001\000\002\001\001\000\004\130\u0369\001\001\000\004" +
    "\067\u036d\001\001\000\006\012\133\015\u036b\001\001\000" +
    "\004\122\u036c\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\012\252\017\265\022\255\047\u0370\051\251\053" +
    "\247\054\245\126\u036f\001\001\000\004\127\u0373\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\u0367\125" +
    "\u0374\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\133\015\u0376\001\001\000\002\001\001\000\054\003" +
    "\u0378\004\003\005\010\006\005\007\023\010\026\030\015" +
    "\044\024\075\016\106\030\116\007\124\004\136\031\227" +
    "\047\253\040\257\035\263\037\265\021\304\045\340\042" +
    "\362\027\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

    public LinkedList<String> SyntacticErrors = new LinkedList<String>();
    private Symbol s;

    public final Class getSymbolContainer() {
    return sym.class;
    }


    public void syntax_error(Symbol cur_token){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        String Auxiliar = "";
        List<Integer> ids = expected_token_ids();
        LinkedList<String> list = new LinkedList<String>(); 
        for (Integer expected : ids) {
                  Auxiliar = symbl_name_from_id(expected);
                  Auxiliar = " " + Auxiliar + " ";
                  list.add(Auxiliar);
        }
        SyntacticErrors.add("* Error Sintactico. Linea: " + (s.right+1) + " Columna: " + (s.left+1) + ". Simbolo:  \'" + s.value + "\'  * Se esperaba: " + list);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
      java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        String Auxiliar = "";
        List<Integer> ids = expected_token_ids();
        LinkedList<String> list = new LinkedList<String>(); 
        for (Integer expected : ids) {
                  Auxiliar = symbl_name_from_id(expected);
                  Auxiliar = " " + Auxiliar + " ";
                  list.add(Auxiliar);
        }
        SyntacticErrors.add("* Error Sintactico. Linea: " + (s.right+1) + " Columna: " + (s.left+1) + ". Simbolo:  \'" + s.value + "\'  * Se esperaba: " + list);
    }


    public String symbl_name_from_id(int id) {
	  Field[] fields = getSymbolContainer().getFields();
	  for(Field f : fields){
		  try {
			if (f.getInt(null)==id)
			  return f.getName();
		} catch (IllegalArgumentException e) {
			//e.printStackTrace();
		} catch (IllegalAccessException e) {
			//e.printStackTrace();
		}
	  }
	  return "Simbolo Invalido id";
    }
   

     public List<Integer> expected_token_ids() {
        List<Integer> ret = new LinkedList<Integer>();
	  int parse_state = ((Symbol)stack.peek()).parse_state ;
	  short[] row = action_tab[parse_state];
	  for (int i = 0; i<row.length; i+=2){
		  if (row[i]==-1) continue;
		  if (!validate_expected_symbol(row[i])) continue;
		  ret.add(new Integer(row[i]));
	  }
	  return ret;

    }

    /*protected static final int _error_sync_size(){
        return 1;
    }*/

    protected int error_sync_size() {
            return 1;
    }

    private boolean validate_expected_symbol(int id){
	  short lhs,rhs_size;
	  int act;
	  try {
		  virtual_parse_stack vstack = new virtual_parse_stack(stack);
		  for (;;)
		  {
			  act = get_action(vstack.top(), id);

			  if (act == 0) return false;

			  if (act > 0)
			  {
				  vstack.push(act-1);

				  if (!advance_lookahead()) return true;
			  }
			  else
			  {
				  if ((-act)-1 == start_production())  return true;

				  lhs = production_tab[(-act)-1][0];
				  rhs_size = production_tab[(-act)-1][1];
				  for (int i = 0; i < rhs_size; i++) vstack.pop();

				  vstack.push(get_reduce(vstack.top(), lhs));
			  }
		  }

	  } catch (Exception e) {
		  e.printStackTrace();
	  }
	  return true;
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // Data_Type ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data_Type",243, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // Data_Type ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data_Type",243, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // Data_Type ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data_Type",243, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // Data_Type ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data_Type",243, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // RepeatProcedureA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatProcedureA",242, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // RepeatProcedureA ::= Coma RepeatProcedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatProcedureA",242, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // RepeatProcedure ::= Data_Type RepeatProcedureA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatProcedure",241, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // RepeatProcedure ::= Variable Igual Data_Type RepeatProcedureA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatProcedure",241, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // ExecProcedure ::= ClauseExec Object2 RepeatProcedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExecProcedure",240, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // ExecProcedure ::= ClauseExec Object2 Apertura_de_paréntesis RepeatProcedure Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExecProcedure",240, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // ExecProcedure ::= ClauseExec Object2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExecProcedure",240, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // EXECUTE_AS_CLAUSE ::= ClauseExec AS Clause 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXECUTE_AS_CLAUSE",244, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // FuncOpcC ::= OFF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcC",219, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // FuncOpcC ::= ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcC",219, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // FuncOpcB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcB",218, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // FuncOpcB ::= Coma FuncOpc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcB",218, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // FuncOpcA ::= INLINE Igual FuncOpcC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // FuncOpcA ::= EXECUTE_AS_CLAUSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // FuncOpcA ::= CALLED ON NULL INPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // FuncOpcA ::= RETURNS NULL ON NULL INPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // FuncOpcA ::= SCHEMABINDING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // FuncOpcA ::= ENCRYPTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // FuncOpc ::= FuncOpcA FuncOpcB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpc",216, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // With ::= WITH FuncOpc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("With",215, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // DType ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // DType ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // DType ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // DType ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // DType ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // SCT ::= Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCT",213, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // SCT ::= Apertura_de_paréntesis Select Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCT",213, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // Table ::= TABLE With As RETURN SCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Table",212, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // Data ::= Tipo_datoA With As BEGIN DML RETURN DType END 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data",211, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // Type_Return ::= Table 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type_Return",210, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // Type_Return ::= Data 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type_Return",210, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // ReadOnly ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReadOnly",209, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // ReadOnly ::= READONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReadOnly",209, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // As ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("As",208, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // As ::= AS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("As",208, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // Param_B ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param_B",207, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // Param_B ::= Coma Param_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param_B",207, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // Param_A ::= Param Param_B 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param_A",206, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // Param ::= Variable As Tipo_datoA ReadOnly 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param",205, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // OrAlter ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrAlter",204, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // OrAlter ::= OR ALTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrAlter",204, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // Params ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Params",203, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // Params ::= Param_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Params",203, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // Function ::= OrAlter FUNCTION Object2 Apertura_de_paréntesis Params Cierre_de_paréntesis RETURNS Type_Return 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Function",202, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // CursorDeclareg ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareg",229, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // CursorDeclareg ::= OF ColumnListA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareg",229, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // CursorDeclaref ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaref",228, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // CursorDeclaref ::= FOR UPDATE CursorDeclareg 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaref",228, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // CursorDeclaree ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaree",227, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // CursorDeclaree ::= TYPE_WARNING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaree",227, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // CursorDeclared ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // CursorDeclared ::= OPTIMISTIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // CursorDeclared ::= SCROLL_LOCKS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // CursorDeclared ::= READ_ONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // CursorDeclarec ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // CursorDeclarec ::= FAST_FORWARD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // CursorDeclarec ::= DYNAMIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // CursorDeclarec ::= KEYSET 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // CursorDeclarec ::= STATIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // CursorDeclareb ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // CursorDeclareb ::= FORWARD_ONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // CursorDeclareb ::= SCROLL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // CursorDeclarea ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // CursorDeclarea ::= GLOBAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // CursorDeclarea ::= LOCAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // CursorDeclare ::= DECLARE ID CURSOR CursorDeclarea CursorDeclareb CursorDeclarec CursorDeclared CursorDeclaree FOR Select CursorDeclaref 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclare",222, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // StmtSP2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP2",201, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // StmtSP2 ::= DML Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP2",201, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // StmtSP1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP1",200, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // StmtSP1 ::= DML Final StmtSP2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP1",200, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // StmtSP ::= DML Final StmtSP1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP",199, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // StartSP ::= BEGIN StmtSP END 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StartSP",198, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // ReplicationSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReplicationSP",197, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // ReplicationSP ::= FOR REPLICATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReplicationSP",197, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // Clause ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // Clause ::= OWNER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // Clause ::= SELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // Clause ::= CALLER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // ProcOptionRec ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOptionRec",195, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // ProcOptionRec ::= Coma ProcOption1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOptionRec",195, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // ClauseExec ::= EXEC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ClauseExec",194, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // ClauseExec ::= EXECUTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ClauseExec",194, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // ProcOption2 ::= ClauseExec AS Clause 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // ProcOption2 ::= RECOMPILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // ProcOption2 ::= ENCRYPTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // ProcOption1 ::= ProcOption2 ProcOptionRec 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption1",192, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // ProcOption ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption",191, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // ProcOption ::= WITH ProcOption1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption",191, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // TipoD_SP3 ::= OUTPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP3",190, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // TipoD_SP3 ::= OUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP3",190, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // TipoD_SP2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP2",189, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // TipoD_SP2 ::= TipoD_SP3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP2",189, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // TipoD_SP1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP1",188, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // TipoD_SP1 ::= Igual DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP1",188, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // TipoD_SP ::= ID READONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // TipoD_SP ::= CURSOR VARYING TipoD_SP3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // TipoD_SP ::= Tipo_dato TipoD_SP1 TipoD_SP2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // ParamsB_SP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsB_SP",186, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // ParamsB_SP ::= Coma ParamsA_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsB_SP",186, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // ParamsA_SP ::= Variable TipoD_SP ParamsB_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsA_SP",185, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // ParamsSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsSP",184, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // ParamsSP ::= ParamsA_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsSP",184, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // NumSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NumSP",183, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // NumSP ::= Punto_y_coma Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NumSP",183, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // SP_Reservada ::= PROCEDURE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SP_Reservada",182, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // SP_Reservada ::= PROC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SP_Reservada",182, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // Procedure ::= OrAlter SP_Reservada Object2 NumSP ParamsSP ProcOption ReplicationSP AS StartSP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Procedure",181, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // RollbackA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RollbackA",180, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // RollbackA ::= TranName NameA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RollbackA",180, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // Rollback ::= ROLLBACK RollbackA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Rollback",179, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // CommitA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CommitA",178, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // CommitA ::= TranName NameA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CommitA",178, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // Commit ::= COMMIT CommitA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Commit",177, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // TranName ::= TRANSACTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TranName",176, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // TranName ::= TRAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TranName",176, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // NameA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // NameA ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // NameA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // Name ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Name",174, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // Name ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Name",174, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // SavePoint ::= SAVE TranName Name 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SavePoint",173, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // BeginTranC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranC",172, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // BeginTranC ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranC",172, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // BeginTranB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranB",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // BeginTranB ::= WITH MARK BeginTranC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranB",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // BeginTranA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranA",170, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // BeginTranA ::= Name BeginTranB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranA",170, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // BeginTran ::= BEGIN TranName BeginTranA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTran",169, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // AlterTableDropC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropC",167, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // AlterTableDropC ::= Coma AlterTableDropA AlterTableDropC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropC",167, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // AlterTableDropB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropB",166, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // AlterTableDropB ::= CONSTRAINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropB",166, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // AlterTableDropA ::= COLUMN IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropA",165, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // AlterTableDropA ::= AlterTableDropB IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropA",165, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // AlterTableDrop ::= DROP AlterTableDropA AlterTableDropC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDrop",164, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // AlterColumnE ::= NOT FOR REPLICATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnE",163, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // AlterColumnE ::= ROWGUIDCOL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnE",163, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // AlterColumnD ::= DROP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnD",162, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // AlterColumnD ::= ADD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnD",162, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // AlterColumnA ::= Tipo_dato ColumnDefA ColumnDefG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnA",161, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // AlterColumnC ::= AlterColumnD AlterColumnE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnC",160, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // AlterColumnC ::= AlterColumnA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnC",160, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // AlterColumn ::= ALTER COLUMN ID AlterColumnC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumn",159, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // AlterTableA ::= AlterTableDrop 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // AlterTableA ::= ADD CNC CNCA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // AlterTableA ::= AlterColumn 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // AlterTable ::= TABLE Object3 AlterTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTable",157, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // AlterViewA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterViewA",156, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // AlterViewA ::= ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterViewA",156, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // AlterView ::= VIEW Object2 AlterViewA AS Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterView",155, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // AlterUser ::= USER ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterUser",154, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // AlterDBB ::= SET ROLLBACK IMMEDIATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBB",153, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // AlterDBB ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBB",153, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // AlterDBA ::= CURRENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBA",152, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // AlterDBA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBA",152, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // AlterDatabase ::= DATABASE AlterDBA AlterDBB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDatabase",151, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // AlterA ::= Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // AlterA ::= Procedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // AlterA ::= AlterView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // AlterA ::= AlterDatabase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // AlterA ::= AlterUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // AlterA ::= AlterTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // Alter ::= ALTER AlterA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alter",149, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // TableIndex ::= INDEX ID ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableIndex",148, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // TableConstrE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrE",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // TableConstrE ::= Coma ID TableConstrE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrE",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // TableConstrD ::= Apertura_de_paréntesis ID TableConstrE Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrD",146, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // TableConstrC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrC",145, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // TableConstrC ::= Coma ID OrderB TableConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrC",145, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // TableConstrB ::= Apertura_de_paréntesis ID OrderB TableConstrC Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrB",144, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // TableConstrA ::= CHECK NFR Apertura_de_paréntesis SearchCondition Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // TableConstrA ::= FOREIGN KEY TableConstrD REFERENCES Object2 ColumnConstrE ColumnConstrF NFR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // TableConstrA ::= UNIQUE ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // TableConstrA ::= PRIMARY KEY ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // TableConstr ::= ColumnConstrA TableConstrA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstr",142, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // ColumnConstrI ::= SET ColumnConstrH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrI",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // ColumnConstrI ::= CASCADE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrI",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // ColumnConstrH ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrH",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // ColumnConstrH ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrH",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // ColumnConstrG ::= UPDATE ColumnConstrI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrG",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // ColumnConstrG ::= DELETE ColumnConstrI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrG",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // ColumnConstrF ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrF",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // ColumnConstrF ::= ON ColumnConstrG ColumnConstrF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrF",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // ColumnConstrE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrE",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // ColumnConstrE ::= Apertura_de_paréntesis ID Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrE",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // ColumnConstrD ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrD",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // ColumnConstrD ::= FOREIGN KEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrD",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // ColumnConstrC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // ColumnConstrC ::= NONCLUSTERED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // ColumnConstrC ::= CLUSTERED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // ColumnConstrB ::= CHECK NFR Apertura_de_paréntesis SearchCondition Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // ColumnConstrB ::= ColumnConstrD REFERENCES Object2 ColumnConstrE ColumnConstrF NFR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // ColumnConstrB ::= UNIQUE ColumnConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // ColumnConstrB ::= PRIMARY KEY ColumnConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // ColumnConstrA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrA",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // ColumnConstrA ::= CONSTRAINT ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrA",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // ColumnConstr ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstr",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // ColumnConstr ::= ColumnConstrA ColumnConstrB ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstr",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // ColumnDefH ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefH",131, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // ColumnDefH ::= ROWGUIDCOL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefH",131, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // ColumnDefG ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefG",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // ColumnDefG ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefG",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // ColumnDefF ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefF",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // ColumnDefF ::= Apertura_de_paréntesis Int Coma Int Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefF",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // ColumnDefE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefE",128, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // ColumnDefE ::= IDENTITY ColumnDefF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefE",128, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // ColumnDefD ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // ColumnDefD ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // ColumnDefD ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // ColumnDefD ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // ColumnDefD ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // ColumnDefA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefA",126, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // ColumnDefA ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefA",126, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // ColumnDefV ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // ColumnDefV ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // ColumnDefV ::= NOT NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // ColumnDefW ::= FOR REPLICATION ColumnDefV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefW",235, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // ColumnDefW ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefW",235, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // ColumnDefX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefX",234, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // ColumnDefX ::= NOT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefX",234, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // ColumnDefY ::= ColumnConstrB ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // ColumnDefY ::= ROWGUIDCOL ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // ColumnDefY ::= ColumnDefX ColumnDefW ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // ColumnDefY ::= IDENTITY ColumnDefF NFR ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // ColumnDefY ::= DEFAULT ColumnDefD ColumnDefE NFR ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // ColumnDefZ ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // ColumnDefZ ::= ColumnDefY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // ColumnDefZ ::= CONSTRAINT ID ColumnDefY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // ColumnDef ::= ID Tipo_dato ColumnDefA ColumnDefZ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDef",125, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // CNCA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNCA",124, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // CNCA ::= Coma CNC CNCA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNCA",124, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // CNC ::= TableIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // CNC ::= TableConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // CNC ::= ColumnDef 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // NFR2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR2",232, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // NFR2 ::= NOT ColumnDefG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR2",232, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // NFR1 ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR1",231, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // NFR1 ::= FOR REPLICATION NFR2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR1",231, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // NFR ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // NFR ::= NOT NFR1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // FileGroup ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileGroup",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // FileGroup ::= ON PRIMARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileGroup",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // CreateTable ::= TABLE Object3 Apertura_de_paréntesis CNC CNCA Cierre_de_paréntesis FileGroup 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateTable",120, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // OptionalOn ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OptionalOn",119, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // OptionalOn ::= ON ID Apertura_de_paréntesis ID Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OptionalOn",119, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // IncludeIndex ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IncludeIndex",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // IncludeIndex ::= INCLUDE ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IncludeIndex",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // ColumnIndexB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexB",117, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // ColumnIndexB ::= Coma ID OrderB ColumnIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexB",117, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // ColumnIndexA ::= ID OrderB ColumnIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexA",116, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // ColumnIndex ::= Apertura_de_paréntesis ColumnIndexA Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndex",115, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // CreateIndexA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndexA",114, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // CreateIndexA ::= UNIQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndexA",114, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // CreateIndex ::= CreateIndexA ColumnConstrC INDEX ID ON Object3 ColumnIndex IncludeIndex Where OptionalOn 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndex",113, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // CreateView ::= VIEW Object2 AS Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateView",112, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // Filegrowth_A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // Filegrowth_A ::= MODULAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // Filegrowth_A ::= Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // Filegrowth ::= FILEGROWTH Igual Int Filegrowth_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth",110, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // Maxsize_A ::= UNLIMITED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize_A",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // Maxsize_A ::= Int Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize_A",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // Maxsize ::= MAXSIZE Igual Maxsize_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize",108, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // Size_A ::= TB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // Size_A ::= GB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // Size_A ::= MB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // Size_A ::= KB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // Sizenw ::= SIZE Igual Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sizenw",239, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // Sizew ::= SIZE Igual Int Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sizew",238, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // Size ::= Sizenw 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size",106, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // Size ::= Sizew 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size",106, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // Optional ::= Filegrowth 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // Optional ::= Maxsize 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // Optional ::= Size 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // Optionals ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optionals",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // Optionals ::= Coma Optional Optionals 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optionals",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // COLLATEDB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLLATEDB",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // COLLATEDB ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLLATEDB",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // FileSpec ::= Apertura_de_paréntesis NAME Igual String Coma FILENAME Igual String Optionals Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpec",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // FileSpecs ::= FileSpec 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpecs",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // FileSpecs ::= FileSpec Coma FileSpecs 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpecs",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // Primary ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Primary",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // Primary ::= PRIMARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Primary",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // CreateDBB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBB",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // CreateDBB ::= ON Primary FileSpecs 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBB",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // CreateDBA ::= CreateDBB COLLATEDB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBA",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // CreateDB ::= DATABASE ID CreateDBA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDB",95, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // CreateUser ::= USER Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateUser",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // CreateA ::= Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // CreateA ::= Procedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // CreateA ::= CreateView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // CreateA ::= CreateUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // CreateA ::= CreateIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // CreateA ::= CreateDB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // CreateA ::= CreateTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // Create ::= CREATE CreateA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Create",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // Outer ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Outer",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // Outer ::= OUTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Outer",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // Type ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // Type ::= FULL Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // Type ::= LEFT Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // Type ::= RIGHT Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // Type ::= INNER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // Join ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Join",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // Join ::= Type JOIN Object3 Alias ON SearchCondition Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Join",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // FromSelectA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelectA",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // FromSelectA ::= Coma Object3 Alias Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelectA",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // FromSelect ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelect",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // FromSelect ::= FROM Object3 Alias Join FromSelectA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelect",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // FromUpdate ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromUpdate",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // FromUpdate ::= FROM Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromUpdate",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // UpdateC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateC",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // UpdateC ::= Coma UpdateA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateC",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // UpdateB ::= Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateB",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // UpdateB ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateB",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // UpdateA ::= ID Igual UpdateB UpdateC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateA",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // Update ::= UPDATE Top Object3 SET UpdateA FromUpdate Where 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Update",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // Server ::= Apertura_de_paréntesis ID Coma Int Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Server",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // DeleteC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteC",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // DeleteC ::= Coma Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteC",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // DeleteB ::= FROM Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteB",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // DeleteA ::= Object3 DeleteB Where 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteA",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // DeleteA ::= OPENQUERY Server 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteA",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // FromDelete ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromDelete",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // FromDelete ::= FROM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromDelete",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // Delete ::= DELETE Top FromDelete DeleteA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Delete",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // InsertValoresA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValoresA",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // InsertValoresA ::= Coma Apertura_de_paréntesis InsertExpresion Cierre_de_paréntesis InsertValoresA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValoresA",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // InsertValores ::= DEFAULT VALUES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValores",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // InsertValores ::= VALUES Apertura_de_paréntesis InsertExpresion Cierre_de_paréntesis InsertValoresA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValores",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // InsertExpresionB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionB",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // InsertExpresionB ::= Coma InsertExpresionA InsertExpresionB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionB",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // InsertExpresionA ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // InsertExpresionA ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // InsertExpresionA ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // InsertExpresionA ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // InsertExpresionA ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // InsertExpresion ::= InsertExpresionA InsertExpresionB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresion",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // InsertColumnList ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertColumnList",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // InsertColumnList ::= ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertColumnList",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // InsertInto ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertInto",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // InsertInto ::= INTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertInto",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Insert ::= INSERT Top InsertInto Object3 InsertColumnList InsertValores 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Insert",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // GroupA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GroupA",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // GroupA ::= Coma Expresion GroupA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GroupA",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Group ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Group",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Group ::= GROUP BY Expresion GroupA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Group",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // OrderC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderC",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // OrderC ::= Expresion OrderA OrderB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderC",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // OrderB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // OrderB ::= DESC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // OrderB ::= ASC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // OrderA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderA",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // OrderA ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderA",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Order ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Order",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Order ::= ORDER BY Expresion OrderA OrderB OrderC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Order",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Having ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Having",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Having ::= HAVING SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Having",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // SelectA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // SelectA ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // SelectA ::= ALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Select ::= SELECT SelectA Top SelectColumns FromSelect Where Group Having Order 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Select",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ColumnListB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListB",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ColumnListB ::= Coma ID ColumnListB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListB",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ColumnListA ::= ID ColumnListB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListA",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ColumnList ::= Apertura_de_paréntesis ColumnListA Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnList",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // SelectColumnsA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumnsA",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // SelectColumnsA ::= Coma Expresion Alias SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumnsA",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // SelectColumns ::= Multiplicacion SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumns",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // SelectColumns ::= Expresion Alias SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumns",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Where ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Where",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Where ::= WHERE SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Where",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // PredicadoC ::= LIKE Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // PredicadoC ::= BETWEEN Expresion AND Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // PredicadoC ::= IN Apertura_de_paréntesis Expresion Expresiones Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // PredicadoA ::= Not PredicadoC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // PredicadoA ::= IS Not NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // PredicadoA ::= OperadoresBooleanos Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // OperadoresBooleanos ::= Menor_o_igual_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // OperadoresBooleanos ::= Menor_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // OperadoresBooleanos ::= Mayor_o_igual_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // OperadoresBooleanos ::= Mayor_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OperadoresBooleanos ::= Operador_no_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OperadoresBooleanos ::= Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Predicado ::= Expresion PredicadoA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Predicado",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // SearchConditionA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // SearchConditionA ::= OR SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // SearchConditionA ::= AND SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // SearchCondition ::= Apertura_de_paréntesis SearchCondition Cierre_de_paréntesis SearchConditionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchCondition",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SearchCondition ::= Not Predicado SearchConditionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchCondition",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Expresiones ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresiones",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Expresiones ::= Coma Expresion Expresiones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresiones",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // TopA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TopA",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // TopA ::= PERCENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TopA",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Top ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Top",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Top ::= TOP Apertura_de_paréntesis Int Cierre_de_paréntesis TopA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Top",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Not ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Not",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Not ::= NOT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Not",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ExpresionF ::= Multiplicacion Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ExpresionF ::= Int Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ExpresionF ::= Object4 Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ExpresionE ::= COUNT Apertura_de_paréntesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ExpresionE ::= MAX Apertura_de_paréntesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ExpresionE ::= MIN Apertura_de_paréntesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ExpresionE ::= AVG Apertura_de_paréntesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ExpresionE ::= SUM Apertura_de_paréntesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ExpresionE ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ExpresionE ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ExpresionE ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ExpresionE ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ExpresionE ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ExpresionE ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ExpresionE ::= Object4 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ExpresionD ::= ExpresionE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ExpresionD ::= Apertura_de_paréntesis Expresion PredicadoC Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ExpresionC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ExpresionC ::= Division ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ExpresionC ::= Multiplicacion ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ExpresionB ::= ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionB",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ExpresionA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ExpresionA ::= Resta ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ExpresionA ::= Suma ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expresion ::= ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresion",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // AliasA ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AliasA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // AliasA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AliasA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Alias ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Alias ::= AliasA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Alias ::= AS AliasA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Truncate ::= TRUNCATE TABLE Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Truncate",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DropIndexB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexB",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DropIndexB ::= Coma DropIndexA DropIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexB",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DropIndexA ::= ID ON Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexA",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DropIndex ::= INDEX IFE DropIndexA DropIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndex",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DropViewA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropViewA",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DropViewA ::= Coma Object2 DropViewA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropViewA",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DropView ::= VIEW IFE Object2 DropViewA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropView",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DropDatabaseA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabaseA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DropDatabaseA ::= Coma ID DropDatabaseA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabaseA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DropDatabase ::= DATABASE IFE ID DropDatabaseA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabase",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DropUser ::= USER IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropUser",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DropTableA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTableA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DropTableA ::= Coma Object3 DropTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTableA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DropTable ::= TABLE IFE Object3 DropTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTable",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DropA ::= DropIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DropA ::= DropView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DropA ::= DropDatabase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DropA ::= DropUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DropA ::= DropTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Drop ::= DROP DropA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Drop",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Tipo_datoC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoC",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Tipo_datoC ::= Coma Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoC",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Tipo_datoB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoB",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Tipo_datoB ::= Apertura_de_paréntesis Int Tipo_datoC Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoB",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Tipo_datoA ::= NVARCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Tipo_datoA ::= NUMERIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Tipo_datoA ::= SMALLINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Tipo_datoA ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Tipo_datoA ::= INT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Tipo_datoA ::= TIME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Tipo_datoA ::= REAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Tipo_datoA ::= NCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Tipo_datoA ::= CURSOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Tipo_datoA ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Tipo_datoA ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Tipo_datoA ::= BIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Tipo_datoA ::= DATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Tipo_datoA ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Tipo_datoA ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Tipo_datoA ::= VARCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Tipo_datoD ::= Apertura_de_corchetes Tipo_datoA Cierre_de_corchetes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Tipo_datoD ::= Tipo_datoA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Tipo_dato ::= Tipo_datoD Tipo_datoB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_dato",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Variable ::= Arroba Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IFE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IFE ::= IF EXISTS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Object4A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4A",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Object4A ::= Punto Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4A",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Object4 ::= ID Object4A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Object3A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3A",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Object3A ::= Punto Object2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3A",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Object3 ::= ID Object3A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Object2A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2A",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Object2A ::= Punto ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2A",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Object2 ::= ID Object2A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ID ::= Apertura_de_corchetes Identificador Cierre_de_corchetes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ID ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Final ::= PYCGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Final",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Final ::= GO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Final",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Final ::= Punto_y_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Final",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TSQL ::= ExecProcedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TSQL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TSQL ::= CursorDeclare 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TSQL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TCL ::= SavePoint 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TCL ::= Commit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TCL ::= Rollback 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TCL ::= BeginTran 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DDL ::= Truncate 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DDL ::= Drop 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DDL ::= Alter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DDL ::= Create 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DML ::= Update 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DML ::= Delete 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DML ::= Insert 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DML ::= Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // InicialA ::= TSQL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // InicialA ::= TCL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // InicialA ::= DDL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // InicialA ::= DML 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Inicial ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicial",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Inicial ::= error Final Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicial",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicial ::= InicialA Final Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicial",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

