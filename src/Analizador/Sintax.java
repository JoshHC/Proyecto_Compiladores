
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Oct 31 13:54:31 CST 2019
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java_cup.runtime.virtual_parse_stack;
import java.lang.reflect.Field;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Oct 31 13:54:31 CST 2019
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0217\000\002\002\004\000\002\003\003\000\002\003" +
    "\002\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\005\000\002\004\006\000\002\350\004\000" +
    "\002\350\004\000\002\350\004\000\002\350\005\000\002" +
    "\350\006\000\002\350\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\006\004\000\002\006\004\000\002\006\004\000" +
    "\002\006\004\000\002\007\006\000\002\010\003\000\002" +
    "\010\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\012\003\000\002\012\005\000\002\013\004" +
    "\000\002\014\004\000\002\014\002\000\002\015\004\000" +
    "\002\016\004\000\002\016\002\000\002\017\004\000\002" +
    "\020\004\000\002\020\002\000\002\021\004\000\002\021" +
    "\002\000\002\022\004\000\002\023\004\000\002\024\003" +
    "\000\002\024\005\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\026\006\000\002\026\002\000\002\027\004\000\002\027" +
    "\002\000\002\030\004\000\002\031\003\000\002\031\003" +
    "\000\002\031\004\000\002\031\003\000\002\031\003\000" +
    "\002\032\006\000\002\033\005\000\002\033\002\000\002" +
    "\034\005\000\002\035\006\000\002\036\005\000\002\036" +
    "\002\000\002\037\006\000\002\040\005\000\002\040\002" +
    "\000\002\041\006\000\002\042\005\000\002\043\005\000" +
    "\002\043\002\000\002\044\005\000\002\045\004\000\002" +
    "\045\003\000\002\045\002\000\002\046\003\000\002\046" +
    "\003\000\002\047\004\000\002\050\005\000\002\050\005" +
    "\000\002\050\002\000\002\051\004\000\002\052\005\000" +
    "\002\052\005\000\002\052\002\000\002\053\006\000\002" +
    "\053\003\000\002\054\004\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\054\003\000\002\054\003" +
    "\000\002\054\003\000\002\054\005\000\002\054\005\000" +
    "\002\054\005\000\002\054\005\000\002\054\005\000\002" +
    "\367\005\000\002\367\002\000\002\370\004\000\002\371" +
    "\004\000\002\371\002\000\002\055\004\000\002\055\004" +
    "\000\002\055\004\000\002\056\003\000\002\056\002\000" +
    "\002\057\007\000\002\057\002\000\002\060\003\000\002" +
    "\060\002\000\002\061\005\000\002\061\002\000\002\062" +
    "\005\000\002\062\006\000\002\063\004\000\002\063\004" +
    "\000\002\063\002\000\002\064\004\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\065\004\000\002\065" +
    "\005\000\002\065\004\000\002\066\007\000\002\066\006" +
    "\000\002\066\004\000\002\067\004\000\002\067\002\000" +
    "\002\070\005\000\002\070\004\000\002\071\006\000\002" +
    "\071\002\000\002\072\005\000\002\073\004\000\002\074" +
    "\005\000\002\074\002\000\002\075\013\000\002\076\003" +
    "\000\002\076\003\000\002\076\002\000\002\077\004\000" +
    "\002\077\002\000\002\100\010\000\002\100\002\000\002" +
    "\101\004\000\002\101\002\000\002\102\003\000\002\102" +
    "\003\000\002\102\002\000\002\103\006\000\002\103\002" +
    "\000\002\104\006\000\002\104\002\000\002\105\005\000" +
    "\002\105\002\000\002\106\010\000\002\107\003\000\002" +
    "\107\002\000\002\110\003\000\002\110\002\000\002\111" +
    "\004\000\002\112\003\000\002\112\003\000\002\112\003" +
    "\000\002\112\003\000\002\112\003\000\002\113\005\000" +
    "\002\113\002\000\002\114\007\000\002\114\004\000\002" +
    "\115\007\000\002\115\002\000\002\116\006\000\002\117" +
    "\003\000\002\117\002\000\002\120\004\000\002\120\005" +
    "\000\002\121\005\000\002\121\002\000\002\122\005\000" +
    "\002\122\002\000\002\123\007\000\002\124\011\000\002" +
    "\125\006\000\002\126\003\000\002\126\003\000\002\127" +
    "\004\000\002\127\002\000\002\130\005\000\002\130\002" +
    "\000\002\131\007\000\002\131\002\000\002\132\006\000" +
    "\002\132\002\000\002\133\011\000\002\133\002\000\002" +
    "\134\003\000\002\134\004\000\002\134\004\000\002\134" +
    "\004\000\002\134\002\000\002\135\003\000\002\135\002" +
    "\000\002\136\004\000\002\137\003\000\002\137\003\000" +
    "\002\137\003\000\002\137\003\000\002\137\003\000\002" +
    "\137\003\000\002\137\003\000\002\140\004\000\002\141" +
    "\005\000\002\142\004\000\002\143\005\000\002\143\002" +
    "\000\002\144\003\000\002\144\002\000\002\145\005\000" +
    "\002\145\003\000\002\146\014\000\002\373\003\000\002" +
    "\373\003\000\002\374\003\000\002\374\003\000\002\147" +
    "\004\000\002\147\002\000\002\151\005\000\002\151\002" +
    "\000\002\153\003\000\002\153\003\000\002\153\003\000" +
    "\002\154\003\000\002\154\003\000\002\360\006\000\002" +
    "\361\005\000\002\155\003\000\002\155\003\000\002\155" +
    "\003\000\002\155\003\000\002\156\005\000\002\157\004" +
    "\000\002\157\003\000\002\160\006\000\002\161\003\000" +
    "\002\161\003\000\002\161\002\000\002\162\006\000\002" +
    "\163\014\000\002\164\003\000\002\164\002\000\002\165" +
    "\005\000\002\166\005\000\002\167\006\000\002\167\002" +
    "\000\002\170\004\000\002\170\002\000\002\171\007\000" +
    "\002\171\002\000\002\172\011\000\002\173\004\000\002" +
    "\173\002\000\002\174\004\000\002\174\002\000\002\351" +
    "\005\000\002\351\003\000\002\352\004\000\002\352\002" +
    "\000\002\175\003\000\002\175\003\000\002\175\003\000" +
    "\002\176\005\000\002\176\002\000\002\177\006\000\002" +
    "\356\005\000\002\356\003\000\002\356\002\000\002\357" +
    "\010\000\002\357\007\000\002\357\006\000\002\357\004" +
    "\000\002\357\004\000\002\354\003\000\002\354\002\000" +
    "\002\355\003\000\002\355\005\000\002\353\004\000\002" +
    "\353\003\000\002\353\002\000\002\200\004\000\002\200" +
    "\002\000\002\201\003\000\002\201\003\000\002\201\003" +
    "\000\002\201\003\000\002\201\003\000\002\202\004\000" +
    "\002\202\002\000\002\203\007\000\002\203\002\000\002" +
    "\204\003\000\002\204\002\000\002\205\003\000\002\205" +
    "\002\000\002\206\005\000\002\206\002\000\002\207\004" +
    "\000\002\207\002\000\002\210\005\000\002\210\004\000" +
    "\002\210\010\000\002\210\007\000\002\211\003\000\002" +
    "\211\003\000\002\211\002\000\002\212\004\000\002\212" +
    "\002\000\002\213\005\000\002\213\002\000\002\214\005" +
    "\000\002\214\002\000\002\215\004\000\002\215\004\000" +
    "\002\216\003\000\002\216\003\000\002\217\003\000\002" +
    "\217\004\000\002\220\004\000\002\221\006\000\002\221" +
    "\005\000\002\221\012\000\002\221\007\000\002\222\007" +
    "\000\002\223\006\000\002\223\002\000\002\224\006\000" +
    "\002\225\005\000\002\225\002\000\002\226\006\000\002" +
    "\227\004\000\002\230\003\000\002\230\003\000\002\230" +
    "\003\000\002\230\003\000\002\230\003\000\002\230\003" +
    "\000\002\231\005\000\002\232\003\000\002\232\003\000" +
    "\002\233\004\000\002\233\005\000\002\234\004\000\002" +
    "\235\007\000\002\236\003\000\002\236\002\000\002\237" +
    "\005\000\002\240\003\000\002\240\005\000\002\240\003" +
    "\000\002\241\006\000\002\242\003\000\002\242\004\000" +
    "\002\243\005\000\002\244\003\000\002\244\003\000\002" +
    "\245\003\000\002\245\005\000\002\246\005\000\002\247" +
    "\005\000\002\247\005\000\002\250\003\000\002\250\002" +
    "\000\002\251\005\000\002\251\002\000\002\253\005\000" +
    "\002\254\004\000\002\254\002\000\002\255\005\000\002" +
    "\255\002\000\002\256\003\000\002\256\002\000\002\375" +
    "\004\000\002\375\004\000\002\257\005\000\002\260\003" +
    "\000\002\260\003\000\002\261\003\000\002\261\003\000" +
    "\002\261\002\000\002\262\003\000\002\262\003\000\002" +
    "\263\004\000\002\264\004\000\002\264\002\000\002\265" +
    "\004\000\002\266\004\000\002\266\002\000\002\267\013" +
    "\000\002\270\003\000\002\270\003\000\002\271\004\000" +
    "\002\271\002\000\002\272\003\000\002\272\002\000\002" +
    "\273\005\000\002\274\004\000\002\274\002\000\002\275" +
    "\005\000\002\275\005\000\002\275\004\000\002\276\004" +
    "\000\002\276\002\000\002\277\003\000\002\277\002\000" +
    "\002\300\003\000\002\300\003\000\002\301\004\000\002" +
    "\301\002\000\002\302\004\000\002\303\003\000\002\303" +
    "\003\000\002\303\005\000\002\304\003\000\002\304\003" +
    "\000\002\305\004\000\002\305\002\000\002\306\003\000" +
    "\002\306\003\000\002\306\003\000\002\306\003\000\002" +
    "\307\004\000\002\307\002\000\002\310\005\000\002\311" +
    "\004\000\002\312\004\000\002\312\002\000\002\313\003" +
    "\000\002\313\002\000\002\340\015\000\002\341\003\000" +
    "\002\341\003\000\002\341\002\000\002\342\003\000\002" +
    "\342\003\000\002\342\002\000\002\343\003\000\002\343" +
    "\003\000\002\343\003\000\002\343\003\000\002\343\002" +
    "\000\002\344\003\000\002\344\003\000\002\344\003\000" +
    "\002\344\002\000\002\345\003\000\002\345\002\000\002" +
    "\346\005\000\002\346\002\000\002\347\004\000\002\347" +
    "\002\000\002\314\012\000\002\315\003\000\002\315\002" +
    "\000\002\316\004\000\002\316\002\000\002\317\006\000" +
    "\002\322\003\000\002\322\002\000\002\320\004\000\002" +
    "\321\004\000\002\321\002\000\002\323\003\000\002\323" +
    "\002\000\002\324\003\000\002\324\003\000\002\325\012" +
    "\000\002\326\007\000\002\327\005\000\002\327\003\000" +
    "\002\372\005\000\002\372\003\000\002\330\003\000\002" +
    "\330\003\000\002\330\003\000\002\330\003\000\002\330" +
    "\003\000\002\331\004\000\002\331\002\000\002\332\004" +
    "\000\002\333\003\000\002\333\003\000\002\333\007\000" +
    "\002\333\006\000\002\333\003\000\002\333\005\000\002" +
    "\334\004\000\002\334\002\000\002\335\003\000\002\335" +
    "\003\000\002\366\005\000\002\362\004\000\002\362\007" +
    "\000\002\362\005\000\002\363\006\000\002\363\004\000" +
    "\002\364\004\000\002\364\002\000\002\365\003\000\002" +
    "\365\003\000\002\365\003\000\002\365\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0397\000\040\002\uffff\003\033\066\030\111\022\157" +
    "\010\164\026\213\023\253\013\254\037\262\035\274\036" +
    "\302\034\306\032\332\004\335\042\001\002\000\010\012" +
    "\ufe42\050\ufe42\076\ufe42\001\002\000\010\037\uffe9\u0103\uffe9" +
    "\u0188\uffe9\001\002\000\010\037\045\u0103\047\u0188\046\001" +
    "\002\000\004\002\u0398\001\002\000\046\010\uff5e\012\uff5e" +
    "\016\uff5e\017\uff5e\020\uff5e\022\uff5e\042\uff5e\050\uff5e\052" +
    "\uff5e\237\uff5e\244\uff5e\275\u0353\354\u0354\377\uff5e\u012c\uff5e" +
    "\u0131\uff5e\u013c\uff5e\u013d\uff5e\001\002\000\006\012\052\050" +
    "\053\001\002\000\044\002\uffff\003\033\066\030\111\022" +
    "\132\uffff\157\010\164\026\166\uffff\213\023\253\013\254" +
    "\037\262\035\274\036\302\034\306\032\332\004\335\042" +
    "\001\002\000\004\220\u033f\001\002\000\010\037\uffe8\u0103" +
    "\uffe8\u0188\uffe8\001\002\000\044\002\uffff\003\033\066\030" +
    "\111\022\132\uffff\157\010\164\026\166\uffff\213\023\253" +
    "\013\254\037\262\035\274\036\302\034\306\032\332\004" +
    "\335\042\001\002\000\010\037\045\u0103\047\u0188\046\001" +
    "\002\000\010\037\045\u0103\047\u0188\046\001\002\000\010" +
    "\037\045\u0103\047\u0188\046\001\002\000\010\037\045\u0103" +
    "\047\u0188\046\001\002\000\006\242\u02bb\245\u02b8\001\002" +
    "\000\032\062\u012b\115\ufe19\152\ufeef\156\ufeef\220\u02cd\236" +
    "\ufeef\243\u02c8\266\u02ca\305\u02c9\315\u02ce\344\ufe19\372\ufe19" +
    "\001\002\000\010\037\045\u0103\047\u0188\046\001\002\000" +
    "\010\037\045\u0103\047\u0188\046\001\002\000\012\012\uff82" +
    "\050\uff82\172\uff82\237\116\001\002\000\010\037\045\u0103" +
    "\047\u0188\046\001\002\000\022\062\u012b\115\ufe19\220\u0128" +
    "\243\u0123\305\u0124\315\u0129\344\ufe19\372\ufe19\001\002\000" +
    "\044\002\uffff\003\033\066\030\111\022\132\uffff\157\010" +
    "\164\026\166\uffff\213\023\253\013\254\037\262\035\274" +
    "\036\302\034\306\032\332\004\335\042\001\002\000\014" +
    "\156\366\220\371\243\365\305\367\315\372\001\002\000" +
    "\010\037\045\u0103\047\u0188\046\001\002\000\006\012\052" +
    "\050\053\001\002\000\014\012\uff82\050\uff82\107\uff82\237" +
    "\116\273\uff82\001\002\000\010\012\uff82\050\uff82\237\116" +
    "\001\002\000\006\012\052\050\053\001\002\000\010\037" +
    "\045\u0103\047\u0188\046\001\002\000\010\002\000\132\000" +
    "\166\000\001\002\000\010\012\ufe43\050\ufe43\076\ufe43\001" +
    "\002\000\010\037\045\u0103\047\u0188\046\001\002\000\050" +
    "\002\ufff2\003\ufff2\066\ufff2\111\ufff2\116\ufff2\132\ufff2\157" +
    "\ufff2\164\ufff2\166\ufff2\213\ufff2\253\ufff2\254\ufff2\262\ufff2" +
    "\274\ufff2\302\ufff2\306\ufff2\316\ufff2\332\ufff2\335\ufff2\001" +
    "\002\000\056\002\uffe7\003\uffe7\037\uffe7\066\uffe7\111\uffe7" +
    "\116\uffe7\132\uffe7\157\uffe7\164\uffe7\166\uffe7\213\uffe7\253" +
    "\uffe7\254\uffe7\262\uffe7\274\uffe7\302\uffe7\306\uffe7\316\uffe7" +
    "\332\uffe7\335\uffe7\u0103\uffe7\u0188\uffe7\001\002\000\056\002" +
    "\uffe5\003\uffe5\037\uffe5\066\uffe5\111\uffe5\116\uffe5\132\uffe5" +
    "\157\uffe5\164\uffe5\166\uffe5\213\uffe5\253\uffe5\254\uffe5\262" +
    "\uffe5\274\uffe5\302\uffe5\306\uffe5\316\uffe5\332\uffe5\335\uffe5" +
    "\u0103\uffe5\u0188\uffe5\001\002\000\056\002\uffe6\003\uffe6\037" +
    "\uffe6\066\uffe6\111\uffe6\116\uffe6\132\uffe6\157\uffe6\164\uffe6" +
    "\166\uffe6\213\uffe6\253\uffe6\254\uffe6\262\uffe6\274\uffe6\302" +
    "\uffe6\306\uffe6\316\uffe6\332\uffe6\335\uffe6\u0103\uffe6\u0188\uffe6" +
    "\001\002\000\044\002\uffee\003\uffee\066\uffee\111\uffee\132" +
    "\uffee\157\uffee\164\uffee\166\uffee\213\uffee\253\uffee\254\uffee" +
    "\262\uffee\274\uffee\302\uffee\306\uffee\332\uffee\335\uffee\001" +
    "\002\000\004\240\056\001\002\000\256\005\uffe4\006\uffe4" +
    "\007\uffe4\010\uffe4\011\uffe4\012\uffe4\016\uffe4\017\uffe4\020" +
    "\uffe4\022\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4\031\uffe4" +
    "\037\uffe4\040\uffe4\041\uffe4\042\uffe4\050\uffe4\052\uffe4\055" +
    "\uffe4\060\uffe4\061\uffe4\062\uffe4\066\uffe4\074\uffe4\076\uffe4" +
    "\077\uffe4\102\uffe4\107\uffe4\111\uffe4\112\uffe4\114\uffe4\116" +
    "\uffe4\126\uffe4\127\uffe4\131\uffe4\137\uffe4\140\uffe4\141\uffe4" +
    "\152\uffe4\153\uffe4\160\uffe4\161\uffe4\174\uffe4\175\uffe4\176" +
    "\uffe4\200\uffe4\211\uffe4\214\uffe4\236\uffe4\240\uffe4\241\uffe4" +
    "\244\uffe4\257\uffe4\266\uffe4\267\uffe4\303\uffe4\306\uffe4\307" +
    "\uffe4\311\uffe4\326\uffe4\334\uffe4\336\uffe4\364\uffe4\370\uffe4" +
    "\376\uffe4\u0103\uffe4\u0104\uffe4\u0111\uffe4\u011a\uffe4\u011d\uffe4\u0120" +
    "\uffe4\u0133\uffe4\u013f\uffe4\u0149\uffe4\u014c\uffe4\u0159\uffe4\u015a\uffe4" +
    "\u015f\uffe4\u016a\uffe4\u0188\uffe4\u0189\uffe4\u018a\uffe4\u018b\uffe4\001" +
    "\002\000\004\012\054\001\002\000\004\053\055\001\002" +
    "\000\256\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012" +
    "\uffe3\016\uffe3\017\uffe3\020\uffe3\022\uffe3\024\uffe3\025\uffe3" +
    "\026\uffe3\027\uffe3\031\uffe3\037\uffe3\040\uffe3\041\uffe3\042" +
    "\uffe3\050\uffe3\052\uffe3\055\uffe3\060\uffe3\061\uffe3\062\uffe3" +
    "\066\uffe3\074\uffe3\076\uffe3\077\uffe3\102\uffe3\107\uffe3\111" +
    "\uffe3\112\uffe3\114\uffe3\116\uffe3\126\uffe3\127\uffe3\131\uffe3" +
    "\137\uffe3\140\uffe3\141\uffe3\152\uffe3\153\uffe3\160\uffe3\161" +
    "\uffe3\174\uffe3\175\uffe3\176\uffe3\200\uffe3\211\uffe3\214\uffe3" +
    "\236\uffe3\240\uffe3\241\uffe3\244\uffe3\257\uffe3\266\uffe3\267" +
    "\uffe3\303\uffe3\306\uffe3\307\uffe3\311\uffe3\326\uffe3\334\uffe3" +
    "\336\uffe3\364\uffe3\370\uffe3\376\uffe3\u0103\uffe3\u0104\uffe3\u0111" +
    "\uffe3\u011a\uffe3\u011d\uffe3\u0120\uffe3\u0133\uffe3\u013f\uffe3\u0149\uffe3" +
    "\u014c\uffe3\u0159\uffe3\u015a\uffe3\u015f\uffe3\u016a\uffe3\u0188\uffe3\u0189" +
    "\uffe3\u018a\uffe3\u018b\uffe3\001\002\000\034\074\ufe30\u0101\057" +
    "\u010a\ufe30\u0137\060\u0175\ufe30\u0176\ufe30\u0177\ufe30\u0178\ufe30\u0179" +
    "\ufe30\u017a\ufe30\u017b\ufe30\u017c\ufe30\u017d\ufe30\001\002\000\030" +
    "\074\ufe31\u010a\ufe31\u0175\ufe31\u0176\ufe31\u0177\ufe31\u0178\ufe31\u0179" +
    "\ufe31\u017a\ufe31\u017b\ufe31\u017c\ufe31\u017d\ufe31\001\002\000\030" +
    "\074\ufe32\u010a\ufe32\u0175\ufe32\u0176\ufe32\u0177\ufe32\u0178\ufe32\u0179" +
    "\ufe32\u017a\ufe32\u017b\ufe32\u017c\ufe32\u017d\ufe32\001\002\000\030" +
    "\074\ufe2d\u010a\064\u0175\062\u0176\ufe2d\u0177\ufe2d\u0178\ufe2d\u0179" +
    "\ufe2d\u017a\ufe2d\u017b\ufe2d\u017c\ufe2d\u017d\ufe2d\001\002\000\024" +
    "\074\ufe2e\u0176\ufe2e\u0177\ufe2e\u0178\ufe2e\u0179\ufe2e\u017a\ufe2e\u017b" +
    "\ufe2e\u017c\ufe2e\u017d\ufe2e\001\002\000\024\074\ufe28\u0176\065" +
    "\u0177\066\u0178\067\u0179\071\u017a\ufe28\u017b\ufe28\u017c\ufe28\u017d" +
    "\ufe28\001\002\000\024\074\ufe2f\u0176\ufe2f\u0177\ufe2f\u0178\ufe2f" +
    "\u0179\ufe2f\u017a\ufe2f\u017b\ufe2f\u017c\ufe2f\u017d\ufe2f\001\002\000" +
    "\014\074\ufe2c\u017a\ufe2c\u017b\ufe2c\u017c\ufe2c\u017d\ufe2c\001\002" +
    "\000\014\074\ufe2b\u017a\ufe2b\u017b\ufe2b\u017c\ufe2b\u017d\ufe2b\001" +
    "\002\000\014\074\ufe2a\u017a\ufe2a\u017b\ufe2a\u017c\ufe2a\u017d\ufe2a" +
    "\001\002\000\014\074\ufe24\u017a\075\u017b\074\u017c\073\u017d" +
    "\ufe24\001\002\000\014\074\ufe29\u017a\ufe29\u017b\ufe29\u017c\ufe29" +
    "\u017d\ufe29\001\002\000\006\074\ufe22\u017d\077\001\002\000" +
    "\006\074\ufe25\u017d\ufe25\001\002\000\006\074\ufe26\u017d\ufe26" +
    "\001\002\000\006\074\ufe27\u017d\ufe27\001\002\000\004\074" +
    "\100\001\002\000\004\074\ufe23\001\002\000\004\157\010" +
    "\001\002\000\012\037\ufe20\074\103\u0103\ufe20\u0188\ufe20\001" +
    "\002\000\010\037\ufe33\u0103\ufe33\u0188\ufe33\001\002\000\004" +
    "\274\104\001\002\000\012\037\ufe1e\252\106\u0103\ufe1e\u0188" +
    "\ufe1e\001\002\000\010\037\ufe21\u0103\ufe21\u0188\ufe21\001\002" +
    "\000\006\012\052\050\053\001\002\000\014\037\uff62\040" +
    "\112\055\uff62\u0103\uff62\u0188\uff62\001\002\000\010\037\ufe1f" +
    "\u0103\ufe1f\u0188\ufe1f\001\002\000\012\037\uff64\055\uff64\u0103" +
    "\uff64\u0188\uff64\001\002\000\006\012\052\050\053\001\002" +
    "\000\014\037\uff62\040\112\055\uff62\u0103\uff62\u0188\uff62\001" +
    "\002\000\012\037\uff63\055\uff63\u0103\uff63\u0188\uff63\001\002" +
    "\000\006\012\052\050\053\001\002\000\004\052\117\001" +
    "\002\000\004\016\120\001\002\000\004\055\121\001\002" +
    "\000\050\010\uff80\012\uff80\016\uff80\017\uff80\020\uff80\022" +
    "\uff80\042\uff80\050\uff80\052\uff80\107\uff80\172\uff80\244\uff80" +
    "\273\uff80\322\123\377\uff80\u012c\uff80\u0131\uff80\u013c\uff80\u013d" +
    "\uff80\001\002\000\046\010\uff83\012\uff83\016\uff83\017\uff83" +
    "\020\uff83\022\uff83\042\uff83\050\uff83\052\uff83\107\uff83\172" +
    "\uff83\244\uff83\273\uff83\377\uff83\u012c\uff83\u0131\uff83\u013c\uff83" +
    "\u013d\uff83\001\002\000\046\010\uff81\012\uff81\016\uff81\017" +
    "\uff81\020\uff81\022\uff81\042\uff81\050\uff81\052\uff81\107\uff81" +
    "\172\uff81\244\uff81\273\uff81\377\uff81\u012c\uff81\u0131\uff81\u013c" +
    "\uff81\u013d\uff81\001\002\000\144\005\uffdd\006\uffdd\007\uffdd" +
    "\010\uffdd\011\uffdd\012\uffdd\020\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\031\uffdd\037\uffdd\040\uffdd\041\330\050\uffdd" +
    "\052\uffdd\055\uffdd\060\uffdd\061\uffdd\062\uffdd\066\uffdd\074" +
    "\uffdd\076\uffdd\107\uffdd\112\uffdd\114\uffdd\126\uffdd\127\uffdd" +
    "\131\uffdd\153\uffdd\160\uffdd\161\uffdd\175\uffdd\176\uffdd\200" +
    "\uffdd\211\uffdd\214\uffdd\241\uffdd\257\uffdd\267\uffdd\306\uffdd" +
    "\307\uffdd\311\uffdd\326\uffdd\370\uffdd\u0103\uffdd\u015f\uffdd\u0188" +
    "\uffdd\001\002\000\004\176\126\001\002\000\006\012\052" +
    "\050\053\001\002\000\004\005\320\001\002\000\014\037" +
    "\uff2c\107\132\326\uff2c\u0103\uff2c\u0188\uff2c\001\002\000\012" +
    "\037\uff6a\326\140\u0103\uff6a\u0188\uff6a\001\002\000\006\012" +
    "\052\050\053\001\002\000\014\037\uff35\040\134\326\uff35" +
    "\u0103\uff35\u0188\uff35\001\002\000\006\012\052\050\053\001" +
    "\002\000\012\037\uff2d\326\uff2d\u0103\uff2d\u0188\uff2d\001\002" +
    "\000\014\037\uff35\040\134\326\uff35\u0103\uff35\u0188\uff35\001" +
    "\002\000\012\037\uff36\326\uff36\u0103\uff36\u0188\uff36\001\002" +
    "\000\040\012\uff84\016\uff84\017\uff84\020\uff84\022\uff84\042" +
    "\uff84\050\uff84\052\142\241\145\244\uff84\377\uff84\u012c\uff84" +
    "\u0131\uff84\u013c\uff84\u013d\uff84\001\002\000\010\037\uff33\u0103" +
    "\uff33\u0188\uff33\001\002\000\040\012\uff84\016\uff84\017\uff84" +
    "\020\uff84\022\uff84\042\uff84\050\uff84\052\142\241\145\244" +
    "\uff84\377\uff84\u012c\uff84\u0131\uff84\u013c\uff84\u013d\uff84\001\002" +
    "\000\036\012\052\016\154\017\163\020\170\022\147\042" +
    "\150\050\053\052\165\244\166\377\160\u012c\146\u0131\167" +
    "\u013c\164\u013d\162\001\002\000\024\037\uff6b\055\uff6b\074" +
    "\uff6b\126\uff6b\131\uff6b\311\uff6b\u0103\uff6b\u015f\uff6b\u0188\uff6b" +
    "\001\002\000\044\012\uff85\016\uff85\017\uff85\020\uff85\022" +
    "\uff85\042\uff85\050\uff85\052\uff85\114\uff85\153\uff85\214\uff85" +
    "\244\uff85\377\uff85\u012c\uff85\u0131\uff85\u013c\uff85\u013d\uff85\001" +
    "\002\000\004\052\313\001\002\000\124\005\uff97\006\uff97" +
    "\007\uff97\010\uff97\011\uff97\012\uff97\020\uff97\024\uff97\025" +
    "\uff97\026\uff97\027\uff97\031\uff97\037\uff97\040\uff97\050\uff97" +
    "\055\uff97\061\uff97\062\uff97\074\uff97\076\uff97\107\uff97\112" +
    "\uff97\114\uff97\126\uff97\127\uff97\131\uff97\153\uff97\160\uff97" +
    "\161\uff97\175\uff97\200\uff97\211\uff97\214\uff97\241\uff97\267" +
    "\uff97\311\uff97\326\uff97\370\uff97\u0103\uff97\u015f\uff97\u0188\uff97" +
    "\001\002\000\004\012\312\001\002\000\124\005\uff9a\006" +
    "\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\020\uff9a\024\uff9a" +
    "\025\uff9a\026\uff9a\027\uff9a\031\uff9a\037\uff9a\040\uff9a\050" +
    "\uff9a\055\uff9a\061\uff9a\062\uff9a\074\uff9a\076\uff9a\107\uff9a" +
    "\112\uff9a\114\uff9a\126\uff9a\127\uff9a\131\uff9a\153\uff9a\160" +
    "\uff9a\161\uff9a\175\uff9a\200\uff9a\211\uff9a\214\uff9a\241\uff9a" +
    "\267\uff9a\311\uff9a\326\uff9a\370\uff9a\u0103\uff9a\u015f\uff9a\u0188" +
    "\uff9a\001\002\000\030\005\302\024\303\025\301\026\276" +
    "\027\274\031\277\114\uff84\153\uff84\175\305\214\uff84\241" +
    "\145\001\002\000\124\005\uff9c\006\uff9c\007\uff9c\010\267" +
    "\011\265\012\uff9c\020\uff9c\024\uff9c\025\uff9c\026\uff9c\027" +
    "\uff9c\031\uff9c\037\uff9c\040\uff9c\050\uff9c\055\uff9c\061\uff9c" +
    "\062\uff9c\074\uff9c\076\uff9c\107\uff9c\112\uff9c\114\uff9c\126" +
    "\uff9c\127\uff9c\131\uff9c\153\uff9c\160\uff9c\161\uff9c\175\uff9c" +
    "\200\uff9c\211\uff9c\214\uff9c\241\uff9c\267\uff9c\311\uff9c\326" +
    "\uff9c\370\uff9c\u0103\uff9c\u015f\uff9c\u0188\uff9c\001\002\000\124" +
    "\005\uff98\006\uff98\007\uff98\010\uff98\011\uff98\012\uff98\020" +
    "\uff98\024\uff98\025\uff98\026\uff98\027\uff98\031\uff98\037\uff98" +
    "\040\uff98\050\uff98\055\uff98\061\uff98\062\uff98\074\uff98\076" +
    "\uff98\107\uff98\112\uff98\114\uff98\126\uff98\127\uff98\131\uff98" +
    "\153\uff98\160\uff98\161\uff98\175\uff98\200\uff98\211\uff98\214" +
    "\uff98\241\uff98\267\uff98\311\uff98\326\uff98\370\uff98\u0103\uff98" +
    "\u015f\uff98\u0188\uff98\001\002\000\120\005\uffa0\006\257\007" +
    "\256\012\uffa0\020\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0" +
    "\031\uffa0\037\uffa0\040\uffa0\050\uffa0\055\uffa0\061\uffa0\062" +
    "\uffa0\074\uffa0\076\uffa0\107\uffa0\112\uffa0\114\uffa0\126\uffa0" +
    "\127\uffa0\131\uffa0\153\uffa0\160\uffa0\161\uffa0\175\uffa0\200" +
    "\uffa0\211\uffa0\214\uffa0\241\uffa0\267\uffa0\311\uffa0\326\uffa0" +
    "\370\uffa0\u0103\uffa0\u015f\uffa0\u0188\uffa0\001\002\000\130\005" +
    "\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\020\uffda" +
    "\024\uffda\025\uffda\026\uffda\027\uffda\031\uffda\037\uffda\040" +
    "\uffda\041\254\050\uffda\052\uffda\055\uffda\061\uffda\062\uffda" +
    "\074\uffda\076\uffda\107\uffda\112\uffda\114\uffda\126\uffda\127" +
    "\uffda\131\uffda\153\uffda\160\uffda\161\uffda\175\uffda\200\uffda" +
    "\211\uffda\214\uffda\241\uffda\267\uffda\311\uffda\326\uffda\370" +
    "\uffda\u0103\uffda\u015f\uffda\u0188\uffda\001\002\000\046\037\uff79" +
    "\040\uff79\055\uff79\061\246\062\247\074\uff79\112\uff79\126" +
    "\uff79\127\uff79\131\uff79\161\uff79\200\uff79\211\uff79\311\uff79" +
    "\326\uff79\u0103\uff79\u015f\uff79\u0188\uff79\001\002\000\004\052" +
    "\244\001\002\000\124\005\uff93\006\uff93\007\uff93\010\uff93" +
    "\011\uff93\012\uff93\020\uff93\024\uff93\025\uff93\026\uff93\027" +
    "\uff93\031\uff93\037\uff93\040\uff93\050\uff93\055\uff93\061\uff93" +
    "\062\uff93\074\uff93\076\uff93\107\uff93\112\uff93\114\uff93\126" +
    "\uff93\127\uff93\131\uff93\153\uff93\160\uff93\161\uff93\175\uff93" +
    "\200\uff93\211\uff93\214\uff93\241\uff93\267\uff93\311\uff93\326" +
    "\uff93\370\uff93\u0103\uff93\u015f\uff93\u0188\uff93\001\002\000\004" +
    "\052\242\001\002\000\124\005\uff95\006\uff95\007\uff95\010" +
    "\uff95\011\uff95\012\uff95\020\uff95\024\uff95\025\uff95\026\uff95" +
    "\027\uff95\031\uff95\037\uff95\040\uff95\050\uff95\055\uff95\061" +
    "\uff95\062\uff95\074\uff95\076\uff95\107\uff95\112\uff95\114\uff95" +
    "\126\uff95\127\uff95\131\uff95\153\uff95\160\uff95\161\uff95\175" +
    "\uff95\200\uff95\211\uff95\214\uff95\241\uff95\267\uff95\311\uff95" +
    "\326\uff95\370\uff95\u0103\uff95\u015f\uff95\u0188\uff95\001\002\000" +
    "\004\052\240\001\002\000\036\012\052\016\154\017\163" +
    "\020\170\022\147\042\150\050\053\052\165\244\166\377" +
    "\160\u012c\146\u0131\167\u013c\164\u013d\162\001\002\000\124" +
    "\005\uff94\006\uff94\007\uff94\010\uff94\011\uff94\012\uff94\020" +
    "\uff94\024\uff94\025\uff94\026\uff94\027\uff94\031\uff94\037\uff94" +
    "\040\uff94\050\uff94\055\uff94\061\uff94\062\uff94\074\uff94\076" +
    "\uff94\107\uff94\112\uff94\114\uff94\126\uff94\127\uff94\131\uff94" +
    "\153\uff94\160\uff94\161\uff94\175\uff94\200\uff94\211\uff94\214" +
    "\uff94\241\uff94\267\uff94\311\uff94\326\uff94\370\uff94\u0103\uff94" +
    "\u015f\uff94\u0188\uff94\001\002\000\004\052\207\001\002\000" +
    "\124\005\uff96\006\uff96\007\uff96\010\uff96\011\uff96\012\uff96" +
    "\020\uff96\024\uff96\025\uff96\026\uff96\027\uff96\031\uff96\037" +
    "\uff96\040\uff96\050\uff96\055\uff96\061\uff96\062\uff96\074\uff96" +
    "\076\uff96\107\uff96\112\uff96\114\uff96\126\uff96\127\uff96\131" +
    "\uff96\153\uff96\160\uff96\161\uff96\175\uff96\200\uff96\211\uff96" +
    "\214\uff96\241\uff96\267\uff96\311\uff96\326\uff96\370\uff96\u0103" +
    "\uff96\u015f\uff96\u0188\uff96\001\002\000\126\005\uff8c\006\uff8c" +
    "\007\uff8c\010\uff8c\011\uff8c\012\uff8c\020\uff8c\024\uff8c\025" +
    "\uff8c\026\uff8c\027\uff8c\031\uff8c\037\uff8c\040\uff8c\050\uff8c" +
    "\052\172\055\uff8c\061\uff8c\062\uff8c\074\uff8c\076\uff8c\107" +
    "\uff8c\112\uff8c\114\uff8c\126\uff8c\127\uff8c\131\uff8c\153\uff8c" +
    "\160\uff8c\161\uff8c\175\uff8c\200\uff8c\211\uff8c\214\uff8c\241" +
    "\uff8c\267\uff8c\311\uff8c\326\uff8c\370\uff8c\u0103\uff8c\u015f\uff8c" +
    "\u0188\uff8c\001\002\000\014\016\201\017\200\020\174\022" +
    "\176\042\150\001\002\000\124\005\uff99\006\uff99\007\uff99" +
    "\010\uff99\011\uff99\012\uff99\020\uff99\024\uff99\025\uff99\026" +
    "\uff99\027\uff99\031\uff99\037\uff99\040\uff99\050\uff99\055\uff99" +
    "\061\uff99\062\uff99\074\uff99\076\uff99\107\uff99\112\uff99\114" +
    "\uff99\126\uff99\127\uff99\131\uff99\153\uff99\160\uff99\161\uff99" +
    "\175\uff99\200\uff99\211\uff99\214\uff99\241\uff99\267\uff99\311" +
    "\uff99\326\uff99\370\uff99\u0103\uff99\u015f\uff99\u0188\uff99\001\002" +
    "\000\010\040\ufe05\055\ufe05\316\ufe05\001\002\000\006\040" +
    "\205\055\uff89\001\002\000\010\040\ufe06\055\ufe06\316\ufe06" +
    "\001\002\000\010\040\ufe08\055\ufe08\316\ufe08\001\002\000" +
    "\010\040\ufe04\055\ufe04\316\ufe04\001\002\000\010\040\ufe07" +
    "\055\ufe07\316\ufe07\001\002\000\004\055\203\001\002\000" +
    "\124\005\uff8d\006\uff8d\007\uff8d\010\uff8d\011\uff8d\012\uff8d" +
    "\020\uff8d\024\uff8d\025\uff8d\026\uff8d\027\uff8d\031\uff8d\037" +
    "\uff8d\040\uff8d\050\uff8d\055\uff8d\061\uff8d\062\uff8d\074\uff8d" +
    "\076\uff8d\107\uff8d\112\uff8d\114\uff8d\126\uff8d\127\uff8d\131" +
    "\uff8d\153\uff8d\160\uff8d\161\uff8d\175\uff8d\200\uff8d\211\uff8d" +
    "\214\uff8d\241\uff8d\267\uff8d\311\uff8d\326\uff8d\370\uff8d\u0103" +
    "\uff8d\u015f\uff8d\u0188\uff8d\001\002\000\004\055\uff8b\001\002" +
    "\000\014\016\201\017\200\020\174\022\176\042\150\001" +
    "\002\000\004\055\uff8a\001\002\000\012\010\213\012\052" +
    "\016\212\050\053\001\002\000\004\055\216\001\002\000" +
    "\124\005\uff8e\006\uff8e\007\uff8e\010\uff8e\011\uff8e\012\uff8e" +
    "\020\uff8e\024\uff8e\025\uff8e\026\uff8e\027\uff8e\031\uff8e\037" +
    "\uff8e\040\uff8e\050\uff8e\055\uff8e\061\uff8e\062\uff8e\074\uff8e" +
    "\076\uff8e\107\uff8e\112\uff8e\114\uff8e\126\uff8e\127\uff8e\131" +
    "\uff8e\153\uff8e\160\uff8e\161\uff8e\175\uff8e\200\uff8e\211\uff8e" +
    "\214\uff8e\241\uff8e\267\uff8e\311\uff8e\326\uff8e\370\uff8e\u0103" +
    "\uff8e\u015f\uff8e\u0188\uff8e\001\002\000\004\055\215\001\002" +
    "\000\004\055\214\001\002\000\124\005\uff86\006\uff86\007" +
    "\uff86\010\uff86\011\uff86\012\uff86\020\uff86\024\uff86\025\uff86" +
    "\026\uff86\027\uff86\031\uff86\037\uff86\040\uff86\050\uff86\055" +
    "\uff86\061\uff86\062\uff86\074\uff86\076\uff86\107\uff86\112\uff86" +
    "\114\uff86\126\uff86\127\uff86\131\uff86\153\uff86\160\uff86\161" +
    "\uff86\175\uff86\200\uff86\211\uff86\214\uff86\241\uff86\267\uff86" +
    "\311\uff86\326\uff86\370\uff86\u0103\uff86\u015f\uff86\u0188\uff86\001" +
    "\002\000\124\005\uff87\006\uff87\007\uff87\010\uff87\011\uff87" +
    "\012\uff87\020\uff87\024\uff87\025\uff87\026\uff87\027\uff87\031" +
    "\uff87\037\uff87\040\uff87\050\uff87\055\uff87\061\uff87\062\uff87" +
    "\074\uff87\076\uff87\107\uff87\112\uff87\114\uff87\126\uff87\127" +
    "\uff87\131\uff87\153\uff87\160\uff87\161\uff87\175\uff87\200\uff87" +
    "\211\uff87\214\uff87\241\uff87\267\uff87\311\uff87\326\uff87\370" +
    "\uff87\u0103\uff87\u015f\uff87\u0188\uff87\001\002\000\124\005\uff88" +
    "\006\uff88\007\uff88\010\uff88\011\uff88\012\uff88\020\uff88\024" +
    "\uff88\025\uff88\026\uff88\027\uff88\031\uff88\037\uff88\040\uff88" +
    "\050\uff88\055\uff88\061\uff88\062\uff88\074\uff88\076\uff88\107" +
    "\uff88\112\uff88\114\uff88\126\uff88\127\uff88\131\uff88\153\uff88" +
    "\160\uff88\161\uff88\175\uff88\200\uff88\211\uff88\214\uff88\241" +
    "\uff88\267\uff88\311\uff88\326\uff88\370\uff88\u0103\uff88\u015f\uff88" +
    "\u0188\uff88\001\002\000\010\114\222\153\221\214\220\001" +
    "\002\000\036\012\052\016\154\017\163\020\170\022\147" +
    "\042\150\050\053\052\165\244\166\377\160\u012c\146\u0131" +
    "\167\u013c\164\u013d\162\001\002\000\004\052\230\001\002" +
    "\000\036\012\052\016\154\017\163\020\170\022\147\042" +
    "\150\050\053\052\165\244\166\377\160\u012c\146\u0131\167" +
    "\u013c\164\u013d\162\001\002\000\004\055\224\001\002\000" +
    "\124\005\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b" +
    "\020\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\031\uff9b\037" +
    "\uff9b\040\uff9b\050\uff9b\055\uff9b\061\uff9b\062\uff9b\074\uff9b" +
    "\076\uff9b\107\uff9b\112\uff9b\114\uff9b\126\uff9b\127\uff9b\131" +
    "\uff9b\153\uff9b\160\uff9b\161\uff9b\175\uff9b\200\uff9b\211\uff9b" +
    "\214\uff9b\241\uff9b\267\uff9b\311\uff9b\326\uff9b\370\uff9b\u0103" +
    "\uff9b\u015f\uff9b\u0188\uff9b\001\002\000\004\061\226\001\002" +
    "\000\036\012\052\016\154\017\163\020\170\022\147\042" +
    "\150\050\053\052\165\244\166\377\160\u012c\146\u0131\167" +
    "\u013c\164\u013d\162\001\002\000\046\037\uff6d\040\uff6d\055" +
    "\uff6d\061\uff6d\062\uff6d\074\uff6d\112\uff6d\126\uff6d\127\uff6d" +
    "\131\uff6d\161\uff6d\200\uff6d\211\uff6d\311\uff6d\326\uff6d\u0103" +
    "\uff6d\u015f\uff6d\u0188\uff6d\001\002\000\036\012\052\016\154" +
    "\017\163\020\170\022\147\042\150\050\053\052\165\244" +
    "\166\377\160\u012c\146\u0131\167\u013c\164\u013d\162\001\002" +
    "\000\006\040\232\055\uff7e\001\002\000\036\012\052\016" +
    "\154\017\163\020\170\022\147\042\150\050\053\052\165" +
    "\244\166\377\160\u012c\146\u0131\167\u013c\164\u013d\162\001" +
    "\002\000\004\055\234\001\002\000\046\037\uff6e\040\uff6e" +
    "\055\uff6e\061\uff6e\062\uff6e\074\uff6e\112\uff6e\126\uff6e\127" +
    "\uff6e\131\uff6e\161\uff6e\200\uff6e\211\uff6e\311\uff6e\326\uff6e" +
    "\u0103\uff6e\u015f\uff6e\u0188\uff6e\001\002\000\006\040\232\055" +
    "\uff7e\001\002\000\004\055\uff7f\001\002\000\046\037\uff6c" +
    "\040\uff6c\055\uff6c\061\uff6c\062\uff6c\074\uff6c\112\uff6c\126" +
    "\uff6c\127\uff6c\131\uff6c\161\uff6c\200\uff6c\211\uff6c\311\uff6c" +
    "\326\uff6c\u0103\uff6c\u015f\uff6c\u0188\uff6c\001\002\000\012\010" +
    "\213\012\052\016\212\050\053\001\002\000\124\005\uff8f" +
    "\006\uff8f\007\uff8f\010\uff8f\011\uff8f\012\uff8f\020\uff8f\024" +
    "\uff8f\025\uff8f\026\uff8f\027\uff8f\031\uff8f\037\uff8f\040\uff8f" +
    "\050\uff8f\055\uff8f\061\uff8f\062\uff8f\074\uff8f\076\uff8f\107" +
    "\uff8f\112\uff8f\114\uff8f\126\uff8f\127\uff8f\131\uff8f\153\uff8f" +
    "\160\uff8f\161\uff8f\175\uff8f\200\uff8f\211\uff8f\214\uff8f\241" +
    "\uff8f\267\uff8f\311\uff8f\326\uff8f\370\uff8f\u0103\uff8f\u015f\uff8f" +
    "\u0188\uff8f\001\002\000\012\010\213\012\052\016\212\050" +
    "\053\001\002\000\124\005\uff90\006\uff90\007\uff90\010\uff90" +
    "\011\uff90\012\uff90\020\uff90\024\uff90\025\uff90\026\uff90\027" +
    "\uff90\031\uff90\037\uff90\040\uff90\050\uff90\055\uff90\061\uff90" +
    "\062\uff90\074\uff90\076\uff90\107\uff90\112\uff90\114\uff90\126" +
    "\uff90\127\uff90\131\uff90\153\uff90\160\uff90\161\uff90\175\uff90" +
    "\200\uff90\211\uff90\214\uff90\241\uff90\267\uff90\311\uff90\326" +
    "\uff90\370\uff90\u0103\uff90\u015f\uff90\u0188\uff90\001\002\000\012" +
    "\010\213\012\052\016\212\050\053\001\002\000\124\005" +
    "\uff91\006\uff91\007\uff91\010\uff91\011\uff91\012\uff91\020\uff91" +
    "\024\uff91\025\uff91\026\uff91\027\uff91\031\uff91\037\uff91\040" +
    "\uff91\050\uff91\055\uff91\061\uff91\062\uff91\074\uff91\076\uff91" +
    "\107\uff91\112\uff91\114\uff91\126\uff91\127\uff91\131\uff91\153" +
    "\uff91\160\uff91\161\uff91\175\uff91\200\uff91\211\uff91\214\uff91" +
    "\241\uff91\267\uff91\311\uff91\326\uff91\370\uff91\u0103\uff91\u015f" +
    "\uff91\u0188\uff91\001\002\000\040\012\uff84\016\uff84\017\uff84" +
    "\020\uff84\022\uff84\042\uff84\050\uff84\052\142\241\145\244" +
    "\uff84\377\uff84\u012c\uff84\u0131\uff84\u013c\uff84\u013d\uff84\001\002" +
    "\000\040\012\uff84\016\uff84\017\uff84\020\uff84\022\uff84\042" +
    "\uff84\050\uff84\052\142\241\145\244\uff84\377\uff84\u012c\uff84" +
    "\u0131\uff84\u013c\uff84\u013d\uff84\001\002\000\042\037\uff7d\040" +
    "\uff7d\055\uff7d\074\uff7d\112\uff7d\126\uff7d\127\uff7d\131\uff7d" +
    "\161\uff7d\200\uff7d\211\uff7d\311\uff7d\326\uff7d\u0103\uff7d\u015f" +
    "\uff7d\u0188\uff7d\001\002\000\042\037\uff7a\040\uff7a\055\uff7a" +
    "\074\uff7a\112\uff7a\126\uff7a\127\uff7a\131\uff7a\161\uff7a\200" +
    "\uff7a\211\uff7a\311\uff7a\326\uff7a\u0103\uff7a\u015f\uff7a\u0188\uff7a" +
    "\001\002\000\042\037\uff7b\040\uff7b\055\uff7b\074\uff7b\112" +
    "\uff7b\126\uff7b\127\uff7b\131\uff7b\161\uff7b\200\uff7b\211\uff7b" +
    "\311\uff7b\326\uff7b\u0103\uff7b\u015f\uff7b\u0188\uff7b\001\002\000" +
    "\126\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc" +
    "\020\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\031\uffdc\037" +
    "\uffdc\040\uffdc\050\uffdc\052\uffdc\055\uffdc\061\uffdc\062\uffdc" +
    "\074\uffdc\076\uffdc\107\uffdc\112\uffdc\114\uffdc\126\uffdc\127" +
    "\uffdc\131\uffdc\153\uffdc\160\uffdc\161\uffdc\175\uffdc\200\uffdc" +
    "\211\uffdc\214\uffdc\241\uffdc\267\uffdc\311\uffdc\326\uffdc\370" +
    "\uffdc\u0103\uffdc\u015f\uffdc\u0188\uffdc\001\002\000\006\012\052" +
    "\050\053\001\002\000\126\005\uffdb\006\uffdb\007\uffdb\010" +
    "\uffdb\011\uffdb\012\uffdb\020\uffdb\024\uffdb\025\uffdb\026\uffdb" +
    "\027\uffdb\031\uffdb\037\uffdb\040\uffdb\050\uffdb\052\uffdb\055" +
    "\uffdb\061\uffdb\062\uffdb\074\uffdb\076\uffdb\107\uffdb\112\uffdb" +
    "\114\uffdb\126\uffdb\127\uffdb\131\uffdb\153\uffdb\160\uffdb\161" +
    "\uffdb\175\uffdb\200\uffdb\211\uffdb\214\uffdb\241\uffdb\267\uffdb" +
    "\311\uffdb\326\uffdb\370\uffdb\u0103\uffdb\u015f\uffdb\u0188\uffdb\001" +
    "\002\000\036\012\052\016\154\017\163\020\170\022\147" +
    "\042\150\050\053\052\165\244\166\377\160\u012c\146\u0131" +
    "\167\u013c\164\u013d\162\001\002\000\036\012\052\016\154" +
    "\017\163\020\170\022\147\042\150\050\053\052\165\244" +
    "\166\377\160\u012c\146\u0131\167\u013c\164\u013d\162\001\002" +
    "\000\114\005\uffa3\012\uffa3\020\uffa3\024\uffa3\025\uffa3\026" +
    "\uffa3\027\uffa3\031\uffa3\037\uffa3\040\uffa3\050\uffa3\055\uffa3" +
    "\061\uffa3\062\uffa3\074\uffa3\076\uffa3\107\uffa3\112\uffa3\114" +
    "\uffa3\126\uffa3\127\uffa3\131\uffa3\153\uffa3\160\uffa3\161\uffa3" +
    "\175\uffa3\200\uffa3\211\uffa3\214\uffa3\241\uffa3\267\uffa3\311" +
    "\uffa3\326\uffa3\370\uffa3\u0103\uffa3\u015f\uffa3\u0188\uffa3\001\002" +
    "\000\120\005\uffa0\006\257\007\256\012\uffa0\020\uffa0\024" +
    "\uffa0\025\uffa0\026\uffa0\027\uffa0\031\uffa0\037\uffa0\040\uffa0" +
    "\050\uffa0\055\uffa0\061\uffa0\062\uffa0\074\uffa0\076\uffa0\107" +
    "\uffa0\112\uffa0\114\uffa0\126\uffa0\127\uffa0\131\uffa0\153\uffa0" +
    "\160\uffa0\161\uffa0\175\uffa0\200\uffa0\211\uffa0\214\uffa0\241" +
    "\uffa0\267\uffa0\311\uffa0\326\uffa0\370\uffa0\u0103\uffa0\u015f\uffa0" +
    "\u0188\uffa0\001\002\000\114\005\uffa2\012\uffa2\020\uffa2\024" +
    "\uffa2\025\uffa2\026\uffa2\027\uffa2\031\uffa2\037\uffa2\040\uffa2" +
    "\050\uffa2\055\uffa2\061\uffa2\062\uffa2\074\uffa2\076\uffa2\107" +
    "\uffa2\112\uffa2\114\uffa2\126\uffa2\127\uffa2\131\uffa2\153\uffa2" +
    "\160\uffa2\161\uffa2\175\uffa2\200\uffa2\211\uffa2\214\uffa2\241" +
    "\uffa2\267\uffa2\311\uffa2\326\uffa2\370\uffa2\u0103\uffa2\u015f\uffa2" +
    "\u0188\uffa2\001\002\000\120\005\uffa0\006\257\007\256\012" +
    "\uffa0\020\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\031\uffa0" +
    "\037\uffa0\040\uffa0\050\uffa0\055\uffa0\061\uffa0\062\uffa0\074" +
    "\uffa0\076\uffa0\107\uffa0\112\uffa0\114\uffa0\126\uffa0\127\uffa0" +
    "\131\uffa0\153\uffa0\160\uffa0\161\uffa0\175\uffa0\200\uffa0\211" +
    "\uffa0\214\uffa0\241\uffa0\267\uffa0\311\uffa0\326\uffa0\370\uffa0" +
    "\u0103\uffa0\u015f\uffa0\u0188\uffa0\001\002\000\114\005\uffa1\012" +
    "\uffa1\020\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\031\uffa1" +
    "\037\uffa1\040\uffa1\050\uffa1\055\uffa1\061\uffa1\062\uffa1\074" +
    "\uffa1\076\uffa1\107\uffa1\112\uffa1\114\uffa1\126\uffa1\127\uffa1" +
    "\131\uffa1\153\uffa1\160\uffa1\161\uffa1\175\uffa1\200\uffa1\211" +
    "\uffa1\214\uffa1\241\uffa1\267\uffa1\311\uffa1\326\uffa1\370\uffa1" +
    "\u0103\uffa1\u015f\uffa1\u0188\uffa1\001\002\000\036\012\052\016" +
    "\154\017\163\020\170\022\147\042\150\050\053\052\165" +
    "\244\166\377\160\u012c\146\u0131\167\u013c\164\u013d\162\001" +
    "\002\000\120\005\uff9f\006\uff9f\007\uff9f\012\uff9f\020\uff9f" +
    "\024\uff9f\025\uff9f\026\uff9f\027\uff9f\031\uff9f\037\uff9f\040" +
    "\uff9f\050\uff9f\055\uff9f\061\uff9f\062\uff9f\074\uff9f\076\uff9f" +
    "\107\uff9f\112\uff9f\114\uff9f\126\uff9f\127\uff9f\131\uff9f\153" +
    "\uff9f\160\uff9f\161\uff9f\175\uff9f\200\uff9f\211\uff9f\214\uff9f" +
    "\241\uff9f\267\uff9f\311\uff9f\326\uff9f\370\uff9f\u0103\uff9f\u015f" +
    "\uff9f\u0188\uff9f\001\002\000\036\012\052\016\154\017\163" +
    "\020\170\022\147\042\150\050\053\052\165\244\166\377" +
    "\160\u012c\146\u0131\167\u013c\164\u013d\162\001\002\000\124" +
    "\005\uff9c\006\uff9c\007\uff9c\010\267\011\265\012\uff9c\020" +
    "\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\031\uff9c\037\uff9c" +
    "\040\uff9c\050\uff9c\055\uff9c\061\uff9c\062\uff9c\074\uff9c\076" +
    "\uff9c\107\uff9c\112\uff9c\114\uff9c\126\uff9c\127\uff9c\131\uff9c" +
    "\153\uff9c\160\uff9c\161\uff9c\175\uff9c\200\uff9c\211\uff9c\214" +
    "\uff9c\241\uff9c\267\uff9c\311\uff9c\326\uff9c\370\uff9c\u0103\uff9c" +
    "\u015f\uff9c\u0188\uff9c\001\002\000\120\005\uff9e\006\uff9e\007" +
    "\uff9e\012\uff9e\020\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e" +
    "\031\uff9e\037\uff9e\040\uff9e\050\uff9e\055\uff9e\061\uff9e\062" +
    "\uff9e\074\uff9e\076\uff9e\107\uff9e\112\uff9e\114\uff9e\126\uff9e" +
    "\127\uff9e\131\uff9e\153\uff9e\160\uff9e\161\uff9e\175\uff9e\200" +
    "\uff9e\211\uff9e\214\uff9e\241\uff9e\267\uff9e\311\uff9e\326\uff9e" +
    "\370\uff9e\u0103\uff9e\u015f\uff9e\u0188\uff9e\001\002\000\124\005" +
    "\uff9c\006\uff9c\007\uff9c\010\267\011\265\012\uff9c\020\uff9c" +
    "\024\uff9c\025\uff9c\026\uff9c\027\uff9c\031\uff9c\037\uff9c\040" +
    "\uff9c\050\uff9c\055\uff9c\061\uff9c\062\uff9c\074\uff9c\076\uff9c" +
    "\107\uff9c\112\uff9c\114\uff9c\126\uff9c\127\uff9c\131\uff9c\153" +
    "\uff9c\160\uff9c\161\uff9c\175\uff9c\200\uff9c\211\uff9c\214\uff9c" +
    "\241\uff9c\267\uff9c\311\uff9c\326\uff9c\370\uff9c\u0103\uff9c\u015f" +
    "\uff9c\u0188\uff9c\001\002\000\120\005\uff9d\006\uff9d\007\uff9d" +
    "\012\uff9d\020\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\031" +
    "\uff9d\037\uff9d\040\uff9d\050\uff9d\055\uff9d\061\uff9d\062\uff9d" +
    "\074\uff9d\076\uff9d\107\uff9d\112\uff9d\114\uff9d\126\uff9d\127" +
    "\uff9d\131\uff9d\153\uff9d\160\uff9d\161\uff9d\175\uff9d\200\uff9d" +
    "\211\uff9d\214\uff9d\241\uff9d\267\uff9d\311\uff9d\326\uff9d\370" +
    "\uff9d\u0103\uff9d\u015f\uff9d\u0188\uff9d\001\002\000\036\012\uff74" +
    "\016\uff74\017\uff74\020\uff74\022\uff74\042\uff74\050\uff74\052" +
    "\uff74\244\uff74\377\uff74\u012c\uff74\u0131\uff74\u013c\uff74\u013d\uff74" +
    "\001\002\000\010\114\222\153\221\214\220\001\002\000" +
    "\036\012\uff75\016\uff75\017\uff75\020\uff75\022\uff75\042\uff75" +
    "\050\uff75\052\uff75\244\uff75\377\uff75\u012c\uff75\u0131\uff75\u013c" +
    "\uff75\u013d\uff75\001\002\000\036\012\uff76\016\uff76\017\uff76" +
    "\020\uff76\022\uff76\042\uff76\050\uff76\052\uff76\244\uff76\377" +
    "\uff76\u012c\uff76\u0131\uff76\u013c\uff76\u013d\uff76\001\002\000\036" +
    "\012\052\016\154\017\163\020\170\022\147\042\150\050" +
    "\053\052\165\244\166\377\160\u012c\146\u0131\167\u013c\164" +
    "\u013d\162\001\002\000\036\012\uff72\016\uff72\017\uff72\020" +
    "\uff72\022\uff72\042\uff72\050\uff72\052\uff72\244\uff72\377\uff72" +
    "\u012c\uff72\u0131\uff72\u013c\uff72\u013d\uff72\001\002\000\036\012" +
    "\uff77\016\uff77\017\uff77\020\uff77\022\uff77\042\uff77\050\uff77" +
    "\052\uff77\244\uff77\377\uff77\u012c\uff77\u0131\uff77\u013c\uff77\u013d" +
    "\uff77\001\002\000\036\012\uff73\016\uff73\017\uff73\020\uff73" +
    "\022\uff73\042\uff73\050\uff73\052\uff73\244\uff73\377\uff73\u012c" +
    "\uff73\u0131\uff73\u013c\uff73\u013d\uff73\001\002\000\046\037\uff78" +
    "\040\uff78\055\uff78\061\uff78\062\uff78\074\uff78\112\uff78\126" +
    "\uff78\127\uff78\131\uff78\161\uff78\200\uff78\211\uff78\311\uff78" +
    "\326\uff78\u0103\uff78\u015f\uff78\u0188\uff78\001\002\000\006\241" +
    "\145\244\uff84\001\002\000\004\244\307\001\002\000\046" +
    "\037\uff70\040\uff70\055\uff70\061\uff70\062\uff70\074\uff70\112" +
    "\uff70\126\uff70\127\uff70\131\uff70\161\uff70\200\uff70\211\uff70" +
    "\311\uff70\326\uff70\u0103\uff70\u015f\uff70\u0188\uff70\001\002\000" +
    "\046\037\uff71\040\uff71\055\uff71\061\uff71\062\uff71\074\uff71" +
    "\112\uff71\126\uff71\127\uff71\131\uff71\161\uff71\200\uff71\211" +
    "\uff71\311\uff71\326\uff71\u0103\uff71\u015f\uff71\u0188\uff71\001\002" +
    "\000\046\037\uff6f\040\uff6f\055\uff6f\061\uff6f\062\uff6f\074" +
    "\uff6f\112\uff6f\126\uff6f\127\uff6f\131\uff6f\161\uff6f\200\uff6f" +
    "\211\uff6f\311\uff6f\326\uff6f\u0103\uff6f\u015f\uff6f\u0188\uff6f\001" +
    "\002\000\174\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7" +
    "\012\uffd7\020\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\031" +
    "\uffd7\037\uffd7\040\uffd7\050\uffd7\055\uffd7\061\uffd7\062\uffd7" +
    "\074\uffd7\076\uffd7\107\uffd7\112\uffd7\114\uffd7\126\uffd7\127" +
    "\uffd7\131\uffd7\153\uffd7\160\uffd7\161\uffd7\175\uffd7\200\uffd7" +
    "\211\uffd7\214\uffd7\240\uffd7\241\uffd7\267\uffd7\303\uffd7\311" +
    "\uffd7\316\uffd7\326\uffd7\334\uffd7\364\uffd7\370\uffd7\376\uffd7" +
    "\u0103\uffd7\u0104\uffd7\u0111\uffd7\u011a\uffd7\u011d\uffd7\u0120\uffd7\u0133" +
    "\uffd7\u013f\uffd7\u0149\uffd7\u014c\uffd7\u0159\uffd7\u015a\uffd7\u015f\uffd7" +
    "\u0188\uffd7\u0189\uffd7\u018a\uffd7\u018b\uffd7\001\002\000\012\010" +
    "\213\012\052\016\212\050\053\001\002\000\124\005\uff92" +
    "\006\uff92\007\uff92\010\uff92\011\uff92\012\uff92\020\uff92\024" +
    "\uff92\025\uff92\026\uff92\027\uff92\031\uff92\037\uff92\040\uff92" +
    "\050\uff92\055\uff92\061\uff92\062\uff92\074\uff92\076\uff92\107" +
    "\uff92\112\uff92\114\uff92\126\uff92\127\uff92\131\uff92\153\uff92" +
    "\160\uff92\161\uff92\175\uff92\200\uff92\211\uff92\214\uff92\241" +
    "\uff92\267\uff92\311\uff92\326\uff92\370\uff92\u0103\uff92\u015f\uff92" +
    "\u0188\uff92\001\002\000\004\055\316\001\002\000\046\037" +
    "\uff79\040\uff79\055\uff79\061\246\062\247\074\uff79\112\uff79" +
    "\126\uff79\127\uff79\131\uff79\161\uff79\200\uff79\211\uff79\311" +
    "\uff79\326\uff79\u0103\uff79\u015f\uff79\u0188\uff79\001\002\000\042" +
    "\037\uff7c\040\uff7c\055\uff7c\074\uff7c\112\uff7c\126\uff7c\127" +
    "\uff7c\131\uff7c\161\uff7c\200\uff7c\211\uff7c\311\uff7c\326\uff7c" +
    "\u0103\uff7c\u015f\uff7c\u0188\uff7c\001\002\000\040\012\052\016" +
    "\154\017\163\020\170\022\147\042\150\050\053\052\165" +
    "\244\166\257\323\377\160\u012c\146\u0131\167\u013c\164\u013d" +
    "\162\001\002\000\016\037\uff2e\040\324\107\uff2e\326\uff2e" +
    "\u0103\uff2e\u0188\uff2e\001\002\000\016\037\uff30\040\uff30\107" +
    "\uff30\326\uff30\u0103\uff30\u0188\uff30\001\002\000\016\037\uff31" +
    "\040\uff31\107\uff31\326\uff31\u0103\uff31\u0188\uff31\001\002\000" +
    "\006\012\052\050\053\001\002\000\014\037\uff32\107\uff32" +
    "\326\uff32\u0103\uff32\u0188\uff32\001\002\000\014\037\uff2f\107" +
    "\uff2f\326\uff2f\u0103\uff2f\u0188\uff2f\001\002\000\142\005\uffdf" +
    "\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\020\uffdf\024" +
    "\uffdf\025\uffdf\026\uffdf\027\uffdf\031\uffdf\037\uffdf\040\uffdf" +
    "\050\uffdf\052\uffdf\055\uffdf\060\uffdf\061\uffdf\062\uffdf\066" +
    "\uffdf\074\uffdf\076\uffdf\107\uffdf\112\uffdf\114\uffdf\126\uffdf" +
    "\127\uffdf\131\uffdf\153\uffdf\160\uffdf\161\uffdf\175\uffdf\176" +
    "\uffdf\200\uffdf\211\uffdf\214\uffdf\241\uffdf\257\uffdf\267\uffdf" +
    "\306\uffdf\307\uffdf\311\uffdf\326\uffdf\370\uffdf\u0103\uffdf\u015f" +
    "\uffdf\u0188\uffdf\001\002\000\006\012\052\050\053\001\002" +
    "\000\172\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012" +
    "\uffe0\016\uffe0\017\uffe0\020\uffe0\022\uffe0\024\uffe0\025\uffe0" +
    "\026\uffe0\027\uffe0\031\uffe0\037\uffe0\040\uffe0\041\334\042" +
    "\uffe0\050\uffe0\052\uffe0\055\uffe0\060\uffe0\061\uffe0\062\uffe0" +
    "\066\uffe0\074\uffe0\076\uffe0\077\uffe0\102\uffe0\107\uffe0\112" +
    "\uffe0\114\uffe0\126\uffe0\127\uffe0\131\uffe0\141\uffe0\153\uffe0" +
    "\160\uffe0\161\uffe0\174\uffe0\175\uffe0\176\uffe0\200\uffe0\211" +
    "\uffe0\214\uffe0\241\uffe0\257\uffe0\266\uffe0\267\uffe0\306\uffe0" +
    "\307\uffe0\311\uffe0\326\uffe0\334\uffe0\336\uffe0\370\uffe0\u0103" +
    "\uffe0\u015f\uffe0\u0188\uffe0\001\002\000\142\005\uffde\006\uffde" +
    "\007\uffde\010\uffde\011\uffde\012\uffde\020\uffde\024\uffde\025" +
    "\uffde\026\uffde\027\uffde\031\uffde\037\uffde\040\uffde\050\uffde" +
    "\052\uffde\055\uffde\060\uffde\061\uffde\062\uffde\066\uffde\074" +
    "\uffde\076\uffde\107\uffde\112\uffde\114\uffde\126\uffde\127\uffde" +
    "\131\uffde\153\uffde\160\uffde\161\uffde\175\uffde\176\uffde\200" +
    "\uffde\211\uffde\214\uffde\241\uffde\257\uffde\267\uffde\306\uffde" +
    "\307\uffde\311\uffde\326\uffde\370\uffde\u0103\uffde\u015f\uffde\u0188" +
    "\uffde\001\002\000\170\005\uffe2\006\uffe2\007\uffe2\010\uffe2" +
    "\011\uffe2\012\uffe2\016\uffe2\017\uffe2\020\uffe2\022\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\031\uffe2\037\uffe2\040\uffe2" +
    "\042\uffe2\050\uffe2\052\uffe2\055\uffe2\060\uffe2\061\uffe2\062" +
    "\uffe2\066\uffe2\074\uffe2\076\uffe2\077\uffe2\102\uffe2\107\uffe2" +
    "\112\uffe2\114\uffe2\126\uffe2\127\uffe2\131\uffe2\141\uffe2\153" +
    "\uffe2\160\uffe2\161\uffe2\174\uffe2\175\uffe2\176\uffe2\200\uffe2" +
    "\211\uffe2\214\uffe2\241\uffe2\257\uffe2\266\uffe2\267\uffe2\306" +
    "\uffe2\307\uffe2\311\uffe2\326\uffe2\334\uffe2\336\uffe2\370\uffe2" +
    "\u0103\uffe2\u015f\uffe2\u0188\uffe2\001\002\000\006\012\052\050" +
    "\053\001\002\000\170\005\uffe1\006\uffe1\007\uffe1\010\uffe1" +
    "\011\uffe1\012\uffe1\016\uffe1\017\uffe1\020\uffe1\022\uffe1\024" +
    "\uffe1\025\uffe1\026\uffe1\027\uffe1\031\uffe1\037\uffe1\040\uffe1" +
    "\042\uffe1\050\uffe1\052\uffe1\055\uffe1\060\uffe1\061\uffe1\062" +
    "\uffe1\066\uffe1\074\uffe1\076\uffe1\077\uffe1\102\uffe1\107\uffe1" +
    "\112\uffe1\114\uffe1\126\uffe1\127\uffe1\131\uffe1\141\uffe1\153" +
    "\uffe1\160\uffe1\161\uffe1\174\uffe1\175\uffe1\176\uffe1\200\uffe1" +
    "\211\uffe1\214\uffe1\241\uffe1\257\uffe1\266\uffe1\267\uffe1\306" +
    "\uffe1\307\uffe1\311\uffe1\326\uffe1\334\uffe1\336\uffe1\370\uffe1" +
    "\u0103\uffe1\u015f\uffe1\u0188\uffe1\001\002\000\012\012\uff3b\050" +
    "\uff3b\107\337\273\uff3b\001\002\000\010\012\uff3c\050\uff3c" +
    "\273\uff3c\001\002\000\010\012\052\050\053\273\343\001" +
    "\002\000\010\037\uff3d\u0103\uff3d\u0188\uff3d\001\002\000\014" +
    "\037\uff37\107\352\326\uff37\u0103\uff37\u0188\uff37\001\002\000" +
    "\004\052\344\001\002\000\006\012\052\050\053\001\002" +
    "\000\010\037\uff3a\u0103\uff3a\u0188\uff3a\001\002\000\004\040" +
    "\347\001\002\000\004\016\350\001\002\000\004\055\351" +
    "\001\002\000\010\037\uff34\u0103\uff34\u0188\uff34\001\002\000" +
    "\006\012\052\050\053\001\002\000\012\037\uff6a\326\140" +
    "\u0103\uff6a\u0188\uff6a\001\002\000\010\037\uff39\u0103\uff39\u0188" +
    "\uff39\001\002\000\014\037\uff35\040\134\326\uff35\u0103\uff35" +
    "\u0188\uff35\001\002\000\012\037\uff38\326\uff38\u0103\uff38\u0188" +
    "\uff38\001\002\000\010\037\045\u0103\047\u0188\046\001\002" +
    "\000\044\002\uffff\003\033\066\030\111\022\132\uffff\157" +
    "\010\164\026\166\uffff\213\023\253\013\254\037\262\035" +
    "\274\036\302\034\306\032\332\004\335\042\001\002\000" +
    "\010\002\ufffa\132\ufffa\166\ufffa\001\002\000\050\002\uffef" +
    "\003\uffef\066\uffef\111\uffef\116\uffef\132\uffef\157\uffef\164" +
    "\uffef\166\uffef\213\uffef\253\uffef\254\uffef\262\uffef\274\uffef" +
    "\302\uffef\306\uffef\316\uffef\332\uffef\335\uffef\001\002\000" +
    "\010\037\uffbc\u0103\uffbc\u0188\uffbc\001\002\000\010\037\045" +
    "\u0103\047\u0188\046\001\002\000\010\012\uffd8\050\uffd8\150" +
    "\377\001\002\000\010\012\uffd8\050\uffd8\150\377\001\002" +
    "\000\010\012\uffd8\050\uffd8\150\377\001\002\000\010\037" +
    "\uffbb\u0103\uffbb\u0188\uffbb\001\002\000\010\012\uffd8\050\uffd8" +
    "\150\377\001\002\000\010\012\uffd8\050\uffd8\150\377\001" +
    "\002\000\010\037\uffbd\u0103\uffbd\u0188\uffbd\001\002\000\010" +
    "\037\uffb8\u0103\uffb8\u0188\uffb8\001\002\000\010\037\uffb9\u0103" +
    "\uffb9\u0188\uffb9\001\002\000\006\012\052\050\053\001\002" +
    "\000\004\340\u0100\001\002\000\006\012\uffd9\050\uffd9\001" +
    "\002\000\012\037\uffae\040\u0102\u0103\uffae\u0188\uffae\001\002" +
    "\000\006\012\052\050\053\001\002\000\010\037\uffb0\u0103" +
    "\uffb0\u0188\uffb0\001\002\000\012\037\uffae\040\u0102\u0103\uffae" +
    "\u0188\uffae\001\002\000\010\037\uffaf\u0103\uffaf\u0188\uffaf\001" +
    "\002\000\006\012\052\050\053\001\002\000\012\037\uffb5" +
    "\040\u0108\u0103\uffb5\u0188\uffb5\001\002\000\006\012\052\050" +
    "\053\001\002\000\010\037\uffb7\u0103\uffb7\u0188\uffb7\001\002" +
    "\000\012\037\uffb5\040\u0108\u0103\uffb5\u0188\uffb5\001\002\000" +
    "\010\037\uffb6\u0103\uffb6\u0188\uffb6\001\002\000\006\012\052" +
    "\050\053\001\002\000\010\037\uffb4\u0103\uffb4\u0188\uffb4\001" +
    "\002\000\006\012\052\050\053\001\002\000\004\u015f\u0115" +
    "\001\002\000\012\037\uffaa\040\u0112\u0103\uffaa\u0188\uffaa\001" +
    "\002\000\010\037\uffad\u0103\uffad\u0188\uffad\001\002\000\006" +
    "\012\052\050\053\001\002\000\012\037\uffaa\040\u0112\u0103" +
    "\uffaa\u0188\uffaa\001\002\000\010\037\uffab\u0103\uffab\u0188\uffab" +
    "\001\002\000\006\012\052\050\053\001\002\000\012\037" +
    "\uffac\040\uffac\u0103\uffac\u0188\uffac\001\002\000\006\012\052" +
    "\050\053\001\002\000\012\037\uffb1\040\u0119\u0103\uffb1\u0188" +
    "\uffb1\001\002\000\006\012\052\050\053\001\002\000\010" +
    "\037\uffb3\u0103\uffb3\u0188\uffb3\001\002\000\012\037\uffb1\040" +
    "\u0119\u0103\uffb1\u0188\uffb1\001\002\000\010\037\uffb2\u0103\uffb2" +
    "\u0188\uffb2\001\002\000\010\037\uffba\u0103\uffba\u0188\uffba\001" +
    "\002\000\010\002\ufffc\132\ufffc\166\ufffc\001\002\000\010" +
    "\037\ufe95\u0103\ufe95\u0188\ufe95\001\002\000\010\037\ufe90\u0103" +
    "\ufe90\u0188\ufe90\001\002\000\010\115\u0219\344\u0218\372\u0216" +
    "\001\002\000\010\037\ufe91\u0103\ufe91\u0188\ufe91\001\002\000" +
    "\010\012\052\050\053\221\u020e\001\002\000\006\012\052" +
    "\050\053\001\002\000\010\037\ufe94\u0103\ufe94\u0188\ufe94\001" +
    "\002\000\010\037\ufe93\u0103\ufe93\u0188\ufe93\001\002\000\010" +
    "\037\ufe96\u0103\ufe96\u0188\ufe96\001\002\000\006\012\052\050" +
    "\053\001\002\000\006\012\052\050\053\001\002\000\010" +
    "\037\ufe92\u0103\ufe92\u0188\ufe92\001\002\000\004\066\u012c\001" +
    "\002\000\010\115\ufe1a\344\ufe1a\372\ufe1a\001\002\000\006" +
    "\052\u012f\076\ufe87\001\002\000\004\076\ufe88\001\002\000" +
    "\006\012\052\050\053\001\002\000\004\076\u0131\001\002" +
    "\000\004\157\010\001\002\000\010\037\ufe89\u0103\ufe89\u0188" +
    "\ufe89\001\002\000\004\055\u0134\001\002\000\022\037\uff65" +
    "\076\uff65\257\uff65\307\uff65\326\uff65\u0103\uff65\u015f\uff65\u0188" +
    "\uff65\001\002\000\010\060\u0138\066\u0137\306\u013a\001\002" +
    "\000\010\037\ufe86\u0103\ufe86\u0188\ufe86\001\002\000\004\163" +
    "\u01fd\001\002\000\022\012\052\050\053\077\ufeb6\141\ufeb6" +
    "\156\u0148\174\u014c\266\ufeb6\336\ufeb6\001\002\000\010\037" +
    "\ufe85\u0103\ufe85\u0188\ufe85\001\002\000\014\012\ufe76\050\ufe76" +
    "\150\ufe76\163\u013e\174\u013d\001\002\000\010\037\ufe83\u0103" +
    "\ufe83\u0188\ufe83\001\002\000\012\037\ufe74\040\u0144\u0103\ufe74" +
    "\u0188\ufe74\001\002\000\010\012\ufe77\050\ufe77\150\ufe77\001" +
    "\002\000\010\012\uffd8\050\uffd8\150\377\001\002\000\010" +
    "\012\uffd8\050\uffd8\150\377\001\002\000\006\012\052\050" +
    "\053\001\002\000\012\037\ufe79\040\ufe79\u0103\ufe79\u0188\ufe79" +
    "\001\002\000\006\012\052\050\053\001\002\000\012\037" +
    "\ufe78\040\ufe78\u0103\ufe78\u0188\ufe78\001\002\000\014\012\ufe76" +
    "\050\ufe76\150\ufe76\163\u013e\174\u013d\001\002\000\010\037" +
    "\ufe7a\u0103\ufe7a\u0188\ufe7a\001\002\000\012\037\ufe74\040\u0144" +
    "\u0103\ufe74\u0188\ufe74\001\002\000\010\037\ufe75\u0103\ufe75\u0188" +
    "\ufe75\001\002\000\006\012\052\050\053\001\002\000\014" +
    "\037\ufedc\040\ufedc\055\ufedc\u0103\ufedc\u0188\ufedc\001\002\000" +
    "\014\037\ufedd\040\ufedd\055\ufedd\u0103\ufedd\u0188\ufedd\001\002" +
    "\000\012\037\ufed9\040\u01f6\u0103\ufed9\u0188\ufed9\001\002\000" +
    "\006\012\052\050\053\001\002\000\050\050\u0199\240\u0197" +
    "\303\u01a6\364\u019c\376\u01a3\u0104\u019d\u0111\u0194\u011a\u019e\u011d" +
    "\u0192\u0120\u01a0\u0133\u019f\u013f\u0196\u0149\u0195\u014c\u0198\u0159\u01a2" +
    "\u015a\u019b\u0189\u01a5\u018a\u0191\u018b\u0193\001\002\000\012\077" +
    "\u0151\141\u0150\266\u0154\336\u0152\001\002\000\014\037\ufedb" +
    "\040\ufedb\055\ufedb\u0103\ufedb\u0188\ufedb\001\002\000\006\052" +
    "\ufee2\241\u0170\001\002\000\004\203\u0167\001\002\000\004" +
    "\203\u0164\001\002\000\014\037\ufea2\040\ufea2\055\ufea2\u0103" +
    "\ufea2\u0188\ufea2\001\002\000\010\052\ufeaf\152\u0155\236\u0156" +
    "\001\002\000\034\037\ufeb1\040\ufeb1\052\ufeb1\055\ufeb1\077" +
    "\ufeb1\102\ufeb1\141\ufeb1\156\ufeb1\174\ufeb1\266\ufeb1\336\ufeb1" +
    "\u0103\ufeb1\u0188\ufeb1\001\002\000\034\037\ufeb0\040\ufeb0\052" +
    "\ufeb0\055\ufeb0\077\ufeb0\102\ufeb0\141\ufeb0\156\ufeb0\174\ufeb0" +
    "\266\ufeb0\336\ufeb0\u0103\ufeb0\u0188\ufeb0\001\002\000\004\052" +
    "\u0158\001\002\000\006\012\052\050\053\001\002\000\014" +
    "\037\ufea0\040\ufea0\055\ufea0\u0103\ufea0\u0188\ufea0\001\002\000" +
    "\012\040\uff55\055\uff55\267\u015b\370\u015c\001\002\000\016" +
    "\037\uff56\040\uff56\055\uff56\074\uff56\u0103\uff56\u0188\uff56\001" +
    "\002\000\016\037\uff57\040\uff57\055\uff57\074\uff57\u0103\uff57" +
    "\u0188\uff57\001\002\000\006\040\u015f\055\ufe9b\001\002\000" +
    "\004\055\u0163\001\002\000\006\012\052\050\053\001\002" +
    "\000\012\040\uff55\055\uff55\267\u015b\370\u015c\001\002\000" +
    "\006\040\u015f\055\ufe9b\001\002\000\004\055\ufe9c\001\002" +
    "\000\014\037\ufe9d\040\ufe9d\055\ufe9d\u0103\ufe9d\u0188\ufe9d\001" +
    "\002\000\010\052\ufeaf\152\u0155\236\u0156\001\002\000\004" +
    "\052\u0158\001\002\000\014\037\ufea1\040\ufea1\055\ufea1\u0103" +
    "\ufea1\u0188\ufea1\001\002\000\004\052\u0168\001\002\000\006" +
    "\012\052\050\053\001\002\000\004\102\u016a\001\002\000" +
    "\006\012\052\050\053\001\002\000\022\037\ufeab\040\ufeab" +
    "\052\u016c\055\ufeab\241\ufeab\u0103\ufeab\u015f\ufeab\u0188\ufeab\001" +
    "\002\000\006\012\052\050\053\001\002\000\020\037\ufea9" +
    "\040\ufea9\055\ufea9\241\ufea9\u0103\ufea9\u015f\u016e\u0188\ufea9\001" +
    "\002\000\006\262\u017b\274\u017c\001\002\000\016\037\ufee2" +
    "\040\ufee2\055\ufee2\241\u0170\u0103\ufee2\u0188\ufee2\001\002\000" +
    "\006\074\u0172\244\u0174\001\002\000\014\037\ufe9f\040\ufe9f" +
    "\055\ufe9f\u0103\ufe9f\u0188\ufe9f\001\002\000\004\105\u0175\001" +
    "\002\000\034\037\ufee3\040\ufee3\052\ufee3\055\ufee3\077\ufee3" +
    "\102\ufee3\140\ufee3\141\ufee3\174\ufee3\266\ufee3\336\ufee3\u0103" +
    "\ufee3\u0188\ufee3\001\002\000\034\037\ufee0\040\ufee0\052\ufee0" +
    "\055\ufee0\077\ufee0\102\ufee0\140\ufee0\141\ufee0\174\ufee0\266" +
    "\ufee0\336\ufee0\u0103\ufee0\u0188\ufee0\001\002\000\036\037\ufede" +
    "\040\ufede\052\ufede\055\ufede\077\ufede\102\ufede\140\ufede\141" +
    "\ufede\174\ufede\241\u0176\266\ufede\336\ufede\u0103\ufede\u0188\ufede" +
    "\001\002\000\036\037\ufebc\040\ufebc\052\ufebc\055\ufebc\077" +
    "\ufebc\102\ufebc\140\ufebc\141\ufebc\174\ufebc\244\u0179\266\ufebc" +
    "\336\ufebc\u0103\ufebc\u0188\ufebc\001\002\000\034\037\ufee1\040" +
    "\ufee1\052\ufee1\055\ufee1\077\ufee1\102\ufee1\140\ufee1\141\ufee1" +
    "\174\ufee1\266\ufee1\336\ufee1\u0103\ufee1\u0188\ufee1\001\002\000" +
    "\034\037\ufedf\040\ufedf\052\ufedf\055\ufedf\077\ufedf\102\ufedf" +
    "\140\ufedf\141\ufedf\174\ufedf\266\ufedf\336\ufedf\u0103\ufedf\u0188" +
    "\ufedf\001\002\000\034\037\ufebd\040\ufebd\052\ufebd\055\ufebd" +
    "\077\ufebd\102\ufebd\140\ufebd\141\ufebd\174\ufebd\266\ufebd\336" +
    "\ufebd\u0103\ufebd\u0188\ufebd\001\002\000\034\037\ufea9\040\ufea9" +
    "\055\ufea9\077\ufea9\102\ufea9\141\ufea9\174\ufea9\241\ufea9\266" +
    "\ufea9\336\ufea9\u0103\ufea9\u015f\u016e\u0188\ufea9\001\002\000\006" +
    "\133\u017f\176\u017e\001\002\000\006\133\u017f\176\u017e\001" +
    "\002\000\034\037\ufea7\040\ufea7\055\ufea7\077\ufea7\102\ufea7" +
    "\141\ufea7\174\ufea7\241\ufea7\266\ufea7\336\ufea7\u0103\ufea7\u015f" +
    "\ufea7\u0188\ufea7\001\002\000\006\244\u0182\257\u0180\001\002" +
    "\000\034\037\ufea4\040\ufea4\055\ufea4\077\ufea4\102\ufea4\141" +
    "\ufea4\174\ufea4\241\ufea4\266\ufea4\336\ufea4\u0103\ufea4\u015f\ufea4" +
    "\u0188\ufea4\001\002\000\034\037\ufea5\040\ufea5\055\ufea5\077" +
    "\ufea5\102\ufea5\141\ufea5\174\ufea5\241\ufea5\266\ufea5\336\ufea5" +
    "\u0103\ufea5\u015f\ufea5\u0188\ufea5\001\002\000\034\037\ufea3\040" +
    "\ufea3\055\ufea3\077\ufea3\102\ufea3\141\ufea3\174\ufea3\241\ufea3" +
    "\266\ufea3\336\ufea3\u0103\ufea3\u015f\ufea3\u0188\ufea3\001\002\000" +
    "\034\037\ufea6\040\ufea6\055\ufea6\077\ufea6\102\ufea6\141\ufea6" +
    "\174\ufea6\241\ufea6\266\ufea6\336\ufea6\u0103\ufea6\u015f\ufea6\u0188" +
    "\ufea6\001\002\000\034\037\ufea8\040\ufea8\055\ufea8\077\ufea8" +
    "\102\ufea8\141\ufea8\174\ufea8\241\ufea8\266\ufea8\336\ufea8\u0103" +
    "\ufea8\u015f\ufea8\u0188\ufea8\001\002\000\032\037\ufeaa\040\ufeaa" +
    "\055\ufeaa\077\ufeaa\102\ufeaa\141\ufeaa\174\ufeaa\241\ufeaa\266" +
    "\ufeaa\336\ufeaa\u0103\ufeaa\u0188\ufeaa\001\002\000\004\055\u0186" +
    "\001\002\000\034\037\ufeac\040\ufeac\055\ufeac\077\ufeac\102" +
    "\ufeac\141\ufeac\174\ufeac\241\ufeac\266\ufeac\336\ufeac\u0103\ufeac" +
    "\u015f\ufeac\u0188\ufeac\001\002\000\006\040\u0189\055\ufe98\001" +
    "\002\000\004\055\u018c\001\002\000\006\012\052\050\053" +
    "\001\002\000\006\040\u0189\055\ufe98\001\002\000\004\055" +
    "\ufe99\001\002\000\004\102\ufe9a\001\002\000\004\052\u018e" +
    "\001\002\000\040\012\uff84\016\uff84\017\uff84\020\uff84\022" +
    "\uff84\042\uff84\050\uff84\052\142\241\145\244\uff84\377\uff84" +
    "\u012c\uff84\u0131\uff84\u013c\uff84\u013d\uff84\001\002\000\004\055" +
    "\u0190\001\002\000\014\037\ufe9e\040\ufe9e\055\ufe9e\u0103\ufe9e" +
    "\u0188\ufe9e\001\002\000\070\005\uffc3\037\uffc3\040\uffc3\052" +
    "\uffc3\053\uffc3\055\uffc3\074\uffc3\076\uffc3\077\uffc3\102\uffc3" +
    "\111\uffc3\137\uffc3\140\uffc3\141\uffc3\160\uffc3\174\uffc3\241" +
    "\uffc3\244\uffc3\257\uffc3\266\uffc3\334\uffc3\336\uffc3\u0103\uffc3" +
    "\u0166\uffc3\u0169\uffc3\u016a\uffc3\u0188\uffc3\001\002\000\070\005" +
    "\uffc8\037\uffc8\040\uffc8\052\uffc8\053\uffc8\055\uffc8\074\uffc8" +
    "\076\uffc8\077\uffc8\102\uffc8\111\uffc8\137\uffc8\140\uffc8\141" +
    "\uffc8\160\uffc8\174\uffc8\241\uffc8\244\uffc8\257\uffc8\266\uffc8" +
    "\334\uffc8\336\uffc8\u0103\uffc8\u0166\uffc8\u0169\uffc8\u016a\uffc8\u0188" +
    "\uffc8\001\002\000\070\005\uffc2\037\uffc2\040\uffc2\052\uffc2" +
    "\053\uffc2\055\uffc2\074\uffc2\076\uffc2\077\uffc2\102\uffc2\111" +
    "\uffc2\137\uffc2\140\uffc2\141\uffc2\160\uffc2\174\uffc2\241\uffc2" +
    "\244\uffc2\257\uffc2\266\uffc2\334\uffc2\336\uffc2\u0103\uffc2\u0166" +
    "\uffc2\u0169\uffc2\u016a\uffc2\u0188\uffc2\001\002\000\070\005\uffcd" +
    "\037\uffcd\040\uffcd\052\uffcd\053\uffcd\055\uffcd\074\uffcd\076" +
    "\uffcd\077\uffcd\102\uffcd\111\uffcd\137\uffcd\140\uffcd\141\uffcd" +
    "\160\uffcd\174\uffcd\241\uffcd\244\uffcd\257\uffcd\266\uffcd\334" +
    "\uffcd\336\uffcd\u0103\uffcd\u0166\uffcd\u0169\uffcd\u016a\uffcd\u0188\uffcd" +
    "\001\002\000\070\005\uffc7\037\uffc7\040\uffc7\052\uffc7\053" +
    "\uffc7\055\uffc7\074\uffc7\076\uffc7\077\uffc7\102\uffc7\111\uffc7" +
    "\137\uffc7\140\uffc7\141\uffc7\160\uffc7\174\uffc7\241\uffc7\244" +
    "\uffc7\257\uffc7\266\uffc7\334\uffc7\336\uffc7\u0103\uffc7\u0166\uffc7" +
    "\u0169\uffc7\u016a\uffc7\u0188\uffc7\001\002\000\070\005\uffd0\037" +
    "\uffd0\040\uffd0\052\uffd0\053\uffd0\055\uffd0\074\uffd0\076\uffd0" +
    "\077\uffd0\102\uffd0\111\uffd0\137\uffd0\140\uffd0\141\uffd0\160" +
    "\uffd0\174\uffd0\241\uffd0\244\uffd0\257\uffd0\266\uffd0\334\uffd0" +
    "\336\uffd0\u0103\uffd0\u0166\uffd0\u0169\uffd0\u016a\uffd0\u0188\uffd0\001" +
    "\002\000\062\037\uffcc\040\uffcc\052\uffcc\053\uffcc\055\uffcc" +
    "\074\uffcc\076\uffcc\077\uffcc\102\uffcc\111\uffcc\137\uffcc\140" +
    "\uffcc\141\uffcc\160\uffcc\174\uffcc\241\uffcc\244\uffcc\257\uffcc" +
    "\266\uffcc\334\uffcc\336\uffcc\u0103\uffcc\u016a\uffcc\u0188\uffcc\001" +
    "\002\000\070\005\uffcb\037\uffcb\040\uffcb\052\uffcb\053\uffcb" +
    "\055\uffcb\074\uffcb\076\uffcb\077\uffcb\102\uffcb\111\uffcb\137" +
    "\uffcb\140\uffcb\141\uffcb\160\uffcb\174\uffcb\241\uffcb\244\uffcb" +
    "\257\uffcb\266\uffcb\334\uffcb\336\uffcb\u0103\uffcb\u0166\uffcb\u0169" +
    "\uffcb\u016a\uffcb\u0188\uffcb\001\002\000\046\240\u0197\303\u01a6" +
    "\364\u019c\376\u01a3\u0104\u019d\u0111\u0194\u011a\u019e\u011d\u0192\u0120" +
    "\u01a0\u0133\u019f\u013f\u0196\u0149\u0195\u014c\u0198\u0159\u01a2\u015a\u019b" +
    "\u0189\u01a5\u018a\u0191\u018b\u0193\001\002\000\046\037\ufec7\040" +
    "\ufec7\055\ufec7\074\ufec7\077\ufec7\102\ufec7\137\ufec7\140\ufec7" +
    "\141\ufec7\160\u01ae\174\ufec7\241\ufec7\244\ufec7\257\ufec7\266" +
    "\ufec7\336\ufec7\u0103\ufec7\u0188\ufec7\001\002\000\070\005\uffd3" +
    "\037\uffd3\040\uffd3\052\uffd3\053\uffd3\055\uffd3\074\uffd3\076" +
    "\uffd3\077\uffd3\102\uffd3\111\uffd3\137\uffd3\140\uffd3\141\uffd3" +
    "\160\uffd3\174\uffd3\241\uffd3\244\uffd3\257\uffd3\266\uffd3\334" +
    "\uffd3\336\uffd3\u0103\uffd3\u0166\uffd3\u0169\uffd3\u016a\uffd3\u0188\uffd3" +
    "\001\002\000\070\005\uffd1\037\uffd1\040\uffd1\052\uffd1\053" +
    "\uffd1\055\uffd1\074\uffd1\076\uffd1\077\uffd1\102\uffd1\111\uffd1" +
    "\137\uffd1\140\uffd1\141\uffd1\160\uffd1\174\uffd1\241\uffd1\244" +
    "\uffd1\257\uffd1\266\uffd1\334\uffd1\336\uffd1\u0103\uffd1\u0166\uffd1" +
    "\u0169\uffd1\u016a\uffd1\u0188\uffd1\001\002\000\070\005\uffcf\037" +
    "\uffcf\040\uffcf\052\uffcf\053\uffcf\055\uffcf\074\uffcf\076\uffcf" +
    "\077\uffcf\102\uffcf\111\uffcf\137\uffcf\140\uffcf\141\uffcf\160" +
    "\uffcf\174\uffcf\241\uffcf\244\uffcf\257\uffcf\266\uffcf\334\uffcf" +
    "\336\uffcf\u0103\uffcf\u0166\uffcf\u0169\uffcf\u016a\uffcf\u0188\uffcf\001" +
    "\002\000\070\005\uffc6\037\uffc6\040\uffc6\052\uffc6\053\uffc6" +
    "\055\uffc6\074\uffc6\076\uffc6\077\uffc6\102\uffc6\111\uffc6\137" +
    "\uffc6\140\uffc6\141\uffc6\160\uffc6\174\uffc6\241\uffc6\244\uffc6" +
    "\257\uffc6\266\uffc6\334\uffc6\336\uffc6\u0103\uffc6\u0166\uffc6\u0169" +
    "\uffc6\u016a\uffc6\u0188\uffc6\001\002\000\070\005\uffc9\037\uffc9" +
    "\040\uffc9\052\uffc9\053\uffc9\055\uffc9\074\uffc9\076\uffc9\077" +
    "\uffc9\102\uffc9\111\uffc9\137\uffc9\140\uffc9\141\uffc9\160\uffc9" +
    "\174\uffc9\241\uffc9\244\uffc9\257\uffc9\266\uffc9\334\uffc9\336" +
    "\uffc9\u0103\uffc9\u0166\uffc9\u0169\uffc9\u016a\uffc9\u0188\uffc9\001\002" +
    "\000\070\005\uffd2\037\uffd2\040\uffd2\052\uffd2\053\uffd2\055" +
    "\uffd2\074\uffd2\076\uffd2\077\uffd2\102\uffd2\111\uffd2\137\uffd2" +
    "\140\uffd2\141\uffd2\160\uffd2\174\uffd2\241\uffd2\244\uffd2\257" +
    "\uffd2\266\uffd2\334\uffd2\336\uffd2\u0103\uffd2\u0166\uffd2\u0169\uffd2" +
    "\u016a\uffd2\u0188\uffd2\001\002\000\062\005\uffc0\037\uffc0\040" +
    "\uffc0\052\u01a7\055\uffc0\074\uffc0\076\uffc0\077\uffc0\102\uffc0" +
    "\137\uffc0\140\uffc0\141\uffc0\160\uffc0\174\uffc0\241\uffc0\244" +
    "\uffc0\257\uffc0\266\uffc0\334\uffc0\336\uffc0\u0103\uffc0\u0166\uffc0" +
    "\u0169\uffc0\u0188\uffc0\001\002\000\070\005\uffc5\037\uffc5\040" +
    "\uffc5\052\uffc5\053\uffc5\055\uffc5\074\uffc5\076\uffc5\077\uffc5" +
    "\102\uffc5\111\uffc5\137\uffc5\140\uffc5\141\uffc5\160\uffc5\174" +
    "\uffc5\241\uffc5\244\uffc5\257\uffc5\266\uffc5\334\uffc5\336\uffc5" +
    "\u0103\uffc5\u0166\uffc5\u0169\uffc5\u016a\uffc5\u0188\uffc5\001\002\000" +
    "\070\005\uffca\037\uffca\040\uffca\052\uffca\053\uffca\055\uffca" +
    "\074\uffca\076\uffca\077\uffca\102\uffca\111\uffca\137\uffca\140" +
    "\uffca\141\uffca\160\uffca\174\uffca\241\uffca\244\uffca\257\uffca" +
    "\266\uffca\334\uffca\336\uffca\u0103\uffca\u0166\uffca\u0169\uffca\u016a" +
    "\uffca\u0188\uffca\001\002\000\062\005\uffd5\037\uffd5\040\uffd5" +
    "\052\uffd5\055\uffd5\074\uffd5\076\uffd5\077\uffd5\102\uffd5\137" +
    "\uffd5\140\uffd5\141\uffd5\160\uffd5\174\uffd5\241\uffd5\244\uffd5" +
    "\257\uffd5\266\uffd5\334\uffd5\336\uffd5\u0103\uffd5\u0166\uffd5\u0169" +
    "\uffd5\u0188\uffd5\001\002\000\070\005\uffc4\037\uffc4\040\uffc4" +
    "\052\uffc4\053\uffc4\055\uffc4\074\uffc4\076\uffc4\077\uffc4\102" +
    "\uffc4\111\uffc4\137\uffc4\140\uffc4\141\uffc4\160\uffc4\174\uffc4" +
    "\241\uffc4\244\uffc4\257\uffc4\266\uffc4\334\uffc4\336\uffc4\u0103" +
    "\uffc4\u0166\uffc4\u0169\uffc4\u016a\uffc4\u0188\uffc4\001\002\000\070" +
    "\005\uffce\037\uffce\040\uffce\052\uffce\053\uffce\055\uffce\074" +
    "\uffce\076\uffce\077\uffce\102\uffce\111\uffce\137\uffce\140\uffce" +
    "\141\uffce\160\uffce\174\uffce\241\uffce\244\uffce\257\uffce\266" +
    "\uffce\334\uffce\336\uffce\u0103\uffce\u0166\uffce\u0169\uffce\u016a\uffce" +
    "\u0188\uffce\001\002\000\004\016\u01a9\001\002\000\060\005" +
    "\uffd6\037\uffd6\040\uffd6\055\uffd6\074\uffd6\076\uffd6\077\uffd6" +
    "\102\uffd6\137\uffd6\140\uffd6\141\uffd6\160\uffd6\174\uffd6\241" +
    "\uffd6\244\uffd6\257\uffd6\266\uffd6\334\uffd6\336\uffd6\u0103\uffd6" +
    "\u0166\uffd6\u0169\uffd6\u0188\uffd6\001\002\000\006\040\u01aa\055" +
    "\uffbe\001\002\000\004\016\u01ad\001\002\000\004\055\u01ac" +
    "\001\002\000\060\005\uffc1\037\uffc1\040\uffc1\055\uffc1\074" +
    "\uffc1\076\uffc1\077\uffc1\102\uffc1\137\uffc1\140\uffc1\141\uffc1" +
    "\160\uffc1\174\uffc1\241\uffc1\244\uffc1\257\uffc1\266\uffc1\334" +
    "\uffc1\336\uffc1\u0103\uffc1\u0166\uffc1\u0169\uffc1\u0188\uffc1\001\002" +
    "\000\004\055\uffbf\001\002\000\006\012\052\050\053\001" +
    "\002\000\044\037\ufed5\040\ufed5\055\ufed5\074\ufece\077\u01bd" +
    "\102\ufead\137\u01b0\140\u01b7\141\u01bb\174\u01b6\241\u01ba\244" +
    "\ufece\257\u01b5\266\u01b4\336\u01bc\u0103\ufed5\u0188\ufed5\001\002" +
    "\000\036\037\ufebe\040\ufebe\052\u01dd\055\ufebe\077\ufebe\102" +
    "\ufebe\140\ufebe\141\ufebe\174\ufebe\241\ufebe\266\ufebe\336\ufebe" +
    "\u0103\ufebe\u0188\ufebe\001\002\000\014\037\ufed8\040\ufed8\055" +
    "\ufed8\u0103\ufed8\u0188\ufed8\001\002\000\014\037\ufed6\040\ufed6" +
    "\055\ufed6\u0103\ufed6\u0188\ufed6\001\002\000\006\074\u01e4\244" +
    "\u01e5\001\002\000\034\037\ufeaf\040\ufeaf\055\ufeaf\077\ufeaf" +
    "\102\ufeaf\141\ufeaf\152\u0155\174\ufeaf\236\u0156\266\ufeaf\336" +
    "\ufeaf\u0103\ufeaf\u0188\ufeaf\001\002\000\014\016\u01d6\017\u01d3" +
    "\020\u01d1\022\u01d2\244\u01d4\001\002\000\006\012\052\050" +
    "\053\001\002\000\030\037\ufeb8\040\ufeb8\055\ufeb8\077\ufeb6" +
    "\102\ufeb6\141\ufeb6\174\u014c\266\ufeb6\336\ufeb6\u0103\ufeb8\u0188" +
    "\ufeb8\001\002\000\004\102\u01c9\001\002\000\030\037\ufeb8" +
    "\040\ufeb8\055\ufeb8\077\ufeb6\102\ufeb6\141\ufeb6\174\u014c\266" +
    "\ufeb6\336\ufeb6\u0103\ufeb8\u0188\ufeb8\001\002\000\006\074\ufecf" +
    "\244\ufecf\001\002\000\006\052\ufee2\241\u0170\001\002\000" +
    "\004\203\u01bf\001\002\000\004\203\u01be\001\002\000\004" +
    "\102\ufeae\001\002\000\034\037\ufeaf\040\ufeaf\055\ufeaf\077" +
    "\ufeaf\102\ufeaf\141\ufeaf\152\u0155\174\ufeaf\236\u0156\266\ufeaf" +
    "\336\ufeaf\u0103\ufeaf\u0188\ufeaf\001\002\000\030\037\ufeb5\040" +
    "\ufeb5\055\ufeb5\077\ufeb5\102\ufeb5\141\ufeb5\174\ufeb5\266\ufeb5" +
    "\336\ufeb5\u0103\ufeb5\u0188\ufeb5\001\002\000\004\052\u01c2\001" +
    "\002\000\040\012\uff84\016\uff84\017\uff84\020\uff84\022\uff84" +
    "\042\uff84\050\uff84\052\142\241\145\244\uff84\377\uff84\u012c" +
    "\uff84\u0131\uff84\u013c\uff84\u013d\uff84\001\002\000\004\055\u01c4" +
    "\001\002\000\030\037\ufeb2\040\ufeb2\055\ufeb2\077\ufeb2\102" +
    "\ufeb2\141\ufeb2\174\ufeb2\266\ufeb2\336\ufeb2\u0103\ufeb2\u0188\ufeb2" +
    "\001\002\000\014\037\ufed0\040\ufed0\055\ufed0\u0103\ufed0\u0188" +
    "\ufed0\001\002\000\014\077\u01bd\102\ufead\141\u01bb\266\u01b4" +
    "\336\u01bc\001\002\000\030\037\ufeb8\040\ufeb8\055\ufeb8\077" +
    "\ufeb6\102\ufeb6\141\ufeb6\174\u014c\266\ufeb6\336\ufeb6\u0103\ufeb8" +
    "\u0188\ufeb8\001\002\000\014\037\ufeb9\040\ufeb9\055\ufeb9\u0103" +
    "\ufeb9\u0188\ufeb9\001\002\000\006\012\052\050\053\001\002" +
    "\000\036\037\ufeab\040\ufeab\052\u016c\055\ufeab\077\ufeab\102" +
    "\ufeab\141\ufeab\174\ufeab\241\ufeab\266\ufeab\336\ufeab\u0103\ufeab" +
    "\u015f\ufeab\u0188\ufeab\001\002\000\034\037\ufea9\040\ufea9\055" +
    "\ufea9\077\ufea9\102\ufea9\141\ufea9\174\ufea9\241\ufea9\266\ufea9" +
    "\336\ufea9\u0103\ufea9\u015f\u016e\u0188\ufea9\001\002\000\032\037" +
    "\ufee2\040\ufee2\055\ufee2\077\ufee2\102\ufee2\141\ufee2\174\ufee2" +
    "\241\u0170\266\ufee2\336\ufee2\u0103\ufee2\u0188\ufee2\001\002\000" +
    "\030\037\ufeb3\040\ufeb3\055\ufeb3\077\ufeb3\102\ufeb3\141\ufeb3" +
    "\174\ufeb3\266\ufeb3\336\ufeb3\u0103\ufeb3\u0188\ufeb3\001\002\000" +
    "\014\037\ufed1\040\ufed1\055\ufed1\u0103\ufed1\u0188\ufed1\001\002" +
    "\000\030\074\ufece\077\u01bd\102\ufead\137\u01b0\140\u01b7\141" +
    "\u01bb\241\u01ba\244\ufece\257\u01b5\266\u01b4\336\u01bc\001\002" +
    "\000\014\037\ufed7\040\ufed7\055\ufed7\u0103\ufed7\u0188\ufed7\001" +
    "\002\000\036\037\ufec4\040\ufec4\055\ufec4\077\ufec4\102\ufec4" +
    "\137\ufec4\140\ufec4\141\ufec4\174\ufec4\241\ufec4\266\ufec4\336" +
    "\ufec4\u0103\ufec4\u0188\ufec4\001\002\000\036\037\ufec5\040\ufec5" +
    "\055\ufec5\077\ufec5\102\ufec5\137\ufec5\140\ufec5\141\ufec5\174" +
    "\ufec5\241\ufec5\266\ufec5\336\ufec5\u0103\ufec5\u0188\ufec5\001\002" +
    "\000\036\037\ufec3\040\ufec3\055\ufec3\077\ufec3\102\ufec3\137" +
    "\ufec3\140\ufec3\141\ufec3\174\ufec3\241\ufec3\266\ufec3\336\ufec3" +
    "\u0103\ufec3\u0188\ufec3\001\002\000\036\037\ufec2\040\ufec2\055" +
    "\ufec2\077\ufec2\102\ufec2\137\ufec2\140\ufec2\141\ufec2\174\ufec2" +
    "\241\ufec2\266\ufec2\336\ufec2\u0103\ufec2\u0188\ufec2\001\002\000" +
    "\036\037\ufec0\040\ufec0\055\ufec0\077\ufec0\102\ufec0\137\u01d7" +
    "\140\ufec0\141\ufec0\174\ufec0\241\ufec0\266\ufec0\336\ufec0\u0103" +
    "\ufec0\u0188\ufec0\001\002\000\036\037\ufec6\040\ufec6\055\ufec6" +
    "\077\ufec6\102\ufec6\137\ufec6\140\ufec6\141\ufec6\174\ufec6\241" +
    "\ufec6\266\ufec6\336\ufec6\u0103\ufec6\u0188\ufec6\001\002\000\036" +
    "\037\ufebe\040\ufebe\052\u01dd\055\ufebe\077\ufebe\102\ufebe\140" +
    "\ufebe\141\ufebe\174\ufebe\241\ufebe\266\ufebe\336\ufebe\u0103\ufebe" +
    "\u0188\ufebe\001\002\000\034\037\ufee2\040\ufee2\055\ufee2\077" +
    "\ufee2\102\ufee2\140\ufee2\141\ufee2\174\ufee2\241\u0170\266\ufee2" +
    "\336\ufee2\u0103\ufee2\u0188\ufee2\001\002\000\032\037\ufeba\040" +
    "\ufeba\055\ufeba\077\ufeba\102\ufeba\140\u01da\141\ufeba\174\ufeba" +
    "\266\ufeba\336\ufeba\u0103\ufeba\u0188\ufeba\001\002\000\030\037" +
    "\ufebb\040\ufebb\055\ufebb\077\ufebb\102\ufebb\141\ufebb\174\ufebb" +
    "\266\ufebb\336\ufebb\u0103\ufebb\u0188\ufebb\001\002\000\030\037" +
    "\ufeb8\040\ufeb8\055\ufeb8\077\ufeb6\102\ufeb6\141\ufeb6\174\u014c" +
    "\266\ufeb6\336\ufeb6\u0103\ufeb8\u0188\ufeb8\001\002\000\014\037" +
    "\ufed4\040\ufed4\055\ufed4\u0103\ufed4\u0188\ufed4\001\002\000\004" +
    "\016\u01df\001\002\000\034\037\ufec1\040\ufec1\055\ufec1\077" +
    "\ufec1\102\ufec1\140\ufec1\141\ufec1\174\ufec1\241\ufec1\266\ufec1" +
    "\336\ufec1\u0103\ufec1\u0188\ufec1\001\002\000\004\040\u01e0\001" +
    "\002\000\004\016\u01e1\001\002\000\004\055\u01e2\001\002" +
    "\000\034\037\ufebf\040\ufebf\055\ufebf\077\ufebf\102\ufebf\140" +
    "\ufebf\141\ufebf\174\ufebf\241\ufebf\266\ufebf\336\ufebf\u0103\ufebf" +
    "\u0188\ufebf\001\002\000\030\037\ufeb4\040\ufeb4\055\ufeb4\077" +
    "\ufeb4\102\ufeb4\141\ufeb4\174\ufeb4\266\ufeb4\336\ufeb4\u0103\ufeb4" +
    "\u0188\ufeb4\001\002\000\004\105\u01e9\001\002\000\032\037" +
    "\ufecd\040\ufecd\055\ufecd\077\ufecd\102\ufecd\140\ufecd\141\ufecd" +
    "\174\ufecd\266\ufecd\336\ufecd\u0103\ufecd\u0188\ufecd\001\002\000" +
    "\032\037\ufeba\040\ufeba\055\ufeba\077\ufeba\102\ufeba\140\u01da" +
    "\141\ufeba\174\ufeba\266\ufeba\336\ufeba\u0103\ufeba\u0188\ufeba\001" +
    "\002\000\030\037\ufeb8\040\ufeb8\055\ufeb8\077\ufeb6\102\ufeb6" +
    "\141\ufeb6\174\u014c\266\ufeb6\336\ufeb6\u0103\ufeb8\u0188\ufeb8\001" +
    "\002\000\014\037\ufed2\040\ufed2\055\ufed2\u0103\ufed2\u0188\ufed2" +
    "\001\002\000\036\037\ufec9\040\ufec9\055\ufec9\077\ufec9\102" +
    "\ufec9\140\ufec9\141\ufec9\174\ufec9\241\u01eb\244\u01ec\266\ufec9" +
    "\336\ufec9\u0103\ufec9\u0188\ufec9\001\002\000\032\037\ufecc\040" +
    "\ufecc\055\ufecc\077\ufecc\102\ufecc\140\ufecc\141\ufecc\174\ufecc" +
    "\266\ufecc\336\ufecc\u0103\ufecc\u0188\ufecc\001\002\000\004\244" +
    "\u01ed\001\002\000\032\037\ufeca\040\ufeca\055\ufeca\077\ufeca" +
    "\102\ufeca\140\ufeca\141\ufeca\174\ufeca\266\ufeca\336\ufeca\u0103" +
    "\ufeca\u0188\ufeca\001\002\000\032\037\ufecb\040\ufecb\055\ufecb" +
    "\077\ufecb\102\ufecb\140\ufecb\141\ufecb\174\ufecb\266\ufecb\336" +
    "\ufecb\u0103\ufecb\u0188\ufecb\001\002\000\034\037\ufee2\040\ufee2" +
    "\055\ufee2\077\ufee2\102\ufee2\140\ufee2\141\ufee2\174\ufee2\241" +
    "\u0170\266\ufee2\336\ufee2\u0103\ufee2\u0188\ufee2\001\002\000\032" +
    "\037\ufeba\040\ufeba\055\ufeba\077\ufeba\102\ufeba\140\u01da\141" +
    "\ufeba\174\ufeba\266\ufeba\336\ufeba\u0103\ufeba\u0188\ufeba\001\002" +
    "\000\030\037\ufeb8\040\ufeb8\055\ufeb8\077\ufeb6\102\ufeb6\141" +
    "\ufeb6\174\u014c\266\ufeb6\336\ufeb6\u0103\ufeb8\u0188\ufeb8\001\002" +
    "\000\014\037\ufed3\040\ufed3\055\ufed3\u0103\ufed3\u0188\ufed3\001" +
    "\002\000\044\037\ufec8\040\ufec8\055\ufec8\074\ufec8\077\ufec8" +
    "\102\ufec8\137\ufec8\140\ufec8\141\ufec8\174\ufec8\241\ufec8\244" +
    "\ufec8\257\ufec8\266\ufec8\336\ufec8\u0103\ufec8\u0188\ufec8\001\002" +
    "\000\004\053\u01f4\001\002\000\062\005\uffd4\037\uffd4\040" +
    "\uffd4\052\uffd4\055\uffd4\074\uffd4\076\uffd4\077\uffd4\102\uffd4" +
    "\137\uffd4\140\uffd4\141\uffd4\160\uffd4\174\uffd4\241\uffd4\244" +
    "\uffd4\257\uffd4\266\uffd4\334\uffd4\336\uffd4\u0103\uffd4\u0166\uffd4" +
    "\u0169\uffd4\u0188\uffd4\001\002\000\014\077\ufeb7\102\ufeb7\141" +
    "\ufeb7\266\ufeb7\336\ufeb7\001\002\000\022\012\052\050\053" +
    "\077\ufeb6\141\ufeb6\156\u0148\174\u014c\266\ufeb6\336\ufeb6\001" +
    "\002\000\010\037\ufe84\u0103\ufe84\u0188\ufe84\001\002\000\014" +
    "\037\ufed9\040\u01f6\055\ufed9\u0103\ufed9\u0188\ufed9\001\002\000" +
    "\012\037\ufeda\055\ufeda\u0103\ufeda\u0188\ufeda\001\002\000\010" +
    "\052\ufeaf\152\u0155\236\u0156\001\002\000\004\052\u0158\001" +
    "\002\000\014\037\ufe97\040\ufe97\055\ufe97\u0103\ufe97\u0188\ufe97" +
    "\001\002\000\006\012\052\050\053\001\002\000\054\050" +
    "\u0199\060\u0200\240\u0197\303\u01a6\306\u0201\364\u019c\376\u01a3" +
    "\u0104\u019d\u0111\u0194\u011a\u019e\u011d\u0192\u0120\u01a0\u0133\u019f\u013f" +
    "\u0196\u0149\u0195\u014c\u0198\u0159\u01a2\u015a\u019b\u0189\u01a5\u018a\u0191" +
    "\u018b\u0193\001\002\000\014\037\ufec7\160\u01ae\244\ufec7\u0103" +
    "\ufec7\u0188\ufec7\001\002\000\006\140\ufe7e\241\ufe7e\001\002" +
    "\000\006\140\ufe7d\241\ufe7d\001\002\000\006\140\u0205\241" +
    "\u0206\001\002\000\010\037\ufe82\u0103\ufe82\u0188\ufe82\001\002" +
    "\000\010\037\ufe81\u0103\ufe81\u0188\ufe81\001\002\000\010\037" +
    "\ufe7c\u0103\ufe7c\u0188\ufe7c\001\002\000\004\074\u0208\001\002" +
    "\000\010\037\ufe80\u0103\ufe80\u0188\ufe80\001\002\000\004\105" +
    "\u0209\001\002\000\010\037\ufe7b\u0103\ufe7b\u0188\ufe7b\001\002" +
    "\000\012\037\ufebc\244\u0179\u0103\ufebc\u0188\ufebc\001\002\000" +
    "\010\037\ufe7f\u0103\ufe7f\u0188\ufe7f\001\002\000\010\037\ufe8a" +
    "\u0103\ufe8a\u0188\ufe8a\001\002\000\006\160\ufe8e\176\ufe8e\001" +
    "\002\000\006\160\ufe8d\176\ufe8d\001\002\000\006\160\u0210" +
    "\176\u0212\001\002\000\006\012\052\050\053\001\002\000" +
    "\010\037\ufe8f\u0103\ufe8f\u0188\ufe8f\001\002\000\004\132\u0213" +
    "\001\002\000\004\u010b\u0214\001\002\000\010\037\ufe8b\u0103" +
    "\ufe8b\u0188\ufe8b\001\002\000\010\037\ufe8c\u0103\ufe8c\u0188\ufe8c" +
    "\001\002\000\006\012\ufe5a\050\ufe5a\001\002\000\006\012" +
    "\052\050\053\001\002\000\006\012\ufe5b\050\ufe5b\001\002" +
    "\000\006\012\052\050\053\001\002\000\004\052\u021b\001" +
    "\002\000\006\042\150\055\ufe1b\001\002\000\004\055\ufe1c" +
    "\001\002\000\050\076\u0229\240\ufe16\303\ufe16\364\ufe16\376" +
    "\ufe16\u0104\ufe16\u0111\ufe16\u011a\ufe16\u011d\ufe16\u0120\ufe16\u0133\ufe16" +
    "\u013f\ufe16\u0149\ufe16\u014c\ufe16\u0159\ufe16\u015a\ufe16\u0189\ufe16\u018a" +
    "\ufe16\u018b\ufe16\001\002\000\006\040\u025a\055\ufe13\001\002" +
    "\000\004\055\u0220\001\002\000\004\u016c\u0221\001\002\000" +
    "\050\220\u0224\240\u0197\303\u01a6\364\u019c\376\u01a3\u0104\u019d" +
    "\u0111\u0194\u011a\u019e\u011d\u0192\u0120\u01a0\u0133\u019f\u013f\u0196\u0149" +
    "\u0195\u014c\u0198\u0159\u01a2\u015a\u019b\u0189\u01a5\u018a\u0191\u018b\u0193" +
    "\001\002\000\010\037\ufe0f\u0103\ufe0f\u0188\ufe0f\001\002\000" +
    "\010\037\ufe10\u0103\ufe10\u0188\ufe10\001\002\000\010\076\ufe02" +
    "\116\ufe02\334\u0227\001\002\000\010\037\ufe1d\u0103\ufe1d\u0188" +
    "\ufe1d\001\002\000\010\076\ufe02\111\ufe02\334\u0227\001\002" +
    "\000\020\332\004\335\042\u016b\u023c\u016c\u0234\u016d\u0239\u016e" +
    "\u0238\u016f\u023a\001\002\000\006\076\u0229\111\ufe16\001\002" +
    "\000\052\111\ufe17\116\ufe17\240\ufe17\303\ufe17\364\ufe17\376" +
    "\ufe17\u0104\ufe17\u0111\ufe17\u011a\ufe17\u011d\ufe17\u0120\ufe17\u0133\ufe17" +
    "\u013f\ufe17\u0149\ufe17\u014c\ufe17\u0159\ufe17\u015a\ufe17\u0189\ufe17\u018a" +
    "\ufe17\u018b\ufe17\001\002\000\004\111\u022b\001\002\000\014" +
    "\003\033\157\010\164\026\262\035\274\036\001\002\000" +
    "\004\116\u022d\001\002\000\016\016\201\017\200\020\174" +
    "\022\176\042\150\052\u0230\001\002\000\004\316\u0233\001" +
    "\002\000\004\316\ufe09\001\002\000\014\016\201\017\200" +
    "\020\174\022\176\042\150\001\002\000\004\055\u0232\001" +
    "\002\000\004\316\ufe0a\001\002\000\010\037\ufe0e\u0103\ufe0e" +
    "\u0188\ufe0e\001\002\000\004\244\u024d\001\002\000\010\076" +
    "\ufe03\111\ufe03\116\ufe03\001\002\000\004\076\u0247\001\002" +
    "\000\012\040\u0244\076\ufdf9\111\ufdf9\116\ufdf9\001\002\000" +
    "\004\u015f\u0241\001\002\000\012\040\ufdff\076\ufdff\111\ufdff" +
    "\116\ufdff\001\002\000\004\005\u023d\001\002\000\012\040" +
    "\ufdfc\076\ufdfc\111\ufdfc\116\ufdfc\001\002\000\012\040\ufe00" +
    "\076\ufe00\111\ufe00\116\ufe00\001\002\000\006\255\u0240\u015f" +
    "\u023e\001\002\000\012\040\ufdf8\076\ufdf8\111\ufdf8\116\ufdf8" +
    "\001\002\000\012\040\ufdfb\076\ufdfb\111\ufdfb\116\ufdfb\001" +
    "\002\000\012\040\ufdf7\076\ufdf7\111\ufdf7\116\ufdf7\001\002" +
    "\000\004\244\u0242\001\002\000\004\u0119\u0243\001\002\000" +
    "\012\040\ufdfd\076\ufdfd\111\ufdfd\116\ufdfd\001\002\000\020" +
    "\332\004\335\042\u016b\u023c\u016c\u0234\u016d\u0239\u016e\u0238\u016f" +
    "\u023a\001\002\000\010\076\ufe01\111\ufe01\116\ufe01\001\002" +
    "\000\010\076\ufdfa\111\ufdfa\116\ufdfa\001\002\000\014\012" +
    "\052\050\053\u0170\u0249\u0171\u024c\u0172\u0248\001\002\000\014" +
    "\040\ufe3d\074\ufe3d\076\ufe3d\111\ufe3d\116\ufe3d\001\002\000" +
    "\014\040\ufe3f\074\ufe3f\076\ufe3f\111\ufe3f\116\ufe3f\001\002" +
    "\000\014\040\ufe3c\074\ufe3c\076\ufe3c\111\ufe3c\116\ufe3c\001" +
    "\002\000\012\040\ufdf6\076\ufdf6\111\ufdf6\116\ufdf6\001\002" +
    "\000\014\040\ufe3e\074\ufe3e\076\ufe3e\111\ufe3e\116\ufe3e\001" +
    "\002\000\004\u015f\u024e\001\002\000\004\244\u024f\001\002" +
    "\000\004\u0119\u0250\001\002\000\012\040\ufdfe\076\ufdfe\111" +
    "\ufdfe\116\ufdfe\001\002\000\006\076\u0229\116\ufe16\001\002" +
    "\000\004\116\u0253\001\002\000\006\052\u0254\157\010\001" +
    "\002\000\004\157\010\001\002\000\010\037\ufe0d\u0103\ufe0d" +
    "\u0188\ufe0d\001\002\000\010\037\ufe0b\u0103\ufe0b\u0188\ufe0b\001" +
    "\002\000\004\055\u0258\001\002\000\010\037\ufe0c\u0103\ufe0c" +
    "\u0188\ufe0c\001\002\000\004\055\ufe15\001\002\000\004\042" +
    "\150\001\002\000\004\055\ufe14\001\002\000\046\240\u0197" +
    "\303\u01a6\364\u019c\376\u01a3\u0104\u019d\u0111\u0194\u011a\u019e\u011d" +
    "\u0192\u0120\u01a0\u0133\u019f\u013f\u0196\u0149\u0195\u014c\u0198\u0159\u01a2" +
    "\u015a\u019b\u0189\u01a5\u018a\u0191\u018b\u0193\001\002\000\010\040" +
    "\ufe11\055\ufe11\u016a\u025f\001\002\000\006\040\ufe18\055\ufe18" +
    "\001\002\000\006\040\ufe12\055\ufe12\001\002\000\014\037" +
    "\u0261\042\ufe58\074\ufe58\076\ufe58\334\ufe58\001\002\000\004" +
    "\016\u0291\001\002\000\012\042\150\074\ufe56\076\ufe56\334" +
    "\ufe56\001\002\000\010\074\ufe48\076\ufe48\334\u0278\001\002" +
    "\000\052\012\052\050\u0268\240\u0266\303\u01a6\364\u019c\376" +
    "\u01a3\u0104\u019d\u0111\u0194\u011a\u019e\u011d\u0192\u0120\u01a0\u0133\u019f" +
    "\u013f\u0196\u0149\u0195\u014c\u0198\u0159\u01a2\u015a\u019b\u0189\u01a5\u018a" +
    "\u0191\u018b\u0193\001\002\000\010\074\ufe57\076\ufe57\334\ufe57" +
    "\001\002\000\024\005\uffcc\040\uffcc\052\uffcc\074\uffcc\076" +
    "\uffcc\334\uffcc\u015d\u0276\u0166\uffcc\u0169\uffcc\001\002\000\004" +
    "\u016a\u0275\001\002\000\050\012\054\240\u0197\303\u01a6\364" +
    "\u019c\376\u01a3\u0104\u019d\u0111\u0194\u011a\u019e\u011d\u0192\u0120\u01a0" +
    "\u0133\u019f\u013f\u0196\u0149\u0195\u014c\u0198\u0159\u01a2\u015a\u019b\u0189" +
    "\u01a5\u018a\u0191\u018b\u0193\001\002\000\020\005\u026f\040\ufe4e" +
    "\074\ufe4e\076\ufe4e\334\ufe4e\u0166\ufe4e\u0169\ufe4e\001\002\000" +
    "\012\040\u026c\074\ufe53\076\ufe53\334\ufe53\001\002\000\010" +
    "\074\ufe55\076\ufe55\334\ufe55\001\002\000\004\042\150\001" +
    "\002\000\010\074\ufe54\076\ufe54\334\ufe54\001\002\000\016" +
    "\040\ufe4c\074\ufe4c\076\ufe4c\334\ufe4c\u0166\u0273\u0169\u0271\001" +
    "\002\000\004\257\u0270\001\002\000\016\040\ufe4f\074\ufe4f" +
    "\076\ufe4f\334\ufe4f\u0166\ufe4f\u0169\ufe4f\001\002\000\012\040" +
    "\ufe4b\074\ufe4b\076\ufe4b\334\ufe4b\001\002\000\012\040\ufe52" +
    "\074\ufe52\076\ufe52\334\ufe52\001\002\000\012\040\ufe4a\074" +
    "\ufe4a\076\ufe4a\334\ufe4a\001\002\000\012\040\ufe4d\074\ufe4d" +
    "\076\ufe4d\334\ufe4d\001\002\000\012\040\ufe50\074\ufe50\076" +
    "\ufe50\334\ufe50\001\002\000\006\u0166\u0273\u0169\u0271\001\002" +
    "\000\012\040\ufe51\074\ufe51\076\ufe51\334\ufe51\001\002\000" +
    "\012\332\004\335\042\u016b\u0289\u0173\u028b\001\002\000\006" +
    "\074\u027b\076\ufe3a\001\002\000\004\076\u027d\001\002\000" +
    "\004\105\u027c\001\002\000\004\076\ufe3b\001\002\000\004" +
    "\111\u027f\001\002\000\010\037\ufe5c\u0103\ufe5c\u0188\ufe5c\001" +
    "\002\000\014\003\033\157\010\164\026\262\035\274\036" +
    "\001\002\000\016\003\033\157\010\164\026\262\035\274" +
    "\036\316\ufe36\001\002\000\004\316\u0282\001\002\000\010" +
    "\037\ufe39\u0103\ufe39\u0188\ufe39\001\002\000\016\003\033\157" +
    "\010\164\026\262\035\274\036\316\ufe34\001\002\000\004" +
    "\316\ufe38\001\002\000\004\316\ufe35\001\002\000\004\316" +
    "\ufe37\001\002\000\010\040\u028f\074\ufe40\076\ufe40\001\002" +
    "\000\006\074\ufe49\076\ufe49\001\002\000\010\040\ufe46\074" +
    "\ufe46\076\ufe46\001\002\000\004\076\u028c\001\002\000\010" +
    "\040\ufe45\074\ufe45\076\ufe45\001\002\000\014\012\052\050" +
    "\053\u0170\u0249\u0171\u024c\u0172\u0248\001\002\000\010\040\ufe44" +
    "\074\ufe44\076\ufe44\001\002\000\006\074\ufe47\076\ufe47\001" +
    "\002\000\012\332\004\335\042\u016b\u0289\u0173\u028b\001\002" +
    "\000\006\074\ufe41\076\ufe41\001\002\000\012\042\ufe59\074" +
    "\ufe59\076\ufe59\334\ufe59\001\002\000\044\002\uffec\003\uffec" +
    "\066\uffec\111\uffec\132\uffec\157\uffec\164\uffec\166\uffec\213" +
    "\uffec\253\uffec\254\uffec\262\uffec\274\uffec\302\uffec\306\uffec" +
    "\332\uffec\335\uffec\001\002\000\010\012\uff4c\050\uff4c\172" +
    "\u0295\001\002\000\006\012\052\050\053\001\002\000\006" +
    "\012\uff4d\050\uff4d\001\002\000\010\052\u012f\257\uff4a\307" +
    "\uff4a\001\002\000\006\257\uff4b\307\uff4b\001\002\000\006" +
    "\257\u0299\307\u029a\001\002\000\004\307\u02af\001\002\000" +
    "\004\052\u029c\001\002\000\010\037\uff4e\u0103\uff4e\u0188\uff4e" +
    "\001\002\000\014\016\u02a3\017\u02a1\020\u029e\022\u029f\257" +
    "\u029d\001\002\000\006\040\uff48\055\uff48\001\002\000\006" +
    "\040\uff45\055\uff45\001\002\000\006\040\uff46\055\uff46\001" +
    "\002\000\004\055\u02a8\001\002\000\006\040\uff44\055\uff44" +
    "\001\002\000\006\040\u02a4\055\uff42\001\002\000\006\040" +
    "\uff47\055\uff47\001\002\000\014\016\u02a3\017\u02a1\020\u029e" +
    "\022\u029f\257\u029d\001\002\000\004\055\uff49\001\002\000" +
    "\006\040\u02a4\055\uff42\001\002\000\004\055\uff43\001\002" +
    "\000\012\037\uff3e\040\u02aa\u0103\uff3e\u0188\uff3e\001\002\000" +
    "\010\037\uff41\u0103\uff41\u0188\uff41\001\002\000\004\052\u02ab" +
    "\001\002\000\014\016\u02a3\017\u02a1\020\u029e\022\u029f\257" +
    "\u029d\001\002\000\004\055\u02ad\001\002\000\012\037\uff3e" +
    "\040\u02aa\u0103\uff3e\u0188\uff3e\001\002\000\010\037\uff3f\u0103" +
    "\uff3f\u0188\uff3f\001\002\000\010\037\uff40\u0103\uff40\u0188\uff40" +
    "\001\002\000\050\002\ufff3\003\ufff3\066\ufff3\111\ufff3\116" +
    "\ufff3\132\ufff3\157\ufff3\164\ufff3\166\ufff3\213\ufff3\253\ufff3" +
    "\254\ufff3\262\ufff3\274\ufff3\302\ufff3\306\ufff3\316\ufff3\332" +
    "\ufff3\335\ufff3\001\002\000\036\003\033\066\030\111\022" +
    "\157\010\164\026\213\023\253\013\254\037\262\035\274" +
    "\036\302\034\306\032\332\004\335\042\001\002\000\006" +
    "\132\u02b6\166\u02b5\001\002\000\010\037\045\u0103\047\u0188" +
    "\046\001\002\000\010\037\045\u0103\047\u0188\046\001\002" +
    "\000\014\037\ufe60\242\u02bb\245\u02b8\u0103\ufe60\u0188\ufe60\001" +
    "\002\000\014\037\ufe5d\242\u02bb\245\u02b8\u0103\ufe5d\u0188\ufe5d" +
    "\001\002\000\044\002\uffea\003\uffea\066\uffea\111\uffea\132" +
    "\uffea\157\uffea\164\uffea\166\uffea\213\uffea\253\uffea\254\uffea" +
    "\262\uffea\274\uffea\302\uffea\306\uffea\332\uffea\335\uffea\001" +
    "\002\000\016\012\ufe63\037\ufe63\042\ufe63\050\ufe63\u0103\ufe63" +
    "\u0188\ufe63\001\002\000\010\037\ufe5f\u0103\ufe5f\u0188\ufe5f\001" +
    "\002\000\016\012\052\037\ufe65\042\150\050\053\u0103\ufe65" +
    "\u0188\ufe65\001\002\000\016\012\ufe64\037\ufe64\042\ufe64\050" +
    "\ufe64\u0103\ufe64\u0188\ufe64\001\002\000\010\037\ufe67\u0103\ufe67" +
    "\u0188\ufe67\001\002\000\010\037\ufe66\u0103\ufe66\u0188\ufe66\001" +
    "\002\000\010\037\ufe5e\u0103\ufe5e\u0188\ufe5e\001\002\000\010" +
    "\037\ufe62\u0103\ufe62\u0188\ufe62\001\002\000\016\012\052\037" +
    "\ufe65\042\150\050\053\u0103\ufe65\u0188\ufe65\001\002\000\010" +
    "\037\ufe61\u0103\ufe61\u0188\ufe61\001\002\000\044\002\ufe6c\003" +
    "\ufe6c\066\ufe6c\111\ufe6c\132\ufe6c\157\ufe6c\164\ufe6c\166\ufe6c" +
    "\213\ufe6c\253\ufe6c\254\ufe6c\262\ufe6c\274\ufe6c\302\ufe6c\306" +
    "\ufe6c\332\ufe6c\335\ufe6c\001\002\000\044\002\ufe6b\003\ufe6b" +
    "\066\ufe6b\111\ufe6b\132\ufe6b\157\ufe6b\164\ufe6b\166\ufe6b\213" +
    "\ufe6b\253\ufe6b\254\ufe6b\262\ufe6b\274\ufe6b\302\ufe6b\306\ufe6b" +
    "\332\ufe6b\335\ufe6b\001\002\000\010\037\uff17\u0103\uff17\u0188" +
    "\uff17\001\002\000\010\037\uff19\u0103\uff19\u0188\uff19\001\002" +
    "\000\010\037\uff1d\u0103\uff1d\u0188\uff1d\001\002\000\010\037" +
    "\uff18\u0103\uff18\u0188\uff18\001\002\000\006\012\052\050\053" +
    "\001\002\000\006\012\052\050\053\001\002\000\010\152" +
    "\ufef0\156\ufef0\236\ufef0\001\002\000\010\037\uff1c\u0103\uff1c" +
    "\u0188\uff1c\001\002\000\010\037\uff1e\u0103\uff1e\u0188\uff1e\001" +
    "\002\000\006\012\052\050\053\001\002\000\006\012\052" +
    "\050\053\001\002\000\010\037\uff1b\u0103\uff1b\u0188\uff1b\001" +
    "\002\000\010\037\uff1a\u0103\uff1a\u0188\uff1a\001\002\000\010" +
    "\152\u0155\156\ufeaf\236\u0156\001\002\000\004\156\u02d3\001" +
    "\002\000\006\012\052\050\053\001\002\000\004\u015f\u02d5" +
    "\001\002\000\006\012\052\050\053\001\002\000\004\052" +
    "\u02d7\001\002\000\006\012\052\050\053\001\002\000\016" +
    "\037\ufee9\326\ufee9\u0103\ufee9\u0110\u02d9\u015f\ufee9\u0188\ufee9\001" +
    "\002\000\004\052\u012f\001\002\000\014\037\uff6a\326\140" +
    "\u0103\uff6a\u015f\uff6a\u0188\uff6a\001\002\000\012\037\ufee7\u0103" +
    "\ufee7\u015f\u02dc\u0188\ufee7\001\002\000\006\012\052\050\053" +
    "\001\002\000\010\037\ufef1\u0103\ufef1\u0188\ufef1\001\002\000" +
    "\004\052\u02df\001\002\000\006\012\052\050\053\001\002" +
    "\000\004\055\u02e1\001\002\000\010\037\ufee8\u0103\ufee8\u0188" +
    "\ufee8\001\002\000\014\037\ufeea\326\ufeea\u0103\ufeea\u015f\ufeea" +
    "\u0188\ufeea\001\002\000\012\040\uff55\055\uff55\267\u015b\370" +
    "\u015c\001\002\000\004\055\u02e5\001\002\000\016\037\ufeee" +
    "\326\ufeee\u0103\ufeee\u0110\ufeee\u015f\ufeee\u0188\ufeee\001\002\000" +
    "\006\040\u02e8\055\ufeeb\001\002\000\004\055\ufeed\001\002" +
    "\000\006\012\052\050\053\001\002\000\012\040\uff55\055" +
    "\uff55\267\u015b\370\u015c\001\002\000\006\040\u02e8\055\ufeeb" +
    "\001\002\000\004\055\ufeec\001\002\000\004\076\u02ed\001" +
    "\002\000\004\157\010\001\002\000\010\037\ufef2\u0103\ufef2" +
    "\u0188\ufef2\001\002\000\004\052\u02f0\001\002\000\022\012" +
    "\052\050\053\077\ufeb6\141\ufeb6\156\u0148\174\u014c\266\ufeb6" +
    "\336\ufeb6\001\002\000\006\040\u01f6\055\ufed9\001\002\000" +
    "\004\055\u02f3\001\002\000\012\037\ufee4\u0103\ufee4\u015f\u02f5" +
    "\u0188\ufee4\001\002\000\010\037\ufee6\u0103\ufee6\u0188\ufee6\001" +
    "\002\000\004\336\u02f6\001\002\000\010\037\ufee5\u0103\ufee5" +
    "\u0188\ufee5\001\002\000\010\037\uff16\u0103\uff16\u0188\uff16\001" +
    "\002\000\014\037\uff12\160\uff12\u0103\uff12\u015f\u02fa\u0188\uff12" +
    "\001\002\000\012\037\uff07\160\u032c\u0103\uff07\u0188\uff07\001" +
    "\002\000\006\052\uff10\336\u02fc\001\002\000\010\037\uff15" +
    "\u0103\uff15\u0188\uff15\001\002\000\004\052\uff11\001\002\000" +
    "\004\052\u02fe\001\002\000\006\u0148\u0304\u017e\u0303\001\002" +
    "\000\012\037\uff13\160\uff13\u0103\uff13\u0188\uff13\001\002\000" +
    "\014\037\uff0e\040\u0301\160\uff0e\u0103\uff0e\u0188\uff0e\001\002" +
    "\000\004\052\u02fe\001\002\000\012\037\uff0f\160\uff0f\u0103" +
    "\uff0f\u0188\uff0f\001\002\000\004\005\uff0c\001\002\000\004" +
    "\005\uff0b\001\002\000\004\005\u0306\001\002\000\004\020" +
    "\u0307\001\002\000\004\040\u0308\001\002\000\006\067\u030b" +
    "\u017f\u030a\001\002\000\004\005\u030c\001\002\000\004\005" +
    "\uff09\001\002\000\004\005\uff0a\001\002\000\004\020\u030d" +
    "\001\002\000\006\040\u030f\055\uff05\001\002\000\004\055" +
    "\u032b\001\002\000\010\u0118\u0318\u0184\u0317\u0186\u0316\001\002" +
    "\000\006\040\uff00\055\uff00\001\002\000\006\040\uff03\055" +
    "\uff03\001\002\000\006\040\uff04\055\uff04\001\002\000\006" +
    "\040\u030f\055\uff05\001\002\000\006\040\uff02\055\uff02\001" +
    "\002\000\006\040\uff01\055\uff01\001\002\000\004\005\u0325" +
    "\001\002\000\004\005\u0320\001\002\000\004\005\u0319\001" +
    "\002\000\004\016\u031a\001\002\000\016\040\ufefe\055\ufefe" +
    "\u0180\u031d\u0181\u031e\u0182\u031c\u0183\u031f\001\002\000\006\040" +
    "\ufeff\055\ufeff\001\002\000\006\040\ufefa\055\ufefa\001\002" +
    "\000\006\040\ufefd\055\ufefd\001\002\000\006\040\ufefb\055" +
    "\ufefb\001\002\000\006\040\ufefc\055\ufefc\001\002\000\006" +
    "\016\u0322\u0185\u0323\001\002\000\006\040\ufef9\055\ufef9\001" +
    "\002\000\012\u0180\u031d\u0181\u031e\u0182\u031c\u0183\u031f\001\002" +
    "\000\006\040\ufef7\055\ufef7\001\002\000\006\040\ufef8\055" +
    "\ufef8\001\002\000\004\016\u0326\001\002\000\020\040\ufef3" +
    "\055\ufef3\u0180\u031d\u0181\u031e\u0182\u031c\u0183\u031f\u0187\u0328\001" +
    "\002\000\006\040\ufef5\055\ufef5\001\002\000\006\040\ufef4" +
    "\055\ufef4\001\002\000\006\040\ufef6\055\ufef6\001\002\000" +
    "\004\055\uff06\001\002\000\014\037\uff0d\040\uff0d\160\uff0d" +
    "\u0103\uff0d\u0188\uff0d\001\002\000\006\012\052\050\053\001" +
    "\002\000\010\037\uff14\u0103\uff14\u0188\uff14\001\002\000\010" +
    "\037\uff08\u0103\uff08\u0188\uff08\001\002\000\016\012\052\037" +
    "\ufe71\042\150\050\053\u0103\ufe71\u0188\ufe71\001\002\000\012" +
    "\037\ufe6f\334\u0334\u0103\ufe6f\u0188\ufe6f\001\002\000\012\037" +
    "\ufe69\334\ufe69\u0103\ufe69\u0188\ufe69\001\002\000\012\037\ufe68" +
    "\334\ufe68\u0103\ufe68\u0188\ufe68\001\002\000\010\037\ufe73\u0103" +
    "\ufe73\u0188\ufe73\001\002\000\004\u0174\u0336\001\002\000\010" +
    "\037\ufe72\u0103\ufe72\u0188\ufe72\001\002\000\012\020\u0337\037" +
    "\ufe6d\u0103\ufe6d\u0188\ufe6d\001\002\000\010\037\ufe6e\u0103\ufe6e" +
    "\u0188\ufe6e\001\002\000\010\037\ufe70\u0103\ufe70\u0188\ufe70\001" +
    "\002\000\044\002\uffff\003\033\066\030\111\022\132\uffff" +
    "\157\010\164\026\166\uffff\213\023\253\013\254\037\262" +
    "\035\274\036\302\034\306\032\332\004\335\042\001\002" +
    "\000\010\002\ufffb\132\ufffb\166\ufffb\001\002\000\044\002" +
    "\uffed\003\uffed\066\uffed\111\uffed\132\uffed\157\uffed\164\uffed" +
    "\166\uffed\213\uffed\253\uffed\254\uffed\262\uffed\274\uffed\302" +
    "\uffed\306\uffed\332\uffed\335\uffed\001\002\000\050\002\ufff1" +
    "\003\ufff1\066\ufff1\111\ufff1\116\ufff1\132\ufff1\157\ufff1\164" +
    "\ufff1\166\ufff1\213\ufff1\253\ufff1\254\ufff1\262\ufff1\274\ufff1" +
    "\302\ufff1\306\ufff1\316\ufff1\332\ufff1\335\ufff1\001\002\000" +
    "\050\002\ufff0\003\ufff0\066\ufff0\111\ufff0\116\ufff0\132\ufff0" +
    "\157\ufff0\164\ufff0\166\ufff0\213\ufff0\253\ufff0\254\ufff0\262" +
    "\ufff0\274\ufff0\302\ufff0\306\ufff0\316\ufff0\332\ufff0\335\ufff0" +
    "\001\002\000\010\002\ufffe\132\ufffe\166\ufffe\001\002\000" +
    "\006\012\052\050\053\001\002\000\010\037\uffa9\u0103\uffa9" +
    "\u0188\uffa9\001\002\000\010\002\ufffd\132\ufffd\166\ufffd\001" +
    "\002\000\024\016\u0347\017\u0349\020\u034a\022\u0343\037\ufdf5" +
    "\042\150\052\u0346\u0103\ufdf5\u0188\ufdf5\001\002\000\014\037" +
    "\ufded\040\ufded\055\ufded\u0103\ufded\u0188\ufded\001\002\000\004" +
    "\005\u0350\001\002\000\014\037\ufdef\040\u034d\055\ufdef\u0103" +
    "\ufdef\u0188\ufdef\001\002\000\014\016\u0347\017\u0349\020\u034a" +
    "\022\u0343\042\150\001\002\000\014\037\ufdee\040\ufdee\055" +
    "\ufdee\u0103\ufdee\u0188\ufdee\001\002\000\010\037\ufdf3\u0103\ufdf3" +
    "\u0188\ufdf3\001\002\000\014\037\ufdeb\040\ufdeb\055\ufdeb\u0103" +
    "\ufdeb\u0188\ufdeb\001\002\000\014\037\ufdec\040\ufdec\055\ufdec" +
    "\u0103\ufdec\u0188\ufdec\001\002\000\004\055\u034c\001\002\000" +
    "\010\037\ufdf4\u0103\ufdf4\u0188\ufdf4\001\002\000\014\016\u0347" +
    "\017\u0349\020\u034a\022\u0343\042\150\001\002\000\012\037" +
    "\ufdf1\055\ufdf1\u0103\ufdf1\u0188\ufdf1\001\002\000\012\037\ufdf0" +
    "\055\ufdf0\u0103\ufdf0\u0188\ufdf0\001\002\000\012\016\u0347\017" +
    "\u0349\020\u034a\022\u0343\001\002\000\014\037\ufdef\040\u034d" +
    "\055\ufdef\u0103\ufdef\u0188\ufdef\001\002\000\012\037\ufdf2\055" +
    "\ufdf2\u0103\ufdf2\u0188\ufdf2\001\002\000\042\010\uff5f\012\uff5f" +
    "\016\uff5f\017\uff5f\020\uff5f\022\uff5f\042\uff5f\050\uff5f\052" +
    "\uff5f\237\uff5f\244\uff5f\377\uff5f\u012c\uff5f\u0131\uff5f\u013c\uff5f" +
    "\u013d\uff5f\001\002\000\042\010\uff60\012\uff60\016\uff60\017" +
    "\uff60\020\uff60\022\uff60\042\uff60\050\uff60\052\uff60\237\uff60" +
    "\244\uff60\377\uff60\u012c\uff60\u0131\uff60\u013c\uff60\u013d\uff60\001" +
    "\002\000\042\010\uff82\012\uff82\016\uff82\017\uff82\020\uff82" +
    "\022\uff82\042\uff82\050\uff82\052\uff82\237\116\244\uff82\377" +
    "\uff82\u012c\uff82\u0131\uff82\u013c\uff82\u013d\uff82\001\002\000\040" +
    "\010\u0359\012\052\016\154\017\163\020\170\022\147\042" +
    "\150\050\053\052\165\244\166\377\160\u012c\146\u0131\167" +
    "\u013c\164\u013d\162\001\002\000\040\012\052\020\u0360\037" +
    "\uffa6\040\uffa6\050\053\055\uffa6\074\uffa6\076\u035f\107\uffa6" +
    "\126\uffa6\131\uffa6\311\uffa6\326\uffa6\u0103\uffa6\u0188\uffa6\001" +
    "\002\000\026\037\uff2a\055\uff2a\074\uff2a\107\u0365\126\uff2a" +
    "\131\uff2a\311\uff2a\326\uff2a\u0103\uff2a\u0188\uff2a\001\002\000" +
    "\030\037\uff66\040\u035a\055\uff66\074\uff66\107\uff66\126\uff66" +
    "\131\uff66\311\uff66\326\uff66\u0103\uff66\u0188\uff66\001\002\000" +
    "\036\012\052\016\154\017\163\020\170\022\147\042\150" +
    "\050\053\052\165\244\166\377\160\u012c\146\u0131\167\u013c" +
    "\164\u013d\162\001\002\000\026\037\uff68\055\uff68\074\uff68" +
    "\107\uff68\126\uff68\131\uff68\311\uff68\326\uff68\u0103\uff68\u0188" +
    "\uff68\001\002\000\040\012\052\020\u0360\037\uffa6\040\uffa6" +
    "\050\053\055\uffa6\074\uffa6\076\u035f\107\uffa6\126\uffa6\131" +
    "\uffa6\311\uffa6\326\uffa6\u0103\uffa6\u0188\uffa6\001\002\000\044" +
    "\037\uffa5\040\uffa5\055\uffa5\074\uffa5\107\uffa5\112\uffa5\126" +
    "\uffa5\127\uffa5\131\uffa5\161\uffa5\200\uffa5\211\uffa5\311\uffa5" +
    "\326\uffa5\u0103\uffa5\u015f\uffa5\u0188\uffa5\001\002\000\044\037" +
    "\uffa7\040\uffa7\055\uffa7\074\uffa7\107\uffa7\112\uffa7\126\uffa7" +
    "\127\uffa7\131\uffa7\161\uffa7\200\uffa7\211\uffa7\311\uffa7\326" +
    "\uffa7\u0103\uffa7\u015f\uffa7\u0188\uffa7\001\002\000\010\012\052" +
    "\020\u0360\050\053\001\002\000\044\037\uffa4\040\uffa4\055" +
    "\uffa4\074\uffa4\107\uffa4\112\uffa4\126\uffa4\127\uffa4\131\uffa4" +
    "\161\uffa4\200\uffa4\211\uffa4\311\uffa4\326\uffa4\u0103\uffa4\u015f" +
    "\uffa4\u0188\uffa4\001\002\000\030\037\uff66\040\u035a\055\uff66" +
    "\074\uff66\107\uff66\126\uff66\131\uff66\311\uff66\326\uff66\u0103" +
    "\uff66\u0188\uff66\001\002\000\026\037\uff67\055\uff67\074\uff67" +
    "\107\uff67\126\uff67\131\uff67\311\uff67\326\uff67\u0103\uff67\u0188" +
    "\uff67\001\002\000\044\037\uffa8\040\uffa8\055\uffa8\074\uffa8" +
    "\107\uffa8\112\uffa8\126\uffa8\127\uffa8\131\uffa8\161\uffa8\200" +
    "\uffa8\211\uffa8\311\uffa8\326\uffa8\u0103\uffa8\u015f\uffa8\u0188\uffa8" +
    "\001\002\000\024\037\uff6a\055\uff6a\074\uff6a\126\uff6a\131" +
    "\uff6a\311\uff6a\326\140\u0103\uff6a\u0188\uff6a\001\002\000\006" +
    "\012\052\050\053\001\002\000\050\012\052\020\u0360\037" +
    "\uffa6\040\uffa6\050\053\055\uffa6\074\uffa6\076\u035f\112\uffa6" +
    "\126\uffa6\127\uffa6\131\uffa6\161\uffa6\200\uffa6\211\uffa6\311" +
    "\uffa6\326\uffa6\u0103\uffa6\u0188\uffa6\001\002\000\040\037\uff26" +
    "\040\uff26\055\uff26\074\uff26\112\u036d\126\uff26\127\u036b\131" +
    "\uff26\161\u0368\200\uff21\211\u036a\311\uff26\326\uff26\u0103\uff26" +
    "\u0188\uff26\001\002\000\004\200\uff25\001\002\000\004\200" +
    "\u0377\001\002\000\006\200\uff1f\314\u036e\001\002\000\006" +
    "\200\uff1f\314\u036e\001\002\000\026\037\uff28\040\u0370\055" +
    "\uff28\074\uff28\126\uff28\131\uff28\311\uff28\326\uff28\u0103\uff28" +
    "\u0188\uff28\001\002\000\006\200\uff1f\314\u036e\001\002\000" +
    "\004\200\uff20\001\002\000\004\200\uff22\001\002\000\006" +
    "\012\052\050\053\001\002\000\024\037\uff2b\055\uff2b\074" +
    "\uff2b\126\uff2b\131\uff2b\311\uff2b\326\uff2b\u0103\uff2b\u0188\uff2b" +
    "\001\002\000\046\012\052\020\u0360\037\uffa6\050\053\055" +
    "\uffa6\074\uffa6\076\u035f\112\uffa6\126\uffa6\127\uffa6\131\uffa6" +
    "\161\uffa6\200\uffa6\211\uffa6\311\uffa6\326\uffa6\u0103\uffa6\u0188" +
    "\uffa6\001\002\000\036\037\uff26\055\uff26\074\uff26\112\u036d" +
    "\126\uff26\127\u036b\131\uff26\161\u0368\200\uff21\211\u036a\311" +
    "\uff26\326\uff26\u0103\uff26\u0188\uff26\001\002\000\024\037\uff29" +
    "\055\uff29\074\uff29\126\uff29\131\uff29\311\uff29\326\uff29\u0103" +
    "\uff29\u0188\uff29\001\002\000\004\200\uff24\001\002\000\004" +
    "\200\uff23\001\002\000\006\012\052\050\053\001\002\000" +
    "\014\012\052\020\u0360\050\053\076\u035f\u015f\uffa6\001\002" +
    "\000\004\u015f\u037a\001\002\000\040\012\uff84\016\uff84\017" +
    "\uff84\020\uff84\022\uff84\042\uff84\050\uff84\052\142\241\145" +
    "\244\uff84\377\uff84\u012c\uff84\u0131\uff84\u013c\uff84\u013d\uff84\001" +
    "\002\000\040\037\uff26\040\uff26\055\uff26\074\uff26\112\u036d" +
    "\126\uff26\127\u036b\131\uff26\161\u0368\200\uff21\211\u036a\311" +
    "\uff26\326\uff26\u0103\uff26\u0188\uff26\001\002\000\026\037\uff27" +
    "\040\uff27\055\uff27\074\uff27\126\uff27\131\uff27\311\uff27\326" +
    "\uff27\u0103\uff27\u0188\uff27\001\002\000\022\037\uff51\055\uff51" +
    "\074\uff51\126\u037f\131\uff51\311\uff51\u0103\uff51\u0188\uff51\001" +
    "\002\000\020\037\uff5c\055\uff5c\074\uff5c\131\u0386\311\uff5c" +
    "\u0103\uff5c\u0188\uff5c\001\002\000\004\130\u0380\001\002\000" +
    "\036\012\052\016\154\017\163\020\170\022\147\042\150" +
    "\050\053\052\165\244\166\377\160\u012c\146\u0131\167\u013c" +
    "\164\u013d\162\001\002\000\022\037\uff4f\040\u0382\055\uff4f" +
    "\074\uff4f\131\uff4f\311\uff4f\u0103\uff4f\u0188\uff4f\001\002\000" +
    "\036\012\052\016\154\017\163\020\170\022\147\042\150" +
    "\050\053\052\165\244\166\377\160\u012c\146\u0131\167\u013c" +
    "\164\u013d\162\001\002\000\020\037\uff52\055\uff52\074\uff52" +
    "\131\uff52\311\uff52\u0103\uff52\u0188\uff52\001\002\000\022\037" +
    "\uff4f\040\u0382\055\uff4f\074\uff4f\131\uff4f\311\uff4f\u0103\uff4f" +
    "\u0188\uff4f\001\002\000\020\037\uff50\055\uff50\074\uff50\131" +
    "\uff50\311\uff50\u0103\uff50\u0188\uff50\001\002\000\040\012\uff84" +
    "\016\uff84\017\uff84\020\uff84\022\uff84\042\uff84\050\uff84\052" +
    "\142\241\145\244\uff84\377\uff84\u012c\uff84\u0131\uff84\u013c\uff84" +
    "\u013d\uff84\001\002\000\016\037\uff5a\055\uff5a\074\uff5a\311" +
    "\u0388\u0103\uff5a\u0188\uff5a\001\002\000\004\130\u038a\001\002" +
    "\000\014\037\uff61\055\uff61\074\uff61\u0103\uff61\u0188\uff61\001" +
    "\002\000\036\012\052\016\154\017\163\020\170\022\147" +
    "\042\150\050\053\052\165\244\166\377\160\u012c\146\u0131" +
    "\167\u013c\164\u013d\162\001\002\000\024\037\uff58\040\uff58" +
    "\055\uff58\074\uff58\160\u038c\267\uff58\370\uff58\u0103\uff58\u0188" +
    "\uff58\001\002\000\006\012\052\050\053\001\002\000\022" +
    "\037\uff55\040\uff55\055\uff55\074\uff55\267\u015b\370\u015c\u0103" +
    "\uff55\u0188\uff55\001\002\000\016\037\uff53\040\u038f\055\uff53" +
    "\074\uff53\u0103\uff53\u0188\uff53\001\002\000\036\012\052\016" +
    "\154\017\163\020\170\022\147\042\150\050\053\052\165" +
    "\244\166\377\160\u012c\146\u0131\167\u013c\164\u013d\162\001" +
    "\002\000\014\037\uff5b\055\uff5b\074\uff5b\u0103\uff5b\u0188\uff5b" +
    "\001\002\000\022\037\uff58\055\uff58\074\uff58\160\u038c\267" +
    "\uff58\370\uff58\u0103\uff58\u0188\uff58\001\002\000\020\037\uff55" +
    "\055\uff55\074\uff55\267\u015b\370\u015c\u0103\uff55\u0188\uff55\001" +
    "\002\000\014\037\uff54\055\uff54\074\uff54\u0103\uff54\u0188\uff54" +
    "\001\002\000\022\037\uff59\040\uff59\055\uff59\074\uff59\267" +
    "\uff59\370\uff59\u0103\uff59\u0188\uff59\001\002\000\016\037\uff5d" +
    "\055\uff5d\074\uff5d\311\uff5d\u0103\uff5d\u0188\uff5d\001\002\000" +
    "\030\037\uff66\040\u035a\055\uff66\074\uff66\107\uff66\126\uff66" +
    "\131\uff66\311\uff66\326\uff66\u0103\uff66\u0188\uff66\001\002\000" +
    "\026\037\uff69\055\uff69\074\uff69\107\uff69\126\uff69\131\uff69" +
    "\311\uff69\326\uff69\u0103\uff69\u0188\uff69\001\002\000\004\002" +
    "\001\001\002\000\044\002\uffeb\003\uffeb\066\uffeb\111\uffeb" +
    "\132\uffeb\157\uffeb\164\uffeb\166\uffeb\213\uffeb\253\uffeb\254" +
    "\uffeb\262\uffeb\274\uffeb\302\uffeb\306\uffeb\332\uffeb\335\uffeb" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0397\000\046\003\006\004\040\005\014\006\011\007" +
    "\030\010\020\030\026\044\005\075\024\106\042\116\016" +
    "\124\015\136\037\227\017\253\023\304\010\340\004\362" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\u0398\001\001\000\002\001\001\000\004\076\u0354\001" +
    "\001\000\006\012\330\013\u0341\001\001\000\046\003\u0340" +
    "\004\040\005\014\006\011\007\030\010\020\030\026\044" +
    "\005\075\024\106\042\116\016\124\015\136\037\227\017" +
    "\253\023\304\010\340\004\362\013\001\001\000\002\001" +
    "\001\000\002\001\001\000\046\003\u033d\004\040\005\014" +
    "\006\011\007\030\010\020\030\026\044\005\075\024\106" +
    "\042\116\016\124\015\136\037\227\017\253\023\304\010" +
    "\340\004\362\013\001\001\000\004\011\u033c\001\001\000" +
    "\004\011\u033b\001\001\000\004\011\u033a\001\001\000\004" +
    "\011\u0338\001\001\000\004\262\u032e\001\001\000\026\137" +
    "\u02cb\140\u02cf\141\u02ca\162\u02c4\163\u02ce\164\u02d0\172\u02c5" +
    "\267\u02c6\314\u02c3\316\u0120\001\001\000\004\011\u02b0\001" +
    "\001\000\004\011\u02af\001\001\000\004\057\u0292\001\001" +
    "\000\004\011\u0291\001\001\000\022\230\u0126\231\u0125\234" +
    "\u0124\235\u0129\237\u011e\267\u0121\314\u011f\316\u0120\001\001" +
    "\000\046\003\u011d\004\040\005\014\006\011\007\030\010" +
    "\020\030\026\044\005\075\024\106\042\116\016\124\015" +
    "\136\037\227\017\253\023\304\010\340\004\362\013\001" +
    "\001\000\016\031\372\032\362\034\367\035\363\037\374" +
    "\041\373\001\001\000\004\011\361\001\001\000\006\012" +
    "\155\017\356\001\001\000\004\057\335\001\001\000\004" +
    "\057\114\001\001\000\004\012\050\001\001\000\004\011" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\341\060\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\342\062\001\001\000" +
    "\002\001\001\000\004\343\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\344\071\001\001\000\002\001\001\000\004\345\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\075\100" +
    "\001\001\000\004\346\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\347\104\001\001\000\002\001\001" +
    "\000\006\012\106\073\107\001\001\000\004\074\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\112" +
    "\001\001\000\004\074\113\001\001\000\002\001\001\000" +
    "\006\012\123\015\124\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\060\121\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\326\001\001" +
    "\000\002\001\001\000\006\012\126\125\127\001\001\000" +
    "\002\001\001\000\004\130\130\001\001\000\004\067\140" +
    "\001\001\000\006\012\123\015\132\001\001\000\004\122" +
    "\134\001\001\000\006\012\123\015\135\001\001\000\002" +
    "\001\001\000\004\122\136\001\001\000\002\001\001\000" +
    "\006\056\142\062\143\001\001\000\002\001\001\000\006" +
    "\056\142\062\314\001\001\000\022\012\155\017\170\022" +
    "\160\047\151\051\154\053\152\054\150\064\156\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\002\277\056\274\065\303\001\001\000\004\052\265\001" +
    "\001\000\002\001\001\000\004\050\257\001\001\000\004" +
    "\020\252\001\001\000\004\063\247\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\012\155\017\170\022\160\047" +
    "\216\051\154\053\152\054\150\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\367\172\001" +
    "\001\000\010\022\176\330\174\370\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\371\203\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\022\176\330\174\370\205\001\001\000\002" +
    "\001\001\000\010\012\155\017\207\055\210\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\066\222\001\001\000\020\012\155\017\170" +
    "\022\160\047\236\051\154\053\152\054\150\001\001\000" +
    "\002\001\001\000\020\012\155\017\170\022\160\047\224" +
    "\051\154\053\152\054\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\012\155\017\170" +
    "\022\160\047\226\051\154\053\152\054\150\001\001\000" +
    "\002\001\001\000\020\012\155\017\170\022\160\047\230" +
    "\051\154\053\152\054\150\001\001\000\004\061\232\001" +
    "\001\000\020\012\155\017\170\022\160\047\234\051\154" +
    "\053\152\054\150\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\061\235\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\155\017\207\055\240\001\001\000" +
    "\002\001\001\000\010\012\155\017\207\055\242\001\001" +
    "\000\002\001\001\000\010\012\155\017\207\055\244\001" +
    "\001\000\002\001\001\000\006\056\142\062\251\001\001" +
    "\000\006\056\142\062\250\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\123\015\254\001\001\000\002\001\001\000\016\012" +
    "\155\017\170\022\160\051\262\053\152\054\150\001\001" +
    "\000\016\012\155\017\170\022\160\051\260\053\152\054" +
    "\150\001\001\000\002\001\001\000\004\050\261\001\001" +
    "\000\002\001\001\000\004\050\263\001\001\000\002\001" +
    "\001\000\014\012\155\017\170\022\160\053\271\054\150" +
    "\001\001\000\002\001\001\000\014\012\155\017\170\022" +
    "\160\053\267\054\150\001\001\000\004\052\270\001\001" +
    "\000\002\001\001\000\004\052\272\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\066\310\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\012\155\017\170\022" +
    "\160\047\307\051\154\053\152\054\150\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\056\305\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\012\155\017\207\055\313\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\063\316\001\001\000" +
    "\002\001\001\000\022\012\155\017\170\022\160\047\321" +
    "\051\154\053\152\054\150\126\320\001\001\000\004\127" +
    "\324\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\126\125\325\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\330\013\331\001\001" +
    "\000\004\014\332\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\334\001\001\000\002\001\001\000\004" +
    "\117\337\001\001\000\002\001\001\000\010\012\123\015" +
    "\341\120\340\001\001\000\002\001\001\000\004\121\352" +
    "\001\001\000\004\123\344\001\001\000\004\012\345\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\123\015" +
    "\354\001\001\000\004\067\353\001\001\000\002\001\001" +
    "\000\004\122\355\001\001\000\002\001\001\000\004\011" +
    "\357\001\001\000\046\003\360\004\040\005\014\006\011" +
    "\007\030\010\020\030\026\044\005\075\024\106\042\116" +
    "\016\124\015\136\037\227\017\253\023\304\010\340\004" +
    "\362\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\u011c\001\001\000\004\021\u0116" +
    "\001\001\000\004\021\u010d\001\001\000\004\021\u010b\001" +
    "\001\000\002\001\001\000\004\021\u0105\001\001\000\004" +
    "\021\375\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\330\013\u0100\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\040\u0102\001\001\000" +
    "\006\012\330\013\u0103\001\001\000\002\001\001\000\004" +
    "\040\u0104\001\001\000\002\001\001\000\006\012\123\015" +
    "\u0106\001\001\000\004\033\u0108\001\001\000\006\012\123" +
    "\015\u0109\001\001\000\002\001\001\000\004\033\u010a\001" +
    "\001\000\002\001\001\000\004\012\u010c\001\001\000\002" +
    "\001\001\000\006\012\u010e\042\u010f\001\001\000\002\001" +
    "\001\000\004\043\u0110\001\001\000\002\001\001\000\006" +
    "\012\u010e\042\u0112\001\001\000\004\043\u0113\001\001\000" +
    "\002\001\001\000\006\012\123\015\u0115\001\001\000\002" +
    "\001\001\000\004\012\u0117\001\001\000\004\036\u0119\001" +
    "\001\000\004\012\u011a\001\001\000\002\001\001\000\004" +
    "\036\u011b\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\270\u0216\001\001\000\002\001\001\000\006\012\u020c\232" +
    "\u020e\001\001\000\004\012\u020b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\123\015" +
    "\u0134\001\001\000\006\012\330\013\u012c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\072" +
    "\u012d\236\u012f\001\001\000\002\001\001\000\006\012\106" +
    "\073\u0132\001\001\000\002\001\001\000\004\075\u0131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\240\u0135\241\u0138\246\u013a\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\012\u014c\175\u014a\177\u0149" +
    "\207\u014d\220\u0148\226\u014e\001\001\000\002\001\001\000" +
    "\006\247\u013b\250\u013e\001\001\000\002\001\001\000\004" +
    "\251\u0144\001\001\000\002\001\001\000\004\021\u0141\001" +
    "\001\000\004\021\u013f\001\001\000\004\012\u0140\001\001" +
    "\000\002\001\001\000\004\012\u0142\001\001\000\002\001" +
    "\001\000\006\247\u0145\250\u013e\001\001\000\002\001\001" +
    "\000\004\251\u0146\001\001\000\002\001\001\000\004\012" +
    "\u01f9\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\176\u01f6\001\001\000\004\012\u01f4\001\001\000\010\023" +
    "\u0199\024\u01a0\025\u01a3\001\001\000\004\221\u0152\001\001" +
    "\000\002\001\001\000\004\174\u018c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\211\u0156" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\222" +
    "\u0158\001\001\000\004\012\u0159\001\001\000\002\001\001" +
    "\000\004\102\u015c\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\223\u015d\001\001\000\002\001\001\000\004" +
    "\012\u015f\001\001\000\004\102\u0160\001\001\000\004\223" +
    "\u0161\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\211\u0164\001\001\000\004\222\u0165\001\001\000\002\001" +
    "\001\000\004\224\u0168\001\001\000\004\012\u0186\001\001" +
    "\000\002\001\001\000\006\012\330\013\u016a\001\001\000" +
    "\004\213\u016c\001\001\000\004\012\u0184\001\001\000\004" +
    "\214\u016e\001\001\000\004\215\u0179\001\001\000\004\174" +
    "\u0170\001\001\000\004\351\u0172\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\352\u0176\001\001\000\004\204\u0177\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\214" +
    "\u0183\001\001\000\004\217\u0182\001\001\000\004\217\u017c" +
    "\001\001\000\002\001\001\000\004\216\u0180\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\225\u0187\001\001\000\002" +
    "\001\001\000\004\012\u0189\001\001\000\004\225\u018a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\056\142\062\u018e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\u01f2" +
    "\001\001\000\004\200\u01ae\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\u01a7\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\u01aa\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\u01f1\001\001\000\014\210\u01b8\212\u01b7\354\u01b2\356\u01b0" +
    "\357\u01b1\001\001\000\004\203\u01ed\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\355\u01e5\001\001\000\004" +
    "\211\u01e2\001\001\000\004\201\u01d4\001\001\000\004\012" +
    "\u01ce\001\001\000\006\206\u01cd\207\u01c5\001\001\000\002" +
    "\001\001\000\006\206\u01c4\207\u01c5\001\001\000\002\001" +
    "\001\000\004\174\u01c0\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\211\u01bf\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\056\142\062\u01c2" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\210\u01c6\212\u01b7\001\001\000\006\206\u01c7" +
    "\207\u01c5\001\001\000\002\001\001\000\006\012\330\013" +
    "\u01c9\001\001\000\004\213\u01ca\001\001\000\004\214\u01cb" +
    "\001\001\000\004\174\u01cc\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\210\u01b8\212\u01b7\354\u01b2\357\u01cf" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\202\u01d7" +
    "\001\001\000\002\001\001\000\004\203\u01dd\001\001\000" +
    "\004\174\u01d8\001\001\000\004\205\u01da\001\001\000\002" +
    "\001\001\000\006\206\u01db\207\u01c5\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\205\u01e6\001\001\000\006\206\u01e7\207\u01c5\001\001\000" +
    "\002\001\001\000\004\353\u01e9\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\174\u01ee\001\001\000\004\205\u01ef\001\001\000\006" +
    "\206\u01f0\207\u01c5\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\012\u014c\175\u01f7\177\u0149\207\u014d\220\u0148\226" +
    "\u014e\001\001\000\002\001\001\000\004\176\u01f8\001\001" +
    "\000\002\001\001\000\004\211\u01fa\001\001\000\004\222" +
    "\u01fb\001\001\000\002\001\001\000\004\012\u01fd\001\001" +
    "\000\016\023\u01fe\024\u01a0\025\u01a3\242\u0202\243\u0203\244" +
    "\u0201\001\001\000\004\200\u0209\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\245\u0206\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\204\u020a\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\233\u0210\001" +
    "\001\000\004\012\u0214\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\330\013\u025f\001\001" +
    "\000\002\001\001\000\006\012\330\013\u0219\001\001\000" +
    "\002\001\001\000\012\022\u021c\315\u021e\317\u021d\320\u021b" +
    "\001\001\000\002\001\001\000\004\322\u025b\001\001\000" +
    "\004\321\u0258\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\025\u0225\324\u0224\325\u0222\326\u0221\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\331\u0250\001\001" +
    "\000\002\001\001\000\004\331\u0227\001\001\000\012\304" +
    "\u0235\332\u0234\333\u0236\366\u023a\001\001\000\004\322\u0229" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\u022b\075\024\106\042\116\016\124\015\001\001\000\002" +
    "\001\001\000\010\022\176\330\u022e\372\u022d\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\176\330\u0230" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\334\u0244\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\335\u023e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\304\u0235\332\u0245\333\u0236\366" +
    "\u023a\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\u0249\306\u024a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\322\u0251\001\001\000\002\001\001" +
    "\000\006\075\u0255\327\u0254\001\001\000\004\075\u0256\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\022\u021c\317" +
    "\u021d\320\u025a\001\001\000\002\001\001\000\004\025\u025c" +
    "\001\001\000\004\323\u025d\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\271\u0261\001\001\000\002\001\001" +
    "\000\010\022\u0263\272\u0262\273\u0264\001\001\000\004\301" +
    "\u0278\001\001\000\014\012\u0266\023\u0268\024\u01a0\025\u01a3" +
    "\275\u0269\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\025\u01f2\001\001\000\004\276\u026d" +
    "\001\001\000\004\274\u026a\001\001\000\002\001\001\000" +
    "\006\022\u0263\273\u026c\001\001\000\002\001\001\000\006" +
    "\277\u0271\300\u0273\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\300\u0276\001" +
    "\001\000\002\001\001\000\010\302\u0287\303\u0286\304\u0289" +
    "\001\001\000\004\307\u0279\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\310\u027d\001\001" +
    "\000\002\001\001\000\016\005\u027f\075\024\106\042\116" +
    "\016\124\015\311\u0280\001\001\000\016\005\u0282\075\024" +
    "\106\042\116\016\124\015\312\u0283\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\005\u0284\075\024\106\042" +
    "\116\016\124\015\313\u0285\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\305\u028d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\u0249\306\u028c\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\302\u028f\303\u0286\304" +
    "\u0289\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\107\u0293\001\001\000\006\012\123\015" +
    "\u0295\001\001\000\002\001\001\000\006\072\u0296\110\u0297" +
    "\001\001\000\002\001\001\000\004\114\u029a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\111\u029f\112\u02a1\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\113\u02a4\001\001\000\002\001\001\000\004\112" +
    "\u02a5\001\001\000\002\001\001\000\004\113\u02a6\001\001" +
    "\000\002\001\001\000\004\115\u02a8\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\111\u02ab\112\u02a1\001\001" +
    "\000\002\001\001\000\004\115\u02ad\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\004\u02b1" +
    "\005\014\006\011\007\030\010\020\030\026\044\005\075" +
    "\024\106\042\116\016\124\015\136\037\227\017\253\023" +
    "\304\010\340\004\362\013\001\001\000\010\263\u02b3\265" +
    "\u02b2\375\u02b6\001\001\000\004\011\u02c2\001\001\000\004" +
    "\011\u02c1\001\001\000\006\262\u02bf\264\u02be\001\001\000" +
    "\006\262\u02b9\266\u02b8\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\u02bb\022\u02bc\261" +
    "\u02bd\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\u02bb\022\u02bc\261\u02c0\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\u02f7" +
    "\001\001\000\004\012\u02f6\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\123\015\u02ee" +
    "\001\001\000\006\012\330\013\u02eb\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\211\u02d1\001\001\000\002" +
    "\001\001\000\004\012\u02d3\001\001\000\002\001\001\000" +
    "\006\012\123\015\u02d5\001\001\000\004\165\u02d7\001\001" +
    "\000\006\012\u02e2\166\u02e3\001\001\000\004\170\u02d9\001" +
    "\001\000\004\072\u02e1\001\001\000\004\067\u02da\001\001" +
    "\000\004\171\u02dc\001\001\000\004\012\u02dd\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\u02df\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\102\u02e5\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\167\u02e6\001\001\000\002\001\001\000\004\012" +
    "\u02e8\001\001\000\004\102\u02e9\001\001\000\004\167\u02ea" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\075" +
    "\u02ed\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\012\u014c\175\u02f0\177\u0149\207\u014d\220\u0148\226\u014e\001" +
    "\001\000\004\176\u02f1\001\001\000\002\001\001\000\004" +
    "\173\u02f3\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\142\u02fa\143\u02f8" +
    "\001\001\000\004\147\u032c\001\001\000\004\144\u02fc\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\145\u02fe" +
    "\146\u02ff\001\001\000\004\373\u0304\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\145\u0301\146\u02ff\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\374\u0308\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\151\u030d\001\001" +
    "\000\002\001\001\000\016\153\u0312\154\u0311\156\u0310\160" +
    "\u0313\360\u0314\361\u030f\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\151\u0329\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\155" +
    "\u031a\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\157" +
    "\u0320\001\001\000\002\001\001\000\004\155\u0323\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\155\u0326\161\u0328\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\u032d\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\u0330\022\u0331\254\u0332\260\u032f\001" +
    "\001\000\004\255\u0334\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\256\u0337\001\001\000\002\001\001\000\002" +
    "\001\001\000\046\003\u0339\004\040\005\014\006\011\007" +
    "\030\010\020\030\026\044\005\075\024\106\042\116\016" +
    "\124\015\136\037\227\017\253\023\304\010\340\004\362" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\123\015\u033f\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\022\u0343\363\u0347\365\u0344\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\364\u034d\001\001\000\010" +
    "\022\u0343\363\u034a\365\u0344\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\022\u0343\363\u034e\365" +
    "\u0344\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\365\u0350\001\001\000\004\364\u0351\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\057\u0355" +
    "\001\001\000\022\012\155\017\170\022\160\047\u0356\051" +
    "\154\053\152\054\150\070\u0357\001\001\000\010\012\u035c" +
    "\045\u0395\046\u035d\001\001\000\004\131\u0363\001\001\000" +
    "\004\071\u035a\001\001\000\020\012\155\017\170\022\160" +
    "\047\u035b\051\154\053\152\054\150\001\001\000\002\001" +
    "\001\000\010\012\u035c\045\u0360\046\u035d\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\u035c\046\u0362\001" +
    "\001\000\002\001\001\000\004\071\u0361\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\067\u037c\001\001\000" +
    "\006\012\123\015\u0365\001\001\000\010\012\u035c\045\u0366" +
    "\046\u035d\001\001\000\006\133\u036b\134\u0368\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\135\u0375\001\001" +
    "\000\004\135\u0374\001\001\000\004\132\u0370\001\001\000" +
    "\004\135\u036e\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\123\015\u0371\001\001\000\002\001\001\000" +
    "\010\012\u035c\045\u0372\046\u035d\001\001\000\006\133\u0373" +
    "\134\u0368\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\123\015\u0377\001\001\000\010" +
    "\012\u035c\045\u0378\046\u035d\001\001\000\002\001\001\000" +
    "\006\056\142\062\u037a\001\001\000\006\133\u037b\134\u0368" +
    "\001\001\000\002\001\001\000\004\104\u037d\001\001\000" +
    "\004\077\u0386\001\001\000\002\001\001\000\020\012\155" +
    "\017\170\022\160\047\u0380\051\154\053\152\054\150\001" +
    "\001\000\004\105\u0382\001\001\000\020\012\155\017\170" +
    "\022\160\047\u0383\051\154\053\152\054\150\001\001\000" +
    "\002\001\001\000\004\105\u0384\001\001\000\002\001\001" +
    "\000\006\056\142\062\u0394\001\001\000\004\100\u0388\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\012\155" +
    "\017\170\022\160\047\u038a\051\154\053\152\054\150\001" +
    "\001\000\004\101\u038c\001\001\000\004\012\u0393\001\001" +
    "\000\004\102\u038d\001\001\000\004\103\u038f\001\001\000" +
    "\020\012\155\017\170\022\160\047\u0390\051\154\053\152" +
    "\054\150\001\001\000\002\001\001\000\004\101\u0391\001" +
    "\001\000\004\102\u0392\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\071\u0396\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

    public LinkedList<String> SyntacticErrors = new LinkedList<String>();
    private Symbol s;

    public final Class getSymbolContainer() {
    return sym.class;
    }


    public void syntax_error(Symbol cur_token){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        String Auxiliar = "";
        List<Integer> ids = expected_token_ids();
        LinkedList<String> list = new LinkedList<String>(); 
        for (Integer expected : ids) {
                  Auxiliar = symbl_name_from_id(expected);
                  Auxiliar = " " + Auxiliar + " ";
                  list.add(Auxiliar);
        }
        SyntacticErrors.add("* Error Sintactico. Linea: " + (s.right+1) + " Columna: " + (s.left+1) + ". Simbolo:  \'" + s.value + "\'  * Se esperaba: " + list);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
      java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        String Auxiliar = "";
        List<Integer> ids = expected_token_ids();
        LinkedList<String> list = new LinkedList<String>(); 
        for (Integer expected : ids) {
                  Auxiliar = symbl_name_from_id(expected);
                  Auxiliar = " " + Auxiliar + " ";
                  list.add(Auxiliar);
        }
        SyntacticErrors.add("* Error Sintactico. Linea: " + (s.right+1) + " Columna: " + (s.left+1) + ". Simbolo:  \'" + s.value + "\'  * Se esperaba: " + list);
    }


    public String symbl_name_from_id(int id) {
	  Field[] fields = getSymbolContainer().getFields();
	  for(Field f : fields){
		  try {
			if (f.getInt(null)==id)
			  return f.getName();
		} catch (IllegalArgumentException e) {
			//e.printStackTrace();
		} catch (IllegalAccessException e) {
			//e.printStackTrace();
		}
	  }
	  return "Simbolo Invalido id";
    }
   

     public List<Integer> expected_token_ids() {
        List<Integer> ret = new LinkedList<Integer>();
	  int parse_state = ((Symbol)stack.peek()).parse_state ;
	  short[] row = action_tab[parse_state];
	  for (int i = 0; i<row.length; i+=2){
		  if (row[i]==-1) continue;
		  if (!validate_expected_symbol(row[i])) continue;
		  ret.add(new Integer(row[i]));
	  }
	  return ret;

    }

    /*protected static final int _error_sync_size(){
        return 1;
    }*/

    protected int error_sync_size() {
            return 1;
    }

    private boolean validate_expected_symbol(int id){
	  short lhs,rhs_size;
	  int act;
	  try {
		  virtual_parse_stack vstack = new virtual_parse_stack(stack);
		  for (;;)
		  {
			  act = get_action(vstack.top(), id);

			  if (act == 0) return false;

			  if (act > 0)
			  {
				  vstack.push(act-1);

				  if (!advance_lookahead()) return true;
			  }
			  else
			  {
				  if ((-act)-1 == start_production())  return true;

				  lhs = production_tab[(-act)-1][0];
				  rhs_size = production_tab[(-act)-1][1];
				  for (int i = 0; i < rhs_size; i++) vstack.pop();

				  vstack.push(get_reduce(vstack.top(), lhs));
			  }
		  }

	  } catch (Exception e) {
		  e.printStackTrace();
	  }
	  return true;
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 534: // Data_Type ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data_Type",243, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 533: // Data_Type ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data_Type",243, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 532: // Data_Type ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data_Type",243, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 531: // Data_Type ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data_Type",243, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 530: // RepeatProcedureA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatProcedureA",242, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 529: // RepeatProcedureA ::= Coma RepeatProcedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatProcedureA",242, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 528: // RepeatProcedure ::= Data_Type RepeatProcedureA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatProcedure",241, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 527: // RepeatProcedure ::= Variable Igual Data_Type RepeatProcedureA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatProcedure",241, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 526: // ExecProcedure ::= ClauseExec Object2 RepeatProcedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExecProcedure",240, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 525: // ExecProcedure ::= ClauseExec Object2 Apertura_de_paréntesis RepeatProcedure Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExecProcedure",240, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 524: // ExecProcedure ::= ClauseExec Object2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExecProcedure",240, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 523: // EXECUTE_AS_CLAUSE ::= ClauseExec AS Clause 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXECUTE_AS_CLAUSE",244, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 522: // FuncOpcC ::= OFF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcC",219, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 521: // FuncOpcC ::= ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcC",219, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 520: // FuncOpcB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcB",218, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 519: // FuncOpcB ::= Coma FuncOpc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcB",218, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 518: // FuncOpcA ::= INLINE Igual FuncOpcC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 517: // FuncOpcA ::= EXECUTE_AS_CLAUSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 516: // FuncOpcA ::= CALLED ON NULL INPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 515: // FuncOpcA ::= RETURNS NULL ON NULL INPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 514: // FuncOpcA ::= SCHEMABINDING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // FuncOpcA ::= ENCRYPTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // FuncOpc ::= FuncOpcA FuncOpcB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpc",216, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // With ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("With",215, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // With ::= WITH FuncOpc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("With",215, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // DType ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // DType ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // DType ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // DType ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // DType ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // DTypes ::= DType 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DTypes",248, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // DTypes ::= Apertura_de_paréntesis DType Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DTypes",248, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // SCT ::= Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCT",213, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // SCT ::= Apertura_de_paréntesis Select Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCT",213, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // Table ::= TABLE With As RETURN SCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Table",212, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // Data ::= Tipo_datoA With As BEGIN DML RETURN DTypes END 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data",211, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // Type_Return ::= Table 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type_Return",210, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // Type_Return ::= Data 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type_Return",210, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // ReadOnly ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReadOnly",209, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // ReadOnly ::= READONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReadOnly",209, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // Param_B ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param_B",207, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // Param_B ::= Coma Param_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param_B",207, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // Param_A ::= Param Param_B 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param_A",206, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // As ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("As",208, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // As ::= AS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("As",208, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // Param ::= Variable As Tipo_datoA ReadOnly 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param",205, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // OrAlter ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrAlter",204, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // OrAlter ::= OR ALTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrAlter",204, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // Params ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Params",203, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // Params ::= Param_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Params",203, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // Function ::= OrAlter FUNCTION Object2 Apertura_de_paréntesis Params Cierre_de_paréntesis RETURNS Type_Return 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Function",202, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // CursorDeclareg ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareg",229, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // CursorDeclareg ::= OF ColumnListA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareg",229, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // CursorDeclaref ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaref",228, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // CursorDeclaref ::= FOR UPDATE CursorDeclareg 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaref",228, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // CursorDeclaree ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaree",227, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // CursorDeclaree ::= TYPE_WARNING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaree",227, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // CursorDeclared ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // CursorDeclared ::= OPTIMISTIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // CursorDeclared ::= SCROLL_LOCKS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // CursorDeclared ::= READ_ONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // CursorDeclarec ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // CursorDeclarec ::= FAST_FORWARD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // CursorDeclarec ::= DYNAMIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // CursorDeclarec ::= KEYSET 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // CursorDeclarec ::= STATIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // CursorDeclareb ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // CursorDeclareb ::= FORWARD_ONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // CursorDeclareb ::= SCROLL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // CursorDeclarea ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // CursorDeclarea ::= GLOBAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // CursorDeclarea ::= LOCAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // CursorDeclare ::= DECLARE ID CURSOR CursorDeclarea CursorDeclareb CursorDeclarec CursorDeclared CursorDeclaree FOR Select CursorDeclaref 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclare",222, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // StmtSP2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP2",201, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // StmtSP2 ::= DML 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP2",201, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // StmtSP1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP1",200, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // StmtSP1 ::= DML StmtSP2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP1",200, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // StmtSP ::= DML StmtSP1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP",199, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // StartSP ::= BEGIN StmtSP END 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StartSP",198, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // ReplicationSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReplicationSP",197, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // ReplicationSP ::= FOR REPLICATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReplicationSP",197, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // Clause ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // Clause ::= OWNER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // Clause ::= SELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // Clause ::= CALLER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // ProcOptionRec ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOptionRec",195, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // ProcOptionRec ::= Coma ProcOption1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOptionRec",195, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // ClauseExec ::= EXEC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ClauseExec",194, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // ClauseExec ::= EXECUTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ClauseExec",194, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // ProcOption2 ::= ClauseExec AS Clause 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // ProcOption2 ::= RECOMPILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // ProcOption2 ::= ENCRYPTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // ProcOption1 ::= ProcOption2 ProcOptionRec 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption1",192, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // ProcOption ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption",191, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // ProcOption ::= WITH ProcOption1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption",191, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // TipoD_SP3 ::= OUTPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP3",190, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // TipoD_SP3 ::= OUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP3",190, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // TipoD_SP2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP2",189, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // TipoD_SP2 ::= TipoD_SP3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP2",189, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // TipoD_SP1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP1",188, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // TipoD_SP1 ::= Igual DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP1",188, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // TipoD_SP ::= ID READONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // TipoD_SP ::= CURSOR VARYING TipoD_SP3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // TipoD_SP ::= Tipo_dato TipoD_SP1 TipoD_SP2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // ParamsB_SP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsB_SP",186, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // ParamsB_SP ::= Coma ParamsA_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsB_SP",186, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // ParamsA_SP ::= Variable TipoD_SP ParamsB_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsA_SP",185, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // ParamsSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsSP",184, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // ParamsSP ::= ParamsA_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsSP",184, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // NumSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NumSP",183, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // NumSP ::= Punto_y_coma Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NumSP",183, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // SP_Reservada ::= PROCEDURE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SP_Reservada",182, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // SP_Reservada ::= PROC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SP_Reservada",182, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // Procedure ::= OrAlter SP_Reservada Object2 NumSP ParamsSP ProcOption ReplicationSP AS StartSP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Procedure",181, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // RollbackA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RollbackA",180, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // RollbackA ::= TranName NameA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RollbackA",180, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // Rollback ::= ROLLBACK RollbackA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Rollback",179, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // CommitA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CommitA",178, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // CommitA ::= TranName NameA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CommitA",178, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // Commit ::= COMMIT CommitA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Commit",177, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // TranName ::= TRANSACTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TranName",176, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // TranName ::= TRAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TranName",176, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // NameA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // NameA ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // NameA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // Name ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Name",174, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // Name ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Name",174, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // SavePoint ::= SAVE TranName Name 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SavePoint",173, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // FinalTran ::= Rollback Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FinalTran",251, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // FinalTran ::= Commit Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FinalTran",251, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // BeginTranC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranC",172, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // BeginTranC ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranC",172, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // BeginTranB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranB",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // BeginTranB ::= WITH MARK BeginTranC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranB",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // BeginTranA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranA",170, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // BeginTranA ::= Name BeginTranB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranA",170, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // BeginTran ::= BEGIN TranName BeginTranA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTran",169, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // AlterTableDropC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropC",167, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // AlterTableDropC ::= Coma AlterTableDropA AlterTableDropC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropC",167, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // AlterTableDropB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropB",166, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // AlterTableDropB ::= CONSTRAINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropB",166, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // AlterTableDropA ::= COLUMN IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropA",165, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // AlterTableDropA ::= AlterTableDropB IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropA",165, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // AlterTableDrop ::= DROP AlterTableDropA AlterTableDropC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDrop",164, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // AlterColumnE ::= NOT FOR REPLICATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnE",163, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // AlterColumnE ::= ROWGUIDCOL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnE",163, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // AlterColumnD ::= DROP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnD",162, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // AlterColumnD ::= ADD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnD",162, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // AlterColumnA ::= Tipo_dato ColumnDefA ColumnDefG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnA",161, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // AlterColumnC ::= AlterColumnD AlterColumnE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnC",160, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // AlterColumnC ::= AlterColumnA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnC",160, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // AlterColumn ::= ALTER COLUMN ID AlterColumnC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumn",159, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // AlterTableA ::= AlterTableDrop 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // AlterTableA ::= ADD CNC CNCA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // AlterTableA ::= AlterColumn 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // AlterTable ::= TABLE Object3 AlterTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTable",157, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // AlterViewA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterViewA",156, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // AlterViewA ::= ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterViewA",156, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // AlterView ::= VIEW Object2 AlterViewA AS Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterView",155, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // AlterUser ::= USER ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterUser",154, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // AlterDBB ::= SET ROLLBACK IMMEDIATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBB",153, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // AlterDBB ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBB",153, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // AlterDBA ::= CURRENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBA",152, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // AlterDBA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBA",152, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // AlterDatabase ::= DATABASE AlterDBA AlterDBB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDatabase",151, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // AlterA ::= Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // AlterA ::= Procedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // AlterA ::= AlterView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // AlterA ::= AlterDatabase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // AlterA ::= AlterUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // AlterA ::= AlterTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // Alter ::= ALTER AlterA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alter",149, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // TableIndex ::= INDEX ID ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableIndex",148, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // TableConstrE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrE",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // TableConstrE ::= Coma ID TableConstrE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrE",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // TableConstrD ::= Apertura_de_paréntesis ID TableConstrE Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrD",146, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // TableConstrC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrC",145, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // TableConstrC ::= Coma ID OrderB TableConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrC",145, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // TableConstrB ::= Apertura_de_paréntesis ID OrderB TableConstrC Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrB",144, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // TableConstrA ::= CHECK NFR Apertura_de_paréntesis SearchCondition Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // TableConstrA ::= FOREIGN KEY TableConstrD REFERENCES Object2 ColumnConstrE ColumnConstrF NFR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // TableConstrA ::= UNIQUE ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // TableConstrA ::= PRIMARY KEY ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // TableConstr ::= ColumnConstrA TableConstrA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstr",142, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // ColumnConstrI ::= SET ColumnConstrH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrI",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // ColumnConstrI ::= CASCADE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrI",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // ColumnConstrH ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrH",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // ColumnConstrH ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrH",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // ColumnConstrG ::= UPDATE ColumnConstrI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrG",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // ColumnConstrG ::= DELETE ColumnConstrI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrG",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // ColumnConstrF ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrF",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // ColumnConstrF ::= ON ColumnConstrG ColumnConstrF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrF",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // ColumnConstrE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrE",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // ColumnConstrE ::= Apertura_de_paréntesis ID Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrE",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // ColumnConstrD ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrD",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // ColumnConstrD ::= FOREIGN KEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrD",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // ColumnConstrC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // ColumnConstrC ::= NONCLUSTERED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // ColumnConstrC ::= CLUSTERED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // ColumnConstrB ::= CHECK NFR Apertura_de_paréntesis SearchCondition Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // ColumnConstrB ::= ColumnConstrD REFERENCES Object2 ColumnConstrE ColumnConstrF NFR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // ColumnConstrB ::= UNIQUE ColumnConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // ColumnConstrB ::= PRIMARY KEY ColumnConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // ColumnConstrA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrA",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // ColumnConstrA ::= CONSTRAINT ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrA",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // ColumnConstr ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstr",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // ColumnConstr ::= ColumnConstrA ColumnConstrB ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstr",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // ColumnDefH ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefH",131, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // ColumnDefH ::= ROWGUIDCOL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefH",131, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // ColumnDefG ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefG",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // ColumnDefG ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefG",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // ColumnDefF ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefF",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // ColumnDefF ::= Apertura_de_paréntesis Int Coma Int Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefF",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // ColumnDefE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefE",128, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // ColumnDefE ::= IDENTITY ColumnDefF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefE",128, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // ColumnDefD ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // ColumnDefD ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // ColumnDefD ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // ColumnDefD ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // ColumnDefD ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // ColumnDefA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefA",126, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // ColumnDefA ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefA",126, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // ColumnDefV ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // ColumnDefV ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // ColumnDefV ::= NOT NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // ColumnDefW ::= FOR REPLICATION ColumnDefV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefW",235, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // ColumnDefW ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefW",235, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // ColumnDefX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefX",234, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // ColumnDefX ::= NOT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefX",234, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // ColumnDefY ::= ColumnConstrB ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // ColumnDefY ::= ROWGUIDCOL ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // ColumnDefY ::= ColumnDefX ColumnDefW ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // ColumnDefY ::= IDENTITY ColumnDefF NFR ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // ColumnDefY ::= DEFAULT ColumnDefD ColumnDefE NFR ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // ColumnDefZ ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // ColumnDefZ ::= ColumnDefY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // ColumnDefZ ::= CONSTRAINT ID ColumnDefY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // ColumnDef ::= ID Tipo_dato ColumnDefA ColumnDefZ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDef",125, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // CNCA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNCA",124, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // CNCA ::= Coma CNC CNCA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNCA",124, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // CNC ::= TableIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // CNC ::= TableConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // CNC ::= ColumnDef 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // NFR2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR2",232, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // NFR2 ::= NOT ColumnDefG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR2",232, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // NFR1 ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR1",231, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // NFR1 ::= FOR REPLICATION NFR2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR1",231, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // NFR ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // NFR ::= NOT NFR1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // FileGroup ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileGroup",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // FileGroup ::= ON PRIMARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileGroup",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // CreateTable ::= TABLE Object3 Apertura_de_paréntesis CNC CNCA Cierre_de_paréntesis FileGroup 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateTable",120, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // OptionalOn ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OptionalOn",119, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // OptionalOn ::= ON ID Apertura_de_paréntesis ID Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OptionalOn",119, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // IncludeIndex ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IncludeIndex",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // IncludeIndex ::= INCLUDE ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IncludeIndex",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // ColumnIndexB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexB",117, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // ColumnIndexB ::= Coma ID OrderB ColumnIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexB",117, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // ColumnIndexA ::= ID OrderB ColumnIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexA",116, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // ColumnIndex ::= Apertura_de_paréntesis ColumnIndexA Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndex",115, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // CreateIndexA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndexA",114, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // CreateIndexA ::= UNIQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndexA",114, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // CreateIndex ::= CreateIndexA ColumnConstrC INDEX ID ON Object3 ColumnIndex IncludeIndex Where OptionalOn 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndex",113, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // CreateView ::= VIEW Object2 AS Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateView",112, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // Filegrowth_A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // Filegrowth_A ::= MODULAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // Filegrowth_A ::= Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // Filegrowth ::= FILEGROWTH Igual Int Filegrowth_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth",110, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // Maxsize_A ::= UNLIMITED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize_A",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // Maxsize_A ::= Int Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize_A",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // Maxsize ::= MAXSIZE Igual Maxsize_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize",108, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // Size_A ::= TB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // Size_A ::= GB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // Size_A ::= MB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // Size_A ::= KB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // Sizenw ::= SIZE Igual Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sizenw",239, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // Sizew ::= SIZE Igual Int Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sizew",238, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // Size ::= Sizenw 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size",106, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // Size ::= Sizew 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size",106, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // Optional ::= Filegrowth 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // Optional ::= Maxsize 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // Optional ::= Size 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // Optionals ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optionals",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // Optionals ::= Coma Optional Optionals 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optionals",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // COLLATEDB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLLATEDB",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // COLLATEDB ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLLATEDB",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // FileDB ::= FILENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileDB",250, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // FileDB ::= FILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileDB",250, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // NameDB ::= NAMES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameDB",249, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // NameDB ::= NAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameDB",249, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // FileSpec ::= Apertura_de_paréntesis NameDB Igual String Coma FileDB Igual String Optionals Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpec",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // FileSpecs ::= FileSpec 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpecs",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // FileSpecs ::= FileSpec Coma FileSpecs 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpecs",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // Primary ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Primary",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // Primary ::= PRIMARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Primary",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // CreateDBB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBB",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // CreateDBB ::= ON Primary FileSpecs 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBB",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // CreateDBA ::= CreateDBB COLLATEDB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBA",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // CreateDB ::= DATABASE ID CreateDBA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDB",95, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // CreateUser ::= USER ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateUser",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // CreateA ::= Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // CreateA ::= Procedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // CreateA ::= CreateView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // CreateA ::= CreateUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // CreateA ::= CreateIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // CreateA ::= CreateDB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // CreateA ::= CreateTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // Create ::= CREATE CreateA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Create",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // Outer ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Outer",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // Outer ::= OUTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Outer",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // Type ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // Type ::= FULL Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // Type ::= LEFT Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // Type ::= RIGHT Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // Type ::= INNER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // Join ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Join",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // Join ::= Type JOIN Object3 Alias ON SearchCondition Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Join",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // FromSelectA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelectA",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // FromSelectA ::= Coma Object3 Alias Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelectA",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // FromSelect ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelect",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // FromSelect ::= FROM Object3 Alias Join FromSelectA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelect",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // FromUpdate ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromUpdate",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // FromUpdate ::= FROM Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromUpdate",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // UpdateC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateC",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // UpdateC ::= Coma UpdateA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateC",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // UpdateB ::= Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateB",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // UpdateB ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateB",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // UpdateA ::= ID Igual UpdateB UpdateC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateA",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // Update ::= UPDATE Top Object3 SET UpdateA FromUpdate Where 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Update",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // Server ::= Apertura_de_paréntesis ID Coma Int Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Server",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // DeleteC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteC",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // DeleteC ::= Coma Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteC",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // DeleteB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteB",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // DeleteB ::= FROM Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteB",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // DeleteA ::= Object3 DeleteB Where 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteA",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // DeleteA ::= OPENQUERY Server 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteA",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // FromDelete ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromDelete",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // FromDelete ::= FROM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromDelete",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // Delete ::= DELETE Top FromDelete DeleteA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Delete",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // InsertValoresA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValoresA",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // InsertValoresA ::= Coma Apertura_de_paréntesis InsertExpresion Cierre_de_paréntesis InsertValoresA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValoresA",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // InsertValores ::= DEFAULT VALUES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValores",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // InsertValores ::= VALUES Apertura_de_paréntesis InsertExpresion Cierre_de_paréntesis InsertValoresA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValores",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // InsertExpresionB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionB",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // InsertExpresionB ::= Coma InsertExpresionA InsertExpresionB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionB",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // InsertExpresionA ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // InsertExpresionA ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // InsertExpresionA ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // InsertExpresionA ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // InsertExpresionA ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // InsertExpresion ::= InsertExpresionA InsertExpresionB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresion",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // InsertColumnList ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertColumnList",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // InsertColumnList ::= ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertColumnList",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // InsertInto ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertInto",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // InsertInto ::= INTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertInto",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // Insert ::= INSERT Top InsertInto Object3 InsertColumnList InsertValores 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Insert",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // GroupA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GroupA",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // GroupA ::= Coma Expresion GroupA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GroupA",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // Group ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Group",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // Group ::= GROUP BY Expresion GroupA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Group",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // OrderC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderC",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // OrderC ::= Coma Expresion OrderA OrderB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderC",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // OrderB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // OrderB ::= DESC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // OrderB ::= ASC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // OrderA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderA",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // OrderA ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderA",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Order ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Order",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Order ::= ORDER BY Expresion OrderA OrderB OrderC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Order",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Having ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Having",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Having ::= HAVING SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Having",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // SelectA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // SelectA ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // SelectA ::= ALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Select ::= SELECT SelectA Top SelectColumns FromSelect Where Group Having Order 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Select",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ColumnListB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListB",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ColumnListB ::= Coma ID ColumnListB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListB",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ColumnListA ::= ID ColumnListB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListA",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ColumnList ::= Apertura_de_paréntesis ColumnListA Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnList",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // SelectColumnsA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumnsA",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // SelectColumnsA ::= Coma Expresion Alias SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumnsA",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // SelectColumns ::= Multiplicacion SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumns",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // SelectColumns ::= Expresion Alias SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumns",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Where ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Where",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Where ::= WHERE SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Where",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // PredicadoC ::= LIKE Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // PredicadoC ::= BETWEEN Expresion AND Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // PredicadoC ::= IN Apertura_de_paréntesis Expresion Expresiones Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // PredicadoA ::= Not PredicadoC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // PredicadoA ::= IS Not NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // PredicadoA ::= OperadoresBooleanos Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OperadoresBooleanos ::= Menor_o_igual_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OperadoresBooleanos ::= Menor_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OperadoresBooleanos ::= Mayor_o_igual_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OperadoresBooleanos ::= Mayor_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OperadoresBooleanos ::= Operador_no_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OperadoresBooleanos ::= Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Predicado ::= Expresion PredicadoA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Predicado",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SearchConditionA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // SearchConditionA ::= OR SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // SearchConditionA ::= AND SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SearchCondition ::= Apertura_de_paréntesis SearchCondition Cierre_de_paréntesis SearchConditionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchCondition",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // SearchCondition ::= Not Predicado SearchConditionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchCondition",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Expresiones ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresiones",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Expresiones ::= Coma Expresion Expresiones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresiones",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // TopA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TopA",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // TopA ::= PERCENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TopA",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Top ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Top",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Top ::= TOP Apertura_de_paréntesis Int Cierre_de_paréntesis TopA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Top",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Not ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Not",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Not ::= NOT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Not",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ExpresionF ::= Multiplicacion Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ExpresionF ::= Int Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ExpresionF ::= Object4 Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // FunctionContentA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FunctionContentA",247, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // FunctionContentA ::= Coma FunctionContent 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FunctionContentA",247, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // FunctionContent ::= DType FunctionContentA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FunctionContent",246, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CallFunction ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallFunction",245, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CallFunction ::= Apertura_de_paréntesis FunctionContent Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallFunction",245, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ExpresionE ::= COUNT Apertura_de_paréntesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ExpresionE ::= MAX Apertura_de_paréntesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ExpresionE ::= MIN Apertura_de_paréntesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ExpresionE ::= AVG Apertura_de_paréntesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ExpresionE ::= SUM Apertura_de_paréntesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ExpresionE ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ExpresionE ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ExpresionE ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ExpresionE ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ExpresionE ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ExpresionE ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ExpresionE ::= Object4 CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ExpresionD ::= ExpresionE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ExpresionD ::= Apertura_de_paréntesis Expresion PredicadoC Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ExpresionC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ExpresionC ::= Division ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ExpresionC ::= Multiplicacion ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ExpresionB ::= ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionB",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ExpresionA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ExpresionA ::= Resta ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ExpresionA ::= Suma ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expresion ::= ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresion",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // AliasA ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AliasA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // AliasA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AliasA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Alias ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Alias ::= AliasA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Alias ::= AS AliasA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Truncate ::= TRUNCATE TABLE Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Truncate",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DropIndexB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexB",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DropIndexB ::= Coma DropIndexA DropIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexB",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DropIndexA ::= ID ON Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexA",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DropIndex ::= INDEX IFE DropIndexA DropIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndex",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DropViewA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropViewA",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DropViewA ::= Coma Object2 DropViewA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropViewA",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DropView ::= VIEW IFE Object2 DropViewA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropView",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DropDatabaseA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabaseA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DropDatabaseA ::= Coma ID DropDatabaseA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabaseA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DropDatabase ::= DATABASE IFE ID DropDatabaseA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabase",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DropUser ::= USER IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropUser",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DropTableA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTableA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DropTableA ::= Coma Object3 DropTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTableA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DropTable ::= TABLE IFE Object3 DropTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTable",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DropA ::= DropIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DropA ::= DropView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DropA ::= DropDatabase Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DropA ::= DropUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DropA ::= DropTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Drop ::= DROP DropA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Drop",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Tipo_datoC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoC",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Tipo_datoC ::= Coma Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoC",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Tipo_datoB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoB",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Tipo_datoB ::= Apertura_de_paréntesis Int Tipo_datoC Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoB",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Tipo_datoA ::= DATETIME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Tipo_datoA ::= MONEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Tipo_datoA ::= NVARCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Tipo_datoA ::= NUMERIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Tipo_datoA ::= SMALLINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Tipo_datoA ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Tipo_datoA ::= INT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Tipo_datoA ::= TIME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Tipo_datoA ::= REAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Tipo_datoA ::= NCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Tipo_datoA ::= CURSOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Tipo_datoA ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Tipo_datoA ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Tipo_datoA ::= BIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Tipo_datoA ::= DATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Tipo_datoA ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Tipo_datoA ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Tipo_datoA ::= VARCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Tipo_datoD ::= Apertura_de_corchetes Tipo_datoA Cierre_de_corchetes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Tipo_datoD ::= Tipo_datoA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Tipo_dato ::= Tipo_datoD Tipo_datoB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_dato",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Variable ::= Arroba Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // IFE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // IFE ::= IF EXISTS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Object4A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4A",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Object4A ::= Punto Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4A",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Object4 ::= ID Object4A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Object3A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3A",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Object3A ::= Punto Object2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3A",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Object3 ::= ID Object3A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Object2A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2A",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Object2A ::= Punto ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2A",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Object2 ::= ID Object2A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ID ::= Apertura_de_corchetes Identificador Cierre_de_corchetes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ID ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Final ::= PYCGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Final",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Final ::= GO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Final",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Final ::= Punto_y_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Final",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TSQL ::= ExecProcedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TSQL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TSQL ::= CursorDeclare 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TSQL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TCL ::= BeginTran Final InicialA FinalTran 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DDL ::= Truncate Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DDL ::= Drop Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DDL ::= Alter Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DDL ::= Create Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DML ::= error Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DML ::= Update Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DML ::= Delete Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DML ::= Insert Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DML ::= Select Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // InicialB ::= SavePoint Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialB",230, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // InicialB ::= USE Object4 Final Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialB",230, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // InicialB ::= TSQL Final Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialB",230, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // InicialB ::= TCL Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialB",230, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // InicialB ::= DDL Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialB",230, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // InicialB ::= DML Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialB",230, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // InicialA ::= USE Object4 Final Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // InicialA ::= TSQL Final Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // InicialA ::= TCL Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // InicialA ::= DDL Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // InicialA ::= DML Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Inicial ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicial",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicial ::= InicialA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicial",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

