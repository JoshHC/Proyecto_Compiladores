
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Oct 30 02:00:11 CST 2019
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java_cup.runtime.virtual_parse_stack;
import java.lang.reflect.Field;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Oct 30 02:00:11 CST 2019
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u020e\000\002\002\004\000\002\003\003\000\002\003" +
    "\002\000\002\004\004\000\002\004\005\000\002\004\004" +
    "\000\002\004\005\000\002\004\006\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\007\004\000\002\010\003\000" +
    "\002\010\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\012\003\000\002\012\005\000\002\013" +
    "\004\000\002\014\004\000\002\014\002\000\002\015\004" +
    "\000\002\016\004\000\002\016\002\000\002\017\004\000" +
    "\002\020\004\000\002\020\002\000\002\021\004\000\002" +
    "\021\002\000\002\022\004\000\002\023\004\000\002\024" +
    "\003\000\002\024\005\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\026\006\000\002\026\002\000\002\027\004\000\002" +
    "\027\002\000\002\030\004\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\032\006\000\002\033\005\000\002\033\002\000" +
    "\002\034\005\000\002\035\006\000\002\036\005\000\002" +
    "\036\002\000\002\037\006\000\002\040\005\000\002\040" +
    "\002\000\002\041\006\000\002\042\005\000\002\043\005" +
    "\000\002\043\002\000\002\044\005\000\002\045\004\000" +
    "\002\045\003\000\002\045\002\000\002\046\003\000\002" +
    "\046\003\000\002\047\004\000\002\050\005\000\002\050" +
    "\005\000\002\050\002\000\002\051\004\000\002\052\005" +
    "\000\002\052\005\000\002\052\002\000\002\053\006\000" +
    "\002\053\003\000\002\054\004\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\054\005\000\002\054\005" +
    "\000\002\054\005\000\002\054\005\000\002\054\005\000" +
    "\002\367\005\000\002\367\002\000\002\370\004\000\002" +
    "\371\004\000\002\371\002\000\002\055\004\000\002\055" +
    "\004\000\002\055\004\000\002\056\003\000\002\056\002" +
    "\000\002\057\007\000\002\057\002\000\002\060\003\000" +
    "\002\060\002\000\002\061\005\000\002\061\002\000\002" +
    "\062\005\000\002\062\006\000\002\063\004\000\002\063" +
    "\004\000\002\063\002\000\002\064\004\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\065\004\000\002" +
    "\065\005\000\002\065\004\000\002\066\007\000\002\066" +
    "\006\000\002\066\004\000\002\067\004\000\002\067\002" +
    "\000\002\070\005\000\002\070\004\000\002\071\006\000" +
    "\002\071\002\000\002\072\005\000\002\073\004\000\002" +
    "\074\005\000\002\074\002\000\002\075\013\000\002\076" +
    "\003\000\002\076\003\000\002\076\002\000\002\077\004" +
    "\000\002\077\002\000\002\100\010\000\002\100\002\000" +
    "\002\101\004\000\002\101\002\000\002\102\003\000\002" +
    "\102\003\000\002\102\002\000\002\103\006\000\002\103" +
    "\002\000\002\104\006\000\002\104\002\000\002\105\005" +
    "\000\002\105\002\000\002\106\010\000\002\107\003\000" +
    "\002\107\002\000\002\110\003\000\002\110\002\000\002" +
    "\111\004\000\002\112\003\000\002\112\003\000\002\112" +
    "\003\000\002\112\003\000\002\112\003\000\002\113\005" +
    "\000\002\113\002\000\002\114\007\000\002\114\004\000" +
    "\002\115\007\000\002\115\002\000\002\116\006\000\002" +
    "\117\003\000\002\117\002\000\002\120\004\000\002\120" +
    "\005\000\002\121\005\000\002\121\002\000\002\122\005" +
    "\000\002\122\002\000\002\123\007\000\002\124\011\000" +
    "\002\125\006\000\002\126\003\000\002\126\003\000\002" +
    "\127\004\000\002\127\002\000\002\130\005\000\002\130" +
    "\002\000\002\131\007\000\002\131\002\000\002\132\006" +
    "\000\002\132\002\000\002\133\011\000\002\133\002\000" +
    "\002\134\003\000\002\134\004\000\002\134\004\000\002" +
    "\134\004\000\002\134\002\000\002\135\003\000\002\135" +
    "\002\000\002\136\004\000\002\137\003\000\002\137\003" +
    "\000\002\137\003\000\002\137\003\000\002\137\003\000" +
    "\002\137\003\000\002\137\003\000\002\140\004\000\002" +
    "\141\005\000\002\142\004\000\002\143\005\000\002\143" +
    "\002\000\002\144\003\000\002\144\002\000\002\145\005" +
    "\000\002\145\003\000\002\146\014\000\002\147\004\000" +
    "\002\147\002\000\002\151\005\000\002\151\002\000\002" +
    "\153\003\000\002\153\003\000\002\153\003\000\002\154" +
    "\003\000\002\154\003\000\002\360\006\000\002\361\005" +
    "\000\002\155\003\000\002\155\003\000\002\155\003\000" +
    "\002\155\003\000\002\156\005\000\002\157\004\000\002" +
    "\157\003\000\002\160\006\000\002\161\003\000\002\161" +
    "\003\000\002\161\002\000\002\162\006\000\002\163\014" +
    "\000\002\164\003\000\002\164\002\000\002\165\005\000" +
    "\002\166\005\000\002\167\006\000\002\167\002\000\002" +
    "\170\004\000\002\170\002\000\002\171\007\000\002\171" +
    "\002\000\002\172\011\000\002\173\004\000\002\173\002" +
    "\000\002\174\004\000\002\174\002\000\002\351\005\000" +
    "\002\351\003\000\002\352\004\000\002\352\002\000\002" +
    "\175\003\000\002\175\003\000\002\175\003\000\002\176" +
    "\005\000\002\176\002\000\002\177\006\000\002\356\005" +
    "\000\002\356\003\000\002\356\002\000\002\357\010\000" +
    "\002\357\007\000\002\357\006\000\002\357\004\000\002" +
    "\357\004\000\002\354\003\000\002\354\002\000\002\355" +
    "\003\000\002\355\005\000\002\353\004\000\002\353\003" +
    "\000\002\353\002\000\002\200\004\000\002\200\002\000" +
    "\002\201\003\000\002\201\003\000\002\201\003\000\002" +
    "\201\003\000\002\201\003\000\002\202\004\000\002\202" +
    "\002\000\002\203\007\000\002\203\002\000\002\204\003" +
    "\000\002\204\002\000\002\205\003\000\002\205\002\000" +
    "\002\206\005\000\002\206\002\000\002\207\004\000\002" +
    "\207\002\000\002\210\005\000\002\210\004\000\002\210" +
    "\010\000\002\210\007\000\002\211\003\000\002\211\003" +
    "\000\002\211\002\000\002\212\004\000\002\212\002\000" +
    "\002\213\005\000\002\213\002\000\002\214\005\000\002" +
    "\214\002\000\002\215\004\000\002\215\004\000\002\216" +
    "\003\000\002\216\003\000\002\217\003\000\002\217\004" +
    "\000\002\220\004\000\002\221\006\000\002\221\005\000" +
    "\002\221\012\000\002\221\007\000\002\222\007\000\002" +
    "\223\006\000\002\223\002\000\002\224\006\000\002\225" +
    "\005\000\002\225\002\000\002\226\006\000\002\227\004" +
    "\000\002\230\003\000\002\230\003\000\002\230\003\000" +
    "\002\230\003\000\002\230\003\000\002\230\003\000\002" +
    "\231\005\000\002\232\003\000\002\232\003\000\002\233" +
    "\004\000\002\233\005\000\002\234\004\000\002\235\007" +
    "\000\002\236\003\000\002\236\002\000\002\237\005\000" +
    "\002\240\003\000\002\240\005\000\002\240\003\000\002" +
    "\241\006\000\002\242\003\000\002\242\004\000\002\243" +
    "\005\000\002\244\003\000\002\244\003\000\002\245\003" +
    "\000\002\245\005\000\002\246\005\000\002\247\005\000" +
    "\002\247\005\000\002\250\003\000\002\250\002\000\002" +
    "\251\005\000\002\251\002\000\002\253\005\000\002\254" +
    "\004\000\002\254\002\000\002\255\005\000\002\255\002" +
    "\000\002\256\003\000\002\256\002\000\002\257\005\000" +
    "\002\260\003\000\002\260\003\000\002\261\003\000\002" +
    "\261\003\000\002\261\002\000\002\262\003\000\002\262" +
    "\003\000\002\263\004\000\002\264\004\000\002\264\002" +
    "\000\002\265\004\000\002\266\004\000\002\266\002\000" +
    "\002\267\013\000\002\270\003\000\002\270\003\000\002" +
    "\271\004\000\002\271\002\000\002\272\003\000\002\272" +
    "\002\000\002\273\005\000\002\274\004\000\002\274\002" +
    "\000\002\275\005\000\002\275\005\000\002\275\004\000" +
    "\002\276\004\000\002\276\002\000\002\277\003\000\002" +
    "\277\002\000\002\300\003\000\002\300\003\000\002\301" +
    "\004\000\002\301\002\000\002\302\004\000\002\303\003" +
    "\000\002\303\003\000\002\303\005\000\002\304\003\000" +
    "\002\304\003\000\002\305\004\000\002\305\002\000\002" +
    "\306\003\000\002\306\003\000\002\306\003\000\002\306" +
    "\003\000\002\307\004\000\002\307\002\000\002\310\005" +
    "\000\002\311\004\000\002\312\004\000\002\312\002\000" +
    "\002\313\003\000\002\313\002\000\002\340\015\000\002" +
    "\341\003\000\002\341\003\000\002\341\002\000\002\342" +
    "\003\000\002\342\003\000\002\342\002\000\002\343\003" +
    "\000\002\343\003\000\002\343\003\000\002\343\003\000" +
    "\002\343\002\000\002\344\003\000\002\344\003\000\002" +
    "\344\003\000\002\344\002\000\002\345\003\000\002\345" +
    "\002\000\002\346\005\000\002\346\002\000\002\347\004" +
    "\000\002\347\002\000\002\314\012\000\002\315\003\000" +
    "\002\315\002\000\002\316\004\000\002\316\002\000\002" +
    "\317\006\000\002\322\003\000\002\322\002\000\002\320" +
    "\004\000\002\321\004\000\002\321\002\000\002\323\003" +
    "\000\002\323\002\000\002\324\003\000\002\324\003\000" +
    "\002\325\012\000\002\326\007\000\002\327\005\000\002" +
    "\327\003\000\002\372\005\000\002\372\003\000\002\330" +
    "\003\000\002\330\003\000\002\330\003\000\002\330\003" +
    "\000\002\330\003\000\002\331\004\000\002\331\002\000" +
    "\002\332\004\000\002\333\003\000\002\333\003\000\002" +
    "\333\007\000\002\333\006\000\002\333\003\000\002\333" +
    "\005\000\002\334\004\000\002\334\002\000\002\335\003" +
    "\000\002\335\003\000\002\366\005\000\002\362\004\000" +
    "\002\362\007\000\002\362\005\000\002\363\006\000\002" +
    "\363\004\000\002\364\004\000\002\364\002\000\002\365" +
    "\003\000\002\365\003\000\002\365\003\000\002\365\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0392\000\046\002\uffff\003\024\066\015\111\021\132" +
    "\050\146\034\157\022\164\035\166\046\213\036\253\007" +
    "\254\027\262\014\274\013\302\020\306\040\332\045\335" +
    "\012\001\002\000\004\002\000\001\002\000\010\037\121" +
    "\u0103\123\u0188\122\001\002\000\010\037\121\u0103\123\u0188" +
    "\122\001\002\000\004\220\u0390\001\002\000\010\037\121" +
    "\u0103\123\u0188\122\001\002\000\046\002\uffff\003\024\066" +
    "\015\111\021\132\050\146\034\157\022\164\035\166\046" +
    "\213\036\253\007\254\027\262\014\274\013\302\020\306" +
    "\040\332\045\335\012\001\002\000\010\012\ufe4c\050\ufe4c" +
    "\076\ufe4c\001\002\000\010\012\uff85\050\uff85\237\u0293\001" +
    "\002\000\014\012\uff85\050\uff85\107\uff85\237\u0293\273\uff85" +
    "\001\002\000\022\062\222\115\ufe22\220\u0333\243\u032d\305" +
    "\u032f\315\u0334\344\ufe22\372\ufe22\001\002\000\010\037\ufff2" +
    "\u0103\ufff2\u0188\ufff2\001\002\000\010\037\121\u0103\123\u0188" +
    "\122\001\002\000\006\012\061\050\063\001\002\000\006" +
    "\242\055\245\052\001\002\000\046\010\uff61\012\uff61\016" +
    "\uff61\017\uff61\020\uff61\022\uff61\042\uff61\050\uff61\052\uff61" +
    "\237\uff61\244\uff61\275\u02da\354\u02db\377\uff61\u012c\uff61\u0131" +
    "\uff61\u013c\uff61\u013d\uff61\001\002\000\010\037\121\u0103\123" +
    "\u0188\122\001\002\000\010\037\121\u0103\123\u0188\122\001" +
    "\002\000\046\002\uffff\003\024\066\015\111\021\132\050" +
    "\146\034\157\022\164\035\166\046\213\036\253\007\254" +
    "\027\262\014\274\013\302\020\306\040\332\045\335\012" +
    "\001\002\000\010\037\ufff1\u0103\ufff1\u0188\ufff1\001\002\000" +
    "\006\012\061\050\063\001\002\000\010\037\121\u0103\123" +
    "\u0188\122\001\002\000\010\037\uffeb\u0103\uffeb\u0188\uffeb\001" +
    "\002\000\010\037\121\u0103\123\u0188\122\001\002\000\010" +
    "\037\ufff4\u0103\ufff4\u0188\ufff4\001\002\000\006\242\055\245" +
    "\052\001\002\000\012\012\uff85\050\uff85\172\uff85\237\u0293" +
    "\001\002\000\032\062\222\115\ufe22\152\ufef6\156\ufef6\220" +
    "\217\236\ufef6\243\211\266\213\305\212\315\216\344\ufe22" +
    "\372\ufe22\001\002\000\010\037\121\u0103\123\u0188\122\001" +
    "\002\000\014\156\130\220\134\243\127\305\131\315\133" +
    "\001\002\000\010\037\121\u0103\123\u0188\122\001\002\000" +
    "\010\037\121\u0103\123\u0188\122\001\002\000\004\002\117" +
    "\001\002\000\010\037\uffec\u0103\uffec\u0188\uffec\001\002\000" +
    "\010\012\ufe4b\050\ufe4b\076\ufe4b\001\002\000\014\037\ufe69" +
    "\242\055\245\052\u0103\ufe69\u0188\ufe69\001\002\000\006\012" +
    "\061\050\063\001\002\000\014\037\ufe66\242\055\245\052" +
    "\u0103\ufe66\u0188\ufe66\001\002\000\010\037\ufff3\u0103\ufff3\u0188" +
    "\ufff3\001\002\000\016\012\ufe6c\037\ufe6c\042\ufe6c\050\ufe6c" +
    "\u0103\ufe6c\u0188\ufe6c\001\002\000\016\012\061\037\ufe6e\042" +
    "\060\050\063\u0103\ufe6e\u0188\ufe6e\001\002\000\010\037\ufe68" +
    "\u0103\ufe68\u0188\ufe68\001\002\000\016\012\ufe6d\037\ufe6d\042" +
    "\ufe6d\050\ufe6d\u0103\ufe6d\u0188\ufe6d\001\002\000\010\037\ufe70" +
    "\u0103\ufe70\u0188\ufe70\001\002\000\010\037\ufe6f\u0103\ufe6f\u0188" +
    "\ufe6f\001\002\000\004\012\066\001\002\000\256\005\uffe7" +
    "\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\016\uffe7\017" +
    "\uffe7\020\uffe7\022\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7" +
    "\031\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7\050\uffe7\052" +
    "\uffe7\055\uffe7\060\uffe7\061\uffe7\062\uffe7\066\uffe7\074\uffe7" +
    "\076\uffe7\077\uffe7\102\uffe7\107\uffe7\111\uffe7\112\uffe7\114" +
    "\uffe7\116\uffe7\126\uffe7\127\uffe7\131\uffe7\137\uffe7\140\uffe7" +
    "\141\uffe7\152\uffe7\153\uffe7\160\uffe7\161\uffe7\174\uffe7\175" +
    "\uffe7\176\uffe7\200\uffe7\211\uffe7\214\uffe7\236\uffe7\240\uffe7" +
    "\241\uffe7\244\uffe7\257\uffe7\266\uffe7\267\uffe7\303\uffe7\306" +
    "\uffe7\307\uffe7\311\uffe7\326\uffe7\334\uffe7\336\uffe7\364\uffe7" +
    "\370\uffe7\376\uffe7\u0103\uffe7\u0104\uffe7\u0111\uffe7\u011a\uffe7\u011d" +
    "\uffe7\u0120\uffe7\u0133\uffe7\u013f\uffe7\u0149\uffe7\u014c\uffe7\u0159\uffe7" +
    "\u015a\uffe7\u015f\uffe7\u016a\uffe7\u0188\uffe7\u0189\uffe7\u018a\uffe7\u018b" +
    "\uffe7\001\002\000\010\037\ufe67\u0103\ufe67\u0188\ufe67\001\002" +
    "\000\004\012\064\001\002\000\004\053\065\001\002\000" +
    "\256\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6" +
    "\016\uffe6\017\uffe6\020\uffe6\022\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\uffe6\031\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6" +
    "\050\uffe6\052\uffe6\055\uffe6\060\uffe6\061\uffe6\062\uffe6\066" +
    "\uffe6\074\uffe6\076\uffe6\077\uffe6\102\uffe6\107\uffe6\111\uffe6" +
    "\112\uffe6\114\uffe6\116\uffe6\126\uffe6\127\uffe6\131\uffe6\137" +
    "\uffe6\140\uffe6\141\uffe6\152\uffe6\153\uffe6\160\uffe6\161\uffe6" +
    "\174\uffe6\175\uffe6\176\uffe6\200\uffe6\211\uffe6\214\uffe6\236" +
    "\uffe6\240\uffe6\241\uffe6\244\uffe6\257\uffe6\266\uffe6\267\uffe6" +
    "\303\uffe6\306\uffe6\307\uffe6\311\uffe6\326\uffe6\334\uffe6\336" +
    "\uffe6\364\uffe6\370\uffe6\376\uffe6\u0103\uffe6\u0104\uffe6\u0111\uffe6" +
    "\u011a\uffe6\u011d\uffe6\u0120\uffe6\u0133\uffe6\u013f\uffe6\u0149\uffe6\u014c" +
    "\uffe6\u0159\uffe6\u015a\uffe6\u015f\uffe6\u016a\uffe6\u0188\uffe6\u0189\uffe6" +
    "\u018a\uffe6\u018b\uffe6\001\002\000\174\005\uffda\006\uffda\007" +
    "\uffda\010\uffda\011\uffda\012\uffda\020\uffda\024\uffda\025\uffda" +
    "\026\uffda\027\uffda\031\uffda\037\uffda\040\uffda\050\uffda\055" +
    "\uffda\061\uffda\062\uffda\074\uffda\076\uffda\107\uffda\112\uffda" +
    "\114\uffda\126\uffda\127\uffda\131\uffda\153\uffda\160\uffda\161" +
    "\uffda\175\uffda\200\uffda\211\uffda\214\uffda\240\uffda\241\uffda" +
    "\267\uffda\303\uffda\311\uffda\316\uffda\326\uffda\334\uffda\364" +
    "\uffda\370\uffda\376\uffda\u0103\uffda\u0104\uffda\u0111\uffda\u011a\uffda" +
    "\u011d\uffda\u0120\uffda\u0133\uffda\u013f\uffda\u0149\uffda\u014c\uffda\u0159" +
    "\uffda\u015a\uffda\u015f\uffda\u0188\uffda\u0189\uffda\u018a\uffda\u018b\uffda" +
    "\001\002\000\172\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011" +
    "\uffe3\012\uffe3\016\uffe3\017\uffe3\020\uffe3\022\uffe3\024\uffe3" +
    "\025\uffe3\026\uffe3\027\uffe3\031\uffe3\037\uffe3\040\uffe3\041" +
    "\112\042\uffe3\050\uffe3\052\uffe3\055\uffe3\060\uffe3\061\uffe3" +
    "\062\uffe3\066\uffe3\074\uffe3\076\uffe3\077\uffe3\102\uffe3\107" +
    "\uffe3\112\uffe3\114\uffe3\126\uffe3\127\uffe3\131\uffe3\141\uffe3" +
    "\153\uffe3\160\uffe3\161\uffe3\174\uffe3\175\uffe3\176\uffe3\200" +
    "\uffe3\211\uffe3\214\uffe3\241\uffe3\257\uffe3\266\uffe3\267\uffe3" +
    "\306\uffe3\307\uffe3\311\uffe3\326\uffe3\334\uffe3\336\uffe3\370" +
    "\uffe3\u0103\uffe3\u015f\uffe3\u0188\uffe3\001\002\000\024\016\075" +
    "\017\077\020\100\022\072\037\ufdfe\042\060\052\074\u0103" +
    "\ufdfe\u0188\ufdfe\001\002\000\004\005\106\001\002\000\014" +
    "\037\ufdf6\040\ufdf6\055\ufdf6\u0103\ufdf6\u0188\ufdf6\001\002\000" +
    "\014\037\ufdf8\040\103\055\ufdf8\u0103\ufdf8\u0188\ufdf8\001\002" +
    "\000\014\016\075\017\077\020\100\022\072\042\060\001" +
    "\002\000\014\037\ufdf7\040\ufdf7\055\ufdf7\u0103\ufdf7\u0188\ufdf7" +
    "\001\002\000\010\037\ufdfc\u0103\ufdfc\u0188\ufdfc\001\002\000" +
    "\014\037\ufdf4\040\ufdf4\055\ufdf4\u0103\ufdf4\u0188\ufdf4\001\002" +
    "\000\014\037\ufdf5\040\ufdf5\055\ufdf5\u0103\ufdf5\u0188\ufdf5\001" +
    "\002\000\004\055\102\001\002\000\010\037\ufdfd\u0103\ufdfd" +
    "\u0188\ufdfd\001\002\000\014\016\075\017\077\020\100\022" +
    "\072\042\060\001\002\000\012\037\ufdfa\055\ufdfa\u0103\ufdfa" +
    "\u0188\ufdfa\001\002\000\012\037\ufdf9\055\ufdf9\u0103\ufdf9\u0188" +
    "\ufdf9\001\002\000\012\016\075\017\077\020\100\022\072" +
    "\001\002\000\014\037\ufdf8\040\103\055\ufdf8\u0103\ufdf8\u0188" +
    "\ufdf8\001\002\000\012\037\ufdfb\055\ufdfb\u0103\ufdfb\u0188\ufdfb" +
    "\001\002\000\170\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011" +
    "\uffe5\012\uffe5\016\uffe5\017\uffe5\020\uffe5\022\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\031\uffe5\037\uffe5\040\uffe5\042" +
    "\uffe5\050\uffe5\052\uffe5\055\uffe5\060\uffe5\061\uffe5\062\uffe5" +
    "\066\uffe5\074\uffe5\076\uffe5\077\uffe5\102\uffe5\107\uffe5\112" +
    "\uffe5\114\uffe5\126\uffe5\127\uffe5\131\uffe5\141\uffe5\153\uffe5" +
    "\160\uffe5\161\uffe5\174\uffe5\175\uffe5\176\uffe5\200\uffe5\211" +
    "\uffe5\214\uffe5\241\uffe5\257\uffe5\266\uffe5\267\uffe5\306\uffe5" +
    "\307\uffe5\311\uffe5\326\uffe5\334\uffe5\336\uffe5\370\uffe5\u0103" +
    "\uffe5\u015f\uffe5\u0188\uffe5\001\002\000\006\012\061\050\063" +
    "\001\002\000\170\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011" +
    "\uffe4\012\uffe4\016\uffe4\017\uffe4\020\uffe4\022\uffe4\024\uffe4" +
    "\025\uffe4\026\uffe4\027\uffe4\031\uffe4\037\uffe4\040\uffe4\042" +
    "\uffe4\050\uffe4\052\uffe4\055\uffe4\060\uffe4\061\uffe4\062\uffe4" +
    "\066\uffe4\074\uffe4\076\uffe4\077\uffe4\102\uffe4\107\uffe4\112" +
    "\uffe4\114\uffe4\126\uffe4\127\uffe4\131\uffe4\141\uffe4\153\uffe4" +
    "\160\uffe4\161\uffe4\174\uffe4\175\uffe4\176\uffe4\200\uffe4\211" +
    "\uffe4\214\uffe4\241\uffe4\257\uffe4\266\uffe4\267\uffe4\306\uffe4" +
    "\307\uffe4\311\uffe4\326\uffe4\334\uffe4\336\uffe4\370\uffe4\u0103" +
    "\uffe4\u015f\uffe4\u0188\uffe4\001\002\000\010\037\ufe6b\u0103\ufe6b" +
    "\u0188\ufe6b\001\002\000\016\012\061\037\ufe6e\042\060\050" +
    "\063\u0103\ufe6e\u0188\ufe6e\001\002\000\010\037\ufe6a\u0103\ufe6a" +
    "\u0188\ufe6a\001\002\000\004\002\001\001\002\000\046\002" +
    "\ufff0\003\ufff0\066\ufff0\111\ufff0\132\ufff0\146\ufff0\157\ufff0" +
    "\164\ufff0\166\ufff0\213\ufff0\253\ufff0\254\ufff0\262\ufff0\274" +
    "\ufff0\302\ufff0\306\ufff0\332\ufff0\335\ufff0\001\002\000\052" +
    "\002\uffea\003\uffea\066\uffea\111\uffea\116\uffea\132\uffea\146" +
    "\uffea\157\uffea\164\uffea\166\uffea\213\uffea\253\uffea\254\uffea" +
    "\262\uffea\274\uffea\302\uffea\306\uffea\316\uffea\332\uffea\335" +
    "\uffea\001\002\000\052\002\uffe8\003\uffe8\066\uffe8\111\uffe8" +
    "\116\uffe8\132\uffe8\146\uffe8\157\uffe8\164\uffe8\166\uffe8\213" +
    "\uffe8\253\uffe8\254\uffe8\262\uffe8\274\uffe8\302\uffe8\306\uffe8" +
    "\316\uffe8\332\uffe8\335\uffe8\001\002\000\052\002\uffe9\003" +
    "\uffe9\066\uffe9\111\uffe9\116\uffe9\132\uffe9\146\uffe9\157\uffe9" +
    "\164\uffe9\166\uffe9\213\uffe9\253\uffe9\254\uffe9\262\uffe9\274" +
    "\uffe9\302\uffe9\306\uffe9\316\uffe9\332\uffe9\335\uffe9\001\002" +
    "\000\046\002\uffee\003\uffee\066\uffee\111\uffee\132\uffee\146" +
    "\uffee\157\uffee\164\uffee\166\uffee\213\uffee\253\uffee\254\uffee" +
    "\262\uffee\274\uffee\302\uffee\306\uffee\332\uffee\335\uffee\001" +
    "\002\000\010\037\uffbf\u0103\uffbf\u0188\uffbf\001\002\000\010" +
    "\037\uffbd\u0103\uffbd\u0188\uffbd\001\002\000\010\012\uffdb\050" +
    "\uffdb\150\140\001\002\000\010\012\uffdb\050\uffdb\150\140" +
    "\001\002\000\010\012\uffdb\050\uffdb\150\140\001\002\000" +
    "\010\037\uffbe\u0103\uffbe\u0188\uffbe\001\002\000\010\012\uffdb" +
    "\050\uffdb\150\140\001\002\000\010\012\uffdb\050\uffdb\150" +
    "\140\001\002\000\010\037\uffc0\u0103\uffc0\u0188\uffc0\001\002" +
    "\000\010\037\uffbb\u0103\uffbb\u0188\uffbb\001\002\000\010\037" +
    "\uffbc\u0103\uffbc\u0188\uffbc\001\002\000\004\340\153\001\002" +
    "\000\006\012\061\050\063\001\002\000\144\005\uffe0\006" +
    "\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\020\uffe0\024\uffe0" +
    "\025\uffe0\026\uffe0\027\uffe0\031\uffe0\037\uffe0\040\uffe0\041" +
    "\151\050\uffe0\052\uffe0\055\uffe0\060\uffe0\061\uffe0\062\uffe0" +
    "\066\uffe0\074\uffe0\076\uffe0\107\uffe0\112\uffe0\114\uffe0\126" +
    "\uffe0\127\uffe0\131\uffe0\153\uffe0\160\uffe0\161\uffe0\175\uffe0" +
    "\176\uffe0\200\uffe0\211\uffe0\214\uffe0\241\uffe0\257\uffe0\267" +
    "\uffe0\306\uffe0\307\uffe0\311\uffe0\326\uffe0\370\uffe0\u0103\uffe0" +
    "\u015f\uffe0\u0188\uffe0\001\002\000\012\037\uffb8\040\144\u0103" +
    "\uffb8\u0188\uffb8\001\002\000\006\012\061\050\063\001\002" +
    "\000\010\037\uffba\u0103\uffba\u0188\uffba\001\002\000\012\037" +
    "\uffb8\040\144\u0103\uffb8\u0188\uffb8\001\002\000\010\037\uffb9" +
    "\u0103\uffb9\u0188\uffb9\001\002\000\142\005\uffe2\006\uffe2\007" +
    "\uffe2\010\uffe2\011\uffe2\012\uffe2\020\uffe2\024\uffe2\025\uffe2" +
    "\026\uffe2\027\uffe2\031\uffe2\037\uffe2\040\uffe2\050\uffe2\052" +
    "\uffe2\055\uffe2\060\uffe2\061\uffe2\062\uffe2\066\uffe2\074\uffe2" +
    "\076\uffe2\107\uffe2\112\uffe2\114\uffe2\126\uffe2\127\uffe2\131" +
    "\uffe2\153\uffe2\160\uffe2\161\uffe2\175\uffe2\176\uffe2\200\uffe2" +
    "\211\uffe2\214\uffe2\241\uffe2\257\uffe2\267\uffe2\306\uffe2\307" +
    "\uffe2\311\uffe2\326\uffe2\370\uffe2\u0103\uffe2\u015f\uffe2\u0188\uffe2" +
    "\001\002\000\006\012\061\050\063\001\002\000\142\005" +
    "\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\020\uffe1" +
    "\024\uffe1\025\uffe1\026\uffe1\027\uffe1\031\uffe1\037\uffe1\040" +
    "\uffe1\050\uffe1\052\uffe1\055\uffe1\060\uffe1\061\uffe1\062\uffe1" +
    "\066\uffe1\074\uffe1\076\uffe1\107\uffe1\112\uffe1\114\uffe1\126" +
    "\uffe1\127\uffe1\131\uffe1\153\uffe1\160\uffe1\161\uffe1\175\uffe1" +
    "\176\uffe1\200\uffe1\211\uffe1\214\uffe1\241\uffe1\257\uffe1\267" +
    "\uffe1\306\uffe1\307\uffe1\311\uffe1\326\uffe1\370\uffe1\u0103\uffe1" +
    "\u015f\uffe1\u0188\uffe1\001\002\000\006\012\uffdc\050\uffdc\001" +
    "\002\000\006\012\061\050\063\001\002\000\012\037\uffb1" +
    "\040\156\u0103\uffb1\u0188\uffb1\001\002\000\006\012\061\050" +
    "\063\001\002\000\010\037\uffb3\u0103\uffb3\u0188\uffb3\001\002" +
    "\000\012\037\uffb1\040\156\u0103\uffb1\u0188\uffb1\001\002\000" +
    "\010\037\uffb2\u0103\uffb2\u0188\uffb2\001\002\000\006\012\061" +
    "\050\063\001\002\000\010\037\uffb7\u0103\uffb7\u0188\uffb7\001" +
    "\002\000\006\012\061\050\063\001\002\000\004\u015f\173" +
    "\001\002\000\012\037\uffad\040\170\u0103\uffad\u0188\uffad\001" +
    "\002\000\010\037\uffb0\u0103\uffb0\u0188\uffb0\001\002\000\006" +
    "\012\061\050\063\001\002\000\012\037\uffad\040\170\u0103" +
    "\uffad\u0188\uffad\001\002\000\010\037\uffae\u0103\uffae\u0188\uffae" +
    "\001\002\000\006\012\061\050\063\001\002\000\012\037" +
    "\uffaf\040\uffaf\u0103\uffaf\u0188\uffaf\001\002\000\006\012\061" +
    "\050\063\001\002\000\012\037\uffb4\040\177\u0103\uffb4\u0188" +
    "\uffb4\001\002\000\006\012\061\050\063\001\002\000\010" +
    "\037\uffb6\u0103\uffb6\u0188\uffb6\001\002\000\012\037\uffb4\040" +
    "\177\u0103\uffb4\u0188\uffb4\001\002\000\010\037\uffb5\u0103\uffb5" +
    "\u0188\uffb5\001\002\000\046\002\uffed\003\uffed\066\uffed\111" +
    "\uffed\132\uffed\146\uffed\157\uffed\164\uffed\166\uffed\213\uffed" +
    "\253\uffed\254\uffed\262\uffed\274\uffed\302\uffed\306\uffed\332" +
    "\uffed\335\uffed\001\002\000\010\037\uff1a\u0103\uff1a\u0188\uff1a" +
    "\001\002\000\010\037\uff20\u0103\uff20\u0188\uff20\001\002\000" +
    "\010\037\uff1c\u0103\uff1c\u0188\uff1c\001\002\000\010\115\u0219" +
    "\344\u0218\372\u0216\001\002\000\010\037\uff1b\u0103\uff1b\u0188" +
    "\uff1b\001\002\000\006\012\061\050\063\001\002\000\006" +
    "\012\061\050\063\001\002\000\010\152\ufef7\156\ufef7\236" +
    "\ufef7\001\002\000\010\037\uff1f\u0103\uff1f\u0188\uff1f\001\002" +
    "\000\010\037\uff21\u0103\uff21\u0188\uff21\001\002\000\006\012" +
    "\061\050\063\001\002\000\006\012\061\050\063\001\002" +
    "\000\010\037\uff1e\u0103\uff1e\u0188\uff1e\001\002\000\010\037" +
    "\uff1d\u0103\uff1d\u0188\uff1d\001\002\000\004\066\u0127\001\002" +
    "\000\010\152\225\156\ufeb6\236\224\001\002\000\034\037" +
    "\ufeb7\040\ufeb7\052\ufeb7\055\ufeb7\077\ufeb7\102\ufeb7\141\ufeb7" +
    "\156\ufeb7\174\ufeb7\266\ufeb7\336\ufeb7\u0103\ufeb7\u0188\ufeb7\001" +
    "\002\000\034\037\ufeb8\040\ufeb8\052\ufeb8\055\ufeb8\077\ufeb8" +
    "\102\ufeb8\141\ufeb8\156\ufeb8\174\ufeb8\266\ufeb8\336\ufeb8\u0103" +
    "\ufeb8\u0188\ufeb8\001\002\000\004\156\227\001\002\000\006" +
    "\012\061\050\063\001\002\000\004\u015f\231\001\002\000" +
    "\006\012\061\050\063\001\002\000\004\052\233\001\002" +
    "\000\006\012\061\050\063\001\002\000\016\037\ufef0\326" +
    "\ufef0\u0103\ufef0\u0110\235\u015f\ufef0\u0188\ufef0\001\002\000\004" +
    "\052\u0114\001\002\000\014\037\uff6d\326\237\u0103\uff6d\u015f" +
    "\uff6d\u0188\uff6d\001\002\000\040\012\uff87\016\uff87\017\uff87" +
    "\020\uff87\022\uff87\042\uff87\050\uff87\052\247\241\252\244" +
    "\uff87\377\uff87\u012c\uff87\u0131\uff87\u013c\uff87\u013d\uff87\001\002" +
    "\000\012\037\ufeee\u0103\ufeee\u015f\241\u0188\ufeee\001\002\000" +
    "\006\012\061\050\063\001\002\000\010\037\ufef8\u0103\ufef8" +
    "\u0188\ufef8\001\002\000\004\052\244\001\002\000\006\012" +
    "\061\050\063\001\002\000\004\055\246\001\002\000\010" +
    "\037\ufeef\u0103\ufeef\u0188\ufeef\001\002\000\040\012\uff87\016" +
    "\uff87\017\uff87\020\uff87\022\uff87\042\uff87\050\uff87\052\247" +
    "\241\252\244\uff87\377\uff87\u012c\uff87\u0131\uff87\u013c\uff87\u013d" +
    "\uff87\001\002\000\024\037\uff6e\055\uff6e\074\uff6e\126\uff6e" +
    "\131\uff6e\311\uff6e\u0103\uff6e\u015f\uff6e\u0188\uff6e\001\002\000" +
    "\036\012\061\016\260\017\267\020\275\022\254\042\060" +
    "\050\063\052\271\244\272\377\264\u012c\253\u0131\273\u013c" +
    "\270\u013d\266\001\002\000\044\012\uff88\016\uff88\017\uff88" +
    "\020\uff88\022\uff88\042\uff88\050\uff88\052\uff88\114\uff88\153" +
    "\uff88\214\uff88\244\uff88\377\uff88\u012c\uff88\u0131\uff88\u013c\uff88" +
    "\u013d\uff88\001\002\000\004\052\u010e\001\002\000\124\005" +
    "\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\020\uff9a" +
    "\024\uff9a\025\uff9a\026\uff9a\027\uff9a\031\uff9a\037\uff9a\040" +
    "\uff9a\050\uff9a\055\uff9a\061\uff9a\062\uff9a\074\uff9a\076\uff9a" +
    "\107\uff9a\112\uff9a\114\uff9a\126\uff9a\127\uff9a\131\uff9a\153" +
    "\uff9a\160\uff9a\161\uff9a\175\uff9a\200\uff9a\211\uff9a\214\uff9a" +
    "\241\uff9a\267\uff9a\311\uff9a\326\uff9a\370\uff9a\u0103\uff9a\u015f" +
    "\uff9a\u0188\uff9a\001\002\000\124\005\uff9d\006\uff9d\007\uff9d" +
    "\010\uff9d\011\uff9d\012\uff9d\020\uff9d\024\uff9d\025\uff9d\026" +
    "\uff9d\027\uff9d\031\uff9d\037\uff9d\040\uff9d\050\uff9d\055\uff9d" +
    "\061\uff9d\062\uff9d\074\uff9d\076\uff9d\107\uff9d\112\uff9d\114" +
    "\uff9d\126\uff9d\127\uff9d\131\uff9d\153\uff9d\160\uff9d\161\uff9d" +
    "\175\uff9d\200\uff9d\211\uff9d\214\uff9d\241\uff9d\267\uff9d\311" +
    "\uff9d\326\uff9d\370\uff9d\u0103\uff9d\u015f\uff9d\u0188\uff9d\001\002" +
    "\000\030\005\u0106\024\u0107\025\u0105\026\u0102\027\u0100\031" +
    "\u0103\114\uff87\153\uff87\175\u0109\214\uff87\241\252\001\002" +
    "\000\124\005\uff9f\006\uff9f\007\uff9f\010\373\011\371\012" +
    "\uff9f\020\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\031\uff9f" +
    "\037\uff9f\040\uff9f\050\uff9f\055\uff9f\061\uff9f\062\uff9f\074" +
    "\uff9f\076\uff9f\107\uff9f\112\uff9f\114\uff9f\126\uff9f\127\uff9f" +
    "\131\uff9f\153\uff9f\160\uff9f\161\uff9f\175\uff9f\200\uff9f\211" +
    "\uff9f\214\uff9f\241\uff9f\267\uff9f\311\uff9f\326\uff9f\370\uff9f" +
    "\u0103\uff9f\u015f\uff9f\u0188\uff9f\001\002\000\124\005\uff9b\006" +
    "\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\020\uff9b\024\uff9b" +
    "\025\uff9b\026\uff9b\027\uff9b\031\uff9b\037\uff9b\040\uff9b\050" +
    "\uff9b\055\uff9b\061\uff9b\062\uff9b\074\uff9b\076\uff9b\107\uff9b" +
    "\112\uff9b\114\uff9b\126\uff9b\127\uff9b\131\uff9b\153\uff9b\160" +
    "\uff9b\161\uff9b\175\uff9b\200\uff9b\211\uff9b\214\uff9b\241\uff9b" +
    "\267\uff9b\311\uff9b\326\uff9b\370\uff9b\u0103\uff9b\u015f\uff9b\u0188" +
    "\uff9b\001\002\000\120\005\uffa3\006\363\007\362\012\uffa3" +
    "\020\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\031\uffa3\037" +
    "\uffa3\040\uffa3\050\uffa3\055\uffa3\061\uffa3\062\uffa3\074\uffa3" +
    "\076\uffa3\107\uffa3\112\uffa3\114\uffa3\126\uffa3\127\uffa3\131" +
    "\uffa3\153\uffa3\160\uffa3\161\uffa3\175\uffa3\200\uffa3\211\uffa3" +
    "\214\uffa3\241\uffa3\267\uffa3\311\uffa3\326\uffa3\370\uffa3\u0103" +
    "\uffa3\u015f\uffa3\u0188\uffa3\001\002\000\130\005\uffdd\006\uffdd" +
    "\007\uffdd\010\uffdd\011\uffdd\012\uffdd\020\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\027\uffdd\031\uffdd\037\uffdd\040\uffdd\041\360" +
    "\050\uffdd\052\uffdd\055\uffdd\061\uffdd\062\uffdd\074\uffdd\076" +
    "\uffdd\107\uffdd\112\uffdd\114\uffdd\126\uffdd\127\uffdd\131\uffdd" +
    "\153\uffdd\160\uffdd\161\uffdd\175\uffdd\200\uffdd\211\uffdd\214" +
    "\uffdd\241\uffdd\267\uffdd\311\uffdd\326\uffdd\370\uffdd\u0103\uffdd" +
    "\u015f\uffdd\u0188\uffdd\001\002\000\046\037\uff7c\040\uff7c\055" +
    "\uff7c\061\352\062\353\074\uff7c\112\uff7c\126\uff7c\127\uff7c" +
    "\131\uff7c\161\uff7c\200\uff7c\211\uff7c\311\uff7c\326\uff7c\u0103" +
    "\uff7c\u015f\uff7c\u0188\uff7c\001\002\000\004\052\350\001\002" +
    "\000\124\005\uff96\006\uff96\007\uff96\010\uff96\011\uff96\012" +
    "\uff96\020\uff96\024\uff96\025\uff96\026\uff96\027\uff96\031\uff96" +
    "\037\uff96\040\uff96\050\uff96\055\uff96\061\uff96\062\uff96\074" +
    "\uff96\076\uff96\107\uff96\112\uff96\114\uff96\126\uff96\127\uff96" +
    "\131\uff96\153\uff96\160\uff96\161\uff96\175\uff96\200\uff96\211" +
    "\uff96\214\uff96\241\uff96\267\uff96\311\uff96\326\uff96\370\uff96" +
    "\u0103\uff96\u015f\uff96\u0188\uff96\001\002\000\004\052\346\001" +
    "\002\000\124\005\uff98\006\uff98\007\uff98\010\uff98\011\uff98" +
    "\012\uff98\020\uff98\024\uff98\025\uff98\026\uff98\027\uff98\031" +
    "\uff98\037\uff98\040\uff98\050\uff98\055\uff98\061\uff98\062\uff98" +
    "\074\uff98\076\uff98\107\uff98\112\uff98\114\uff98\126\uff98\127" +
    "\uff98\131\uff98\153\uff98\160\uff98\161\uff98\175\uff98\200\uff98" +
    "\211\uff98\214\uff98\241\uff98\267\uff98\311\uff98\326\uff98\370" +
    "\uff98\u0103\uff98\u015f\uff98\u0188\uff98\001\002\000\004\052\344" +
    "\001\002\000\036\012\061\016\260\017\267\020\275\022" +
    "\254\042\060\050\063\052\271\244\272\377\264\u012c\253" +
    "\u0131\273\u013c\270\u013d\266\001\002\000\124\005\uff97\006" +
    "\uff97\007\uff97\010\uff97\011\uff97\012\uff97\020\uff97\024\uff97" +
    "\025\uff97\026\uff97\027\uff97\031\uff97\037\uff97\040\uff97\050" +
    "\uff97\055\uff97\061\uff97\062\uff97\074\uff97\076\uff97\107\uff97" +
    "\112\uff97\114\uff97\126\uff97\127\uff97\131\uff97\153\uff97\160" +
    "\uff97\161\uff97\175\uff97\200\uff97\211\uff97\214\uff97\241\uff97" +
    "\267\uff97\311\uff97\326\uff97\370\uff97\u0103\uff97\u015f\uff97\u0188" +
    "\uff97\001\002\000\004\052\313\001\002\000\126\005\uff8f" +
    "\006\uff8f\007\uff8f\010\uff8f\011\uff8f\012\uff8f\020\uff8f\024" +
    "\uff8f\025\uff8f\026\uff8f\027\uff8f\031\uff8f\037\uff8f\040\uff8f" +
    "\050\uff8f\052\276\055\uff8f\061\uff8f\062\uff8f\074\uff8f\076" +
    "\uff8f\107\uff8f\112\uff8f\114\uff8f\126\uff8f\127\uff8f\131\uff8f" +
    "\153\uff8f\160\uff8f\161\uff8f\175\uff8f\200\uff8f\211\uff8f\214" +
    "\uff8f\241\uff8f\267\uff8f\311\uff8f\326\uff8f\370\uff8f\u0103\uff8f" +
    "\u015f\uff8f\u0188\uff8f\001\002\000\124\005\uff99\006\uff99\007" +
    "\uff99\010\uff99\011\uff99\012\uff99\020\uff99\024\uff99\025\uff99" +
    "\026\uff99\027\uff99\031\uff99\037\uff99\040\uff99\050\uff99\055" +
    "\uff99\061\uff99\062\uff99\074\uff99\076\uff99\107\uff99\112\uff99" +
    "\114\uff99\126\uff99\127\uff99\131\uff99\153\uff99\160\uff99\161" +
    "\uff99\175\uff99\200\uff99\211\uff99\214\uff99\241\uff99\267\uff99" +
    "\311\uff99\326\uff99\370\uff99\u0103\uff99\u015f\uff99\u0188\uff99\001" +
    "\002\000\014\016\305\017\304\020\300\022\302\042\060" +
    "\001\002\000\124\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011" +
    "\uff9c\012\uff9c\020\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c" +
    "\031\uff9c\037\uff9c\040\uff9c\050\uff9c\055\uff9c\061\uff9c\062" +
    "\uff9c\074\uff9c\076\uff9c\107\uff9c\112\uff9c\114\uff9c\126\uff9c" +
    "\127\uff9c\131\uff9c\153\uff9c\160\uff9c\161\uff9c\175\uff9c\200" +
    "\uff9c\211\uff9c\214\uff9c\241\uff9c\267\uff9c\311\uff9c\326\uff9c" +
    "\370\uff9c\u0103\uff9c\u015f\uff9c\u0188\uff9c\001\002\000\010\040" +
    "\ufe0e\055\ufe0e\316\ufe0e\001\002\000\006\040\311\055\uff8c" +
    "\001\002\000\010\040\ufe0f\055\ufe0f\316\ufe0f\001\002\000" +
    "\010\040\ufe11\055\ufe11\316\ufe11\001\002\000\010\040\ufe0d" +
    "\055\ufe0d\316\ufe0d\001\002\000\010\040\ufe10\055\ufe10\316" +
    "\ufe10\001\002\000\004\055\307\001\002\000\124\005\uff90" +
    "\006\uff90\007\uff90\010\uff90\011\uff90\012\uff90\020\uff90\024" +
    "\uff90\025\uff90\026\uff90\027\uff90\031\uff90\037\uff90\040\uff90" +
    "\050\uff90\055\uff90\061\uff90\062\uff90\074\uff90\076\uff90\107" +
    "\uff90\112\uff90\114\uff90\126\uff90\127\uff90\131\uff90\153\uff90" +
    "\160\uff90\161\uff90\175\uff90\200\uff90\211\uff90\214\uff90\241" +
    "\uff90\267\uff90\311\uff90\326\uff90\370\uff90\u0103\uff90\u015f\uff90" +
    "\u0188\uff90\001\002\000\004\055\uff8e\001\002\000\014\016" +
    "\305\017\304\020\300\022\302\042\060\001\002\000\004" +
    "\055\uff8d\001\002\000\012\010\317\012\061\016\316\050" +
    "\063\001\002\000\004\055\322\001\002\000\124\005\uff91" +
    "\006\uff91\007\uff91\010\uff91\011\uff91\012\uff91\020\uff91\024" +
    "\uff91\025\uff91\026\uff91\027\uff91\031\uff91\037\uff91\040\uff91" +
    "\050\uff91\055\uff91\061\uff91\062\uff91\074\uff91\076\uff91\107" +
    "\uff91\112\uff91\114\uff91\126\uff91\127\uff91\131\uff91\153\uff91" +
    "\160\uff91\161\uff91\175\uff91\200\uff91\211\uff91\214\uff91\241" +
    "\uff91\267\uff91\311\uff91\326\uff91\370\uff91\u0103\uff91\u015f\uff91" +
    "\u0188\uff91\001\002\000\004\055\321\001\002\000\004\055" +
    "\320\001\002\000\124\005\uff89\006\uff89\007\uff89\010\uff89" +
    "\011\uff89\012\uff89\020\uff89\024\uff89\025\uff89\026\uff89\027" +
    "\uff89\031\uff89\037\uff89\040\uff89\050\uff89\055\uff89\061\uff89" +
    "\062\uff89\074\uff89\076\uff89\107\uff89\112\uff89\114\uff89\126" +
    "\uff89\127\uff89\131\uff89\153\uff89\160\uff89\161\uff89\175\uff89" +
    "\200\uff89\211\uff89\214\uff89\241\uff89\267\uff89\311\uff89\326" +
    "\uff89\370\uff89\u0103\uff89\u015f\uff89\u0188\uff89\001\002\000\124" +
    "\005\uff8a\006\uff8a\007\uff8a\010\uff8a\011\uff8a\012\uff8a\020" +
    "\uff8a\024\uff8a\025\uff8a\026\uff8a\027\uff8a\031\uff8a\037\uff8a" +
    "\040\uff8a\050\uff8a\055\uff8a\061\uff8a\062\uff8a\074\uff8a\076" +
    "\uff8a\107\uff8a\112\uff8a\114\uff8a\126\uff8a\127\uff8a\131\uff8a" +
    "\153\uff8a\160\uff8a\161\uff8a\175\uff8a\200\uff8a\211\uff8a\214" +
    "\uff8a\241\uff8a\267\uff8a\311\uff8a\326\uff8a\370\uff8a\u0103\uff8a" +
    "\u015f\uff8a\u0188\uff8a\001\002\000\124\005\uff8b\006\uff8b\007" +
    "\uff8b\010\uff8b\011\uff8b\012\uff8b\020\uff8b\024\uff8b\025\uff8b" +
    "\026\uff8b\027\uff8b\031\uff8b\037\uff8b\040\uff8b\050\uff8b\055" +
    "\uff8b\061\uff8b\062\uff8b\074\uff8b\076\uff8b\107\uff8b\112\uff8b" +
    "\114\uff8b\126\uff8b\127\uff8b\131\uff8b\153\uff8b\160\uff8b\161" +
    "\uff8b\175\uff8b\200\uff8b\211\uff8b\214\uff8b\241\uff8b\267\uff8b" +
    "\311\uff8b\326\uff8b\370\uff8b\u0103\uff8b\u015f\uff8b\u0188\uff8b\001" +
    "\002\000\010\114\326\153\325\214\324\001\002\000\036" +
    "\012\061\016\260\017\267\020\275\022\254\042\060\050" +
    "\063\052\271\244\272\377\264\u012c\253\u0131\273\u013c\270" +
    "\u013d\266\001\002\000\004\052\334\001\002\000\036\012" +
    "\061\016\260\017\267\020\275\022\254\042\060\050\063" +
    "\052\271\244\272\377\264\u012c\253\u0131\273\u013c\270\u013d" +
    "\266\001\002\000\004\055\330\001\002\000\124\005\uff9e" +
    "\006\uff9e\007\uff9e\010\uff9e\011\uff9e\012\uff9e\020\uff9e\024" +
    "\uff9e\025\uff9e\026\uff9e\027\uff9e\031\uff9e\037\uff9e\040\uff9e" +
    "\050\uff9e\055\uff9e\061\uff9e\062\uff9e\074\uff9e\076\uff9e\107" +
    "\uff9e\112\uff9e\114\uff9e\126\uff9e\127\uff9e\131\uff9e\153\uff9e" +
    "\160\uff9e\161\uff9e\175\uff9e\200\uff9e\211\uff9e\214\uff9e\241" +
    "\uff9e\267\uff9e\311\uff9e\326\uff9e\370\uff9e\u0103\uff9e\u015f\uff9e" +
    "\u0188\uff9e\001\002\000\004\061\332\001\002\000\036\012" +
    "\061\016\260\017\267\020\275\022\254\042\060\050\063" +
    "\052\271\244\272\377\264\u012c\253\u0131\273\u013c\270\u013d" +
    "\266\001\002\000\046\037\uff70\040\uff70\055\uff70\061\uff70" +
    "\062\uff70\074\uff70\112\uff70\126\uff70\127\uff70\131\uff70\161" +
    "\uff70\200\uff70\211\uff70\311\uff70\326\uff70\u0103\uff70\u015f\uff70" +
    "\u0188\uff70\001\002\000\036\012\061\016\260\017\267\020" +
    "\275\022\254\042\060\050\063\052\271\244\272\377\264" +
    "\u012c\253\u0131\273\u013c\270\u013d\266\001\002\000\006\040" +
    "\336\055\uff81\001\002\000\036\012\061\016\260\017\267" +
    "\020\275\022\254\042\060\050\063\052\271\244\272\377" +
    "\264\u012c\253\u0131\273\u013c\270\u013d\266\001\002\000\004" +
    "\055\340\001\002\000\046\037\uff71\040\uff71\055\uff71\061" +
    "\uff71\062\uff71\074\uff71\112\uff71\126\uff71\127\uff71\131\uff71" +
    "\161\uff71\200\uff71\211\uff71\311\uff71\326\uff71\u0103\uff71\u015f" +
    "\uff71\u0188\uff71\001\002\000\006\040\336\055\uff81\001\002" +
    "\000\004\055\uff82\001\002\000\046\037\uff6f\040\uff6f\055" +
    "\uff6f\061\uff6f\062\uff6f\074\uff6f\112\uff6f\126\uff6f\127\uff6f" +
    "\131\uff6f\161\uff6f\200\uff6f\211\uff6f\311\uff6f\326\uff6f\u0103" +
    "\uff6f\u015f\uff6f\u0188\uff6f\001\002\000\012\010\317\012\061" +
    "\016\316\050\063\001\002\000\124\005\uff92\006\uff92\007" +
    "\uff92\010\uff92\011\uff92\012\uff92\020\uff92\024\uff92\025\uff92" +
    "\026\uff92\027\uff92\031\uff92\037\uff92\040\uff92\050\uff92\055" +
    "\uff92\061\uff92\062\uff92\074\uff92\076\uff92\107\uff92\112\uff92" +
    "\114\uff92\126\uff92\127\uff92\131\uff92\153\uff92\160\uff92\161" +
    "\uff92\175\uff92\200\uff92\211\uff92\214\uff92\241\uff92\267\uff92" +
    "\311\uff92\326\uff92\370\uff92\u0103\uff92\u015f\uff92\u0188\uff92\001" +
    "\002\000\012\010\317\012\061\016\316\050\063\001\002" +
    "\000\124\005\uff93\006\uff93\007\uff93\010\uff93\011\uff93\012" +
    "\uff93\020\uff93\024\uff93\025\uff93\026\uff93\027\uff93\031\uff93" +
    "\037\uff93\040\uff93\050\uff93\055\uff93\061\uff93\062\uff93\074" +
    "\uff93\076\uff93\107\uff93\112\uff93\114\uff93\126\uff93\127\uff93" +
    "\131\uff93\153\uff93\160\uff93\161\uff93\175\uff93\200\uff93\211" +
    "\uff93\214\uff93\241\uff93\267\uff93\311\uff93\326\uff93\370\uff93" +
    "\u0103\uff93\u015f\uff93\u0188\uff93\001\002\000\012\010\317\012" +
    "\061\016\316\050\063\001\002\000\124\005\uff94\006\uff94" +
    "\007\uff94\010\uff94\011\uff94\012\uff94\020\uff94\024\uff94\025" +
    "\uff94\026\uff94\027\uff94\031\uff94\037\uff94\040\uff94\050\uff94" +
    "\055\uff94\061\uff94\062\uff94\074\uff94\076\uff94\107\uff94\112" +
    "\uff94\114\uff94\126\uff94\127\uff94\131\uff94\153\uff94\160\uff94" +
    "\161\uff94\175\uff94\200\uff94\211\uff94\214\uff94\241\uff94\267" +
    "\uff94\311\uff94\326\uff94\370\uff94\u0103\uff94\u015f\uff94\u0188\uff94" +
    "\001\002\000\040\012\uff87\016\uff87\017\uff87\020\uff87\022" +
    "\uff87\042\uff87\050\uff87\052\247\241\252\244\uff87\377\uff87" +
    "\u012c\uff87\u0131\uff87\u013c\uff87\u013d\uff87\001\002\000\040\012" +
    "\uff87\016\uff87\017\uff87\020\uff87\022\uff87\042\uff87\050\uff87" +
    "\052\247\241\252\244\uff87\377\uff87\u012c\uff87\u0131\uff87\u013c" +
    "\uff87\u013d\uff87\001\002\000\042\037\uff80\040\uff80\055\uff80" +
    "\074\uff80\112\uff80\126\uff80\127\uff80\131\uff80\161\uff80\200" +
    "\uff80\211\uff80\311\uff80\326\uff80\u0103\uff80\u015f\uff80\u0188\uff80" +
    "\001\002\000\042\037\uff7d\040\uff7d\055\uff7d\074\uff7d\112" +
    "\uff7d\126\uff7d\127\uff7d\131\uff7d\161\uff7d\200\uff7d\211\uff7d" +
    "\311\uff7d\326\uff7d\u0103\uff7d\u015f\uff7d\u0188\uff7d\001\002\000" +
    "\042\037\uff7e\040\uff7e\055\uff7e\074\uff7e\112\uff7e\126\uff7e" +
    "\127\uff7e\131\uff7e\161\uff7e\200\uff7e\211\uff7e\311\uff7e\326" +
    "\uff7e\u0103\uff7e\u015f\uff7e\u0188\uff7e\001\002\000\126\005\uffdf" +
    "\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\020\uffdf\024" +
    "\uffdf\025\uffdf\026\uffdf\027\uffdf\031\uffdf\037\uffdf\040\uffdf" +
    "\050\uffdf\052\uffdf\055\uffdf\061\uffdf\062\uffdf\074\uffdf\076" +
    "\uffdf\107\uffdf\112\uffdf\114\uffdf\126\uffdf\127\uffdf\131\uffdf" +
    "\153\uffdf\160\uffdf\161\uffdf\175\uffdf\200\uffdf\211\uffdf\214" +
    "\uffdf\241\uffdf\267\uffdf\311\uffdf\326\uffdf\370\uffdf\u0103\uffdf" +
    "\u015f\uffdf\u0188\uffdf\001\002\000\006\012\061\050\063\001" +
    "\002\000\126\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde" +
    "\012\uffde\020\uffde\024\uffde\025\uffde\026\uffde\027\uffde\031" +
    "\uffde\037\uffde\040\uffde\050\uffde\052\uffde\055\uffde\061\uffde" +
    "\062\uffde\074\uffde\076\uffde\107\uffde\112\uffde\114\uffde\126" +
    "\uffde\127\uffde\131\uffde\153\uffde\160\uffde\161\uffde\175\uffde" +
    "\200\uffde\211\uffde\214\uffde\241\uffde\267\uffde\311\uffde\326" +
    "\uffde\370\uffde\u0103\uffde\u015f\uffde\u0188\uffde\001\002\000\036" +
    "\012\061\016\260\017\267\020\275\022\254\042\060\050" +
    "\063\052\271\244\272\377\264\u012c\253\u0131\273\u013c\270" +
    "\u013d\266\001\002\000\036\012\061\016\260\017\267\020" +
    "\275\022\254\042\060\050\063\052\271\244\272\377\264" +
    "\u012c\253\u0131\273\u013c\270\u013d\266\001\002\000\114\005" +
    "\uffa6\012\uffa6\020\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6" +
    "\031\uffa6\037\uffa6\040\uffa6\050\uffa6\055\uffa6\061\uffa6\062" +
    "\uffa6\074\uffa6\076\uffa6\107\uffa6\112\uffa6\114\uffa6\126\uffa6" +
    "\127\uffa6\131\uffa6\153\uffa6\160\uffa6\161\uffa6\175\uffa6\200" +
    "\uffa6\211\uffa6\214\uffa6\241\uffa6\267\uffa6\311\uffa6\326\uffa6" +
    "\370\uffa6\u0103\uffa6\u015f\uffa6\u0188\uffa6\001\002\000\120\005" +
    "\uffa3\006\363\007\362\012\uffa3\020\uffa3\024\uffa3\025\uffa3" +
    "\026\uffa3\027\uffa3\031\uffa3\037\uffa3\040\uffa3\050\uffa3\055" +
    "\uffa3\061\uffa3\062\uffa3\074\uffa3\076\uffa3\107\uffa3\112\uffa3" +
    "\114\uffa3\126\uffa3\127\uffa3\131\uffa3\153\uffa3\160\uffa3\161" +
    "\uffa3\175\uffa3\200\uffa3\211\uffa3\214\uffa3\241\uffa3\267\uffa3" +
    "\311\uffa3\326\uffa3\370\uffa3\u0103\uffa3\u015f\uffa3\u0188\uffa3\001" +
    "\002\000\114\005\uffa5\012\uffa5\020\uffa5\024\uffa5\025\uffa5" +
    "\026\uffa5\027\uffa5\031\uffa5\037\uffa5\040\uffa5\050\uffa5\055" +
    "\uffa5\061\uffa5\062\uffa5\074\uffa5\076\uffa5\107\uffa5\112\uffa5" +
    "\114\uffa5\126\uffa5\127\uffa5\131\uffa5\153\uffa5\160\uffa5\161" +
    "\uffa5\175\uffa5\200\uffa5\211\uffa5\214\uffa5\241\uffa5\267\uffa5" +
    "\311\uffa5\326\uffa5\370\uffa5\u0103\uffa5\u015f\uffa5\u0188\uffa5\001" +
    "\002\000\120\005\uffa3\006\363\007\362\012\uffa3\020\uffa3" +
    "\024\uffa3\025\uffa3\026\uffa3\027\uffa3\031\uffa3\037\uffa3\040" +
    "\uffa3\050\uffa3\055\uffa3\061\uffa3\062\uffa3\074\uffa3\076\uffa3" +
    "\107\uffa3\112\uffa3\114\uffa3\126\uffa3\127\uffa3\131\uffa3\153" +
    "\uffa3\160\uffa3\161\uffa3\175\uffa3\200\uffa3\211\uffa3\214\uffa3" +
    "\241\uffa3\267\uffa3\311\uffa3\326\uffa3\370\uffa3\u0103\uffa3\u015f" +
    "\uffa3\u0188\uffa3\001\002\000\114\005\uffa4\012\uffa4\020\uffa4" +
    "\024\uffa4\025\uffa4\026\uffa4\027\uffa4\031\uffa4\037\uffa4\040" +
    "\uffa4\050\uffa4\055\uffa4\061\uffa4\062\uffa4\074\uffa4\076\uffa4" +
    "\107\uffa4\112\uffa4\114\uffa4\126\uffa4\127\uffa4\131\uffa4\153" +
    "\uffa4\160\uffa4\161\uffa4\175\uffa4\200\uffa4\211\uffa4\214\uffa4" +
    "\241\uffa4\267\uffa4\311\uffa4\326\uffa4\370\uffa4\u0103\uffa4\u015f" +
    "\uffa4\u0188\uffa4\001\002\000\036\012\061\016\260\017\267" +
    "\020\275\022\254\042\060\050\063\052\271\244\272\377" +
    "\264\u012c\253\u0131\273\u013c\270\u013d\266\001\002\000\120" +
    "\005\uffa2\006\uffa2\007\uffa2\012\uffa2\020\uffa2\024\uffa2\025" +
    "\uffa2\026\uffa2\027\uffa2\031\uffa2\037\uffa2\040\uffa2\050\uffa2" +
    "\055\uffa2\061\uffa2\062\uffa2\074\uffa2\076\uffa2\107\uffa2\112" +
    "\uffa2\114\uffa2\126\uffa2\127\uffa2\131\uffa2\153\uffa2\160\uffa2" +
    "\161\uffa2\175\uffa2\200\uffa2\211\uffa2\214\uffa2\241\uffa2\267" +
    "\uffa2\311\uffa2\326\uffa2\370\uffa2\u0103\uffa2\u015f\uffa2\u0188\uffa2" +
    "\001\002\000\036\012\061\016\260\017\267\020\275\022" +
    "\254\042\060\050\063\052\271\244\272\377\264\u012c\253" +
    "\u0131\273\u013c\270\u013d\266\001\002\000\124\005\uff9f\006" +
    "\uff9f\007\uff9f\010\373\011\371\012\uff9f\020\uff9f\024\uff9f" +
    "\025\uff9f\026\uff9f\027\uff9f\031\uff9f\037\uff9f\040\uff9f\050" +
    "\uff9f\055\uff9f\061\uff9f\062\uff9f\074\uff9f\076\uff9f\107\uff9f" +
    "\112\uff9f\114\uff9f\126\uff9f\127\uff9f\131\uff9f\153\uff9f\160" +
    "\uff9f\161\uff9f\175\uff9f\200\uff9f\211\uff9f\214\uff9f\241\uff9f" +
    "\267\uff9f\311\uff9f\326\uff9f\370\uff9f\u0103\uff9f\u015f\uff9f\u0188" +
    "\uff9f\001\002\000\120\005\uffa1\006\uffa1\007\uffa1\012\uffa1" +
    "\020\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\031\uffa1\037" +
    "\uffa1\040\uffa1\050\uffa1\055\uffa1\061\uffa1\062\uffa1\074\uffa1" +
    "\076\uffa1\107\uffa1\112\uffa1\114\uffa1\126\uffa1\127\uffa1\131" +
    "\uffa1\153\uffa1\160\uffa1\161\uffa1\175\uffa1\200\uffa1\211\uffa1" +
    "\214\uffa1\241\uffa1\267\uffa1\311\uffa1\326\uffa1\370\uffa1\u0103" +
    "\uffa1\u015f\uffa1\u0188\uffa1\001\002\000\124\005\uff9f\006\uff9f" +
    "\007\uff9f\010\373\011\371\012\uff9f\020\uff9f\024\uff9f\025" +
    "\uff9f\026\uff9f\027\uff9f\031\uff9f\037\uff9f\040\uff9f\050\uff9f" +
    "\055\uff9f\061\uff9f\062\uff9f\074\uff9f\076\uff9f\107\uff9f\112" +
    "\uff9f\114\uff9f\126\uff9f\127\uff9f\131\uff9f\153\uff9f\160\uff9f" +
    "\161\uff9f\175\uff9f\200\uff9f\211\uff9f\214\uff9f\241\uff9f\267" +
    "\uff9f\311\uff9f\326\uff9f\370\uff9f\u0103\uff9f\u015f\uff9f\u0188\uff9f" +
    "\001\002\000\120\005\uffa0\006\uffa0\007\uffa0\012\uffa0\020" +
    "\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\031\uffa0\037\uffa0" +
    "\040\uffa0\050\uffa0\055\uffa0\061\uffa0\062\uffa0\074\uffa0\076" +
    "\uffa0\107\uffa0\112\uffa0\114\uffa0\126\uffa0\127\uffa0\131\uffa0" +
    "\153\uffa0\160\uffa0\161\uffa0\175\uffa0\200\uffa0\211\uffa0\214" +
    "\uffa0\241\uffa0\267\uffa0\311\uffa0\326\uffa0\370\uffa0\u0103\uffa0" +
    "\u015f\uffa0\u0188\uffa0\001\002\000\036\012\uff77\016\uff77\017" +
    "\uff77\020\uff77\022\uff77\042\uff77\050\uff77\052\uff77\244\uff77" +
    "\377\uff77\u012c\uff77\u0131\uff77\u013c\uff77\u013d\uff77\001\002\000" +
    "\010\114\326\153\325\214\324\001\002\000\036\012\uff78" +
    "\016\uff78\017\uff78\020\uff78\022\uff78\042\uff78\050\uff78\052" +
    "\uff78\244\uff78\377\uff78\u012c\uff78\u0131\uff78\u013c\uff78\u013d\uff78" +
    "\001\002\000\036\012\uff79\016\uff79\017\uff79\020\uff79\022" +
    "\uff79\042\uff79\050\uff79\052\uff79\244\uff79\377\uff79\u012c\uff79" +
    "\u0131\uff79\u013c\uff79\u013d\uff79\001\002\000\036\012\061\016" +
    "\260\017\267\020\275\022\254\042\060\050\063\052\271" +
    "\244\272\377\264\u012c\253\u0131\273\u013c\270\u013d\266\001" +
    "\002\000\036\012\uff75\016\uff75\017\uff75\020\uff75\022\uff75" +
    "\042\uff75\050\uff75\052\uff75\244\uff75\377\uff75\u012c\uff75\u0131" +
    "\uff75\u013c\uff75\u013d\uff75\001\002\000\036\012\uff7a\016\uff7a" +
    "\017\uff7a\020\uff7a\022\uff7a\042\uff7a\050\uff7a\052\uff7a\244" +
    "\uff7a\377\uff7a\u012c\uff7a\u0131\uff7a\u013c\uff7a\u013d\uff7a\001\002" +
    "\000\036\012\uff76\016\uff76\017\uff76\020\uff76\022\uff76\042" +
    "\uff76\050\uff76\052\uff76\244\uff76\377\uff76\u012c\uff76\u0131\uff76" +
    "\u013c\uff76\u013d\uff76\001\002\000\046\037\uff7b\040\uff7b\055" +
    "\uff7b\061\uff7b\062\uff7b\074\uff7b\112\uff7b\126\uff7b\127\uff7b" +
    "\131\uff7b\161\uff7b\200\uff7b\211\uff7b\311\uff7b\326\uff7b\u0103" +
    "\uff7b\u015f\uff7b\u0188\uff7b\001\002\000\006\241\252\244\uff87" +
    "\001\002\000\004\244\u010b\001\002\000\046\037\uff73\040" +
    "\uff73\055\uff73\061\uff73\062\uff73\074\uff73\112\uff73\126\uff73" +
    "\127\uff73\131\uff73\161\uff73\200\uff73\211\uff73\311\uff73\326" +
    "\uff73\u0103\uff73\u015f\uff73\u0188\uff73\001\002\000\046\037\uff74" +
    "\040\uff74\055\uff74\061\uff74\062\uff74\074\uff74\112\uff74\126" +
    "\uff74\127\uff74\131\uff74\161\uff74\200\uff74\211\uff74\311\uff74" +
    "\326\uff74\u0103\uff74\u015f\uff74\u0188\uff74\001\002\000\046\037" +
    "\uff72\040\uff72\055\uff72\061\uff72\062\uff72\074\uff72\112\uff72" +
    "\126\uff72\127\uff72\131\uff72\161\uff72\200\uff72\211\uff72\311" +
    "\uff72\326\uff72\u0103\uff72\u015f\uff72\u0188\uff72\001\002\000\012" +
    "\010\317\012\061\016\316\050\063\001\002\000\124\005" +
    "\uff95\006\uff95\007\uff95\010\uff95\011\uff95\012\uff95\020\uff95" +
    "\024\uff95\025\uff95\026\uff95\027\uff95\031\uff95\037\uff95\040" +
    "\uff95\050\uff95\055\uff95\061\uff95\062\uff95\074\uff95\076\uff95" +
    "\107\uff95\112\uff95\114\uff95\126\uff95\127\uff95\131\uff95\153" +
    "\uff95\160\uff95\161\uff95\175\uff95\200\uff95\211\uff95\214\uff95" +
    "\241\uff95\267\uff95\311\uff95\326\uff95\370\uff95\u0103\uff95\u015f" +
    "\uff95\u0188\uff95\001\002\000\004\055\u0111\001\002\000\046" +
    "\037\uff7c\040\uff7c\055\uff7c\061\352\062\353\074\uff7c\112" +
    "\uff7c\126\uff7c\127\uff7c\131\uff7c\161\uff7c\200\uff7c\211\uff7c" +
    "\311\uff7c\326\uff7c\u0103\uff7c\u015f\uff7c\u0188\uff7c\001\002\000" +
    "\042\037\uff7f\040\uff7f\055\uff7f\074\uff7f\112\uff7f\126\uff7f" +
    "\127\uff7f\131\uff7f\161\uff7f\200\uff7f\211\uff7f\311\uff7f\326" +
    "\uff7f\u0103\uff7f\u015f\uff7f\u0188\uff7f\001\002\000\014\037\ufef1" +
    "\326\ufef1\u0103\ufef1\u015f\ufef1\u0188\ufef1\001\002\000\006\012" +
    "\061\050\063\001\002\000\014\037\uff65\040\u0119\055\uff65" +
    "\u0103\uff65\u0188\uff65\001\002\000\004\055\u0117\001\002\000" +
    "\022\037\uff68\076\uff68\257\uff68\307\uff68\326\uff68\u0103\uff68" +
    "\u015f\uff68\u0188\uff68\001\002\000\012\037\uff67\055\uff67\u0103" +
    "\uff67\u0188\uff67\001\002\000\006\012\061\050\063\001\002" +
    "\000\014\037\uff65\040\u0119\055\uff65\u0103\uff65\u0188\uff65\001" +
    "\002\000\012\037\uff66\055\uff66\u0103\uff66\u0188\uff66\001\002" +
    "\000\012\040\uff58\055\uff58\267\u011f\370\u0120\001\002\000" +
    "\004\055\u011e\001\002\000\016\037\ufef5\326\ufef5\u0103\ufef5" +
    "\u0110\ufef5\u015f\ufef5\u0188\ufef5\001\002\000\016\037\uff59\040" +
    "\uff59\055\uff59\074\uff59\u0103\uff59\u0188\uff59\001\002\000\016" +
    "\037\uff5a\040\uff5a\055\uff5a\074\uff5a\u0103\uff5a\u0188\uff5a\001" +
    "\002\000\006\040\u0123\055\ufef2\001\002\000\004\055\ufef4" +
    "\001\002\000\006\012\061\050\063\001\002\000\012\040" +
    "\uff58\055\uff58\267\u011f\370\u0120\001\002\000\006\040\u0123" +
    "\055\ufef2\001\002\000\004\055\ufef3\001\002\000\010\115" +
    "\ufe23\344\ufe23\372\ufe23\001\002\000\004\052\u0129\001\002" +
    "\000\022\012\061\050\063\077\ufebd\141\ufebd\156\u012a\174" +
    "\u012e\266\ufebd\336\ufebd\001\002\000\006\012\061\050\063" +
    "\001\002\000\014\037\ufee4\040\ufee4\055\ufee4\u0103\ufee4\u0188" +
    "\ufee4\001\002\000\014\037\ufee3\040\ufee3\055\ufee3\u0103\ufee3" +
    "\u0188\ufee3\001\002\000\006\040\u01d4\055\ufee0\001\002\000" +
    "\006\012\061\050\063\001\002\000\050\050\u0177\240\u0175" +
    "\303\u0184\364\u017a\376\u0181\u0104\u017b\u0111\u0172\u011a\u017c\u011d" +
    "\u0170\u0120\u017e\u0133\u017d\u013f\u0174\u0149\u0173\u014c\u0176\u0159\u0180" +
    "\u015a\u0179\u0189\u0183\u018a\u016f\u018b\u0171\001\002\000\012\077" +
    "\u0132\141\u0133\266\u0136\336\u0134\001\002\000\014\037\ufee2" +
    "\040\ufee2\055\ufee2\u0103\ufee2\u0188\ufee2\001\002\000\004\203" +
    "\u0152\001\002\000\006\052\ufee9\241\u0145\001\002\000\004" +
    "\203\u0142\001\002\000\014\037\ufea9\040\ufea9\055\ufea9\u0103" +
    "\ufea9\u0188\ufea9\001\002\000\010\052\ufeb6\152\225\236\224" +
    "\001\002\000\004\052\u0138\001\002\000\006\012\061\050" +
    "\063\001\002\000\014\037\ufea7\040\ufea7\055\ufea7\u0103\ufea7" +
    "\u0188\ufea7\001\002\000\012\040\uff58\055\uff58\267\u011f\370" +
    "\u0120\001\002\000\006\040\u013d\055\ufea2\001\002\000\004" +
    "\055\u0141\001\002\000\006\012\061\050\063\001\002\000" +
    "\012\040\uff58\055\uff58\267\u011f\370\u0120\001\002\000\006" +
    "\040\u013d\055\ufea2\001\002\000\004\055\ufea3\001\002\000" +
    "\014\037\ufea4\040\ufea4\055\ufea4\u0103\ufea4\u0188\ufea4\001\002" +
    "\000\010\052\ufeb6\152\225\236\224\001\002\000\004\052" +
    "\u0138\001\002\000\014\037\ufea8\040\ufea8\055\ufea8\u0103\ufea8" +
    "\u0188\ufea8\001\002\000\006\074\u014a\244\u014c\001\002\000" +
    "\004\052\u0147\001\002\000\040\012\uff87\016\uff87\017\uff87" +
    "\020\uff87\022\uff87\042\uff87\050\uff87\052\247\241\252\244" +
    "\uff87\377\uff87\u012c\uff87\u0131\uff87\u013c\uff87\u013d\uff87\001\002" +
    "\000\004\055\u0149\001\002\000\014\037\ufea5\040\ufea5\055" +
    "\ufea5\u0103\ufea5\u0188\ufea5\001\002\000\004\105\u014d\001\002" +
    "\000\034\037\ufeea\040\ufeea\052\ufeea\055\ufeea\077\ufeea\102" +
    "\ufeea\140\ufeea\141\ufeea\174\ufeea\266\ufeea\336\ufeea\u0103\ufeea" +
    "\u0188\ufeea\001\002\000\034\037\ufee7\040\ufee7\052\ufee7\055" +
    "\ufee7\077\ufee7\102\ufee7\140\ufee7\141\ufee7\174\ufee7\266\ufee7" +
    "\336\ufee7\u0103\ufee7\u0188\ufee7\001\002\000\036\037\ufee5\040" +
    "\ufee5\052\ufee5\055\ufee5\077\ufee5\102\ufee5\140\ufee5\141\ufee5" +
    "\174\ufee5\241\u014e\266\ufee5\336\ufee5\u0103\ufee5\u0188\ufee5\001" +
    "\002\000\036\037\ufec3\040\ufec3\052\ufec3\055\ufec3\077\ufec3" +
    "\102\ufec3\140\ufec3\141\ufec3\174\ufec3\244\u0151\266\ufec3\336" +
    "\ufec3\u0103\ufec3\u0188\ufec3\001\002\000\034\037\ufee8\040\ufee8" +
    "\052\ufee8\055\ufee8\077\ufee8\102\ufee8\140\ufee8\141\ufee8\174" +
    "\ufee8\266\ufee8\336\ufee8\u0103\ufee8\u0188\ufee8\001\002\000\034" +
    "\037\ufee6\040\ufee6\052\ufee6\055\ufee6\077\ufee6\102\ufee6\140" +
    "\ufee6\141\ufee6\174\ufee6\266\ufee6\336\ufee6\u0103\ufee6\u0188\ufee6" +
    "\001\002\000\034\037\ufec4\040\ufec4\052\ufec4\055\ufec4\077" +
    "\ufec4\102\ufec4\140\ufec4\141\ufec4\174\ufec4\266\ufec4\336\ufec4" +
    "\u0103\ufec4\u0188\ufec4\001\002\000\004\052\u0153\001\002\000" +
    "\006\012\061\050\063\001\002\000\004\102\u0155\001\002" +
    "\000\006\012\061\050\063\001\002\000\022\037\ufeb2\040" +
    "\ufeb2\052\u0157\055\ufeb2\241\ufeb2\u0103\ufeb2\u015f\ufeb2\u0188\ufeb2" +
    "\001\002\000\006\012\061\050\063\001\002\000\020\037" +
    "\ufeb0\040\ufeb0\055\ufeb0\241\ufeb0\u0103\ufeb0\u015f\u0159\u0188\ufeb0" +
    "\001\002\000\006\262\u015d\274\u015e\001\002\000\016\037" +
    "\ufee9\040\ufee9\055\ufee9\241\u0145\u0103\ufee9\u0188\ufee9\001\002" +
    "\000\014\037\ufea6\040\ufea6\055\ufea6\u0103\ufea6\u0188\ufea6\001" +
    "\002\000\034\037\ufeb0\040\ufeb0\055\ufeb0\077\ufeb0\102\ufeb0" +
    "\141\ufeb0\174\ufeb0\241\ufeb0\266\ufeb0\336\ufeb0\u0103\ufeb0\u015f" +
    "\u0159\u0188\ufeb0\001\002\000\006\133\u0161\176\u0160\001\002" +
    "\000\006\133\u0161\176\u0160\001\002\000\034\037\ufeae\040" +
    "\ufeae\055\ufeae\077\ufeae\102\ufeae\141\ufeae\174\ufeae\241\ufeae" +
    "\266\ufeae\336\ufeae\u0103\ufeae\u015f\ufeae\u0188\ufeae\001\002\000" +
    "\006\244\u0164\257\u0162\001\002\000\034\037\ufeab\040\ufeab" +
    "\055\ufeab\077\ufeab\102\ufeab\141\ufeab\174\ufeab\241\ufeab\266" +
    "\ufeab\336\ufeab\u0103\ufeab\u015f\ufeab\u0188\ufeab\001\002\000\034" +
    "\037\ufeac\040\ufeac\055\ufeac\077\ufeac\102\ufeac\141\ufeac\174" +
    "\ufeac\241\ufeac\266\ufeac\336\ufeac\u0103\ufeac\u015f\ufeac\u0188\ufeac" +
    "\001\002\000\034\037\ufeaa\040\ufeaa\055\ufeaa\077\ufeaa\102" +
    "\ufeaa\141\ufeaa\174\ufeaa\241\ufeaa\266\ufeaa\336\ufeaa\u0103\ufeaa" +
    "\u015f\ufeaa\u0188\ufeaa\001\002\000\034\037\ufead\040\ufead\055" +
    "\ufead\077\ufead\102\ufead\141\ufead\174\ufead\241\ufead\266\ufead" +
    "\336\ufead\u0103\ufead\u015f\ufead\u0188\ufead\001\002\000\034\037" +
    "\ufeaf\040\ufeaf\055\ufeaf\077\ufeaf\102\ufeaf\141\ufeaf\174\ufeaf" +
    "\241\ufeaf\266\ufeaf\336\ufeaf\u0103\ufeaf\u015f\ufeaf\u0188\ufeaf\001" +
    "\002\000\032\037\ufeb1\040\ufeb1\055\ufeb1\077\ufeb1\102\ufeb1" +
    "\141\ufeb1\174\ufeb1\241\ufeb1\266\ufeb1\336\ufeb1\u0103\ufeb1\u0188" +
    "\ufeb1\001\002\000\004\055\u0168\001\002\000\034\037\ufeb3" +
    "\040\ufeb3\055\ufeb3\077\ufeb3\102\ufeb3\141\ufeb3\174\ufeb3\241" +
    "\ufeb3\266\ufeb3\336\ufeb3\u0103\ufeb3\u015f\ufeb3\u0188\ufeb3\001\002" +
    "\000\006\040\u016b\055\ufe9f\001\002\000\004\055\u016e\001" +
    "\002\000\006\012\061\050\063\001\002\000\006\040\u016b" +
    "\055\ufe9f\001\002\000\004\055\ufea0\001\002\000\004\102" +
    "\ufea1\001\002\000\070\005\uffc6\037\uffc6\040\uffc6\052\uffc6" +
    "\053\uffc6\055\uffc6\074\uffc6\076\uffc6\077\uffc6\102\uffc6\111" +
    "\uffc6\137\uffc6\140\uffc6\141\uffc6\160\uffc6\174\uffc6\241\uffc6" +
    "\244\uffc6\257\uffc6\266\uffc6\334\uffc6\336\uffc6\u0103\uffc6\u0166" +
    "\uffc6\u0169\uffc6\u016a\uffc6\u0188\uffc6\001\002\000\070\005\uffcb" +
    "\037\uffcb\040\uffcb\052\uffcb\053\uffcb\055\uffcb\074\uffcb\076" +
    "\uffcb\077\uffcb\102\uffcb\111\uffcb\137\uffcb\140\uffcb\141\uffcb" +
    "\160\uffcb\174\uffcb\241\uffcb\244\uffcb\257\uffcb\266\uffcb\334" +
    "\uffcb\336\uffcb\u0103\uffcb\u0166\uffcb\u0169\uffcb\u016a\uffcb\u0188\uffcb" +
    "\001\002\000\070\005\uffc5\037\uffc5\040\uffc5\052\uffc5\053" +
    "\uffc5\055\uffc5\074\uffc5\076\uffc5\077\uffc5\102\uffc5\111\uffc5" +
    "\137\uffc5\140\uffc5\141\uffc5\160\uffc5\174\uffc5\241\uffc5\244" +
    "\uffc5\257\uffc5\266\uffc5\334\uffc5\336\uffc5\u0103\uffc5\u0166\uffc5" +
    "\u0169\uffc5\u016a\uffc5\u0188\uffc5\001\002\000\070\005\uffd0\037" +
    "\uffd0\040\uffd0\052\uffd0\053\uffd0\055\uffd0\074\uffd0\076\uffd0" +
    "\077\uffd0\102\uffd0\111\uffd0\137\uffd0\140\uffd0\141\uffd0\160" +
    "\uffd0\174\uffd0\241\uffd0\244\uffd0\257\uffd0\266\uffd0\334\uffd0" +
    "\336\uffd0\u0103\uffd0\u0166\uffd0\u0169\uffd0\u016a\uffd0\u0188\uffd0\001" +
    "\002\000\070\005\uffca\037\uffca\040\uffca\052\uffca\053\uffca" +
    "\055\uffca\074\uffca\076\uffca\077\uffca\102\uffca\111\uffca\137" +
    "\uffca\140\uffca\141\uffca\160\uffca\174\uffca\241\uffca\244\uffca" +
    "\257\uffca\266\uffca\334\uffca\336\uffca\u0103\uffca\u0166\uffca\u0169" +
    "\uffca\u016a\uffca\u0188\uffca\001\002\000\070\005\uffd3\037\uffd3" +
    "\040\uffd3\052\uffd3\053\uffd3\055\uffd3\074\uffd3\076\uffd3\077" +
    "\uffd3\102\uffd3\111\uffd3\137\uffd3\140\uffd3\141\uffd3\160\uffd3" +
    "\174\uffd3\241\uffd3\244\uffd3\257\uffd3\266\uffd3\334\uffd3\336" +
    "\uffd3\u0103\uffd3\u0166\uffd3\u0169\uffd3\u016a\uffd3\u0188\uffd3\001\002" +
    "\000\062\037\uffcf\040\uffcf\052\uffcf\053\uffcf\055\uffcf\074" +
    "\uffcf\076\uffcf\077\uffcf\102\uffcf\111\uffcf\137\uffcf\140\uffcf" +
    "\141\uffcf\160\uffcf\174\uffcf\241\uffcf\244\uffcf\257\uffcf\266" +
    "\uffcf\334\uffcf\336\uffcf\u0103\uffcf\u016a\uffcf\u0188\uffcf\001\002" +
    "\000\070\005\uffce\037\uffce\040\uffce\052\uffce\053\uffce\055" +
    "\uffce\074\uffce\076\uffce\077\uffce\102\uffce\111\uffce\137\uffce" +
    "\140\uffce\141\uffce\160\uffce\174\uffce\241\uffce\244\uffce\257" +
    "\uffce\266\uffce\334\uffce\336\uffce\u0103\uffce\u0166\uffce\u0169\uffce" +
    "\u016a\uffce\u0188\uffce\001\002\000\046\240\u0175\303\u0184\364" +
    "\u017a\376\u0181\u0104\u017b\u0111\u0172\u011a\u017c\u011d\u0170\u0120\u017e" +
    "\u0133\u017d\u013f\u0174\u0149\u0173\u014c\u0176\u0159\u0180\u015a\u0179\u0189" +
    "\u0183\u018a\u016f\u018b\u0171\001\002\000\046\037\ufece\040\ufece" +
    "\055\ufece\074\ufece\077\ufece\102\ufece\137\ufece\140\ufece\141" +
    "\ufece\160\u018c\174\ufece\241\ufece\244\ufece\257\ufece\266\ufece" +
    "\336\ufece\u0103\ufece\u0188\ufece\001\002\000\070\005\uffd6\037" +
    "\uffd6\040\uffd6\052\uffd6\053\uffd6\055\uffd6\074\uffd6\076\uffd6" +
    "\077\uffd6\102\uffd6\111\uffd6\137\uffd6\140\uffd6\141\uffd6\160" +
    "\uffd6\174\uffd6\241\uffd6\244\uffd6\257\uffd6\266\uffd6\334\uffd6" +
    "\336\uffd6\u0103\uffd6\u0166\uffd6\u0169\uffd6\u016a\uffd6\u0188\uffd6\001" +
    "\002\000\070\005\uffd4\037\uffd4\040\uffd4\052\uffd4\053\uffd4" +
    "\055\uffd4\074\uffd4\076\uffd4\077\uffd4\102\uffd4\111\uffd4\137" +
    "\uffd4\140\uffd4\141\uffd4\160\uffd4\174\uffd4\241\uffd4\244\uffd4" +
    "\257\uffd4\266\uffd4\334\uffd4\336\uffd4\u0103\uffd4\u0166\uffd4\u0169" +
    "\uffd4\u016a\uffd4\u0188\uffd4\001\002\000\070\005\uffd2\037\uffd2" +
    "\040\uffd2\052\uffd2\053\uffd2\055\uffd2\074\uffd2\076\uffd2\077" +
    "\uffd2\102\uffd2\111\uffd2\137\uffd2\140\uffd2\141\uffd2\160\uffd2" +
    "\174\uffd2\241\uffd2\244\uffd2\257\uffd2\266\uffd2\334\uffd2\336" +
    "\uffd2\u0103\uffd2\u0166\uffd2\u0169\uffd2\u016a\uffd2\u0188\uffd2\001\002" +
    "\000\070\005\uffc9\037\uffc9\040\uffc9\052\uffc9\053\uffc9\055" +
    "\uffc9\074\uffc9\076\uffc9\077\uffc9\102\uffc9\111\uffc9\137\uffc9" +
    "\140\uffc9\141\uffc9\160\uffc9\174\uffc9\241\uffc9\244\uffc9\257" +
    "\uffc9\266\uffc9\334\uffc9\336\uffc9\u0103\uffc9\u0166\uffc9\u0169\uffc9" +
    "\u016a\uffc9\u0188\uffc9\001\002\000\070\005\uffcc\037\uffcc\040" +
    "\uffcc\052\uffcc\053\uffcc\055\uffcc\074\uffcc\076\uffcc\077\uffcc" +
    "\102\uffcc\111\uffcc\137\uffcc\140\uffcc\141\uffcc\160\uffcc\174" +
    "\uffcc\241\uffcc\244\uffcc\257\uffcc\266\uffcc\334\uffcc\336\uffcc" +
    "\u0103\uffcc\u0166\uffcc\u0169\uffcc\u016a\uffcc\u0188\uffcc\001\002\000" +
    "\070\005\uffd5\037\uffd5\040\uffd5\052\uffd5\053\uffd5\055\uffd5" +
    "\074\uffd5\076\uffd5\077\uffd5\102\uffd5\111\uffd5\137\uffd5\140" +
    "\uffd5\141\uffd5\160\uffd5\174\uffd5\241\uffd5\244\uffd5\257\uffd5" +
    "\266\uffd5\334\uffd5\336\uffd5\u0103\uffd5\u0166\uffd5\u0169\uffd5\u016a" +
    "\uffd5\u0188\uffd5\001\002\000\062\005\uffc3\037\uffc3\040\uffc3" +
    "\052\u0185\055\uffc3\074\uffc3\076\uffc3\077\uffc3\102\uffc3\137" +
    "\uffc3\140\uffc3\141\uffc3\160\uffc3\174\uffc3\241\uffc3\244\uffc3" +
    "\257\uffc3\266\uffc3\334\uffc3\336\uffc3\u0103\uffc3\u0166\uffc3\u0169" +
    "\uffc3\u0188\uffc3\001\002\000\070\005\uffc8\037\uffc8\040\uffc8" +
    "\052\uffc8\053\uffc8\055\uffc8\074\uffc8\076\uffc8\077\uffc8\102" +
    "\uffc8\111\uffc8\137\uffc8\140\uffc8\141\uffc8\160\uffc8\174\uffc8" +
    "\241\uffc8\244\uffc8\257\uffc8\266\uffc8\334\uffc8\336\uffc8\u0103" +
    "\uffc8\u0166\uffc8\u0169\uffc8\u016a\uffc8\u0188\uffc8\001\002\000\070" +
    "\005\uffcd\037\uffcd\040\uffcd\052\uffcd\053\uffcd\055\uffcd\074" +
    "\uffcd\076\uffcd\077\uffcd\102\uffcd\111\uffcd\137\uffcd\140\uffcd" +
    "\141\uffcd\160\uffcd\174\uffcd\241\uffcd\244\uffcd\257\uffcd\266" +
    "\uffcd\334\uffcd\336\uffcd\u0103\uffcd\u0166\uffcd\u0169\uffcd\u016a\uffcd" +
    "\u0188\uffcd\001\002\000\062\005\uffd8\037\uffd8\040\uffd8\052" +
    "\uffd8\055\uffd8\074\uffd8\076\uffd8\077\uffd8\102\uffd8\137\uffd8" +
    "\140\uffd8\141\uffd8\160\uffd8\174\uffd8\241\uffd8\244\uffd8\257" +
    "\uffd8\266\uffd8\334\uffd8\336\uffd8\u0103\uffd8\u0166\uffd8\u0169\uffd8" +
    "\u0188\uffd8\001\002\000\070\005\uffc7\037\uffc7\040\uffc7\052" +
    "\uffc7\053\uffc7\055\uffc7\074\uffc7\076\uffc7\077\uffc7\102\uffc7" +
    "\111\uffc7\137\uffc7\140\uffc7\141\uffc7\160\uffc7\174\uffc7\241" +
    "\uffc7\244\uffc7\257\uffc7\266\uffc7\334\uffc7\336\uffc7\u0103\uffc7" +
    "\u0166\uffc7\u0169\uffc7\u016a\uffc7\u0188\uffc7\001\002\000\070\005" +
    "\uffd1\037\uffd1\040\uffd1\052\uffd1\053\uffd1\055\uffd1\074\uffd1" +
    "\076\uffd1\077\uffd1\102\uffd1\111\uffd1\137\uffd1\140\uffd1\141" +
    "\uffd1\160\uffd1\174\uffd1\241\uffd1\244\uffd1\257\uffd1\266\uffd1" +
    "\334\uffd1\336\uffd1\u0103\uffd1\u0166\uffd1\u0169\uffd1\u016a\uffd1\u0188" +
    "\uffd1\001\002\000\004\016\u0187\001\002\000\060\005\uffd9" +
    "\037\uffd9\040\uffd9\055\uffd9\074\uffd9\076\uffd9\077\uffd9\102" +
    "\uffd9\137\uffd9\140\uffd9\141\uffd9\160\uffd9\174\uffd9\241\uffd9" +
    "\244\uffd9\257\uffd9\266\uffd9\334\uffd9\336\uffd9\u0103\uffd9\u0166" +
    "\uffd9\u0169\uffd9\u0188\uffd9\001\002\000\006\040\u0188\055\uffc1" +
    "\001\002\000\004\016\u018b\001\002\000\004\055\u018a\001" +
    "\002\000\060\005\uffc4\037\uffc4\040\uffc4\055\uffc4\074\uffc4" +
    "\076\uffc4\077\uffc4\102\uffc4\137\uffc4\140\uffc4\141\uffc4\160" +
    "\uffc4\174\uffc4\241\uffc4\244\uffc4\257\uffc4\266\uffc4\334\uffc4" +
    "\336\uffc4\u0103\uffc4\u0166\uffc4\u0169\uffc4\u0188\uffc4\001\002\000" +
    "\004\055\uffc2\001\002\000\006\012\061\050\063\001\002" +
    "\000\044\037\ufedc\040\ufedc\055\ufedc\074\ufed5\077\u019b\102" +
    "\ufeb4\137\u018e\140\u0195\141\u0199\174\u0194\241\u0198\244\ufed5" +
    "\257\u0193\266\u0192\336\u019a\u0103\ufedc\u0188\ufedc\001\002\000" +
    "\036\037\ufec5\040\ufec5\052\u01bb\055\ufec5\077\ufec5\102\ufec5" +
    "\140\ufec5\141\ufec5\174\ufec5\241\ufec5\266\ufec5\336\ufec5\u0103" +
    "\ufec5\u0188\ufec5\001\002\000\014\037\ufedf\040\ufedf\055\ufedf" +
    "\u0103\ufedf\u0188\ufedf\001\002\000\014\037\ufedd\040\ufedd\055" +
    "\ufedd\u0103\ufedd\u0188\ufedd\001\002\000\006\074\u01c2\244\u01c3" +
    "\001\002\000\034\037\ufeb6\040\ufeb6\055\ufeb6\077\ufeb6\102" +
    "\ufeb6\141\ufeb6\152\225\174\ufeb6\236\224\266\ufeb6\336\ufeb6" +
    "\u0103\ufeb6\u0188\ufeb6\001\002\000\014\016\u01b4\017\u01b1\020" +
    "\u01af\022\u01b0\244\u01b3\001\002\000\006\012\061\050\063" +
    "\001\002\000\030\037\ufebf\040\ufebf\055\ufebf\077\ufebd\102" +
    "\ufebd\141\ufebd\174\u012e\266\ufebd\336\ufebd\u0103\ufebf\u0188\ufebf" +
    "\001\002\000\004\102\u01a7\001\002\000\030\037\ufebf\040" +
    "\ufebf\055\ufebf\077\ufebd\102\ufebd\141\ufebd\174\u012e\266\ufebd" +
    "\336\ufebd\u0103\ufebf\u0188\ufebf\001\002\000\006\074\ufed6\244" +
    "\ufed6\001\002\000\006\052\ufee9\241\u0145\001\002\000\004" +
    "\203\u019d\001\002\000\004\203\u019c\001\002\000\004\102" +
    "\ufeb5\001\002\000\034\037\ufeb6\040\ufeb6\055\ufeb6\077\ufeb6" +
    "\102\ufeb6\141\ufeb6\152\225\174\ufeb6\236\224\266\ufeb6\336" +
    "\ufeb6\u0103\ufeb6\u0188\ufeb6\001\002\000\030\037\ufebc\040\ufebc" +
    "\055\ufebc\077\ufebc\102\ufebc\141\ufebc\174\ufebc\266\ufebc\336" +
    "\ufebc\u0103\ufebc\u0188\ufebc\001\002\000\004\052\u01a0\001\002" +
    "\000\040\012\uff87\016\uff87\017\uff87\020\uff87\022\uff87\042" +
    "\uff87\050\uff87\052\247\241\252\244\uff87\377\uff87\u012c\uff87" +
    "\u0131\uff87\u013c\uff87\u013d\uff87\001\002\000\004\055\u01a2\001" +
    "\002\000\030\037\ufeb9\040\ufeb9\055\ufeb9\077\ufeb9\102\ufeb9" +
    "\141\ufeb9\174\ufeb9\266\ufeb9\336\ufeb9\u0103\ufeb9\u0188\ufeb9\001" +
    "\002\000\014\037\ufed7\040\ufed7\055\ufed7\u0103\ufed7\u0188\ufed7" +
    "\001\002\000\014\077\u019b\102\ufeb4\141\u0199\266\u0192\336" +
    "\u019a\001\002\000\030\037\ufebf\040\ufebf\055\ufebf\077\ufebd" +
    "\102\ufebd\141\ufebd\174\u012e\266\ufebd\336\ufebd\u0103\ufebf\u0188" +
    "\ufebf\001\002\000\014\037\ufec0\040\ufec0\055\ufec0\u0103\ufec0" +
    "\u0188\ufec0\001\002\000\006\012\061\050\063\001\002\000" +
    "\036\037\ufeb2\040\ufeb2\052\u0157\055\ufeb2\077\ufeb2\102\ufeb2" +
    "\141\ufeb2\174\ufeb2\241\ufeb2\266\ufeb2\336\ufeb2\u0103\ufeb2\u015f" +
    "\ufeb2\u0188\ufeb2\001\002\000\034\037\ufeb0\040\ufeb0\055\ufeb0" +
    "\077\ufeb0\102\ufeb0\141\ufeb0\174\ufeb0\241\ufeb0\266\ufeb0\336" +
    "\ufeb0\u0103\ufeb0\u015f\u0159\u0188\ufeb0\001\002\000\032\037\ufee9" +
    "\040\ufee9\055\ufee9\077\ufee9\102\ufee9\141\ufee9\174\ufee9\241" +
    "\u0145\266\ufee9\336\ufee9\u0103\ufee9\u0188\ufee9\001\002\000\030" +
    "\037\ufeba\040\ufeba\055\ufeba\077\ufeba\102\ufeba\141\ufeba\174" +
    "\ufeba\266\ufeba\336\ufeba\u0103\ufeba\u0188\ufeba\001\002\000\014" +
    "\037\ufed8\040\ufed8\055\ufed8\u0103\ufed8\u0188\ufed8\001\002\000" +
    "\030\074\ufed5\077\u019b\102\ufeb4\137\u018e\140\u0195\141\u0199" +
    "\241\u0198\244\ufed5\257\u0193\266\u0192\336\u019a\001\002\000" +
    "\014\037\ufede\040\ufede\055\ufede\u0103\ufede\u0188\ufede\001\002" +
    "\000\036\037\ufecb\040\ufecb\055\ufecb\077\ufecb\102\ufecb\137" +
    "\ufecb\140\ufecb\141\ufecb\174\ufecb\241\ufecb\266\ufecb\336\ufecb" +
    "\u0103\ufecb\u0188\ufecb\001\002\000\036\037\ufecc\040\ufecc\055" +
    "\ufecc\077\ufecc\102\ufecc\137\ufecc\140\ufecc\141\ufecc\174\ufecc" +
    "\241\ufecc\266\ufecc\336\ufecc\u0103\ufecc\u0188\ufecc\001\002\000" +
    "\036\037\ufeca\040\ufeca\055\ufeca\077\ufeca\102\ufeca\137\ufeca" +
    "\140\ufeca\141\ufeca\174\ufeca\241\ufeca\266\ufeca\336\ufeca\u0103" +
    "\ufeca\u0188\ufeca\001\002\000\036\037\ufec7\040\ufec7\055\ufec7" +
    "\077\ufec7\102\ufec7\137\u01b5\140\ufec7\141\ufec7\174\ufec7\241" +
    "\ufec7\266\ufec7\336\ufec7\u0103\ufec7\u0188\ufec7\001\002\000\036" +
    "\037\ufec9\040\ufec9\055\ufec9\077\ufec9\102\ufec9\137\ufec9\140" +
    "\ufec9\141\ufec9\174\ufec9\241\ufec9\266\ufec9\336\ufec9\u0103\ufec9" +
    "\u0188\ufec9\001\002\000\036\037\ufecd\040\ufecd\055\ufecd\077" +
    "\ufecd\102\ufecd\137\ufecd\140\ufecd\141\ufecd\174\ufecd\241\ufecd" +
    "\266\ufecd\336\ufecd\u0103\ufecd\u0188\ufecd\001\002\000\036\037" +
    "\ufec5\040\ufec5\052\u01bb\055\ufec5\077\ufec5\102\ufec5\140\ufec5" +
    "\141\ufec5\174\ufec5\241\ufec5\266\ufec5\336\ufec5\u0103\ufec5\u0188" +
    "\ufec5\001\002\000\034\037\ufee9\040\ufee9\055\ufee9\077\ufee9" +
    "\102\ufee9\140\ufee9\141\ufee9\174\ufee9\241\u0145\266\ufee9\336" +
    "\ufee9\u0103\ufee9\u0188\ufee9\001\002\000\032\037\ufec1\040\ufec1" +
    "\055\ufec1\077\ufec1\102\ufec1\140\u01b8\141\ufec1\174\ufec1\266" +
    "\ufec1\336\ufec1\u0103\ufec1\u0188\ufec1\001\002\000\030\037\ufec2" +
    "\040\ufec2\055\ufec2\077\ufec2\102\ufec2\141\ufec2\174\ufec2\266" +
    "\ufec2\336\ufec2\u0103\ufec2\u0188\ufec2\001\002\000\030\037\ufebf" +
    "\040\ufebf\055\ufebf\077\ufebd\102\ufebd\141\ufebd\174\u012e\266" +
    "\ufebd\336\ufebd\u0103\ufebf\u0188\ufebf\001\002\000\014\037\ufedb" +
    "\040\ufedb\055\ufedb\u0103\ufedb\u0188\ufedb\001\002\000\004\016" +
    "\u01bd\001\002\000\034\037\ufec8\040\ufec8\055\ufec8\077\ufec8" +
    "\102\ufec8\140\ufec8\141\ufec8\174\ufec8\241\ufec8\266\ufec8\336" +
    "\ufec8\u0103\ufec8\u0188\ufec8\001\002\000\004\040\u01be\001\002" +
    "\000\004\016\u01bf\001\002\000\004\055\u01c0\001\002\000" +
    "\034\037\ufec6\040\ufec6\055\ufec6\077\ufec6\102\ufec6\140\ufec6" +
    "\141\ufec6\174\ufec6\241\ufec6\266\ufec6\336\ufec6\u0103\ufec6\u0188" +
    "\ufec6\001\002\000\030\037\ufebb\040\ufebb\055\ufebb\077\ufebb" +
    "\102\ufebb\141\ufebb\174\ufebb\266\ufebb\336\ufebb\u0103\ufebb\u0188" +
    "\ufebb\001\002\000\004\105\u01c7\001\002\000\032\037\ufed4" +
    "\040\ufed4\055\ufed4\077\ufed4\102\ufed4\140\ufed4\141\ufed4\174" +
    "\ufed4\266\ufed4\336\ufed4\u0103\ufed4\u0188\ufed4\001\002\000\032" +
    "\037\ufec1\040\ufec1\055\ufec1\077\ufec1\102\ufec1\140\u01b8\141" +
    "\ufec1\174\ufec1\266\ufec1\336\ufec1\u0103\ufec1\u0188\ufec1\001\002" +
    "\000\030\037\ufebf\040\ufebf\055\ufebf\077\ufebd\102\ufebd\141" +
    "\ufebd\174\u012e\266\ufebd\336\ufebd\u0103\ufebf\u0188\ufebf\001\002" +
    "\000\014\037\ufed9\040\ufed9\055\ufed9\u0103\ufed9\u0188\ufed9\001" +
    "\002\000\036\037\ufed0\040\ufed0\055\ufed0\077\ufed0\102\ufed0" +
    "\140\ufed0\141\ufed0\174\ufed0\241\u01c9\244\u01ca\266\ufed0\336" +
    "\ufed0\u0103\ufed0\u0188\ufed0\001\002\000\032\037\ufed3\040\ufed3" +
    "\055\ufed3\077\ufed3\102\ufed3\140\ufed3\141\ufed3\174\ufed3\266" +
    "\ufed3\336\ufed3\u0103\ufed3\u0188\ufed3\001\002\000\004\244\u01cb" +
    "\001\002\000\032\037\ufed1\040\ufed1\055\ufed1\077\ufed1\102" +
    "\ufed1\140\ufed1\141\ufed1\174\ufed1\266\ufed1\336\ufed1\u0103\ufed1" +
    "\u0188\ufed1\001\002\000\032\037\ufed2\040\ufed2\055\ufed2\077" +
    "\ufed2\102\ufed2\140\ufed2\141\ufed2\174\ufed2\266\ufed2\336\ufed2" +
    "\u0103\ufed2\u0188\ufed2\001\002\000\034\037\ufee9\040\ufee9\055" +
    "\ufee9\077\ufee9\102\ufee9\140\ufee9\141\ufee9\174\ufee9\241\u0145" +
    "\266\ufee9\336\ufee9\u0103\ufee9\u0188\ufee9\001\002\000\032\037" +
    "\ufec1\040\ufec1\055\ufec1\077\ufec1\102\ufec1\140\u01b8\141\ufec1" +
    "\174\ufec1\266\ufec1\336\ufec1\u0103\ufec1\u0188\ufec1\001\002\000" +
    "\030\037\ufebf\040\ufebf\055\ufebf\077\ufebd\102\ufebd\141\ufebd" +
    "\174\u012e\266\ufebd\336\ufebd\u0103\ufebf\u0188\ufebf\001\002\000" +
    "\014\037\ufeda\040\ufeda\055\ufeda\u0103\ufeda\u0188\ufeda\001\002" +
    "\000\044\037\ufecf\040\ufecf\055\ufecf\074\ufecf\077\ufecf\102" +
    "\ufecf\137\ufecf\140\ufecf\141\ufecf\174\ufecf\241\ufecf\244\ufecf" +
    "\257\ufecf\266\ufecf\336\ufecf\u0103\ufecf\u0188\ufecf\001\002\000" +
    "\004\053\u01d2\001\002\000\062\005\uffd7\037\uffd7\040\uffd7" +
    "\052\uffd7\055\uffd7\074\uffd7\076\uffd7\077\uffd7\102\uffd7\137" +
    "\uffd7\140\uffd7\141\uffd7\160\uffd7\174\uffd7\241\uffd7\244\uffd7" +
    "\257\uffd7\266\uffd7\334\uffd7\336\uffd7\u0103\uffd7\u0166\uffd7\u0169" +
    "\uffd7\u0188\uffd7\001\002\000\014\077\ufebe\102\ufebe\141\ufebe" +
    "\266\ufebe\336\ufebe\001\002\000\022\012\061\050\063\077" +
    "\ufebd\141\ufebd\156\u012a\174\u012e\266\ufebd\336\ufebd\001\002" +
    "\000\004\055\u01d6\001\002\000\012\037\ufeeb\u0103\ufeeb\u015f" +
    "\u01d8\u0188\ufeeb\001\002\000\010\037\ufeed\u0103\ufeed\u0188\ufeed" +
    "\001\002\000\004\336\u01d9\001\002\000\010\037\ufeec\u0103" +
    "\ufeec\u0188\ufeec\001\002\000\014\037\ufee0\040\u01d4\055\ufee0" +
    "\u0103\ufee0\u0188\ufee0\001\002\000\012\037\ufee1\055\ufee1\u0103" +
    "\ufee1\u0188\ufee1\001\002\000\010\052\ufeb6\152\225\236\224" +
    "\001\002\000\004\052\u0138\001\002\000\014\037\ufe9e\040" +
    "\ufe9e\055\ufe9e\u0103\ufe9e\u0188\ufe9e\001\002\000\004\076\u01e0" +
    "\001\002\000\004\157\022\001\002\000\010\037\ufef9\u0103" +
    "\ufef9\u0188\ufef9\001\002\000\010\037\uff19\u0103\uff19\u0188\uff19" +
    "\001\002\000\014\037\uff15\160\uff15\u0103\uff15\u015f\u01e5\u0188" +
    "\uff15\001\002\000\012\037\uff0e\160\u0213\u0103\uff0e\u0188\uff0e" +
    "\001\002\000\006\052\uff13\336\u01e7\001\002\000\010\037" +
    "\uff18\u0103\uff18\u0188\uff18\001\002\000\004\052\uff14\001\002" +
    "\000\004\052\u01e9\001\002\000\004\u017e\u01ee\001\002\000" +
    "\012\037\uff16\160\uff16\u0103\uff16\u0188\uff16\001\002\000\014" +
    "\037\uff11\040\u01ec\160\uff11\u0103\uff11\u0188\uff11\001\002\000" +
    "\004\052\u01e9\001\002\000\012\037\uff12\160\uff12\u0103\uff12" +
    "\u0188\uff12\001\002\000\004\005\u01ef\001\002\000\004\020" +
    "\u01f0\001\002\000\004\040\u01f1\001\002\000\004\u017f\u01f2" +
    "\001\002\000\004\005\u01f3\001\002\000\004\020\u01f4\001" +
    "\002\000\006\040\u01f6\055\uff0c\001\002\000\004\055\u0212" +
    "\001\002\000\010\u0118\u01ff\u0184\u01fe\u0186\u01fd\001\002\000" +
    "\006\040\uff07\055\uff07\001\002\000\006\040\uff0a\055\uff0a" +
    "\001\002\000\006\040\uff0b\055\uff0b\001\002\000\006\040" +
    "\uff09\055\uff09\001\002\000\006\040\u01f6\055\uff0c\001\002" +
    "\000\006\040\uff08\055\uff08\001\002\000\004\005\u020c\001" +
    "\002\000\004\005\u0207\001\002\000\004\005\u0200\001\002" +
    "\000\004\016\u0201\001\002\000\016\040\uff05\055\uff05\u0180" +
    "\u0204\u0181\u0205\u0182\u0202\u0183\u0206\001\002\000\006\040\uff01" +
    "\055\uff01\001\002\000\006\040\uff06\055\uff06\001\002\000" +
    "\006\040\uff04\055\uff04\001\002\000\006\040\uff02\055\uff02" +
    "\001\002\000\006\040\uff03\055\uff03\001\002\000\006\016" +
    "\u0209\u0185\u020a\001\002\000\006\040\uff00\055\uff00\001\002" +
    "\000\012\u0180\u0204\u0181\u0205\u0182\u0202\u0183\u0206\001\002\000" +
    "\006\040\ufefe\055\ufefe\001\002\000\006\040\ufeff\055\ufeff" +
    "\001\002\000\004\016\u020d\001\002\000\020\040\ufefa\055" +
    "\ufefa\u0180\u0204\u0181\u0205\u0182\u0202\u0183\u0206\u0187\u020e\001\002" +
    "\000\006\040\ufefb\055\ufefb\001\002\000\006\040\ufefc\055" +
    "\ufefc\001\002\000\006\040\ufefd\055\ufefd\001\002\000\004" +
    "\055\uff0d\001\002\000\014\037\uff10\040\uff10\160\uff10\u0103" +
    "\uff10\u0188\uff10\001\002\000\006\012\061\050\063\001\002" +
    "\000\010\037\uff17\u0103\uff17\u0188\uff17\001\002\000\010\037" +
    "\uff0f\u0103\uff0f\u0188\uff0f\001\002\000\006\012\ufe63\050\ufe63" +
    "\001\002\000\006\012\061\050\063\001\002\000\006\012" +
    "\ufe64\050\ufe64\001\002\000\006\012\061\050\063\001\002" +
    "\000\004\052\u021b\001\002\000\006\042\060\055\ufe24\001" +
    "\002\000\004\055\ufe25\001\002\000\050\076\u0229\240\ufe1f" +
    "\303\ufe1f\364\ufe1f\376\ufe1f\u0104\ufe1f\u0111\ufe1f\u011a\ufe1f\u011d" +
    "\ufe1f\u0120\ufe1f\u0133\ufe1f\u013f\ufe1f\u0149\ufe1f\u014c\ufe1f\u0159\ufe1f" +
    "\u015a\ufe1f\u0189\ufe1f\u018a\ufe1f\u018b\ufe1f\001\002\000\006\040" +
    "\u025a\055\ufe1c\001\002\000\004\055\u0220\001\002\000\004" +
    "\u016c\u0221\001\002\000\050\220\u0224\240\u0175\303\u0184\364" +
    "\u017a\376\u0181\u0104\u017b\u0111\u0172\u011a\u017c\u011d\u0170\u0120\u017e" +
    "\u0133\u017d\u013f\u0174\u0149\u0173\u014c\u0176\u0159\u0180\u015a\u0179\u0189" +
    "\u0183\u018a\u016f\u018b\u0171\001\002\000\010\037\ufe18\u0103\ufe18" +
    "\u0188\ufe18\001\002\000\010\037\ufe19\u0103\ufe19\u0188\ufe19\001" +
    "\002\000\010\076\ufe0b\116\ufe0b\334\u0227\001\002\000\010" +
    "\037\ufe26\u0103\ufe26\u0188\ufe26\001\002\000\010\076\ufe0b\111" +
    "\ufe0b\334\u0227\001\002\000\020\332\045\335\012\u016b\u023c" +
    "\u016c\u0234\u016d\u0239\u016e\u0238\u016f\u023a\001\002\000\006\076" +
    "\u0229\111\ufe1f\001\002\000\052\111\ufe20\116\ufe20\240\ufe20" +
    "\303\ufe20\364\ufe20\376\ufe20\u0104\ufe20\u0111\ufe20\u011a\ufe20\u011d" +
    "\ufe20\u0120\ufe20\u0133\ufe20\u013f\ufe20\u0149\ufe20\u014c\ufe20\u0159\ufe20" +
    "\u015a\ufe20\u0189\ufe20\u018a\ufe20\u018b\ufe20\001\002\000\004\111" +
    "\u022b\001\002\000\014\003\024\157\022\164\035\262\014" +
    "\274\013\001\002\000\004\116\u022d\001\002\000\016\016" +
    "\305\017\304\020\300\022\302\042\060\052\u0230\001\002" +
    "\000\004\316\u0233\001\002\000\004\316\ufe12\001\002\000" +
    "\014\016\305\017\304\020\300\022\302\042\060\001\002" +
    "\000\004\055\u0232\001\002\000\004\316\ufe13\001\002\000" +
    "\010\037\ufe17\u0103\ufe17\u0188\ufe17\001\002\000\004\244\u024d" +
    "\001\002\000\010\076\ufe0c\111\ufe0c\116\ufe0c\001\002\000" +
    "\004\076\u0247\001\002\000\012\040\u0244\076\ufe02\111\ufe02" +
    "\116\ufe02\001\002\000\004\u015f\u0241\001\002\000\012\040" +
    "\ufe08\076\ufe08\111\ufe08\116\ufe08\001\002\000\004\005\u023d" +
    "\001\002\000\012\040\ufe05\076\ufe05\111\ufe05\116\ufe05\001" +
    "\002\000\012\040\ufe09\076\ufe09\111\ufe09\116\ufe09\001\002" +
    "\000\006\255\u0240\u015f\u023e\001\002\000\012\040\ufe01\076" +
    "\ufe01\111\ufe01\116\ufe01\001\002\000\012\040\ufe04\076\ufe04" +
    "\111\ufe04\116\ufe04\001\002\000\012\040\ufe00\076\ufe00\111" +
    "\ufe00\116\ufe00\001\002\000\004\244\u0242\001\002\000\004" +
    "\u0119\u0243\001\002\000\012\040\ufe06\076\ufe06\111\ufe06\116" +
    "\ufe06\001\002\000\020\332\045\335\012\u016b\u023c\u016c\u0234" +
    "\u016d\u0239\u016e\u0238\u016f\u023a\001\002\000\010\076\ufe0a\111" +
    "\ufe0a\116\ufe0a\001\002\000\010\076\ufe03\111\ufe03\116\ufe03" +
    "\001\002\000\014\012\061\050\063\u0170\u0249\u0171\u024c\u0172" +
    "\u0248\001\002\000\014\040\ufe46\074\ufe46\076\ufe46\111\ufe46" +
    "\116\ufe46\001\002\000\014\040\ufe48\074\ufe48\076\ufe48\111" +
    "\ufe48\116\ufe48\001\002\000\014\040\ufe45\074\ufe45\076\ufe45" +
    "\111\ufe45\116\ufe45\001\002\000\012\040\ufdff\076\ufdff\111" +
    "\ufdff\116\ufdff\001\002\000\014\040\ufe47\074\ufe47\076\ufe47" +
    "\111\ufe47\116\ufe47\001\002\000\004\u015f\u024e\001\002\000" +
    "\004\244\u024f\001\002\000\004\u0119\u0250\001\002\000\012" +
    "\040\ufe07\076\ufe07\111\ufe07\116\ufe07\001\002\000\006\076" +
    "\u0229\116\ufe1f\001\002\000\004\116\u0253\001\002\000\006" +
    "\052\u0254\157\022\001\002\000\004\157\022\001\002\000" +
    "\010\037\ufe16\u0103\ufe16\u0188\ufe16\001\002\000\010\037\ufe14" +
    "\u0103\ufe14\u0188\ufe14\001\002\000\004\055\u0258\001\002\000" +
    "\010\037\ufe15\u0103\ufe15\u0188\ufe15\001\002\000\004\055\ufe1e" +
    "\001\002\000\004\042\060\001\002\000\004\055\ufe1d\001" +
    "\002\000\046\240\u0175\303\u0184\364\u017a\376\u0181\u0104\u017b" +
    "\u0111\u0172\u011a\u017c\u011d\u0170\u0120\u017e\u0133\u017d\u013f\u0174\u0149" +
    "\u0173\u014c\u0176\u0159\u0180\u015a\u0179\u0189\u0183\u018a\u016f\u018b\u0171" +
    "\001\002\000\010\040\ufe1a\055\ufe1a\u016a\u025f\001\002\000" +
    "\006\040\ufe21\055\ufe21\001\002\000\006\040\ufe1b\055\ufe1b" +
    "\001\002\000\014\037\u0261\042\ufe61\074\ufe61\076\ufe61\334" +
    "\ufe61\001\002\000\004\016\u0291\001\002\000\012\042\060" +
    "\074\ufe5f\076\ufe5f\334\ufe5f\001\002\000\010\074\ufe51\076" +
    "\ufe51\334\u0278\001\002\000\052\012\061\050\u0268\240\u0266" +
    "\303\u0184\364\u017a\376\u0181\u0104\u017b\u0111\u0172\u011a\u017c\u011d" +
    "\u0170\u0120\u017e\u0133\u017d\u013f\u0174\u0149\u0173\u014c\u0176\u0159\u0180" +
    "\u015a\u0179\u0189\u0183\u018a\u016f\u018b\u0171\001\002\000\010\074" +
    "\ufe60\076\ufe60\334\ufe60\001\002\000\024\005\uffcf\040\uffcf" +
    "\052\uffcf\074\uffcf\076\uffcf\334\uffcf\u015d\u0276\u0166\uffcf\u0169" +
    "\uffcf\001\002\000\004\u016a\u0275\001\002\000\050\012\064" +
    "\240\u0175\303\u0184\364\u017a\376\u0181\u0104\u017b\u0111\u0172\u011a" +
    "\u017c\u011d\u0170\u0120\u017e\u0133\u017d\u013f\u0174\u0149\u0173\u014c\u0176" +
    "\u0159\u0180\u015a\u0179\u0189\u0183\u018a\u016f\u018b\u0171\001\002\000" +
    "\020\005\u026f\040\ufe57\074\ufe57\076\ufe57\334\ufe57\u0166\ufe57" +
    "\u0169\ufe57\001\002\000\012\040\u026c\074\ufe5c\076\ufe5c\334" +
    "\ufe5c\001\002\000\010\074\ufe5e\076\ufe5e\334\ufe5e\001\002" +
    "\000\004\042\060\001\002\000\010\074\ufe5d\076\ufe5d\334" +
    "\ufe5d\001\002\000\016\040\ufe55\074\ufe55\076\ufe55\334\ufe55" +
    "\u0166\u0273\u0169\u0271\001\002\000\004\257\u0270\001\002\000" +
    "\016\040\ufe58\074\ufe58\076\ufe58\334\ufe58\u0166\ufe58\u0169\ufe58" +
    "\001\002\000\012\040\ufe54\074\ufe54\076\ufe54\334\ufe54\001" +
    "\002\000\012\040\ufe5b\074\ufe5b\076\ufe5b\334\ufe5b\001\002" +
    "\000\012\040\ufe53\074\ufe53\076\ufe53\334\ufe53\001\002\000" +
    "\012\040\ufe56\074\ufe56\076\ufe56\334\ufe56\001\002\000\012" +
    "\040\ufe59\074\ufe59\076\ufe59\334\ufe59\001\002\000\006\u0166" +
    "\u0273\u0169\u0271\001\002\000\012\040\ufe5a\074\ufe5a\076\ufe5a" +
    "\334\ufe5a\001\002\000\012\332\045\335\012\u016b\u0289\u0173" +
    "\u028b\001\002\000\006\074\u027b\076\ufe43\001\002\000\004" +
    "\076\u027d\001\002\000\004\105\u027c\001\002\000\004\076" +
    "\ufe44\001\002\000\004\111\u027f\001\002\000\010\037\ufe65" +
    "\u0103\ufe65\u0188\ufe65\001\002\000\014\003\024\157\022\164" +
    "\035\262\014\274\013\001\002\000\016\003\024\157\022" +
    "\164\035\262\014\274\013\316\ufe3f\001\002\000\004\316" +
    "\u0282\001\002\000\010\037\ufe42\u0103\ufe42\u0188\ufe42\001\002" +
    "\000\016\003\024\157\022\164\035\262\014\274\013\316" +
    "\ufe3d\001\002\000\004\316\ufe41\001\002\000\004\316\ufe3e" +
    "\001\002\000\004\316\ufe40\001\002\000\010\040\u028f\074" +
    "\ufe49\076\ufe49\001\002\000\006\074\ufe52\076\ufe52\001\002" +
    "\000\010\040\ufe4f\074\ufe4f\076\ufe4f\001\002\000\004\076" +
    "\u028c\001\002\000\010\040\ufe4e\074\ufe4e\076\ufe4e\001\002" +
    "\000\014\012\061\050\063\u0170\u0249\u0171\u024c\u0172\u0248\001" +
    "\002\000\010\040\ufe4d\074\ufe4d\076\ufe4d\001\002\000\006" +
    "\074\ufe50\076\ufe50\001\002\000\012\332\045\335\012\u016b" +
    "\u0289\u0173\u028b\001\002\000\006\074\ufe4a\076\ufe4a\001\002" +
    "\000\012\042\ufe62\074\ufe62\076\ufe62\334\ufe62\001\002\000" +
    "\010\012\uff4f\050\uff4f\172\u029a\001\002\000\004\052\u0294" +
    "\001\002\000\004\016\u0295\001\002\000\004\055\u0296\001" +
    "\002\000\050\010\uff83\012\uff83\016\uff83\017\uff83\020\uff83" +
    "\022\uff83\042\uff83\050\uff83\052\uff83\107\uff83\172\uff83\244" +
    "\uff83\273\uff83\322\u0298\377\uff83\u012c\uff83\u0131\uff83\u013c\uff83" +
    "\u013d\uff83\001\002\000\046\010\uff86\012\uff86\016\uff86\017" +
    "\uff86\020\uff86\022\uff86\042\uff86\050\uff86\052\uff86\107\uff86" +
    "\172\uff86\244\uff86\273\uff86\377\uff86\u012c\uff86\u0131\uff86\u013c" +
    "\uff86\u013d\uff86\001\002\000\046\010\uff84\012\uff84\016\uff84" +
    "\017\uff84\020\uff84\022\uff84\042\uff84\050\uff84\052\uff84\107" +
    "\uff84\172\uff84\244\uff84\273\uff84\377\uff84\u012c\uff84\u0131\uff84" +
    "\u013c\uff84\u013d\uff84\001\002\000\006\012\061\050\063\001" +
    "\002\000\006\012\uff50\050\uff50\001\002\000\010\052\u0114" +
    "\257\uff4d\307\uff4d\001\002\000\006\257\uff4e\307\uff4e\001" +
    "\002\000\006\257\u029e\307\u029f\001\002\000\004\307\u02b4" +
    "\001\002\000\004\052\u02a1\001\002\000\010\037\uff51\u0103" +
    "\uff51\u0188\uff51\001\002\000\014\016\u02a8\017\u02a5\020\u02a3" +
    "\022\u02a4\257\u02a2\001\002\000\006\040\uff4b\055\uff4b\001" +
    "\002\000\006\040\uff48\055\uff48\001\002\000\006\040\uff49" +
    "\055\uff49\001\002\000\006\040\uff47\055\uff47\001\002\000" +
    "\004\055\u02ad\001\002\000\006\040\u02a9\055\uff45\001\002" +
    "\000\006\040\uff4a\055\uff4a\001\002\000\014\016\u02a8\017" +
    "\u02a5\020\u02a3\022\u02a4\257\u02a2\001\002\000\004\055\uff4c" +
    "\001\002\000\006\040\u02a9\055\uff45\001\002\000\004\055" +
    "\uff46\001\002\000\012\037\uff41\040\u02af\u0103\uff41\u0188\uff41" +
    "\001\002\000\010\037\uff44\u0103\uff44\u0188\uff44\001\002\000" +
    "\004\052\u02b0\001\002\000\014\016\u02a8\017\u02a5\020\u02a3" +
    "\022\u02a4\257\u02a2\001\002\000\004\055\u02b2\001\002\000" +
    "\012\037\uff41\040\u02af\u0103\uff41\u0188\uff41\001\002\000\010" +
    "\037\uff42\u0103\uff42\u0188\uff42\001\002\000\010\037\uff43\u0103" +
    "\uff43\u0188\uff43\001\002\000\010\012\061\042\060\050\063" +
    "\001\002\000\012\037\ufe72\334\ufe72\u0103\ufe72\u0188\ufe72\001" +
    "\002\000\010\037\ufe73\u0103\ufe73\u0188\ufe73\001\002\000\012" +
    "\037\ufe71\334\ufe71\u0103\ufe71\u0188\ufe71\001\002\000\052\002" +
    "\ufff8\003\ufff8\066\ufff8\111\ufff8\116\ufff8\132\ufff8\146\ufff8" +
    "\157\ufff8\164\ufff8\166\ufff8\213\ufff8\253\ufff8\254\ufff8\262" +
    "\ufff8\274\ufff8\302\ufff8\306\ufff8\316\ufff8\332\ufff8\335\ufff8" +
    "\001\002\000\046\002\uffff\003\024\066\015\111\021\132" +
    "\050\146\034\157\022\164\035\166\046\213\036\253\007" +
    "\254\027\262\014\274\013\302\020\306\040\332\045\335" +
    "\012\001\002\000\004\002\ufffb\001\002\000\004\240\u02bd" +
    "\001\002\000\034\074\ufe39\u0101\u02be\u010a\ufe39\u0137\u02bf\u0175" +
    "\ufe39\u0176\ufe39\u0177\ufe39\u0178\ufe39\u0179\ufe39\u017a\ufe39\u017b\ufe39" +
    "\u017c\ufe39\u017d\ufe39\001\002\000\030\074\ufe3a\u010a\ufe3a\u0175" +
    "\ufe3a\u0176\ufe3a\u0177\ufe3a\u0178\ufe3a\u0179\ufe3a\u017a\ufe3a\u017b\ufe3a" +
    "\u017c\ufe3a\u017d\ufe3a\001\002\000\030\074\ufe3b\u010a\ufe3b\u0175" +
    "\ufe3b\u0176\ufe3b\u0177\ufe3b\u0178\ufe3b\u0179\ufe3b\u017a\ufe3b\u017b\ufe3b" +
    "\u017c\ufe3b\u017d\ufe3b\001\002\000\030\074\ufe36\u010a\u02c3\u0175" +
    "\u02c1\u0176\ufe36\u0177\ufe36\u0178\ufe36\u0179\ufe36\u017a\ufe36\u017b\ufe36" +
    "\u017c\ufe36\u017d\ufe36\001\002\000\024\074\ufe37\u0176\ufe37\u0177" +
    "\ufe37\u0178\ufe37\u0179\ufe37\u017a\ufe37\u017b\ufe37\u017c\ufe37\u017d\ufe37" +
    "\001\002\000\024\074\ufe31\u0176\u02c4\u0177\u02c5\u0178\u02c6\u0179" +
    "\u02c8\u017a\ufe31\u017b\ufe31\u017c\ufe31\u017d\ufe31\001\002\000\024" +
    "\074\ufe38\u0176\ufe38\u0177\ufe38\u0178\ufe38\u0179\ufe38\u017a\ufe38\u017b" +
    "\ufe38\u017c\ufe38\u017d\ufe38\001\002\000\014\074\ufe35\u017a\ufe35" +
    "\u017b\ufe35\u017c\ufe35\u017d\ufe35\001\002\000\014\074\ufe34\u017a" +
    "\ufe34\u017b\ufe34\u017c\ufe34\u017d\ufe34\001\002\000\014\074\ufe33" +
    "\u017a\ufe33\u017b\ufe33\u017c\ufe33\u017d\ufe33\001\002\000\014\074" +
    "\ufe2d\u017a\u02cc\u017b\u02ca\u017c\u02cb\u017d\ufe2d\001\002\000\014" +
    "\074\ufe32\u017a\ufe32\u017b\ufe32\u017c\ufe32\u017d\ufe32\001\002\000" +
    "\006\074\ufe2b\u017d\u02ce\001\002\000\006\074\ufe2f\u017d\ufe2f" +
    "\001\002\000\006\074\ufe2e\u017d\ufe2e\001\002\000\006\074" +
    "\ufe30\u017d\ufe30\001\002\000\004\074\u02cf\001\002\000\004" +
    "\074\ufe2c\001\002\000\004\157\022\001\002\000\012\037" +
    "\ufe29\074\u02d2\u0103\ufe29\u0188\ufe29\001\002\000\010\037\ufe3c" +
    "\u0103\ufe3c\u0188\ufe3c\001\002\000\004\274\u02d3\001\002\000" +
    "\012\037\ufe27\252\u02d5\u0103\ufe27\u0188\ufe27\001\002\000\010" +
    "\037\ufe2a\u0103\ufe2a\u0188\ufe2a\001\002\000\006\012\061\050" +
    "\063\001\002\000\010\037\ufe28\u0103\ufe28\u0188\ufe28\001\002" +
    "\000\004\002\ufffc\001\002\000\052\002\ufff5\003\ufff5\066" +
    "\ufff5\111\ufff5\116\ufff5\132\ufff5\146\ufff5\157\ufff5\164\ufff5" +
    "\166\ufff5\213\ufff5\253\ufff5\254\ufff5\262\ufff5\274\ufff5\302" +
    "\ufff5\306\ufff5\316\ufff5\332\ufff5\335\ufff5\001\002\000\046" +
    "\002\uffef\003\uffef\066\uffef\111\uffef\132\uffef\146\uffef\157" +
    "\uffef\164\uffef\166\uffef\213\uffef\253\uffef\254\uffef\262\uffef" +
    "\274\uffef\302\uffef\306\uffef\332\uffef\335\uffef\001\002\000" +
    "\042\010\uff62\012\uff62\016\uff62\017\uff62\020\uff62\022\uff62" +
    "\042\uff62\050\uff62\052\uff62\237\uff62\244\uff62\377\uff62\u012c" +
    "\uff62\u0131\uff62\u013c\uff62\u013d\uff62\001\002\000\042\010\uff63" +
    "\012\uff63\016\uff63\017\uff63\020\uff63\022\uff63\042\uff63\050" +
    "\uff63\052\uff63\237\uff63\244\uff63\377\uff63\u012c\uff63\u0131\uff63" +
    "\u013c\uff63\u013d\uff63\001\002\000\042\010\uff85\012\uff85\016" +
    "\uff85\017\uff85\020\uff85\022\uff85\042\uff85\050\uff85\052\uff85" +
    "\237\u0293\244\uff85\377\uff85\u012c\uff85\u0131\uff85\u013c\uff85\u013d" +
    "\uff85\001\002\000\040\010\u02e0\012\061\016\260\017\267" +
    "\020\275\022\254\042\060\050\063\052\271\244\272\377" +
    "\264\u012c\253\u0131\273\u013c\270\u013d\266\001\002\000\040" +
    "\012\061\020\u02e7\037\uffa9\040\uffa9\050\063\055\uffa9\074" +
    "\uffa9\076\u02e6\107\uffa9\126\uffa9\131\uffa9\311\uffa9\326\uffa9" +
    "\u0103\uffa9\u0188\uffa9\001\002\000\026\037\uff2d\055\uff2d\074" +
    "\uff2d\107\u02ec\126\uff2d\131\uff2d\311\uff2d\326\uff2d\u0103\uff2d" +
    "\u0188\uff2d\001\002\000\030\037\uff69\040\u02e1\055\uff69\074" +
    "\uff69\107\uff69\126\uff69\131\uff69\311\uff69\326\uff69\u0103\uff69" +
    "\u0188\uff69\001\002\000\036\012\061\016\260\017\267\020" +
    "\275\022\254\042\060\050\063\052\271\244\272\377\264" +
    "\u012c\253\u0131\273\u013c\270\u013d\266\001\002\000\026\037" +
    "\uff6b\055\uff6b\074\uff6b\107\uff6b\126\uff6b\131\uff6b\311\uff6b" +
    "\326\uff6b\u0103\uff6b\u0188\uff6b\001\002\000\040\012\061\020" +
    "\u02e7\037\uffa9\040\uffa9\050\063\055\uffa9\074\uffa9\076\u02e6" +
    "\107\uffa9\126\uffa9\131\uffa9\311\uffa9\326\uffa9\u0103\uffa9\u0188" +
    "\uffa9\001\002\000\044\037\uffa8\040\uffa8\055\uffa8\074\uffa8" +
    "\107\uffa8\112\uffa8\126\uffa8\127\uffa8\131\uffa8\161\uffa8\200" +
    "\uffa8\211\uffa8\311\uffa8\326\uffa8\u0103\uffa8\u015f\uffa8\u0188\uffa8" +
    "\001\002\000\044\037\uffaa\040\uffaa\055\uffaa\074\uffaa\107" +
    "\uffaa\112\uffaa\126\uffaa\127\uffaa\131\uffaa\161\uffaa\200\uffaa" +
    "\211\uffaa\311\uffaa\326\uffaa\u0103\uffaa\u015f\uffaa\u0188\uffaa\001" +
    "\002\000\010\012\061\020\u02e7\050\063\001\002\000\044" +
    "\037\uffa7\040\uffa7\055\uffa7\074\uffa7\107\uffa7\112\uffa7\126" +
    "\uffa7\127\uffa7\131\uffa7\161\uffa7\200\uffa7\211\uffa7\311\uffa7" +
    "\326\uffa7\u0103\uffa7\u015f\uffa7\u0188\uffa7\001\002\000\030\037" +
    "\uff69\040\u02e1\055\uff69\074\uff69\107\uff69\126\uff69\131\uff69" +
    "\311\uff69\326\uff69\u0103\uff69\u0188\uff69\001\002\000\026\037" +
    "\uff6a\055\uff6a\074\uff6a\107\uff6a\126\uff6a\131\uff6a\311\uff6a" +
    "\326\uff6a\u0103\uff6a\u0188\uff6a\001\002\000\044\037\uffab\040" +
    "\uffab\055\uffab\074\uffab\107\uffab\112\uffab\126\uffab\127\uffab" +
    "\131\uffab\161\uffab\200\uffab\211\uffab\311\uffab\326\uffab\u0103" +
    "\uffab\u015f\uffab\u0188\uffab\001\002\000\024\037\uff6d\055\uff6d" +
    "\074\uff6d\126\uff6d\131\uff6d\311\uff6d\326\237\u0103\uff6d\u0188" +
    "\uff6d\001\002\000\006\012\061\050\063\001\002\000\050" +
    "\012\061\020\u02e7\037\uffa9\040\uffa9\050\063\055\uffa9\074" +
    "\uffa9\076\u02e6\112\uffa9\126\uffa9\127\uffa9\131\uffa9\161\uffa9" +
    "\200\uffa9\211\uffa9\311\uffa9\326\uffa9\u0103\uffa9\u0188\uffa9\001" +
    "\002\000\040\037\uff29\040\uff29\055\uff29\074\uff29\112\u02f4" +
    "\126\uff29\127\u02f2\131\uff29\161\u02f1\200\uff24\211\u02f0\311" +
    "\uff29\326\uff29\u0103\uff29\u0188\uff29\001\002\000\004\200\u02fe" +
    "\001\002\000\006\200\uff22\314\u02f5\001\002\000\004\200" +
    "\uff28\001\002\000\006\200\uff22\314\u02f5\001\002\000\026" +
    "\037\uff2b\040\u02f7\055\uff2b\074\uff2b\126\uff2b\131\uff2b\311" +
    "\uff2b\326\uff2b\u0103\uff2b\u0188\uff2b\001\002\000\006\200\uff22" +
    "\314\u02f5\001\002\000\004\200\uff23\001\002\000\004\200" +
    "\uff25\001\002\000\006\012\061\050\063\001\002\000\024" +
    "\037\uff2e\055\uff2e\074\uff2e\126\uff2e\131\uff2e\311\uff2e\326" +
    "\uff2e\u0103\uff2e\u0188\uff2e\001\002\000\046\012\061\020\u02e7" +
    "\037\uffa9\050\063\055\uffa9\074\uffa9\076\u02e6\112\uffa9\126" +
    "\uffa9\127\uffa9\131\uffa9\161\uffa9\200\uffa9\211\uffa9\311\uffa9" +
    "\326\uffa9\u0103\uffa9\u0188\uffa9\001\002\000\036\037\uff29\055" +
    "\uff29\074\uff29\112\u02f4\126\uff29\127\u02f2\131\uff29\161\u02f1" +
    "\200\uff24\211\u02f0\311\uff29\326\uff29\u0103\uff29\u0188\uff29\001" +
    "\002\000\024\037\uff2c\055\uff2c\074\uff2c\126\uff2c\131\uff2c" +
    "\311\uff2c\326\uff2c\u0103\uff2c\u0188\uff2c\001\002\000\004\200" +
    "\uff27\001\002\000\004\200\uff26\001\002\000\006\012\061" +
    "\050\063\001\002\000\014\012\061\020\u02e7\050\063\076" +
    "\u02e6\u015f\uffa9\001\002\000\004\u015f\u0301\001\002\000\040" +
    "\012\uff87\016\uff87\017\uff87\020\uff87\022\uff87\042\uff87\050" +
    "\uff87\052\247\241\252\244\uff87\377\uff87\u012c\uff87\u0131\uff87" +
    "\u013c\uff87\u013d\uff87\001\002\000\040\037\uff29\040\uff29\055" +
    "\uff29\074\uff29\112\u02f4\126\uff29\127\u02f2\131\uff29\161\u02f1" +
    "\200\uff24\211\u02f0\311\uff29\326\uff29\u0103\uff29\u0188\uff29\001" +
    "\002\000\026\037\uff2a\040\uff2a\055\uff2a\074\uff2a\126\uff2a" +
    "\131\uff2a\311\uff2a\326\uff2a\u0103\uff2a\u0188\uff2a\001\002\000" +
    "\022\037\uff54\055\uff54\074\uff54\126\u0306\131\uff54\311\uff54" +
    "\u0103\uff54\u0188\uff54\001\002\000\020\037\uff5f\055\uff5f\074" +
    "\uff5f\131\u030d\311\uff5f\u0103\uff5f\u0188\uff5f\001\002\000\004" +
    "\130\u0307\001\002\000\036\012\061\016\260\017\267\020" +
    "\275\022\254\042\060\050\063\052\271\244\272\377\264" +
    "\u012c\253\u0131\273\u013c\270\u013d\266\001\002\000\022\037" +
    "\uff52\040\u0309\055\uff52\074\uff52\131\uff52\311\uff52\u0103\uff52" +
    "\u0188\uff52\001\002\000\036\012\061\016\260\017\267\020" +
    "\275\022\254\042\060\050\063\052\271\244\272\377\264" +
    "\u012c\253\u0131\273\u013c\270\u013d\266\001\002\000\020\037" +
    "\uff55\055\uff55\074\uff55\131\uff55\311\uff55\u0103\uff55\u0188\uff55" +
    "\001\002\000\022\037\uff52\040\u0309\055\uff52\074\uff52\131" +
    "\uff52\311\uff52\u0103\uff52\u0188\uff52\001\002\000\020\037\uff53" +
    "\055\uff53\074\uff53\131\uff53\311\uff53\u0103\uff53\u0188\uff53\001" +
    "\002\000\040\012\uff87\016\uff87\017\uff87\020\uff87\022\uff87" +
    "\042\uff87\050\uff87\052\247\241\252\244\uff87\377\uff87\u012c" +
    "\uff87\u0131\uff87\u013c\uff87\u013d\uff87\001\002\000\016\037\uff5d" +
    "\055\uff5d\074\uff5d\311\u030f\u0103\uff5d\u0188\uff5d\001\002\000" +
    "\004\130\u0311\001\002\000\014\037\uff64\055\uff64\074\uff64" +
    "\u0103\uff64\u0188\uff64\001\002\000\036\012\061\016\260\017" +
    "\267\020\275\022\254\042\060\050\063\052\271\244\272" +
    "\377\264\u012c\253\u0131\273\u013c\270\u013d\266\001\002\000" +
    "\024\037\uff5b\040\uff5b\055\uff5b\074\uff5b\160\u0313\267\uff5b" +
    "\370\uff5b\u0103\uff5b\u0188\uff5b\001\002\000\006\012\061\050" +
    "\063\001\002\000\022\037\uff58\040\uff58\055\uff58\074\uff58" +
    "\267\u011f\370\u0120\u0103\uff58\u0188\uff58\001\002\000\016\037" +
    "\uff56\040\u0316\055\uff56\074\uff56\u0103\uff56\u0188\uff56\001\002" +
    "\000\036\012\061\016\260\017\267\020\275\022\254\042" +
    "\060\050\063\052\271\244\272\377\264\u012c\253\u0131\273" +
    "\u013c\270\u013d\266\001\002\000\014\037\uff5e\055\uff5e\074" +
    "\uff5e\u0103\uff5e\u0188\uff5e\001\002\000\022\037\uff5b\055\uff5b" +
    "\074\uff5b\160\u0313\267\uff5b\370\uff5b\u0103\uff5b\u0188\uff5b\001" +
    "\002\000\020\037\uff58\055\uff58\074\uff58\267\u011f\370\u0120" +
    "\u0103\uff58\u0188\uff58\001\002\000\014\037\uff57\055\uff57\074" +
    "\uff57\u0103\uff57\u0188\uff57\001\002\000\022\037\uff5c\040\uff5c" +
    "\055\uff5c\074\uff5c\267\uff5c\370\uff5c\u0103\uff5c\u0188\uff5c\001" +
    "\002\000\016\037\uff60\055\uff60\074\uff60\311\uff60\u0103\uff60" +
    "\u0188\uff60\001\002\000\030\037\uff69\040\u02e1\055\uff69\074" +
    "\uff69\107\uff69\126\uff69\131\uff69\311\uff69\326\uff69\u0103\uff69" +
    "\u0188\uff69\001\002\000\026\037\uff6c\055\uff6c\074\uff6c\107" +
    "\uff6c\126\uff6c\131\uff6c\311\uff6c\326\uff6c\u0103\uff6c\u0188\uff6c" +
    "\001\002\000\016\012\061\037\ufe78\042\060\050\063\u0103" +
    "\ufe78\u0188\ufe78\001\002\000\012\037\ufe76\334\u0322\u0103\ufe76" +
    "\u0188\ufe76\001\002\000\010\037\ufe7a\u0103\ufe7a\u0188\ufe7a\001" +
    "\002\000\004\u0174\u0324\001\002\000\010\037\ufe79\u0103\ufe79" +
    "\u0188\ufe79\001\002\000\012\020\u0325\037\ufe74\u0103\ufe74\u0188" +
    "\ufe74\001\002\000\010\037\ufe75\u0103\ufe75\u0188\ufe75\001\002" +
    "\000\010\037\ufe77\u0103\ufe77\u0188\ufe77\001\002\000\010\037" +
    "\121\u0103\123\u0188\122\001\002\000\046\002\uffff\003\024" +
    "\066\015\111\021\132\050\146\034\157\022\164\035\166" +
    "\046\213\036\253\007\254\027\262\014\274\013\302\020" +
    "\306\040\332\045\335\012\001\002\000\004\002\ufffa\001" +
    "\002\000\052\002\ufff9\003\ufff9\066\ufff9\111\ufff9\116\ufff9" +
    "\132\ufff9\146\ufff9\157\ufff9\164\ufff9\166\ufff9\213\ufff9\253" +
    "\ufff9\254\ufff9\262\ufff9\274\ufff9\302\ufff9\306\ufff9\316\ufff9" +
    "\332\ufff9\335\ufff9\001\002\000\010\037\ufe9c\u0103\ufe9c\u0188" +
    "\ufe9c\001\002\000\010\037\ufe97\u0103\ufe97\u0188\ufe97\001\002" +
    "\000\010\012\061\050\063\221\u0361\001\002\000\010\037" +
    "\ufe98\u0103\ufe98\u0188\ufe98\001\002\000\006\012\061\050\063" +
    "\001\002\000\010\037\ufe9b\u0103\ufe9b\u0188\ufe9b\001\002\000" +
    "\010\037\ufe9a\u0103\ufe9a\u0188\ufe9a\001\002\000\010\037\ufe9d" +
    "\u0103\ufe9d\u0188\ufe9d\001\002\000\006\012\061\050\063\001" +
    "\002\000\006\012\061\050\063\001\002\000\010\037\ufe99" +
    "\u0103\ufe99\u0188\ufe99\001\002\000\006\052\u0114\076\ufe8e\001" +
    "\002\000\004\076\ufe8f\001\002\000\004\076\u0339\001\002" +
    "\000\004\157\022\001\002\000\010\037\ufe90\u0103\ufe90\u0188" +
    "\ufe90\001\002\000\010\060\u033e\066\u033d\306\u0341\001\002" +
    "\000\010\037\ufe8d\u0103\ufe8d\u0188\ufe8d\001\002\000\004\163" +
    "\u0350\001\002\000\022\012\061\050\063\077\ufebd\141\ufebd" +
    "\156\u012a\174\u012e\266\ufebd\336\ufebd\001\002\000\010\037" +
    "\ufe8a\u0103\ufe8a\u0188\ufe8a\001\002\000\010\037\ufe8c\u0103\ufe8c" +
    "\u0188\ufe8c\001\002\000\014\012\ufe7d\050\ufe7d\150\ufe7d\163" +
    "\u0343\174\u0344\001\002\000\012\037\ufe7b\040\u034a\u0103\ufe7b" +
    "\u0188\ufe7b\001\002\000\010\012\uffdb\050\uffdb\150\140\001" +
    "\002\000\010\012\ufe7e\050\ufe7e\150\ufe7e\001\002\000\010" +
    "\012\uffdb\050\uffdb\150\140\001\002\000\006\012\061\050" +
    "\063\001\002\000\012\037\ufe80\040\ufe80\u0103\ufe80\u0188\ufe80" +
    "\001\002\000\006\012\061\050\063\001\002\000\012\037" +
    "\ufe7f\040\ufe7f\u0103\ufe7f\u0188\ufe7f\001\002\000\014\012\ufe7d" +
    "\050\ufe7d\150\ufe7d\163\u0343\174\u0344\001\002\000\010\037" +
    "\ufe81\u0103\ufe81\u0188\ufe81\001\002\000\012\037\ufe7b\040\u034a" +
    "\u0103\ufe7b\u0188\ufe7b\001\002\000\010\037\ufe7c\u0103\ufe7c\u0188" +
    "\ufe7c\001\002\000\012\037\ufee0\040\u01d4\u0103\ufee0\u0188\ufee0" +
    "\001\002\000\010\037\ufe8b\u0103\ufe8b\u0188\ufe8b\001\002\000" +
    "\006\012\061\050\063\001\002\000\054\050\u0177\060\u0353" +
    "\240\u0175\303\u0184\306\u0354\364\u017a\376\u0181\u0104\u017b\u0111" +
    "\u0172\u011a\u017c\u011d\u0170\u0120\u017e\u0133\u017d\u013f\u0174\u0149\u0173" +
    "\u014c\u0176\u0159\u0180\u015a\u0179\u0189\u0183\u018a\u016f\u018b\u0171\001" +
    "\002\000\014\037\ufece\160\u018c\244\ufece\u0103\ufece\u0188\ufece" +
    "\001\002\000\006\140\ufe85\241\ufe85\001\002\000\006\140" +
    "\ufe84\241\ufe84\001\002\000\006\140\u0358\241\u0359\001\002" +
    "\000\010\037\ufe89\u0103\ufe89\u0188\ufe89\001\002\000\010\037" +
    "\ufe88\u0103\ufe88\u0188\ufe88\001\002\000\010\037\ufe83\u0103\ufe83" +
    "\u0188\ufe83\001\002\000\004\074\u035b\001\002\000\010\037" +
    "\ufe87\u0103\ufe87\u0188\ufe87\001\002\000\004\105\u035c\001\002" +
    "\000\010\037\ufe82\u0103\ufe82\u0188\ufe82\001\002\000\012\037" +
    "\ufec3\244\u0151\u0103\ufec3\u0188\ufec3\001\002\000\010\037\ufe86" +
    "\u0103\ufe86\u0188\ufe86\001\002\000\010\037\ufe91\u0103\ufe91\u0188" +
    "\ufe91\001\002\000\006\160\ufe95\176\ufe95\001\002\000\006" +
    "\160\ufe94\176\ufe94\001\002\000\006\160\u0363\176\u0365\001" +
    "\002\000\006\012\061\050\063\001\002\000\010\037\ufe96" +
    "\u0103\ufe96\u0188\ufe96\001\002\000\004\132\u0366\001\002\000" +
    "\004\u010b\u0367\001\002\000\010\037\ufe92\u0103\ufe92\u0188\ufe92" +
    "\001\002\000\010\037\ufe93\u0103\ufe93\u0188\ufe93\001\002\000" +
    "\012\012\uff3e\050\uff3e\107\u036a\273\uff3e\001\002\000\010" +
    "\012\uff3f\050\uff3f\273\uff3f\001\002\000\010\012\061\050" +
    "\063\273\u036e\001\002\000\010\037\uff40\u0103\uff40\u0188\uff40" +
    "\001\002\000\014\037\uff3a\107\u0375\326\uff3a\u0103\uff3a\u0188" +
    "\uff3a\001\002\000\004\052\u036f\001\002\000\006\012\061" +
    "\050\063\001\002\000\010\037\uff3d\u0103\uff3d\u0188\uff3d\001" +
    "\002\000\004\040\u0372\001\002\000\004\016\u0373\001\002" +
    "\000\004\055\u0374\001\002\000\010\037\uff37\u0103\uff37\u0188" +
    "\uff37\001\002\000\006\012\061\050\063\001\002\000\012" +
    "\037\uff6d\326\237\u0103\uff6d\u0188\uff6d\001\002\000\010\037" +
    "\uff3c\u0103\uff3c\u0188\uff3c\001\002\000\014\037\uff38\040\u0379" +
    "\326\uff38\u0103\uff38\u0188\uff38\001\002\000\006\012\061\050" +
    "\063\001\002\000\012\037\uff3b\326\uff3b\u0103\uff3b\u0188\uff3b" +
    "\001\002\000\014\037\uff38\040\u0379\326\uff38\u0103\uff38\u0188" +
    "\uff38\001\002\000\012\037\uff39\326\uff39\u0103\uff39\u0188\uff39" +
    "\001\002\000\006\012\061\050\063\001\002\000\004\176" +
    "\u037f\001\002\000\006\012\061\050\063\001\002\000\004" +
    "\005\u0387\001\002\000\014\037\uff2f\107\u0383\326\uff2f\u0103" +
    "\uff2f\u0188\uff2f\001\002\000\012\037\uff6d\326\237\u0103\uff6d" +
    "\u0188\uff6d\001\002\000\006\012\061\050\063\001\002\000" +
    "\014\037\uff38\040\u0379\326\uff38\u0103\uff38\u0188\uff38\001\002" +
    "\000\012\037\uff30\326\uff30\u0103\uff30\u0188\uff30\001\002\000" +
    "\010\037\uff36\u0103\uff36\u0188\uff36\001\002\000\040\012\061" +
    "\016\260\017\267\020\275\022\254\042\060\050\063\052" +
    "\271\244\272\257\u038a\377\264\u012c\253\u0131\273\u013c\270" +
    "\u013d\266\001\002\000\016\037\uff31\040\u038b\107\uff31\326" +
    "\uff31\u0103\uff31\u0188\uff31\001\002\000\016\037\uff33\040\uff33" +
    "\107\uff33\326\uff33\u0103\uff33\u0188\uff33\001\002\000\016\037" +
    "\uff34\040\uff34\107\uff34\326\uff34\u0103\uff34\u0188\uff34\001\002" +
    "\000\006\012\061\050\063\001\002\000\014\037\uff35\107" +
    "\uff35\326\uff35\u0103\uff35\u0188\uff35\001\002\000\014\037\uff32" +
    "\107\uff32\326\uff32\u0103\uff32\u0188\uff32\001\002\000\004\002" +
    "\ufffe\001\002\000\052\002\ufff7\003\ufff7\066\ufff7\111\ufff7" +
    "\116\ufff7\132\ufff7\146\ufff7\157\ufff7\164\ufff7\166\ufff7\213" +
    "\ufff7\253\ufff7\254\ufff7\262\ufff7\274\ufff7\302\ufff7\306\ufff7" +
    "\316\ufff7\332\ufff7\335\ufff7\001\002\000\006\012\061\050" +
    "\063\001\002\000\010\037\uffac\u0103\uffac\u0188\uffac\001\002" +
    "\000\046\002\uffff\003\024\066\015\111\021\132\050\146" +
    "\034\157\022\164\035\166\046\213\036\253\007\254\027" +
    "\262\014\274\013\302\020\306\040\332\045\335\012\001" +
    "\002\000\004\002\ufffd\001\002\000\052\002\ufff6\003\ufff6" +
    "\066\ufff6\111\ufff6\116\ufff6\132\ufff6\146\ufff6\157\ufff6\164" +
    "\ufff6\166\ufff6\213\ufff6\253\ufff6\254\ufff6\262\ufff6\274\ufff6" +
    "\302\ufff6\306\ufff6\316\ufff6\332\ufff6\335\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0392\000\054\003\042\004\003\005\010\006\005\007" +
    "\024\010\027\030\015\044\025\075\016\106\031\116\007" +
    "\124\004\136\032\227\050\253\041\257\036\263\040\265" +
    "\022\304\046\340\043\362\030\001\001\000\002\001\001" +
    "\000\004\011\u0393\001\001\000\004\011\u0391\001\001\000" +
    "\002\001\001\000\004\011\u038e\001\001\000\054\003\u038d" +
    "\004\003\005\010\006\005\007\024\010\027\030\015\044" +
    "\025\075\016\106\031\116\007\124\004\136\032\227\050" +
    "\253\041\257\036\263\040\265\022\304\046\340\043\362" +
    "\030\001\001\000\002\001\001\000\004\057\u037c\001\001" +
    "\000\004\057\u0368\001\001\000\022\230\u0331\231\u0330\234" +
    "\u032f\235\u0334\237\u032a\267\u032d\314\u032b\316\206\001\001" +
    "\000\002\001\001\000\004\011\u0329\001\001\000\006\012" +
    "\261\017\u0326\001\001\000\004\262\u031e\001\001\000\004" +
    "\076\u02db\001\001\000\004\011\u02d8\001\001\000\004\011" +
    "\u02d7\001\001\000\054\003\u02d6\004\003\005\010\006\005" +
    "\007\024\010\027\030\015\044\025\075\016\106\031\116" +
    "\007\124\004\136\032\227\050\253\041\257\036\263\040" +
    "\265\022\304\046\340\043\362\030\001\001\000\002\001" +
    "\001\000\004\012\u02bb\001\001\000\004\011\u02b9\001\001" +
    "\000\002\001\001\000\004\011\u02b8\001\001\000\002\001" +
    "\001\000\004\262\u02b4\001\001\000\004\057\u0291\001\001" +
    "\000\026\137\214\140\220\141\213\162\205\163\217\164" +
    "\222\172\204\267\207\314\203\316\206\001\001\000\004" +
    "\011\202\001\001\000\016\031\134\032\124\034\131\035" +
    "\125\037\136\041\135\001\001\000\004\011\123\001\001" +
    "\000\004\011\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\262\114\264\113\001\001" +
    "\000\006\012\066\013\067\001\001\000\006\262\052\266" +
    "\053\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\055\022\056\261\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\110\001\001\000\010\022\070\363\075\365" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\364\103\001\001\000\010\022\070\363\100\365\072\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\022\070\363\104\365\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\365\106\001\001\000\004\364" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\112\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\055\022\056\261\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\174\001\001\000" +
    "\004\021\163\001\001\000\004\021\161\001\001\000\002" +
    "\001\001\000\004\021\153\001\001\000\004\021\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\141\015\142\001\001\000" +
    "\004\016\147\001\001\000\004\033\144\001\001\000\006" +
    "\012\141\015\145\001\001\000\002\001\001\000\004\033" +
    "\146\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\066\013\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\066\013\154\001\001\000\004\040\156" +
    "\001\001\000\006\012\066\013\157\001\001\000\002\001" +
    "\001\000\004\040\160\001\001\000\002\001\001\000\004" +
    "\012\162\001\001\000\002\001\001\000\006\012\164\042" +
    "\165\001\001\000\002\001\001\000\004\043\166\001\001" +
    "\000\002\001\001\000\006\012\164\042\170\001\001\000" +
    "\004\043\171\001\001\000\002\001\001\000\006\012\141" +
    "\015\173\001\001\000\002\001\001\000\004\012\175\001" +
    "\001\000\004\036\177\001\001\000\004\012\200\001\001" +
    "\000\002\001\001\000\004\036\201\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\270\u0216\001\001\000\002\001" +
    "\001\000\004\012\u01e2\001\001\000\004\012\u01e1\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\066\013\u01de\001\001\000\006\012\141\015\u0127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\211\225\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\227\001\001\000" +
    "\002\001\001\000\006\012\141\015\231\001\001\000\004" +
    "\165\233\001\001\000\006\012\u011b\166\u011c\001\001\000" +
    "\004\170\235\001\001\000\004\072\u0112\001\001\000\004" +
    "\067\237\001\001\000\006\056\250\062\247\001\001\000" +
    "\004\171\241\001\001\000\004\012\242\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\244\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\056\250\062\u010f" +
    "\001\001\000\002\001\001\000\022\012\261\017\273\022" +
    "\264\047\255\051\260\053\256\054\254\064\262\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\002\u0103\056\u0100\065\u0107\001\001" +
    "\000\004\052\371\001\001\000\002\001\001\000\004\050" +
    "\363\001\001\000\004\020\356\001\001\000\004\063\353" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\012\261" +
    "\017\273\022\264\047\322\051\260\053\256\054\254\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\367\276" +
    "\001\001\000\002\001\001\000\010\022\302\330\300\370" +
    "\305\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\371\307\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\022\302\330\300\370" +
    "\311\001\001\000\002\001\001\000\010\012\261\017\313" +
    "\055\314\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\066\326\001\001\000" +
    "\020\012\261\017\273\022\264\047\342\051\260\053\256" +
    "\054\254\001\001\000\002\001\001\000\020\012\261\017" +
    "\273\022\264\047\330\051\260\053\256\054\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\012\261\017\273\022\264\047\332\051\260\053\256" +
    "\054\254\001\001\000\002\001\001\000\020\012\261\017" +
    "\273\022\264\047\334\051\260\053\256\054\254\001\001" +
    "\000\004\061\336\001\001\000\020\012\261\017\273\022" +
    "\264\047\340\051\260\053\256\054\254\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\061\341\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\261\017\313" +
    "\055\344\001\001\000\002\001\001\000\010\012\261\017" +
    "\313\055\346\001\001\000\002\001\001\000\010\012\261" +
    "\017\313\055\350\001\001\000\002\001\001\000\006\056" +
    "\250\062\355\001\001\000\006\056\250\062\354\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\141\015\360\001\001\000\002" +
    "\001\001\000\016\012\261\017\273\022\264\051\366\053" +
    "\256\054\254\001\001\000\016\012\261\017\273\022\264" +
    "\051\364\053\256\054\254\001\001\000\002\001\001\000" +
    "\004\050\365\001\001\000\002\001\001\000\004\050\367" +
    "\001\001\000\002\001\001\000\014\012\261\017\273\022" +
    "\264\053\375\054\254\001\001\000\002\001\001\000\014" +
    "\012\261\017\273\022\264\053\373\054\254\001\001\000" +
    "\004\052\374\001\001\000\002\001\001\000\004\052\376" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\066" +
    "\u010c\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\012\261\017\273\022\264\047\u010b\051\260\053\256\054" +
    "\254\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\056\u0109\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\261\017\313\055\u010e\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\063\u0111\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\u0114\073" +
    "\u0115\001\001\000\004\074\u0117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\u0119\001" +
    "\001\000\004\074\u011a\001\001\000\002\001\001\000\004" +
    "\102\u0120\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\167\u0121\001\001" +
    "\000\002\001\001\000\004\012\u0123\001\001\000\004\102" +
    "\u0124\001\001\000\004\167\u0125\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\012\u012e\175" +
    "\u012c\177\u012a\207\u012f\220\u012b\226\u0130\001\001\000\004" +
    "\012\u01db\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\176\u01d4\001\001\000\004\012\u01d2\001\001\000\010" +
    "\023\u0177\024\u017e\025\u0181\001\001\000\004\221\u0134\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\174\u0145" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\211" +
    "\u0136\001\001\000\004\222\u0138\001\001\000\004\012\u0139" +
    "\001\001\000\002\001\001\000\004\102\u013a\001\001\000" +
    "\004\223\u013b\001\001\000\002\001\001\000\004\012\u013d" +
    "\001\001\000\004\102\u013e\001\001\000\004\223\u013f\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\211\u0142" +
    "\001\001\000\004\222\u0143\001\001\000\002\001\001\000" +
    "\004\351\u014a\001\001\000\002\001\001\000\006\056\250" +
    "\062\u0147\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\352\u014e\001\001\000\004\204\u014f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\224\u0153" +
    "\001\001\000\004\012\u0168\001\001\000\002\001\001\000" +
    "\006\012\066\013\u0155\001\001\000\004\213\u0157\001\001" +
    "\000\004\012\u0166\001\001\000\004\214\u0159\001\001\000" +
    "\004\215\u015b\001\001\000\004\174\u015a\001\001\000\002" +
    "\001\001\000\004\214\u0165\001\001\000\004\217\u0164\001" +
    "\001\000\004\217\u015e\001\001\000\002\001\001\000\004" +
    "\216\u0162\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\225" +
    "\u0169\001\001\000\002\001\001\000\004\012\u016b\001\001" +
    "\000\004\225\u016c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\u01d0\001\001" +
    "\000\004\200\u018c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\026\u0185\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\u0188\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\u01cf\001" +
    "\001\000\014\210\u0196\212\u0195\354\u0190\356\u018e\357\u018f" +
    "\001\001\000\004\203\u01cb\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\355\u01c3\001\001\000\004\211\u01c0" +
    "\001\001\000\004\201\u01b1\001\001\000\004\012\u01ac\001" +
    "\001\000\006\206\u01ab\207\u01a3\001\001\000\002\001\001" +
    "\000\006\206\u01a2\207\u01a3\001\001\000\002\001\001\000" +
    "\004\174\u019e\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\211\u019d\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\056\250\062\u01a0\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\210\u01a4\212\u0195\001\001\000\006\206\u01a5\207\u01a3" +
    "\001\001\000\002\001\001\000\006\012\066\013\u01a7\001" +
    "\001\000\004\213\u01a8\001\001\000\004\214\u01a9\001\001" +
    "\000\004\174\u01aa\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\210\u0196\212\u0195\354\u0190\357\u01ad\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\202\u01b5\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\203\u01bb\001\001\000\004\174" +
    "\u01b6\001\001\000\004\205\u01b8\001\001\000\002\001\001" +
    "\000\006\206\u01b9\207\u01a3\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\205\u01c4" +
    "\001\001\000\006\206\u01c5\207\u01a3\001\001\000\002\001" +
    "\001\000\004\353\u01c7\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\174" +
    "\u01cc\001\001\000\004\205\u01cd\001\001\000\006\206\u01ce" +
    "\207\u01a3\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\012\u012e\175\u01d9\177\u012a\207\u012f\220\u012b\226\u0130\001" +
    "\001\000\002\001\001\000\004\173\u01d6\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\176" +
    "\u01da\001\001\000\002\001\001\000\004\211\u01dc\001\001" +
    "\000\004\222\u01dd\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\075\u01e0\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\142\u01e5\143\u01e3\001\001\000\004\147" +
    "\u0213\001\001\000\004\144\u01e7\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\145\u01e9\146\u01ea\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\145\u01ec\146\u01ea\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\151\u01f4\001" +
    "\001\000\002\001\001\000\016\153\u01fa\154\u01f8\156\u01f7" +
    "\160\u01f9\360\u01fb\361\u01f6\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\151\u0210\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\155\u0202\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\157\u0207\001\001\000\002\001\001\000\004\155\u020a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\155\u020e\161\u020f\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\u0214\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\066\013\u025f" +
    "\001\001\000\002\001\001\000\006\012\066\013\u0219\001" +
    "\001\000\002\001\001\000\012\022\u021c\315\u021e\317\u021d" +
    "\320\u021b\001\001\000\002\001\001\000\004\322\u025b\001" +
    "\001\000\004\321\u0258\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\025\u0225\324\u0224\325\u0222\326\u0221\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\331\u0250" +
    "\001\001\000\002\001\001\000\004\331\u0227\001\001\000" +
    "\012\304\u0235\332\u0234\333\u0236\366\u023a\001\001\000\004" +
    "\322\u0229\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\005\u022b\075\016\106\031\116\007\124\004\001\001" +
    "\000\002\001\001\000\010\022\302\330\u022e\372\u022d\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\302" +
    "\330\u0230\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\334\u0244\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\335\u023e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\304\u0235\332\u0245\333" +
    "\u0236\366\u023a\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\u0249\306\u024a\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\322\u0251\001\001\000\002" +
    "\001\001\000\006\075\u0255\327\u0254\001\001\000\004\075" +
    "\u0256\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\022" +
    "\u021c\317\u021d\320\u025a\001\001\000\002\001\001\000\004" +
    "\025\u025c\001\001\000\004\323\u025d\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\271\u0261\001\001\000\002" +
    "\001\001\000\010\022\u0263\272\u0262\273\u0264\001\001\000" +
    "\004\301\u0278\001\001\000\014\012\u0266\023\u0268\024\u017e" +
    "\025\u0181\275\u0269\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\u01d0\001\001\000\004" +
    "\276\u026d\001\001\000\004\274\u026a\001\001\000\002\001" +
    "\001\000\006\022\u0263\273\u026c\001\001\000\002\001\001" +
    "\000\006\277\u0271\300\u0273\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\300" +
    "\u0276\001\001\000\002\001\001\000\010\302\u0287\303\u0286" +
    "\304\u0289\001\001\000\004\307\u0279\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\310\u027d" +
    "\001\001\000\002\001\001\000\016\005\u027f\075\016\106" +
    "\031\116\007\124\004\311\u0280\001\001\000\016\005\u0282" +
    "\075\016\106\031\116\007\124\004\312\u0283\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\u0284\075\016" +
    "\106\031\116\007\124\004\313\u0285\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\305\u028d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\u0249\306\u028c\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\302\u028f\303" +
    "\u0286\304\u0289\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\107\u0298\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\u0296\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\141\015\u029a\001" +
    "\001\000\002\001\001\000\006\072\u029b\110\u029c\001\001" +
    "\000\002\001\001\000\004\114\u029f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\111\u02a5" +
    "\112\u02a6\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\113\u02a9\001\001\000\002\001\001\000\004\112\u02aa\001" +
    "\001\000\002\001\001\000\004\113\u02ab\001\001\000\002" +
    "\001\001\000\004\115\u02ad\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\111\u02b0\112\u02a6\001\001\000\002" +
    "\001\001\000\004\115\u02b2\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\u02b5\022\u02b7\260\u02b6\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\054\003\u02ba\004\003\005\010\006\005" +
    "\007\024\010\027\030\015\044\025\075\016\106\031\116" +
    "\007\124\004\136\032\227\050\253\041\257\036\263\040" +
    "\265\022\304\046\340\043\362\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\341\u02bf\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\342\u02c1\001\001\000" +
    "\002\001\001\000\004\343\u02c6\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\344\u02c8\001\001\000\002\001\001\000\004\345\u02cc" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\075\u02cf" +
    "\001\001\000\004\346\u02d0\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\347\u02d3\001\001\000\002\001\001" +
    "\000\006\012\u0114\073\u02d5\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\057\u02dc\001\001\000" +
    "\022\012\261\017\273\022\264\047\u02dd\051\260\053\256" +
    "\054\254\070\u02de\001\001\000\010\012\u02e3\045\u031c\046" +
    "\u02e4\001\001\000\004\131\u02ea\001\001\000\004\071\u02e1" +
    "\001\001\000\020\012\261\017\273\022\264\047\u02e2\051" +
    "\260\053\256\054\254\001\001\000\002\001\001\000\010" +
    "\012\u02e3\045\u02e7\046\u02e4\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\u02e3\046\u02e9\001\001\000\002" +
    "\001\001\000\004\071\u02e8\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\067\u0303\001\001\000\006\012\141" +
    "\015\u02ec\001\001\000\010\012\u02e3\045\u02ed\046\u02e4\001" +
    "\001\000\006\133\u02f2\134\u02ee\001\001\000\002\001\001" +
    "\000\004\135\u02fc\001\001\000\002\001\001\000\004\135" +
    "\u02fb\001\001\000\004\132\u02f7\001\001\000\004\135\u02f5" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\141\015\u02f8\001\001\000\002\001\001\000\010\012\u02e3" +
    "\045\u02f9\046\u02e4\001\001\000\006\133\u02fa\134\u02ee\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\141\015\u02fe\001\001\000\010\012\u02e3\045" +
    "\u02ff\046\u02e4\001\001\000\002\001\001\000\006\056\250" +
    "\062\u0301\001\001\000\006\133\u0302\134\u02ee\001\001\000" +
    "\002\001\001\000\004\104\u0304\001\001\000\004\077\u030d" +
    "\001\001\000\002\001\001\000\020\012\261\017\273\022" +
    "\264\047\u0307\051\260\053\256\054\254\001\001\000\004" +
    "\105\u0309\001\001\000\020\012\261\017\273\022\264\047" +
    "\u030a\051\260\053\256\054\254\001\001\000\002\001\001" +
    "\000\004\105\u030b\001\001\000\002\001\001\000\006\056" +
    "\250\062\u031b\001\001\000\004\100\u030f\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\012\261\017\273\022" +
    "\264\047\u0311\051\260\053\256\054\254\001\001\000\004" +
    "\101\u0313\001\001\000\004\012\u031a\001\001\000\004\102" +
    "\u0314\001\001\000\004\103\u0316\001\001\000\020\012\261" +
    "\017\273\022\264\047\u0317\051\260\053\256\054\254\001" +
    "\001\000\002\001\001\000\004\101\u0318\001\001\000\004" +
    "\102\u0319\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\071\u031d\001\001\000\002\001\001" +
    "\000\012\012\u02b5\022\u02b7\254\u0320\260\u031f\001\001\000" +
    "\004\255\u0322\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\256\u0325\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\u0327\001\001\000\054" +
    "\003\u0328\004\003\005\010\006\005\007\024\010\027\030" +
    "\015\044\025\075\016\106\031\116\007\124\004\136\032" +
    "\227\050\253\041\257\036\263\040\265\022\304\046\340" +
    "\043\362\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\u035f\232" +
    "\u0361\001\001\000\002\001\001\000\004\012\u035e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\141\015\u033a\001\001\000\006\012\066\013\u0335" +
    "\001\001\000\002\001\001\000\006\072\u0336\236\u0337\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\075\u0339" +
    "\001\001\000\002\001\001\000\010\240\u033b\241\u033f\246" +
    "\u033e\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\012\u012e\175\u034d\177\u012a\207\u012f\220\u012b\226\u0130\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\247\u0341" +
    "\250\u0344\001\001\000\004\251\u034a\001\001\000\004\021" +
    "\u0347\001\001\000\002\001\001\000\004\021\u0345\001\001" +
    "\000\004\012\u0346\001\001\000\002\001\001\000\004\012" +
    "\u0348\001\001\000\002\001\001\000\006\247\u034b\250\u0344" +
    "\001\001\000\002\001\001\000\004\251\u034c\001\001\000" +
    "\002\001\001\000\004\176\u034e\001\001\000\002\001\001" +
    "\000\004\012\u0350\001\001\000\016\023\u0351\024\u017e\025" +
    "\u0181\242\u0355\243\u0356\244\u0354\001\001\000\004\200\u035c" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\245" +
    "\u0359\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\204\u035d\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\233\u0363\001\001\000\004\012\u0367\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\117\u036a\001\001" +
    "\000\002\001\001\000\010\012\141\015\u036c\120\u036b\001" +
    "\001\000\002\001\001\000\004\121\u0375\001\001\000\004" +
    "\123\u036f\001\001\000\004\012\u0370\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\141\015\u0377\001\001\000" +
    "\004\067\u0376\001\001\000\002\001\001\000\004\122\u0379" +
    "\001\001\000\006\012\141\015\u037a\001\001\000\002\001" +
    "\001\000\004\122\u037b\001\001\000\002\001\001\000\006" +
    "\012\141\015\u037d\001\001\000\002\001\001\000\006\012" +
    "\u037f\125\u0380\001\001\000\002\001\001\000\004\130\u0381" +
    "\001\001\000\004\067\u0385\001\001\000\006\012\141\015" +
    "\u0383\001\001\000\004\122\u0384\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\012\261\017\273\022\264\047" +
    "\u0388\051\260\053\256\054\254\126\u0387\001\001\000\004" +
    "\127\u038b\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\u037f\125\u038c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\141\015\u0390\001\001\000\002\001\001\000\054\003\u0392" +
    "\004\003\005\010\006\005\007\024\010\027\030\015\044" +
    "\025\075\016\106\031\116\007\124\004\136\032\227\050" +
    "\253\041\257\036\263\040\265\022\304\046\340\043\362" +
    "\030\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

    public LinkedList<String> SyntacticErrors = new LinkedList<String>();
    private Symbol s;

    public final Class getSymbolContainer() {
    return sym.class;
    }


    public void syntax_error(Symbol cur_token){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        String Auxiliar = "";
        List<Integer> ids = expected_token_ids();
        LinkedList<String> list = new LinkedList<String>(); 
        for (Integer expected : ids) {
                  Auxiliar = symbl_name_from_id(expected);
                  Auxiliar = " " + Auxiliar + " ";
                  list.add(Auxiliar);
        }
        SyntacticErrors.add("* Error Sintactico. Linea: " + (s.right+1) + " Columna: " + (s.left+1) + ". Simbolo:  \'" + s.value + "\'  * Se esperaba: " + list);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
      java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        String Auxiliar = "";
        List<Integer> ids = expected_token_ids();
        LinkedList<String> list = new LinkedList<String>(); 
        for (Integer expected : ids) {
                  Auxiliar = symbl_name_from_id(expected);
                  Auxiliar = " " + Auxiliar + " ";
                  list.add(Auxiliar);
        }
        SyntacticErrors.add("* Error Sintactico. Linea: " + (s.right+1) + " Columna: " + (s.left+1) + ". Simbolo:  \'" + s.value + "\'  * Se esperaba: " + list);
    }


    public String symbl_name_from_id(int id) {
	  Field[] fields = getSymbolContainer().getFields();
	  for(Field f : fields){
		  try {
			if (f.getInt(null)==id)
			  return f.getName();
		} catch (IllegalArgumentException e) {
			//e.printStackTrace();
		} catch (IllegalAccessException e) {
			//e.printStackTrace();
		}
	  }
	  return "Simbolo Invalido id";
    }
   

     public List<Integer> expected_token_ids() {
        List<Integer> ret = new LinkedList<Integer>();
	  int parse_state = ((Symbol)stack.peek()).parse_state ;
	  short[] row = action_tab[parse_state];
	  for (int i = 0; i<row.length; i+=2){
		  if (row[i]==-1) continue;
		  if (!validate_expected_symbol(row[i])) continue;
		  ret.add(new Integer(row[i]));
	  }
	  return ret;

    }

    /*protected static final int _error_sync_size(){
        return 1;
    }*/

    protected int error_sync_size() {
            return 1;
    }

    private boolean validate_expected_symbol(int id){
	  short lhs,rhs_size;
	  int act;
	  try {
		  virtual_parse_stack vstack = new virtual_parse_stack(stack);
		  for (;;)
		  {
			  act = get_action(vstack.top(), id);

			  if (act == 0) return false;

			  if (act > 0)
			  {
				  vstack.push(act-1);

				  if (!advance_lookahead()) return true;
			  }
			  else
			  {
				  if ((-act)-1 == start_production())  return true;

				  lhs = production_tab[(-act)-1][0];
				  rhs_size = production_tab[(-act)-1][1];
				  for (int i = 0; i < rhs_size; i++) vstack.pop();

				  vstack.push(get_reduce(vstack.top(), lhs));
			  }
		  }

	  } catch (Exception e) {
		  e.printStackTrace();
	  }
	  return true;
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 525: // Data_Type ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data_Type",243, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 524: // Data_Type ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data_Type",243, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 523: // Data_Type ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data_Type",243, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 522: // Data_Type ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data_Type",243, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 521: // RepeatProcedureA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatProcedureA",242, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 520: // RepeatProcedureA ::= Coma RepeatProcedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatProcedureA",242, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 519: // RepeatProcedure ::= Data_Type RepeatProcedureA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatProcedure",241, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 518: // RepeatProcedure ::= Variable Igual Data_Type RepeatProcedureA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatProcedure",241, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 517: // ExecProcedure ::= ClauseExec Object2 RepeatProcedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExecProcedure",240, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 516: // ExecProcedure ::= ClauseExec Object2 Apertura_de_paréntesis RepeatProcedure Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExecProcedure",240, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 515: // ExecProcedure ::= ClauseExec Object2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExecProcedure",240, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 514: // EXECUTE_AS_CLAUSE ::= ClauseExec AS Clause 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXECUTE_AS_CLAUSE",244, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // FuncOpcC ::= OFF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcC",219, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // FuncOpcC ::= ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcC",219, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // FuncOpcB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcB",218, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // FuncOpcB ::= Coma FuncOpc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcB",218, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // FuncOpcA ::= INLINE Igual FuncOpcC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // FuncOpcA ::= EXECUTE_AS_CLAUSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // FuncOpcA ::= CALLED ON NULL INPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // FuncOpcA ::= RETURNS NULL ON NULL INPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // FuncOpcA ::= SCHEMABINDING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // FuncOpcA ::= ENCRYPTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // FuncOpc ::= FuncOpcA FuncOpcB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpc",216, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // With ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("With",215, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // With ::= WITH FuncOpc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("With",215, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // DType ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // DType ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // DType ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // DType ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // DType ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // DTypes ::= DType 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DTypes",248, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // DTypes ::= Apertura_de_paréntesis DType Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DTypes",248, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // SCT ::= Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCT",213, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // SCT ::= Apertura_de_paréntesis Select Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCT",213, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // Table ::= TABLE With As RETURN SCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Table",212, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // Data ::= Tipo_datoA With As BEGIN DML RETURN DTypes END 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data",211, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // Type_Return ::= Table 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type_Return",210, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // Type_Return ::= Data 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type_Return",210, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // ReadOnly ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReadOnly",209, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // ReadOnly ::= READONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReadOnly",209, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // Param_B ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param_B",207, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // Param_B ::= Coma Param_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param_B",207, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // Param_A ::= Param Param_B 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param_A",206, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // As ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("As",208, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // As ::= AS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("As",208, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // Param ::= Variable As Tipo_datoA ReadOnly 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param",205, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // OrAlter ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrAlter",204, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // OrAlter ::= OR ALTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrAlter",204, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // Params ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Params",203, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // Params ::= Param_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Params",203, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // Function ::= OrAlter FUNCTION Object2 Apertura_de_paréntesis Params Cierre_de_paréntesis RETURNS Type_Return 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Function",202, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // CursorDeclareg ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareg",229, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // CursorDeclareg ::= OF ColumnListA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareg",229, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // CursorDeclaref ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaref",228, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // CursorDeclaref ::= FOR UPDATE CursorDeclareg 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaref",228, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // CursorDeclaree ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaree",227, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // CursorDeclaree ::= TYPE_WARNING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaree",227, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // CursorDeclared ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // CursorDeclared ::= OPTIMISTIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // CursorDeclared ::= SCROLL_LOCKS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // CursorDeclared ::= READ_ONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // CursorDeclarec ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // CursorDeclarec ::= FAST_FORWARD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // CursorDeclarec ::= DYNAMIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // CursorDeclarec ::= KEYSET 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // CursorDeclarec ::= STATIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // CursorDeclareb ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // CursorDeclareb ::= FORWARD_ONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // CursorDeclareb ::= SCROLL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // CursorDeclarea ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // CursorDeclarea ::= GLOBAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // CursorDeclarea ::= LOCAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // CursorDeclare ::= DECLARE ID CURSOR CursorDeclarea CursorDeclareb CursorDeclarec CursorDeclared CursorDeclaree FOR Select CursorDeclaref 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclare",222, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // StmtSP2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP2",201, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // StmtSP2 ::= DML 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP2",201, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // StmtSP1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP1",200, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // StmtSP1 ::= DML StmtSP2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP1",200, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // StmtSP ::= DML StmtSP1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP",199, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // StartSP ::= BEGIN StmtSP END 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StartSP",198, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // ReplicationSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReplicationSP",197, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // ReplicationSP ::= FOR REPLICATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReplicationSP",197, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // Clause ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // Clause ::= OWNER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // Clause ::= SELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // Clause ::= CALLER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // ProcOptionRec ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOptionRec",195, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // ProcOptionRec ::= Coma ProcOption1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOptionRec",195, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // ClauseExec ::= EXEC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ClauseExec",194, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // ClauseExec ::= EXECUTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ClauseExec",194, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // ProcOption2 ::= ClauseExec AS Clause 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // ProcOption2 ::= RECOMPILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // ProcOption2 ::= ENCRYPTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // ProcOption1 ::= ProcOption2 ProcOptionRec 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption1",192, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // ProcOption ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption",191, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // ProcOption ::= WITH ProcOption1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption",191, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // TipoD_SP3 ::= OUTPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP3",190, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // TipoD_SP3 ::= OUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP3",190, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // TipoD_SP2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP2",189, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // TipoD_SP2 ::= TipoD_SP3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP2",189, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // TipoD_SP1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP1",188, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // TipoD_SP1 ::= Igual DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP1",188, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // TipoD_SP ::= ID READONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // TipoD_SP ::= CURSOR VARYING TipoD_SP3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // TipoD_SP ::= Tipo_dato TipoD_SP1 TipoD_SP2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // ParamsB_SP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsB_SP",186, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // ParamsB_SP ::= Coma ParamsA_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsB_SP",186, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // ParamsA_SP ::= Variable TipoD_SP ParamsB_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsA_SP",185, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // ParamsSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsSP",184, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // ParamsSP ::= ParamsA_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsSP",184, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // NumSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NumSP",183, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // NumSP ::= Punto_y_coma Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NumSP",183, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // SP_Reservada ::= PROCEDURE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SP_Reservada",182, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // SP_Reservada ::= PROC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SP_Reservada",182, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // Procedure ::= OrAlter SP_Reservada Object2 NumSP ParamsSP ProcOption ReplicationSP AS StartSP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Procedure",181, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // RollbackA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RollbackA",180, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // RollbackA ::= TranName NameA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RollbackA",180, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // Rollback ::= ROLLBACK RollbackA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Rollback",179, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // CommitA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CommitA",178, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // CommitA ::= TranName NameA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CommitA",178, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // Commit ::= COMMIT CommitA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Commit",177, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // TranName ::= TRANSACTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TranName",176, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // TranName ::= TRAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TranName",176, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // NameA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // NameA ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // NameA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // Name ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Name",174, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // Name ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Name",174, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // SavePoint ::= SAVE TranName Name 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SavePoint",173, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // BeginTranC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranC",172, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // BeginTranC ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranC",172, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // BeginTranB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranB",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // BeginTranB ::= WITH MARK BeginTranC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranB",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // BeginTranA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranA",170, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // BeginTranA ::= Name BeginTranB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranA",170, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // BeginTran ::= BEGIN TranName BeginTranA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTran",169, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // AlterTableDropC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropC",167, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // AlterTableDropC ::= Coma AlterTableDropA AlterTableDropC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropC",167, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // AlterTableDropB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropB",166, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // AlterTableDropB ::= CONSTRAINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropB",166, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // AlterTableDropA ::= COLUMN IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropA",165, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // AlterTableDropA ::= AlterTableDropB IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropA",165, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // AlterTableDrop ::= DROP AlterTableDropA AlterTableDropC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDrop",164, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // AlterColumnE ::= NOT FOR REPLICATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnE",163, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // AlterColumnE ::= ROWGUIDCOL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnE",163, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // AlterColumnD ::= DROP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnD",162, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // AlterColumnD ::= ADD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnD",162, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // AlterColumnA ::= Tipo_dato ColumnDefA ColumnDefG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnA",161, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // AlterColumnC ::= AlterColumnD AlterColumnE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnC",160, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // AlterColumnC ::= AlterColumnA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnC",160, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // AlterColumn ::= ALTER COLUMN ID AlterColumnC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumn",159, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // AlterTableA ::= AlterTableDrop 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // AlterTableA ::= ADD CNC CNCA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // AlterTableA ::= AlterColumn 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // AlterTable ::= TABLE Object3 AlterTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTable",157, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // AlterViewA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterViewA",156, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // AlterViewA ::= ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterViewA",156, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // AlterView ::= VIEW Object2 AlterViewA AS Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterView",155, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // AlterUser ::= USER ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterUser",154, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // AlterDBB ::= SET ROLLBACK IMMEDIATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBB",153, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // AlterDBB ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBB",153, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // AlterDBA ::= CURRENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBA",152, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // AlterDBA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBA",152, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // AlterDatabase ::= DATABASE AlterDBA AlterDBB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDatabase",151, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // AlterA ::= Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // AlterA ::= Procedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // AlterA ::= AlterView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // AlterA ::= AlterDatabase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // AlterA ::= AlterUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // AlterA ::= AlterTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // Alter ::= ALTER AlterA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alter",149, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // TableIndex ::= INDEX ID ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableIndex",148, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // TableConstrE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrE",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // TableConstrE ::= Coma ID TableConstrE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrE",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // TableConstrD ::= Apertura_de_paréntesis ID TableConstrE Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrD",146, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // TableConstrC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrC",145, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // TableConstrC ::= Coma ID OrderB TableConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrC",145, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // TableConstrB ::= Apertura_de_paréntesis ID OrderB TableConstrC Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrB",144, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // TableConstrA ::= CHECK NFR Apertura_de_paréntesis SearchCondition Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // TableConstrA ::= FOREIGN KEY TableConstrD REFERENCES Object2 ColumnConstrE ColumnConstrF NFR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // TableConstrA ::= UNIQUE ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // TableConstrA ::= PRIMARY KEY ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // TableConstr ::= ColumnConstrA TableConstrA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstr",142, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // ColumnConstrI ::= SET ColumnConstrH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrI",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // ColumnConstrI ::= CASCADE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrI",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // ColumnConstrH ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrH",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // ColumnConstrH ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrH",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // ColumnConstrG ::= UPDATE ColumnConstrI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrG",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // ColumnConstrG ::= DELETE ColumnConstrI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrG",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // ColumnConstrF ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrF",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // ColumnConstrF ::= ON ColumnConstrG ColumnConstrF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrF",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // ColumnConstrE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrE",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // ColumnConstrE ::= Apertura_de_paréntesis ID Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrE",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // ColumnConstrD ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrD",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // ColumnConstrD ::= FOREIGN KEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrD",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // ColumnConstrC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // ColumnConstrC ::= NONCLUSTERED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // ColumnConstrC ::= CLUSTERED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // ColumnConstrB ::= CHECK NFR Apertura_de_paréntesis SearchCondition Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // ColumnConstrB ::= ColumnConstrD REFERENCES Object2 ColumnConstrE ColumnConstrF NFR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // ColumnConstrB ::= UNIQUE ColumnConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // ColumnConstrB ::= PRIMARY KEY ColumnConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // ColumnConstrA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrA",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // ColumnConstrA ::= CONSTRAINT ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrA",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // ColumnConstr ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstr",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // ColumnConstr ::= ColumnConstrA ColumnConstrB ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstr",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // ColumnDefH ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefH",131, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // ColumnDefH ::= ROWGUIDCOL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefH",131, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // ColumnDefG ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefG",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // ColumnDefG ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefG",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // ColumnDefF ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefF",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // ColumnDefF ::= Apertura_de_paréntesis Int Coma Int Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefF",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // ColumnDefE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefE",128, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // ColumnDefE ::= IDENTITY ColumnDefF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefE",128, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // ColumnDefD ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // ColumnDefD ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // ColumnDefD ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // ColumnDefD ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // ColumnDefD ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // ColumnDefA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefA",126, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // ColumnDefA ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefA",126, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // ColumnDefV ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // ColumnDefV ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // ColumnDefV ::= NOT NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // ColumnDefW ::= FOR REPLICATION ColumnDefV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefW",235, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // ColumnDefW ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefW",235, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // ColumnDefX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefX",234, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // ColumnDefX ::= NOT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefX",234, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // ColumnDefY ::= ColumnConstrB ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // ColumnDefY ::= ROWGUIDCOL ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // ColumnDefY ::= ColumnDefX ColumnDefW ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // ColumnDefY ::= IDENTITY ColumnDefF NFR ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // ColumnDefY ::= DEFAULT ColumnDefD ColumnDefE NFR ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // ColumnDefZ ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // ColumnDefZ ::= ColumnDefY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // ColumnDefZ ::= CONSTRAINT ID ColumnDefY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // ColumnDef ::= ID Tipo_dato ColumnDefA ColumnDefZ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDef",125, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // CNCA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNCA",124, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // CNCA ::= Coma CNC CNCA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNCA",124, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // CNC ::= TableIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // CNC ::= TableConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // CNC ::= ColumnDef 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // NFR2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR2",232, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // NFR2 ::= NOT ColumnDefG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR2",232, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // NFR1 ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR1",231, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // NFR1 ::= FOR REPLICATION NFR2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR1",231, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // NFR ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // NFR ::= NOT NFR1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // FileGroup ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileGroup",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // FileGroup ::= ON PRIMARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileGroup",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // CreateTable ::= TABLE Object3 Apertura_de_paréntesis CNC CNCA Cierre_de_paréntesis FileGroup 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateTable",120, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // OptionalOn ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OptionalOn",119, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // OptionalOn ::= ON ID Apertura_de_paréntesis ID Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OptionalOn",119, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // IncludeIndex ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IncludeIndex",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // IncludeIndex ::= INCLUDE ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IncludeIndex",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // ColumnIndexB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexB",117, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // ColumnIndexB ::= Coma ID OrderB ColumnIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexB",117, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // ColumnIndexA ::= ID OrderB ColumnIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexA",116, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // ColumnIndex ::= Apertura_de_paréntesis ColumnIndexA Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndex",115, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // CreateIndexA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndexA",114, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // CreateIndexA ::= UNIQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndexA",114, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // CreateIndex ::= CreateIndexA ColumnConstrC INDEX ID ON Object3 ColumnIndex IncludeIndex Where OptionalOn 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndex",113, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // CreateView ::= VIEW Object2 AS Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateView",112, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // Filegrowth_A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // Filegrowth_A ::= MODULAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // Filegrowth_A ::= Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // Filegrowth ::= FILEGROWTH Igual Int Filegrowth_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth",110, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // Maxsize_A ::= UNLIMITED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize_A",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // Maxsize_A ::= Int Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize_A",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // Maxsize ::= MAXSIZE Igual Maxsize_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize",108, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // Size_A ::= TB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // Size_A ::= GB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // Size_A ::= MB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // Size_A ::= KB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // Sizenw ::= SIZE Igual Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sizenw",239, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // Sizew ::= SIZE Igual Int Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sizew",238, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // Size ::= Sizenw 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size",106, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // Size ::= Sizew 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size",106, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // Optional ::= Filegrowth 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // Optional ::= Maxsize 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // Optional ::= Size 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // Optionals ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optionals",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // Optionals ::= Coma Optional Optionals 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optionals",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // COLLATEDB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLLATEDB",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // COLLATEDB ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLLATEDB",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // FileSpec ::= Apertura_de_paréntesis NAME Igual String Coma FILENAME Igual String Optionals Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpec",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // FileSpecs ::= FileSpec 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpecs",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // FileSpecs ::= FileSpec Coma FileSpecs 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpecs",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // Primary ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Primary",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // Primary ::= PRIMARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Primary",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // CreateDBB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBB",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // CreateDBB ::= ON Primary FileSpecs 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBB",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // CreateDBA ::= CreateDBB COLLATEDB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBA",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // CreateDB ::= DATABASE ID CreateDBA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDB",95, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // CreateUser ::= USER ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateUser",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // CreateA ::= Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // CreateA ::= Procedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // CreateA ::= CreateView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // CreateA ::= CreateUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // CreateA ::= CreateIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // CreateA ::= CreateDB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // CreateA ::= CreateTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // Create ::= CREATE CreateA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Create",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // Outer ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Outer",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // Outer ::= OUTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Outer",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // Type ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // Type ::= FULL Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // Type ::= LEFT Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // Type ::= RIGHT Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // Type ::= INNER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // Join ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Join",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // Join ::= Type JOIN Object3 Alias ON SearchCondition Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Join",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // FromSelectA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelectA",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // FromSelectA ::= Coma Object3 Alias Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelectA",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // FromSelect ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelect",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // FromSelect ::= FROM Object3 Alias Join FromSelectA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelect",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // FromUpdate ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromUpdate",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // FromUpdate ::= FROM Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromUpdate",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // UpdateC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateC",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // UpdateC ::= Coma UpdateA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateC",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // UpdateB ::= Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateB",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // UpdateB ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateB",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // UpdateA ::= ID Igual UpdateB UpdateC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateA",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // Update ::= UPDATE Top Object3 SET UpdateA FromUpdate Where 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Update",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // Server ::= Apertura_de_paréntesis ID Coma Int Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Server",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // DeleteC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteC",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // DeleteC ::= Coma Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteC",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // DeleteB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteB",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // DeleteB ::= FROM Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteB",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // DeleteA ::= Object3 DeleteB Where 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteA",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // DeleteA ::= OPENQUERY Server 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteA",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // FromDelete ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromDelete",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // FromDelete ::= FROM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromDelete",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // Delete ::= DELETE Top FromDelete DeleteA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Delete",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // InsertValoresA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValoresA",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // InsertValoresA ::= Coma Apertura_de_paréntesis InsertExpresion Cierre_de_paréntesis InsertValoresA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValoresA",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // InsertValores ::= DEFAULT VALUES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValores",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // InsertValores ::= VALUES Apertura_de_paréntesis InsertExpresion Cierre_de_paréntesis InsertValoresA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValores",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // InsertExpresionB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionB",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // InsertExpresionB ::= Coma InsertExpresionA InsertExpresionB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionB",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // InsertExpresionA ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // InsertExpresionA ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // InsertExpresionA ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // InsertExpresionA ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // InsertExpresionA ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // InsertExpresion ::= InsertExpresionA InsertExpresionB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresion",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // InsertColumnList ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertColumnList",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // InsertColumnList ::= ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertColumnList",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // InsertInto ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertInto",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // InsertInto ::= INTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertInto",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // Insert ::= INSERT Top InsertInto Object3 InsertColumnList InsertValores 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Insert",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // GroupA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GroupA",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // GroupA ::= Coma Expresion GroupA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GroupA",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // Group ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Group",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Group ::= GROUP BY Expresion GroupA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Group",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // OrderC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderC",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // OrderC ::= Coma Expresion OrderA OrderB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderC",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // OrderB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // OrderB ::= DESC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // OrderB ::= ASC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // OrderA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderA",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // OrderA ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderA",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Order ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Order",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Order ::= ORDER BY Expresion OrderA OrderB OrderC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Order",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Having ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Having",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Having ::= HAVING SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Having",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // SelectA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // SelectA ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // SelectA ::= ALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Select ::= SELECT SelectA Top SelectColumns FromSelect Where Group Having Order 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Select",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ColumnListB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListB",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // ColumnListB ::= Coma ID ColumnListB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListB",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ColumnListA ::= ID ColumnListB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListA",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ColumnList ::= Apertura_de_paréntesis ColumnListA Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnList",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // SelectColumnsA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumnsA",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // SelectColumnsA ::= Coma Expresion Alias SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumnsA",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // SelectColumns ::= Multiplicacion SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumns",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // SelectColumns ::= Expresion Alias SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumns",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Where ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Where",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Where ::= WHERE SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Where",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // PredicadoC ::= LIKE Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // PredicadoC ::= BETWEEN Expresion AND Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // PredicadoC ::= IN Apertura_de_paréntesis Expresion Expresiones Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // PredicadoA ::= Not PredicadoC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // PredicadoA ::= IS Not NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // PredicadoA ::= OperadoresBooleanos Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OperadoresBooleanos ::= Menor_o_igual_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OperadoresBooleanos ::= Menor_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OperadoresBooleanos ::= Mayor_o_igual_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // OperadoresBooleanos ::= Mayor_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // OperadoresBooleanos ::= Operador_no_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // OperadoresBooleanos ::= Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Predicado ::= Expresion PredicadoA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Predicado",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SearchConditionA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // SearchConditionA ::= OR SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // SearchConditionA ::= AND SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // SearchCondition ::= Apertura_de_paréntesis SearchCondition Cierre_de_paréntesis SearchConditionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchCondition",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // SearchCondition ::= Not Predicado SearchConditionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchCondition",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Expresiones ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresiones",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Expresiones ::= Coma Expresion Expresiones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresiones",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // TopA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TopA",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // TopA ::= PERCENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TopA",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Top ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Top",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Top ::= TOP Apertura_de_paréntesis Int Cierre_de_paréntesis TopA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Top",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Not ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Not",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Not ::= NOT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Not",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ExpresionF ::= Multiplicacion Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ExpresionF ::= Int Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ExpresionF ::= Object4 Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // FunctionContentA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FunctionContentA",247, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // FunctionContentA ::= Coma FunctionContent 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FunctionContentA",247, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // FunctionContent ::= DType FunctionContentA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FunctionContent",246, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // CallFunction ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallFunction",245, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // CallFunction ::= Apertura_de_paréntesis FunctionContent Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallFunction",245, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ExpresionE ::= COUNT Apertura_de_paréntesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ExpresionE ::= MAX Apertura_de_paréntesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ExpresionE ::= MIN Apertura_de_paréntesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ExpresionE ::= AVG Apertura_de_paréntesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ExpresionE ::= SUM Apertura_de_paréntesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ExpresionE ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ExpresionE ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ExpresionE ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ExpresionE ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ExpresionE ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ExpresionE ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ExpresionE ::= Object4 CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ExpresionD ::= ExpresionE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ExpresionD ::= Apertura_de_paréntesis Expresion PredicadoC Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ExpresionC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ExpresionC ::= Division ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ExpresionC ::= Multiplicacion ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ExpresionB ::= ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionB",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ExpresionA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ExpresionA ::= Resta ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ExpresionA ::= Suma ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expresion ::= ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresion",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // AliasA ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AliasA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // AliasA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AliasA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Alias ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Alias ::= AliasA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Alias ::= AS AliasA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Truncate ::= TRUNCATE TABLE Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Truncate",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DropIndexB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexB",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DropIndexB ::= Coma DropIndexA DropIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexB",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DropIndexA ::= ID ON Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexA",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DropIndex ::= INDEX IFE DropIndexA DropIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndex",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DropViewA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropViewA",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DropViewA ::= Coma Object2 DropViewA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropViewA",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DropView ::= VIEW IFE Object2 DropViewA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropView",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DropDatabaseA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabaseA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DropDatabaseA ::= Coma ID DropDatabaseA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabaseA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DropDatabase ::= DATABASE IFE ID DropDatabaseA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabase",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DropUser ::= USER IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropUser",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DropTableA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTableA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DropTableA ::= Coma Object3 DropTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTableA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DropTable ::= TABLE IFE Object3 DropTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTable",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DropA ::= DropIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DropA ::= DropView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DropA ::= DropDatabase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DropA ::= DropUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DropA ::= DropTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Drop ::= DROP DropA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Drop",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Tipo_datoC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoC",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Tipo_datoC ::= Coma Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoC",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Tipo_datoB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoB",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Tipo_datoB ::= Apertura_de_paréntesis Int Tipo_datoC Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoB",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Tipo_datoA ::= DATETIME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Tipo_datoA ::= MONEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Tipo_datoA ::= NVARCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Tipo_datoA ::= NUMERIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Tipo_datoA ::= SMALLINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Tipo_datoA ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Tipo_datoA ::= INT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Tipo_datoA ::= TIME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Tipo_datoA ::= REAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Tipo_datoA ::= NCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Tipo_datoA ::= CURSOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Tipo_datoA ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Tipo_datoA ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Tipo_datoA ::= BIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Tipo_datoA ::= DATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Tipo_datoA ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Tipo_datoA ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Tipo_datoA ::= VARCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Tipo_datoD ::= Apertura_de_corchetes Tipo_datoA Cierre_de_corchetes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Tipo_datoD ::= Tipo_datoA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Tipo_dato ::= Tipo_datoD Tipo_datoB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_dato",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Variable ::= Arroba Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // IFE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IFE ::= IF EXISTS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Object4A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4A",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Object4A ::= Punto Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4A",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Object4 ::= ID Object4A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Object3A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3A",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Object3A ::= Punto Object2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3A",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Object3 ::= ID Object3A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Object2A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2A",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Object2A ::= Punto ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2A",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Object2 ::= ID Object2A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ID ::= Apertura_de_corchetes Identificador Cierre_de_corchetes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ID ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Final ::= PYCGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Final",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Final ::= GO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Final",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Final ::= Punto_y_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Final",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TSQL ::= ExecProcedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TSQL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TSQL ::= CursorDeclare 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TSQL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TCL ::= SavePoint Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TCL ::= Commit Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TCL ::= Rollback Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TCL ::= BeginTran Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DDL ::= Truncate 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DDL ::= Drop 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DDL ::= Alter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DDL ::= Create 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DML ::= error Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DML ::= Update Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DML ::= Delete Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DML ::= Insert Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DML ::= Select Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // InicialA ::= USE Object4 Final Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // InicialA ::= TSQL Final Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // InicialA ::= TCL Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // InicialA ::= DDL Final Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // InicialA ::= DML Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Inicial ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicial",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicial ::= InicialA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicial",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

