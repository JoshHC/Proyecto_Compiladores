
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Nov 14 18:58:14 CST 2019
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java_cup.runtime.virtual_parse_stack;
import java.lang.reflect.Field;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Nov 14 18:58:14 CST 2019
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u021c\000\002\002\004\000\002\003\003\000\002\003" +
    "\002\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\006\000\002\350\004\000\002\350\004\000" +
    "\002\350\004\000\002\350\006\000\002\350\005\000\002" +
    "\005\004\000\002\005\004\000\002\006\004\000\002\006" +
    "\003\000\002\007\006\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\012\003\000\002\012\005\000" +
    "\002\013\004\000\002\014\004\000\002\014\002\000\002" +
    "\015\004\000\002\016\004\000\002\016\002\000\002\017" +
    "\004\000\002\020\004\000\002\020\002\000\002\021\004" +
    "\000\002\021\002\000\002\022\004\000\002\023\004\000" +
    "\002\024\003\000\002\024\005\000\002\025\004\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\004\000\002\025\003" +
    "\000\002\025\004\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\026\006\000\002\026\002" +
    "\000\002\027\004\000\002\027\002\000\002\u0103\005\000" +
    "\002\u0103\002\000\002\030\004\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\u0102\006" +
    "\000\002\u0100\006\000\002\u0101\005\000\002\u0101\002\000" +
    "\002\032\006\000\002\033\005\000\002\033\002\000\002" +
    "\034\005\000\002\035\006\000\002\036\005\000\002\036" +
    "\002\000\002\037\006\000\002\040\005\000\002\040\002" +
    "\000\002\041\006\000\002\042\005\000\002\043\005\000" +
    "\002\043\002\000\002\044\005\000\002\045\004\000\002" +
    "\045\003\000\002\045\002\000\002\046\003\000\002\046" +
    "\003\000\002\047\004\000\002\050\005\000\002\050\005" +
    "\000\002\050\002\000\002\051\004\000\002\052\005\000" +
    "\002\052\005\000\002\052\002\000\002\053\006\000\002" +
    "\053\003\000\002\054\004\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\054\003\000\002\054\003" +
    "\000\002\054\003\000\002\054\005\000\002\054\005\000" +
    "\002\054\005\000\002\054\005\000\002\054\005\000\002" +
    "\367\005\000\002\367\002\000\002\370\004\000\002\371" +
    "\004\000\002\371\002\000\002\055\004\000\002\055\004" +
    "\000\002\055\004\000\002\056\003\000\002\056\002\000" +
    "\002\057\007\000\002\057\002\000\002\060\003\000\002" +
    "\060\002\000\002\061\005\000\002\061\002\000\002\062" +
    "\005\000\002\062\006\000\002\063\004\000\002\063\004" +
    "\000\002\063\002\000\002\064\004\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\065\004\000\002\065" +
    "\005\000\002\065\004\000\002\066\007\000\002\066\006" +
    "\000\002\066\004\000\002\067\004\000\002\067\002\000" +
    "\002\070\005\000\002\070\004\000\002\071\006\000\002" +
    "\071\002\000\002\072\005\000\002\073\004\000\002\074" +
    "\005\000\002\074\002\000\002\075\013\000\002\076\003" +
    "\000\002\076\003\000\002\076\002\000\002\077\004\000" +
    "\002\077\002\000\002\100\010\000\002\100\002\000\002" +
    "\101\004\000\002\101\002\000\002\102\003\000\002\102" +
    "\003\000\002\102\002\000\002\103\006\000\002\103\002" +
    "\000\002\104\006\000\002\104\002\000\002\105\005\000" +
    "\002\105\002\000\002\106\010\000\002\107\003\000\002" +
    "\107\002\000\002\110\003\000\002\110\002\000\002\111" +
    "\004\000\002\112\003\000\002\112\003\000\002\112\003" +
    "\000\002\112\003\000\002\112\003\000\002\113\005\000" +
    "\002\113\002\000\002\114\007\000\002\114\004\000\002" +
    "\115\007\000\002\115\002\000\002\116\006\000\002\117" +
    "\003\000\002\117\002\000\002\120\004\000\002\120\005" +
    "\000\002\121\005\000\002\121\002\000\002\122\005\000" +
    "\002\122\002\000\002\123\007\000\002\124\011\000\002" +
    "\125\006\000\002\126\003\000\002\126\003\000\002\127" +
    "\004\000\002\127\002\000\002\130\005\000\002\130\002" +
    "\000\002\131\007\000\002\131\002\000\002\132\006\000" +
    "\002\132\002\000\002\133\011\000\002\133\002\000\002" +
    "\134\003\000\002\134\004\000\002\134\004\000\002\134" +
    "\004\000\002\134\002\000\002\135\003\000\002\135\002" +
    "\000\002\136\004\000\002\137\003\000\002\137\003\000" +
    "\002\137\003\000\002\137\003\000\002\137\003\000\002" +
    "\137\003\000\002\137\003\000\002\140\004\000\002\141" +
    "\005\000\002\142\004\000\002\143\005\000\002\143\002" +
    "\000\002\144\003\000\002\144\002\000\002\145\005\000" +
    "\002\145\003\000\002\146\014\000\002\373\003\000\002" +
    "\373\003\000\002\374\003\000\002\374\003\000\002\147" +
    "\004\000\002\147\002\000\002\151\005\000\002\151\002" +
    "\000\002\153\003\000\002\153\003\000\002\153\003\000" +
    "\002\154\003\000\002\154\003\000\002\360\006\000\002" +
    "\361\005\000\002\155\003\000\002\155\003\000\002\155" +
    "\003\000\002\155\003\000\002\156\005\000\002\157\004" +
    "\000\002\157\003\000\002\160\006\000\002\161\003\000" +
    "\002\161\003\000\002\161\002\000\002\162\006\000\002" +
    "\163\014\000\002\164\003\000\002\164\002\000\002\165" +
    "\005\000\002\166\005\000\002\167\006\000\002\167\002" +
    "\000\002\170\004\000\002\170\002\000\002\171\007\000" +
    "\002\171\002\000\002\172\011\000\002\173\004\000\002" +
    "\173\002\000\002\174\004\000\002\174\002\000\002\351" +
    "\005\000\002\351\003\000\002\352\004\000\002\352\002" +
    "\000\002\175\003\000\002\175\003\000\002\175\003\000" +
    "\002\176\005\000\002\176\002\000\002\177\006\000\002" +
    "\356\005\000\002\356\003\000\002\356\002\000\002\357" +
    "\010\000\002\357\007\000\002\357\006\000\002\357\004" +
    "\000\002\357\004\000\002\354\003\000\002\354\002\000" +
    "\002\355\003\000\002\355\005\000\002\353\004\000\002" +
    "\353\003\000\002\353\002\000\002\200\004\000\002\200" +
    "\002\000\002\201\003\000\002\201\003\000\002\201\003" +
    "\000\002\201\003\000\002\201\003\000\002\202\004\000" +
    "\002\202\002\000\002\203\007\000\002\203\002\000\002" +
    "\204\003\000\002\204\002\000\002\205\003\000\002\205" +
    "\002\000\002\206\005\000\002\206\002\000\002\207\004" +
    "\000\002\207\002\000\002\210\005\000\002\210\004\000" +
    "\002\210\010\000\002\210\007\000\002\211\003\000\002" +
    "\211\003\000\002\211\002\000\002\212\004\000\002\212" +
    "\002\000\002\213\005\000\002\213\002\000\002\214\005" +
    "\000\002\214\002\000\002\215\004\000\002\215\004\000" +
    "\002\216\003\000\002\216\003\000\002\217\003\000\002" +
    "\217\004\000\002\220\004\000\002\221\006\000\002\221" +
    "\005\000\002\221\012\000\002\221\007\000\002\222\007" +
    "\000\002\223\006\000\002\223\002\000\002\224\006\000" +
    "\002\225\005\000\002\225\002\000\002\226\006\000\002" +
    "\227\004\000\002\230\003\000\002\230\003\000\002\230" +
    "\003\000\002\230\003\000\002\230\003\000\002\231\005" +
    "\000\002\232\003\000\002\232\003\000\002\233\004\000" +
    "\002\233\005\000\002\234\004\000\002\235\007\000\002" +
    "\236\003\000\002\236\002\000\002\237\005\000\002\240" +
    "\003\000\002\240\005\000\002\240\003\000\002\241\006" +
    "\000\002\242\003\000\002\242\004\000\002\243\005\000" +
    "\002\244\003\000\002\244\003\000\002\245\003\000\002" +
    "\245\005\000\002\246\005\000\002\247\005\000\002\247" +
    "\005\000\002\250\003\000\002\250\002\000\002\251\005" +
    "\000\002\251\002\000\002\253\005\000\002\254\004\000" +
    "\002\254\002\000\002\255\005\000\002\255\002\000\002" +
    "\256\003\000\002\256\002\000\002\375\004\000\002\375" +
    "\004\000\002\257\005\000\002\260\003\000\002\260\003" +
    "\000\002\261\003\000\002\261\003\000\002\261\002\000" +
    "\002\262\003\000\002\262\003\000\002\263\005\000\002" +
    "\264\004\000\002\264\002\000\002\377\010\000\002\377" +
    "\002\000\002\376\003\000\002\376\003\000\002\265\004" +
    "\000\002\266\004\000\002\266\002\000\002\267\013\000" +
    "\002\270\003\000\002\270\003\000\002\271\004\000\002" +
    "\271\002\000\002\272\003\000\002\272\002\000\002\273" +
    "\005\000\002\274\004\000\002\274\002\000\002\275\005" +
    "\000\002\275\005\000\002\275\004\000\002\276\004\000" +
    "\002\276\002\000\002\277\003\000\002\277\002\000\002" +
    "\300\003\000\002\300\003\000\002\301\004\000\002\301" +
    "\002\000\002\302\004\000\002\303\003\000\002\303\003" +
    "\000\002\303\005\000\002\304\003\000\002\304\003\000" +
    "\002\305\004\000\002\305\002\000\002\306\003\000\002" +
    "\306\003\000\002\306\003\000\002\306\003\000\002\307" +
    "\004\000\002\307\002\000\002\310\005\000\002\311\004" +
    "\000\002\312\004\000\002\312\002\000\002\313\003\000" +
    "\002\313\002\000\002\340\015\000\002\341\003\000\002" +
    "\341\003\000\002\341\002\000\002\342\003\000\002\342" +
    "\003\000\002\342\002\000\002\343\003\000\002\343\003" +
    "\000\002\343\003\000\002\343\003\000\002\343\002\000" +
    "\002\344\003\000\002\344\003\000\002\344\003\000\002" +
    "\344\002\000\002\345\003\000\002\345\002\000\002\346" +
    "\005\000\002\346\002\000\002\347\004\000\002\347\002" +
    "\000\002\314\012\000\002\315\003\000\002\315\002\000" +
    "\002\316\004\000\002\316\002\000\002\317\006\000\002" +
    "\322\003\000\002\322\002\000\002\320\004\000\002\321" +
    "\004\000\002\321\002\000\002\323\003\000\002\323\002" +
    "\000\002\324\003\000\002\324\003\000\002\325\012\000" +
    "\002\326\007\000\002\327\005\000\002\327\003\000\002" +
    "\372\005\000\002\372\003\000\002\330\003\000\002\330" +
    "\003\000\002\330\003\000\002\330\003\000\002\330\003" +
    "\000\002\330\003\000\002\331\004\000\002\331\002\000" +
    "\002\332\004\000\002\333\003\000\002\333\003\000\002" +
    "\333\007\000\002\333\006\000\002\333\003\000\002\333" +
    "\005\000\002\334\004\000\002\334\002\000\002\335\003" +
    "\000\002\335\003\000\002\366\005\000\002\362\004\000" +
    "\002\362\007\000\002\362\005\000\002\363\006\000\002" +
    "\363\004\000\002\364\004\000\002\364\002\000\002\365" +
    "\003\000\002\365\003\000\002\365\003\000\002\365\003" +
    "\000\002\365\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0271\000\016\002\uffff\003\014\066\004\111\017\262" +
    "\012\302\010\001\002\000\016\062\u0114\115\ufe16\220\u0111" +
    "\243\u010c\305\u010d\315\u0112\001\002\000\010\037\022\u0103" +
    "\023\u0188\024\001\002\000\010\037\022\u0103\023\u0188\024" +
    "\001\002\000\010\002\000\132\000\166\000\001\002\000" +
    "\006\012\034\050\036\001\002\000\022\002\uffff\003\014" +
    "\066\004\111\017\132\uffff\166\uffff\262\012\302\010\001" +
    "\002\000\014\012\uff82\050\uff82\107\uff82\237\054\273\uff82" +
    "\001\002\000\022\002\uffff\003\014\066\004\111\017\132" +
    "\uffff\166\uffff\262\012\302\010\001\002\000\030\002\ufff2" +
    "\003\ufff2\037\022\066\ufff2\111\ufff2\132\ufff2\166\ufff2\262" +
    "\ufff2\302\ufff2\u0103\023\u0188\024\001\002\000\004\002\050" +
    "\001\002\000\022\002\uffff\003\014\066\004\111\017\132" +
    "\uffff\166\uffff\262\012\302\010\001\002\000\006\242\027" +
    "\245\025\001\002\000\010\037\022\u0103\023\u0188\024\001" +
    "\002\000\024\002\ufff5\003\ufff5\066\ufff5\111\ufff5\116\ufff5" +
    "\132\ufff5\166\ufff5\262\ufff5\302\ufff5\001\002\000\026\002" +
    "\ufff0\003\ufff0\066\ufff0\111\ufff0\116\ufff0\132\ufff0\146\ufff0" +
    "\166\ufff0\262\ufff0\302\ufff0\001\002\000\026\002\uffef\003" +
    "\uffef\066\uffef\111\uffef\116\uffef\132\uffef\146\uffef\166\uffef" +
    "\262\uffef\302\uffef\001\002\000\026\002\uffee\003\uffee\066" +
    "\uffee\111\uffee\116\uffee\132\uffee\146\uffee\166\uffee\262\uffee" +
    "\302\uffee\001\002\000\020\012\ufe64\037\ufe64\042\ufe64\050" +
    "\ufe64\334\ufe64\u0103\ufe64\u0188\ufe64\001\002\000\016\012\034" +
    "\037\ufe72\042\033\050\036\u0103\ufe72\u0188\ufe72\001\002\000" +
    "\020\012\ufe65\037\ufe65\042\ufe65\050\ufe65\334\ufe65\u0103\ufe65" +
    "\u0188\ufe65\001\002\000\012\037\ufe6a\334\ufe6a\u0103\ufe6a\u0188" +
    "\ufe6a\001\002\000\012\037\ufe70\334\042\u0103\ufe70\u0188\ufe70" +
    "\001\002\000\012\037\ufe69\334\ufe69\u0103\ufe69\u0188\ufe69\001" +
    "\002\000\004\012\041\001\002\000\246\005\uffed\006\uffed" +
    "\007\uffed\010\uffed\011\uffed\012\uffed\020\uffed\024\uffed\025" +
    "\uffed\026\uffed\027\uffed\031\uffed\037\uffed\040\uffed\041\uffed" +
    "\050\uffed\052\uffed\055\uffed\060\uffed\061\uffed\062\uffed\066" +
    "\uffed\074\uffed\076\uffed\077\uffed\102\uffed\107\uffed\111\uffed" +
    "\112\uffed\114\uffed\116\uffed\126\uffed\127\uffed\131\uffed\137" +
    "\uffed\140\uffed\141\uffed\152\uffed\153\uffed\160\uffed\161\uffed" +
    "\174\uffed\175\uffed\176\uffed\200\uffed\211\uffed\214\uffed\236" +
    "\uffed\240\uffed\241\uffed\244\uffed\257\uffed\266\uffed\267\uffed" +
    "\303\uffed\306\uffed\311\uffed\316\uffed\326\uffed\334\uffed\336" +
    "\uffed\364\uffed\370\uffed\376\uffed\u0103\uffed\u0104\uffed\u0111\uffed" +
    "\u011a\uffed\u011d\uffed\u0120\uffed\u0133\uffed\u013f\uffed\u0149\uffed\u014c" +
    "\uffed\u0159\uffed\u015a\uffed\u015f\uffed\u016a\uffed\u0188\uffed\u0189\uffed" +
    "\u018a\uffed\u018b\uffed\001\002\000\010\037\ufe74\u0103\ufe74\u0188" +
    "\ufe74\001\002\000\004\012\037\001\002\000\004\053\040" +
    "\001\002\000\246\005\uffec\006\uffec\007\uffec\010\uffec\011" +
    "\uffec\012\uffec\020\uffec\024\uffec\025\uffec\026\uffec\027\uffec" +
    "\031\uffec\037\uffec\040\uffec\041\uffec\050\uffec\052\uffec\055" +
    "\uffec\060\uffec\061\uffec\062\uffec\066\uffec\074\uffec\076\uffec" +
    "\077\uffec\102\uffec\107\uffec\111\uffec\112\uffec\114\uffec\116" +
    "\uffec\126\uffec\127\uffec\131\uffec\137\uffec\140\uffec\141\uffec" +
    "\152\uffec\153\uffec\160\uffec\161\uffec\174\uffec\175\uffec\176" +
    "\uffec\200\uffec\211\uffec\214\uffec\236\uffec\240\uffec\241\uffec" +
    "\244\uffec\257\uffec\266\uffec\267\uffec\303\uffec\306\uffec\311" +
    "\uffec\316\uffec\326\uffec\334\uffec\336\uffec\364\uffec\370\uffec" +
    "\376\uffec\u0103\uffec\u0104\uffec\u0111\uffec\u011a\uffec\u011d\uffec\u0120" +
    "\uffec\u0133\uffec\u013f\uffec\u0149\uffec\u014c\uffec\u0159\uffec\u015a\uffec" +
    "\u015f\uffec\u016a\uffec\u0188\uffec\u0189\uffec\u018a\uffec\u018b\uffec\001" +
    "\002\000\154\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0" +
    "\012\uffe0\016\uffe0\017\uffe0\020\uffe0\022\uffe0\024\uffe0\025" +
    "\uffe0\026\uffe0\027\uffe0\031\uffe0\037\uffe0\040\uffe0\042\uffe0" +
    "\050\uffe0\052\uffe0\055\uffe0\061\uffe0\062\uffe0\076\uffe0\107" +
    "\uffe0\112\uffe0\114\uffe0\126\uffe0\127\uffe0\131\uffe0\153\uffe0" +
    "\160\uffe0\161\uffe0\175\uffe0\200\uffe0\211\uffe0\214\uffe0\241" +
    "\uffe0\244\uffe0\267\uffe0\311\uffe0\316\uffe0\326\uffe0\334\uffe0" +
    "\370\uffe0\377\uffe0\u0103\uffe0\u012c\uffe0\u0131\uffe0\u013c\uffe0\u013d" +
    "\uffe0\u016a\uffe0\u0188\uffe0\001\002\000\004\u0174\044\001\002" +
    "\000\010\037\ufe73\u0103\ufe73\u0188\ufe73\001\002\000\012\020" +
    "\045\037\ufe6e\u0103\ufe6e\u0188\ufe6e\001\002\000\010\037\ufe6f" +
    "\u0103\ufe6f\u0188\ufe6f\001\002\000\010\037\ufe71\u0103\ufe71\u0188" +
    "\ufe71\001\002\000\010\002\ufffd\132\ufffd\166\ufffd\001\002" +
    "\000\004\002\001\001\002\000\024\002\ufff4\003\ufff4\066" +
    "\ufff4\111\ufff4\116\ufff4\132\ufff4\166\ufff4\262\ufff4\302\ufff4" +
    "\001\002\000\010\002\ufffe\132\ufffe\166\ufffe\001\002\000" +
    "\012\012\uff3b\050\uff3b\107\062\273\uff3b\001\002\000\004" +
    "\052\055\001\002\000\004\016\056\001\002\000\004\055" +
    "\057\001\002\000\046\010\uff80\012\uff80\016\uff80\017\uff80" +
    "\020\uff80\022\uff80\042\uff80\050\uff80\052\uff80\107\uff80\244" +
    "\uff80\273\uff80\322\061\377\uff80\u012c\uff80\u0131\uff80\u013c\uff80" +
    "\u013d\uff80\001\002\000\044\010\uff83\012\uff83\016\uff83\017" +
    "\uff83\020\uff83\022\uff83\042\uff83\050\uff83\052\uff83\107\uff83" +
    "\244\uff83\273\uff83\377\uff83\u012c\uff83\u0131\uff83\u013c\uff83\u013d" +
    "\uff83\001\002\000\044\010\uff81\012\uff81\016\uff81\017\uff81" +
    "\020\uff81\022\uff81\042\uff81\050\uff81\052\uff81\107\uff81\244" +
    "\uff81\273\uff81\377\uff81\u012c\uff81\u0131\uff81\u013c\uff81\u013d\uff81" +
    "\001\002\000\010\012\uff3c\050\uff3c\273\uff3c\001\002\000" +
    "\010\012\034\050\036\273\067\001\002\000\140\005\uffe6" +
    "\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\020\uffe6\024" +
    "\uffe6\025\uffe6\026\uffe6\027\uffe6\031\uffe6\037\uffe6\040\uffe6" +
    "\041\324\050\uffe6\052\uffe6\055\uffe6\060\uffe6\061\uffe6\062" +
    "\uffe6\066\uffe6\076\uffe6\107\uffe6\112\uffe6\114\uffe6\126\uffe6" +
    "\127\uffe6\131\uffe6\153\uffe6\160\uffe6\161\uffe6\175\uffe6\200" +
    "\uffe6\211\uffe6\214\uffe6\241\uffe6\267\uffe6\306\uffe6\311\uffe6" +
    "\316\uffe6\326\uffe6\370\uffe6\u0103\uffe6\u015f\uffe6\u016a\uffe6\u0188" +
    "\uffe6\001\002\000\010\037\uff3d\u0103\uff3d\u0188\uff3d\001\002" +
    "\000\014\037\uff37\107\076\326\uff37\u0103\uff37\u0188\uff37\001" +
    "\002\000\004\052\070\001\002\000\006\012\034\050\036" +
    "\001\002\000\010\037\uff3a\u0103\uff3a\u0188\uff3a\001\002\000" +
    "\004\040\073\001\002\000\004\016\074\001\002\000\004" +
    "\055\075\001\002\000\010\037\uff34\u0103\uff34\u0188\uff34\001" +
    "\002\000\006\012\034\050\036\001\002\000\012\037\uff6a" +
    "\326\100\u0103\uff6a\u0188\uff6a\001\002\000\040\012\uff84\016" +
    "\uff84\017\uff84\020\uff84\022\uff84\042\uff84\050\uff84\052\102" +
    "\241\105\244\uff84\377\uff84\u012c\uff84\u0131\uff84\u013c\uff84\u013d" +
    "\uff84\001\002\000\010\037\uff39\u0103\uff39\u0188\uff39\001\002" +
    "\000\040\012\uff84\016\uff84\017\uff84\020\uff84\022\uff84\042" +
    "\uff84\050\uff84\052\102\241\105\244\uff84\377\uff84\u012c\uff84" +
    "\u0131\uff84\u013c\uff84\u013d\uff84\001\002\000\036\012\034\016" +
    "\113\017\122\020\127\022\107\042\033\050\036\052\124" +
    "\244\125\377\117\u012c\106\u0131\126\u013c\123\u013d\121\001" +
    "\002\000\020\037\uff6b\055\uff6b\126\uff6b\131\uff6b\311\uff6b" +
    "\u0103\uff6b\u0188\uff6b\001\002\000\044\012\uff85\016\uff85\017" +
    "\uff85\020\uff85\022\uff85\042\uff85\050\uff85\052\uff85\114\uff85" +
    "\153\uff85\214\uff85\244\uff85\377\uff85\u012c\uff85\u0131\uff85\u013c" +
    "\uff85\u013d\uff85\001\002\000\004\052\311\001\002\000\124" +
    "\005\uff97\006\uff97\007\uff97\010\uff97\011\uff97\012\uff97\020" +
    "\uff97\024\uff97\025\uff97\026\uff97\027\uff97\031\uff97\037\uff97" +
    "\040\uff97\050\uff97\055\uff97\061\uff97\062\uff97\076\uff97\107" +
    "\uff97\112\uff97\114\uff97\126\uff97\127\uff97\131\uff97\153\uff97" +
    "\160\uff97\161\uff97\175\uff97\200\uff97\211\uff97\214\uff97\241" +
    "\uff97\267\uff97\311\uff97\316\uff97\326\uff97\370\uff97\u0103\uff97" +
    "\u016a\uff97\u0188\uff97\001\002\000\124\005\uff9a\006\uff9a\007" +
    "\uff9a\010\uff9a\011\uff9a\012\uff9a\020\uff9a\024\uff9a\025\uff9a" +
    "\026\uff9a\027\uff9a\031\uff9a\037\uff9a\040\uff9a\050\uff9a\055" +
    "\uff9a\061\uff9a\062\uff9a\076\uff9a\107\uff9a\112\uff9a\114\uff9a" +
    "\126\uff9a\127\uff9a\131\uff9a\153\uff9a\160\uff9a\161\uff9a\175" +
    "\uff9a\200\uff9a\211\uff9a\214\uff9a\241\uff9a\267\uff9a\311\uff9a" +
    "\316\uff9a\326\uff9a\370\uff9a\u0103\uff9a\u016a\uff9a\u0188\uff9a\001" +
    "\002\000\030\005\301\024\302\025\300\026\275\027\273" +
    "\031\276\114\uff84\153\uff84\175\304\214\uff84\241\105\001" +
    "\002\000\124\005\uff9c\006\uff9c\007\uff9c\010\266\011\264" +
    "\012\uff9c\020\uff9c\024\uff9c\025\uff9c\026\uff9c\027\uff9c\031" +
    "\uff9c\037\uff9c\040\uff9c\050\uff9c\055\uff9c\061\uff9c\062\uff9c" +
    "\076\uff9c\107\uff9c\112\uff9c\114\uff9c\126\uff9c\127\uff9c\131" +
    "\uff9c\153\uff9c\160\uff9c\161\uff9c\175\uff9c\200\uff9c\211\uff9c" +
    "\214\uff9c\241\uff9c\267\uff9c\311\uff9c\316\uff9c\326\uff9c\370" +
    "\uff9c\u0103\uff9c\u016a\uff9c\u0188\uff9c\001\002\000\124\005\uff98" +
    "\006\uff98\007\uff98\010\uff98\011\uff98\012\uff98\020\uff98\024" +
    "\uff98\025\uff98\026\uff98\027\uff98\031\uff98\037\uff98\040\uff98" +
    "\050\uff98\055\uff98\061\uff98\062\uff98\076\uff98\107\uff98\112" +
    "\uff98\114\uff98\126\uff98\127\uff98\131\uff98\153\uff98\160\uff98" +
    "\161\uff98\175\uff98\200\uff98\211\uff98\214\uff98\241\uff98\267" +
    "\uff98\311\uff98\316\uff98\326\uff98\370\uff98\u0103\uff98\u016a\uff98" +
    "\u0188\uff98\001\002\000\120\005\uffa0\006\256\007\255\012" +
    "\uffa0\020\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\031\uffa0" +
    "\037\uffa0\040\uffa0\050\uffa0\055\uffa0\061\uffa0\062\uffa0\076" +
    "\uffa0\107\uffa0\112\uffa0\114\uffa0\126\uffa0\127\uffa0\131\uffa0" +
    "\153\uffa0\160\uffa0\161\uffa0\175\uffa0\200\uffa0\211\uffa0\214" +
    "\uffa0\241\uffa0\267\uffa0\311\uffa0\316\uffa0\326\uffa0\370\uffa0" +
    "\u0103\uffa0\u016a\uffa0\u0188\uffa0\001\002\000\130\005\uffe3\006" +
    "\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\020\uffe3\024\uffe3" +
    "\025\uffe3\026\uffe3\027\uffe3\031\uffe3\037\uffe3\040\uffe3\041" +
    "\253\050\uffe3\052\uffe3\055\uffe3\061\uffe3\062\uffe3\076\uffe3" +
    "\107\uffe3\112\uffe3\114\uffe3\126\uffe3\127\uffe3\131\uffe3\153" +
    "\uffe3\160\uffe3\161\uffe3\175\uffe3\200\uffe3\211\uffe3\214\uffe3" +
    "\241\uffe3\267\uffe3\311\uffe3\316\uffe3\326\uffe3\370\uffe3\u0103" +
    "\uffe3\u016a\uffe3\u0188\uffe3\001\002\000\042\037\uff79\040\uff79" +
    "\055\uff79\061\245\062\246\112\uff79\126\uff79\127\uff79\131" +
    "\uff79\161\uff79\200\uff79\211\uff79\311\uff79\326\uff79\u0103\uff79" +
    "\u0188\uff79\001\002\000\004\052\243\001\002\000\124\005" +
    "\uff93\006\uff93\007\uff93\010\uff93\011\uff93\012\uff93\020\uff93" +
    "\024\uff93\025\uff93\026\uff93\027\uff93\031\uff93\037\uff93\040" +
    "\uff93\050\uff93\055\uff93\061\uff93\062\uff93\076\uff93\107\uff93" +
    "\112\uff93\114\uff93\126\uff93\127\uff93\131\uff93\153\uff93\160" +
    "\uff93\161\uff93\175\uff93\200\uff93\211\uff93\214\uff93\241\uff93" +
    "\267\uff93\311\uff93\316\uff93\326\uff93\370\uff93\u0103\uff93\u016a" +
    "\uff93\u0188\uff93\001\002\000\004\052\241\001\002\000\124" +
    "\005\uff95\006\uff95\007\uff95\010\uff95\011\uff95\012\uff95\020" +
    "\uff95\024\uff95\025\uff95\026\uff95\027\uff95\031\uff95\037\uff95" +
    "\040\uff95\050\uff95\055\uff95\061\uff95\062\uff95\076\uff95\107" +
    "\uff95\112\uff95\114\uff95\126\uff95\127\uff95\131\uff95\153\uff95" +
    "\160\uff95\161\uff95\175\uff95\200\uff95\211\uff95\214\uff95\241" +
    "\uff95\267\uff95\311\uff95\316\uff95\326\uff95\370\uff95\u0103\uff95" +
    "\u016a\uff95\u0188\uff95\001\002\000\004\052\237\001\002\000" +
    "\036\012\034\016\113\017\122\020\127\022\107\042\033" +
    "\050\036\052\124\244\125\377\117\u012c\106\u0131\126\u013c" +
    "\123\u013d\121\001\002\000\124\005\uff94\006\uff94\007\uff94" +
    "\010\uff94\011\uff94\012\uff94\020\uff94\024\uff94\025\uff94\026" +
    "\uff94\027\uff94\031\uff94\037\uff94\040\uff94\050\uff94\055\uff94" +
    "\061\uff94\062\uff94\076\uff94\107\uff94\112\uff94\114\uff94\126" +
    "\uff94\127\uff94\131\uff94\153\uff94\160\uff94\161\uff94\175\uff94" +
    "\200\uff94\211\uff94\214\uff94\241\uff94\267\uff94\311\uff94\316" +
    "\uff94\326\uff94\370\uff94\u0103\uff94\u016a\uff94\u0188\uff94\001\002" +
    "\000\004\052\206\001\002\000\124\005\uff96\006\uff96\007" +
    "\uff96\010\uff96\011\uff96\012\uff96\020\uff96\024\uff96\025\uff96" +
    "\026\uff96\027\uff96\031\uff96\037\uff96\040\uff96\050\uff96\055" +
    "\uff96\061\uff96\062\uff96\076\uff96\107\uff96\112\uff96\114\uff96" +
    "\126\uff96\127\uff96\131\uff96\153\uff96\160\uff96\161\uff96\175" +
    "\uff96\200\uff96\211\uff96\214\uff96\241\uff96\267\uff96\311\uff96" +
    "\316\uff96\326\uff96\370\uff96\u0103\uff96\u016a\uff96\u0188\uff96\001" +
    "\002\000\126\005\uff8c\006\uff8c\007\uff8c\010\uff8c\011\uff8c" +
    "\012\uff8c\020\uff8c\024\uff8c\025\uff8c\026\uff8c\027\uff8c\031" +
    "\uff8c\037\uff8c\040\uff8c\050\uff8c\052\131\055\uff8c\061\uff8c" +
    "\062\uff8c\076\uff8c\107\uff8c\112\uff8c\114\uff8c\126\uff8c\127" +
    "\uff8c\131\uff8c\153\uff8c\160\uff8c\161\uff8c\175\uff8c\200\uff8c" +
    "\211\uff8c\214\uff8c\241\uff8c\267\uff8c\311\uff8c\316\uff8c\326" +
    "\uff8c\370\uff8c\u0103\uff8c\u016a\uff8c\u0188\uff8c\001\002\000\052" +
    "\050\143\240\141\244\157\303\162\364\146\376\156\u0104" +
    "\147\u0111\137\u011a\150\u011d\135\u0120\153\u0133\151\u013f\140" +
    "\u0149\136\u014c\142\u0159\155\u015a\144\u0189\161\u018a\133\u018b" +
    "\134\001\002\000\124\005\uff99\006\uff99\007\uff99\010\uff99" +
    "\011\uff99\012\uff99\020\uff99\024\uff99\025\uff99\026\uff99\027" +
    "\uff99\031\uff99\037\uff99\040\uff99\050\uff99\055\uff99\061\uff99" +
    "\062\uff99\076\uff99\107\uff99\112\uff99\114\uff99\126\uff99\127" +
    "\uff99\131\uff99\153\uff99\160\uff99\161\uff99\175\uff99\200\uff99" +
    "\211\uff99\214\uff99\241\uff99\267\uff99\311\uff99\316\uff99\326" +
    "\uff99\370\uff99\u0103\uff99\u016a\uff99\u0188\uff99\001\002\000\060" +
    "\037\uffcc\040\uffcc\052\uffcc\053\uffcc\055\uffcc\074\uffcc\076" +
    "\uffcc\077\uffcc\102\uffcc\111\uffcc\137\uffcc\140\uffcc\141\uffcc" +
    "\160\uffcc\174\uffcc\241\uffcc\244\uffcc\257\uffcc\266\uffcc\334" +
    "\uffcc\336\uffcc\u0103\uffcc\u0188\uffcc\001\002\000\060\037\uffcb" +
    "\040\uffcb\052\uffcb\053\uffcb\055\uffcb\074\uffcb\076\uffcb\077" +
    "\uffcb\102\uffcb\111\uffcb\137\uffcb\140\uffcb\141\uffcb\160\uffcb" +
    "\174\uffcb\241\uffcb\244\uffcb\257\uffcb\266\uffcb\334\uffcb\336" +
    "\uffcb\u0103\uffcb\u0188\uffcb\001\002\000\060\037\uffd1\040\uffd1" +
    "\052\uffd1\053\uffd1\055\uffd1\074\uffd1\076\uffd1\077\uffd1\102" +
    "\uffd1\111\uffd1\137\uffd1\140\uffd1\141\uffd1\160\uffd1\174\uffd1" +
    "\241\uffd1\244\uffd1\257\uffd1\266\uffd1\334\uffd1\336\uffd1\u0103" +
    "\uffd1\u0188\uffd1\001\002\000\060\037\uffd0\040\uffd0\052\uffd0" +
    "\053\uffd0\055\uffd0\074\uffd0\076\uffd0\077\uffd0\102\uffd0\111" +
    "\uffd0\137\uffd0\140\uffd0\141\uffd0\160\uffd0\174\uffd0\241\uffd0" +
    "\244\uffd0\257\uffd0\266\uffd0\334\uffd0\336\uffd0\u0103\uffd0\u0188" +
    "\uffd0\001\002\000\060\037\uffc4\040\uffc4\052\176\053\uffc4" +
    "\055\uffc4\074\uffc4\076\uffc4\077\uffc4\102\uffc4\111\uffc4\137" +
    "\uffc4\140\uffc4\141\uffc4\160\uffc4\174\uffc4\241\uffc4\244\uffc4" +
    "\257\uffc4\266\uffc4\334\uffc4\336\uffc4\u0103\uffc4\u0188\uffc4\001" +
    "\002\000\060\037\uffd9\040\uffd9\052\uffd9\053\uffd9\055\uffd9" +
    "\074\uffd9\076\uffd9\077\uffd9\102\uffd9\111\uffd9\137\uffd9\140" +
    "\uffd9\141\uffd9\160\uffd9\174\uffd9\241\uffd9\244\uffd9\257\uffd9" +
    "\266\uffd9\334\uffd9\336\uffd9\u0103\uffd9\u0188\uffd9\001\002\000" +
    "\060\037\uffd5\040\uffd5\052\uffd5\053\uffd5\055\uffd5\074\uffd5" +
    "\076\uffd5\077\uffd5\102\uffd5\111\uffd5\137\uffd5\140\uffd5\141" +
    "\uffd5\160\uffd5\174\uffd5\241\uffd5\244\uffd5\257\uffd5\266\uffd5" +
    "\334\uffd5\336\uffd5\u0103\uffd5\u0188\uffd5\001\002\000\060\037" +
    "\uffc4\040\uffc4\052\176\053\uffc4\055\uffc4\074\uffc4\076\uffc4" +
    "\077\uffc4\102\uffc4\111\uffc4\137\uffc4\140\uffc4\141\uffc4\160" +
    "\uffc4\174\uffc4\241\uffc4\244\uffc4\257\uffc4\266\uffc4\334\uffc4" +
    "\336\uffc4\u0103\uffc4\u0188\uffc4\001\002\000\050\240\141\244" +
    "\157\303\162\364\146\376\156\u0104\147\u0111\137\u011a\150" +
    "\u011d\135\u0120\153\u0133\151\u013f\140\u0149\136\u014c\142\u0159" +
    "\155\u015a\144\u0189\161\u018a\133\u018b\134\001\002\000\060" +
    "\037\uffc4\040\uffc4\052\176\053\uffc4\055\uffc4\074\uffc4\076" +
    "\uffc4\077\uffc4\102\uffc4\111\uffc4\137\uffc4\140\uffc4\141\uffc4" +
    "\160\uffc4\174\uffc4\241\uffc4\244\uffc4\257\uffc4\266\uffc4\334" +
    "\uffc4\336\uffc4\u0103\uffc4\u0188\uffc4\001\002\000\006\040\174" +
    "\055\uff89\001\002\000\060\037\uffda\040\uffda\052\uffda\053" +
    "\uffda\055\uffda\074\uffda\076\uffda\077\uffda\102\uffda\111\uffda" +
    "\137\uffda\140\uffda\141\uffda\160\uffda\174\uffda\241\uffda\244" +
    "\uffda\257\uffda\266\uffda\334\uffda\336\uffda\u0103\uffda\u0188\uffda" +
    "\001\002\000\060\037\uffd8\040\uffd8\052\uffd8\053\uffd8\055" +
    "\uffd8\074\uffd8\076\uffd8\077\uffd8\102\uffd8\111\uffd8\137\uffd8" +
    "\140\uffd8\141\uffd8\160\uffd8\174\uffd8\241\uffd8\244\uffd8\257" +
    "\uffd8\266\uffd8\334\uffd8\336\uffd8\u0103\uffd8\u0188\uffd8\001\002" +
    "\000\060\037\uffcf\040\uffcf\052\uffcf\053\uffcf\055\uffcf\074" +
    "\uffcf\076\uffcf\077\uffcf\102\uffcf\111\uffcf\137\uffcf\140\uffcf" +
    "\141\uffcf\160\uffcf\174\uffcf\241\uffcf\244\uffcf\257\uffcf\266" +
    "\uffcf\334\uffcf\336\uffcf\u0103\uffcf\u0188\uffcf\001\002\000\060" +
    "\037\uffd2\040\uffd2\052\uffd2\053\uffd2\055\uffd2\074\uffd2\076" +
    "\uffd2\077\uffd2\102\uffd2\111\uffd2\137\uffd2\140\uffd2\141\uffd2" +
    "\160\uffd2\174\uffd2\241\uffd2\244\uffd2\257\uffd2\266\uffd2\334" +
    "\uffd2\336\uffd2\u0103\uffd2\u0188\uffd2\001\002\000\004\055\172" +
    "\001\002\000\060\037\uffdb\040\uffdb\052\uffdb\053\uffdb\055" +
    "\uffdb\074\uffdb\076\uffdb\077\uffdb\102\uffdb\111\uffdb\137\uffdb" +
    "\140\uffdb\141\uffdb\160\uffdb\174\uffdb\241\uffdb\244\uffdb\257" +
    "\uffdb\266\uffdb\334\uffdb\336\uffdb\u0103\uffdb\u0188\uffdb\001\002" +
    "\000\050\037\uffc8\040\uffc8\052\163\055\uffc8\074\uffc8\077" +
    "\uffc8\102\uffc8\137\uffc8\140\uffc8\141\uffc8\160\uffc8\174\uffc8" +
    "\241\uffc8\244\uffc8\257\uffc8\266\uffc8\336\uffc8\u0103\uffc8\u0188" +
    "\uffc8\001\002\000\060\037\uffce\040\uffce\052\uffce\053\uffce" +
    "\055\uffce\074\uffce\076\uffce\077\uffce\102\uffce\111\uffce\137" +
    "\uffce\140\uffce\141\uffce\160\uffce\174\uffce\241\uffce\244\uffce" +
    "\257\uffce\266\uffce\334\uffce\336\uffce\u0103\uffce\u0188\uffce\001" +
    "\002\000\060\037\uffd3\040\uffd3\052\uffd3\053\uffd3\055\uffd3" +
    "\074\uffd3\076\uffd3\077\uffd3\102\uffd3\111\uffd3\137\uffd3\140" +
    "\uffd3\141\uffd3\160\uffd3\174\uffd3\241\uffd3\244\uffd3\257\uffd3" +
    "\266\uffd3\334\uffd3\336\uffd3\u0103\uffd3\u0188\uffd3\001\002\000" +
    "\060\037\uffca\040\uffca\052\uffca\053\uffca\055\uffca\074\uffca" +
    "\076\uffca\077\uffca\102\uffca\111\uffca\137\uffca\140\uffca\141" +
    "\uffca\160\uffca\174\uffca\241\uffca\244\uffca\257\uffca\266\uffca" +
    "\334\uffca\336\uffca\u0103\uffca\u0188\uffca\001\002\000\050\037" +
    "\uffde\040\uffde\052\uffde\055\uffde\074\uffde\077\uffde\102\uffde" +
    "\137\uffde\140\uffde\141\uffde\160\uffde\174\uffde\241\uffde\244" +
    "\uffde\257\uffde\266\uffde\336\uffde\u0103\uffde\u0188\uffde\001\002" +
    "\000\060\037\uffcd\040\uffcd\052\uffcd\053\uffcd\055\uffcd\074" +
    "\uffcd\076\uffcd\077\uffcd\102\uffcd\111\uffcd\137\uffcd\140\uffcd" +
    "\141\uffcd\160\uffcd\174\uffcd\241\uffcd\244\uffcd\257\uffcd\266" +
    "\uffcd\334\uffcd\336\uffcd\u0103\uffcd\u0188\uffcd\001\002\000\060" +
    "\037\uffd7\040\uffd7\052\uffd7\053\uffd7\055\uffd7\074\uffd7\076" +
    "\uffd7\077\uffd7\102\uffd7\111\uffd7\137\uffd7\140\uffd7\141\uffd7" +
    "\160\uffd7\174\uffd7\241\uffd7\244\uffd7\257\uffd7\266\uffd7\334" +
    "\uffd7\336\uffd7\u0103\uffd7\u0188\uffd7\001\002\000\004\016\165" +
    "\001\002\000\046\037\uffdf\040\uffdf\055\uffdf\074\uffdf\077" +
    "\uffdf\102\uffdf\137\uffdf\140\uffdf\141\uffdf\160\uffdf\174\uffdf" +
    "\241\uffdf\244\uffdf\257\uffdf\266\uffdf\336\uffdf\u0103\uffdf\u0188" +
    "\uffdf\001\002\000\006\040\166\055\uffc6\001\002\000\004" +
    "\016\171\001\002\000\004\055\170\001\002\000\046\037" +
    "\uffc9\040\uffc9\055\uffc9\074\uffc9\077\uffc9\102\uffc9\137\uffc9" +
    "\140\uffc9\141\uffc9\160\uffc9\174\uffc9\241\uffc9\244\uffc9\257" +
    "\uffc9\266\uffc9\336\uffc9\u0103\uffc9\u0188\uffc9\001\002\000\004" +
    "\055\uffc7\001\002\000\124\005\uff8d\006\uff8d\007\uff8d\010" +
    "\uff8d\011\uff8d\012\uff8d\020\uff8d\024\uff8d\025\uff8d\026\uff8d" +
    "\027\uff8d\031\uff8d\037\uff8d\040\uff8d\050\uff8d\055\uff8d\061" +
    "\uff8d\062\uff8d\076\uff8d\107\uff8d\112\uff8d\114\uff8d\126\uff8d" +
    "\127\uff8d\131\uff8d\153\uff8d\160\uff8d\161\uff8d\175\uff8d\200" +
    "\uff8d\211\uff8d\214\uff8d\241\uff8d\267\uff8d\311\uff8d\316\uff8d" +
    "\326\uff8d\370\uff8d\u0103\uff8d\u016a\uff8d\u0188\uff8d\001\002\000" +
    "\004\055\uff8b\001\002\000\052\050\143\240\141\244\157" +
    "\303\162\364\146\376\156\u0104\147\u0111\137\u011a\150\u011d" +
    "\135\u0120\153\u0133\151\u013f\140\u0149\136\u014c\142\u0159\155" +
    "\u015a\144\u0189\161\u018a\133\u018b\134\001\002\000\004\055" +
    "\uff8a\001\002\000\004\016\200\001\002\000\060\037\uffdc" +
    "\040\uffdc\052\uffdc\053\uffdc\055\uffdc\074\uffdc\076\uffdc\077" +
    "\uffdc\102\uffdc\111\uffdc\137\uffdc\140\uffdc\141\uffdc\160\uffdc" +
    "\174\uffdc\241\uffdc\244\uffdc\257\uffdc\266\uffdc\334\uffdc\336" +
    "\uffdc\u0103\uffdc\u0188\uffdc\001\002\000\004\055\201\001\002" +
    "\000\060\037\uffc5\040\uffc5\052\uffc5\053\uffc5\055\uffc5\074" +
    "\uffc5\076\uffc5\077\uffc5\102\uffc5\111\uffc5\137\uffc5\140\uffc5" +
    "\141\uffc5\160\uffc5\174\uffc5\241\uffc5\244\uffc5\257\uffc5\266" +
    "\uffc5\334\uffc5\336\uffc5\u0103\uffc5\u0188\uffc5\001\002\000\004" +
    "\053\203\001\002\000\050\037\uffdd\040\uffdd\052\uffdd\055" +
    "\uffdd\074\uffdd\077\uffdd\102\uffdd\137\uffdd\140\uffdd\141\uffdd" +
    "\160\uffdd\174\uffdd\241\uffdd\244\uffdd\257\uffdd\266\uffdd\336" +
    "\uffdd\u0103\uffdd\u0188\uffdd\001\002\000\060\037\uffd4\040\uffd4" +
    "\052\uffd4\053\uffd4\055\uffd4\074\uffd4\076\uffd4\077\uffd4\102" +
    "\uffd4\111\uffd4\137\uffd4\140\uffd4\141\uffd4\160\uffd4\174\uffd4" +
    "\241\uffd4\244\uffd4\257\uffd4\266\uffd4\334\uffd4\336\uffd4\u0103" +
    "\uffd4\u0188\uffd4\001\002\000\060\037\uffd6\040\uffd6\052\uffd6" +
    "\053\uffd6\055\uffd6\074\uffd6\076\uffd6\077\uffd6\102\uffd6\111" +
    "\uffd6\137\uffd6\140\uffd6\141\uffd6\160\uffd6\174\uffd6\241\uffd6" +
    "\244\uffd6\257\uffd6\266\uffd6\334\uffd6\336\uffd6\u0103\uffd6\u0188" +
    "\uffd6\001\002\000\012\010\212\012\034\016\211\050\036" +
    "\001\002\000\004\055\215\001\002\000\124\005\uff8e\006" +
    "\uff8e\007\uff8e\010\uff8e\011\uff8e\012\uff8e\020\uff8e\024\uff8e" +
    "\025\uff8e\026\uff8e\027\uff8e\031\uff8e\037\uff8e\040\uff8e\050" +
    "\uff8e\055\uff8e\061\uff8e\062\uff8e\076\uff8e\107\uff8e\112\uff8e" +
    "\114\uff8e\126\uff8e\127\uff8e\131\uff8e\153\uff8e\160\uff8e\161" +
    "\uff8e\175\uff8e\200\uff8e\211\uff8e\214\uff8e\241\uff8e\267\uff8e" +
    "\311\uff8e\316\uff8e\326\uff8e\370\uff8e\u0103\uff8e\u016a\uff8e\u0188" +
    "\uff8e\001\002\000\004\055\214\001\002\000\004\055\213" +
    "\001\002\000\124\005\uff86\006\uff86\007\uff86\010\uff86\011" +
    "\uff86\012\uff86\020\uff86\024\uff86\025\uff86\026\uff86\027\uff86" +
    "\031\uff86\037\uff86\040\uff86\050\uff86\055\uff86\061\uff86\062" +
    "\uff86\076\uff86\107\uff86\112\uff86\114\uff86\126\uff86\127\uff86" +
    "\131\uff86\153\uff86\160\uff86\161\uff86\175\uff86\200\uff86\211" +
    "\uff86\214\uff86\241\uff86\267\uff86\311\uff86\316\uff86\326\uff86" +
    "\370\uff86\u0103\uff86\u016a\uff86\u0188\uff86\001\002\000\124\005" +
    "\uff87\006\uff87\007\uff87\010\uff87\011\uff87\012\uff87\020\uff87" +
    "\024\uff87\025\uff87\026\uff87\027\uff87\031\uff87\037\uff87\040" +
    "\uff87\050\uff87\055\uff87\061\uff87\062\uff87\076\uff87\107\uff87" +
    "\112\uff87\114\uff87\126\uff87\127\uff87\131\uff87\153\uff87\160" +
    "\uff87\161\uff87\175\uff87\200\uff87\211\uff87\214\uff87\241\uff87" +
    "\267\uff87\311\uff87\316\uff87\326\uff87\370\uff87\u0103\uff87\u016a" +
    "\uff87\u0188\uff87\001\002\000\124\005\uff88\006\uff88\007\uff88" +
    "\010\uff88\011\uff88\012\uff88\020\uff88\024\uff88\025\uff88\026" +
    "\uff88\027\uff88\031\uff88\037\uff88\040\uff88\050\uff88\055\uff88" +
    "\061\uff88\062\uff88\076\uff88\107\uff88\112\uff88\114\uff88\126" +
    "\uff88\127\uff88\131\uff88\153\uff88\160\uff88\161\uff88\175\uff88" +
    "\200\uff88\211\uff88\214\uff88\241\uff88\267\uff88\311\uff88\316" +
    "\uff88\326\uff88\370\uff88\u0103\uff88\u016a\uff88\u0188\uff88\001\002" +
    "\000\010\114\221\153\220\214\217\001\002\000\036\012" +
    "\034\016\113\017\122\020\127\022\107\042\033\050\036" +
    "\052\124\244\125\377\117\u012c\106\u0131\126\u013c\123\u013d" +
    "\121\001\002\000\004\052\227\001\002\000\036\012\034" +
    "\016\113\017\122\020\127\022\107\042\033\050\036\052" +
    "\124\244\125\377\117\u012c\106\u0131\126\u013c\123\u013d\121" +
    "\001\002\000\004\055\223\001\002\000\124\005\uff9b\006" +
    "\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\020\uff9b\024\uff9b" +
    "\025\uff9b\026\uff9b\027\uff9b\031\uff9b\037\uff9b\040\uff9b\050" +
    "\uff9b\055\uff9b\061\uff9b\062\uff9b\076\uff9b\107\uff9b\112\uff9b" +
    "\114\uff9b\126\uff9b\127\uff9b\131\uff9b\153\uff9b\160\uff9b\161" +
    "\uff9b\175\uff9b\200\uff9b\211\uff9b\214\uff9b\241\uff9b\267\uff9b" +
    "\311\uff9b\316\uff9b\326\uff9b\370\uff9b\u0103\uff9b\u016a\uff9b\u0188" +
    "\uff9b\001\002\000\004\061\225\001\002\000\036\012\034" +
    "\016\113\017\122\020\127\022\107\042\033\050\036\052" +
    "\124\244\125\377\117\u012c\106\u0131\126\u013c\123\u013d\121" +
    "\001\002\000\042\037\uff6d\040\uff6d\055\uff6d\061\uff6d\062" +
    "\uff6d\112\uff6d\126\uff6d\127\uff6d\131\uff6d\161\uff6d\200\uff6d" +
    "\211\uff6d\311\uff6d\326\uff6d\u0103\uff6d\u0188\uff6d\001\002\000" +
    "\036\012\034\016\113\017\122\020\127\022\107\042\033" +
    "\050\036\052\124\244\125\377\117\u012c\106\u0131\126\u013c" +
    "\123\u013d\121\001\002\000\006\040\231\055\uff7e\001\002" +
    "\000\036\012\034\016\113\017\122\020\127\022\107\042" +
    "\033\050\036\052\124\244\125\377\117\u012c\106\u0131\126" +
    "\u013c\123\u013d\121\001\002\000\004\055\233\001\002\000" +
    "\042\037\uff6e\040\uff6e\055\uff6e\061\uff6e\062\uff6e\112\uff6e" +
    "\126\uff6e\127\uff6e\131\uff6e\161\uff6e\200\uff6e\211\uff6e\311" +
    "\uff6e\326\uff6e\u0103\uff6e\u0188\uff6e\001\002\000\006\040\231" +
    "\055\uff7e\001\002\000\004\055\uff7f\001\002\000\042\037" +
    "\uff6c\040\uff6c\055\uff6c\061\uff6c\062\uff6c\112\uff6c\126\uff6c" +
    "\127\uff6c\131\uff6c\161\uff6c\200\uff6c\211\uff6c\311\uff6c\326" +
    "\uff6c\u0103\uff6c\u0188\uff6c\001\002\000\012\010\212\012\034" +
    "\016\211\050\036\001\002\000\124\005\uff8f\006\uff8f\007" +
    "\uff8f\010\uff8f\011\uff8f\012\uff8f\020\uff8f\024\uff8f\025\uff8f" +
    "\026\uff8f\027\uff8f\031\uff8f\037\uff8f\040\uff8f\050\uff8f\055" +
    "\uff8f\061\uff8f\062\uff8f\076\uff8f\107\uff8f\112\uff8f\114\uff8f" +
    "\126\uff8f\127\uff8f\131\uff8f\153\uff8f\160\uff8f\161\uff8f\175" +
    "\uff8f\200\uff8f\211\uff8f\214\uff8f\241\uff8f\267\uff8f\311\uff8f" +
    "\316\uff8f\326\uff8f\370\uff8f\u0103\uff8f\u016a\uff8f\u0188\uff8f\001" +
    "\002\000\012\010\212\012\034\016\211\050\036\001\002" +
    "\000\124\005\uff90\006\uff90\007\uff90\010\uff90\011\uff90\012" +
    "\uff90\020\uff90\024\uff90\025\uff90\026\uff90\027\uff90\031\uff90" +
    "\037\uff90\040\uff90\050\uff90\055\uff90\061\uff90\062\uff90\076" +
    "\uff90\107\uff90\112\uff90\114\uff90\126\uff90\127\uff90\131\uff90" +
    "\153\uff90\160\uff90\161\uff90\175\uff90\200\uff90\211\uff90\214" +
    "\uff90\241\uff90\267\uff90\311\uff90\316\uff90\326\uff90\370\uff90" +
    "\u0103\uff90\u016a\uff90\u0188\uff90\001\002\000\012\010\212\012" +
    "\034\016\211\050\036\001\002\000\124\005\uff91\006\uff91" +
    "\007\uff91\010\uff91\011\uff91\012\uff91\020\uff91\024\uff91\025" +
    "\uff91\026\uff91\027\uff91\031\uff91\037\uff91\040\uff91\050\uff91" +
    "\055\uff91\061\uff91\062\uff91\076\uff91\107\uff91\112\uff91\114" +
    "\uff91\126\uff91\127\uff91\131\uff91\153\uff91\160\uff91\161\uff91" +
    "\175\uff91\200\uff91\211\uff91\214\uff91\241\uff91\267\uff91\311" +
    "\uff91\316\uff91\326\uff91\370\uff91\u0103\uff91\u016a\uff91\u0188\uff91" +
    "\001\002\000\040\012\uff84\016\uff84\017\uff84\020\uff84\022" +
    "\uff84\042\uff84\050\uff84\052\102\241\105\244\uff84\377\uff84" +
    "\u012c\uff84\u0131\uff84\u013c\uff84\u013d\uff84\001\002\000\040\012" +
    "\uff84\016\uff84\017\uff84\020\uff84\022\uff84\042\uff84\050\uff84" +
    "\052\102\241\105\244\uff84\377\uff84\u012c\uff84\u0131\uff84\u013c" +
    "\uff84\u013d\uff84\001\002\000\036\037\uff7d\040\uff7d\055\uff7d" +
    "\112\uff7d\126\uff7d\127\uff7d\131\uff7d\161\uff7d\200\uff7d\211" +
    "\uff7d\311\uff7d\326\uff7d\u0103\uff7d\u0188\uff7d\001\002\000\036" +
    "\037\uff7a\040\uff7a\055\uff7a\112\uff7a\126\uff7a\127\uff7a\131" +
    "\uff7a\161\uff7a\200\uff7a\211\uff7a\311\uff7a\326\uff7a\u0103\uff7a" +
    "\u0188\uff7a\001\002\000\036\037\uff7b\040\uff7b\055\uff7b\112" +
    "\uff7b\126\uff7b\127\uff7b\131\uff7b\161\uff7b\200\uff7b\211\uff7b" +
    "\311\uff7b\326\uff7b\u0103\uff7b\u0188\uff7b\001\002\000\126\005" +
    "\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\020\uffe5" +
    "\024\uffe5\025\uffe5\026\uffe5\027\uffe5\031\uffe5\037\uffe5\040" +
    "\uffe5\050\uffe5\052\uffe5\055\uffe5\061\uffe5\062\uffe5\076\uffe5" +
    "\107\uffe5\112\uffe5\114\uffe5\126\uffe5\127\uffe5\131\uffe5\153" +
    "\uffe5\160\uffe5\161\uffe5\175\uffe5\200\uffe5\211\uffe5\214\uffe5" +
    "\241\uffe5\267\uffe5\311\uffe5\316\uffe5\326\uffe5\370\uffe5\u0103" +
    "\uffe5\u016a\uffe5\u0188\uffe5\001\002\000\006\012\034\050\036" +
    "\001\002\000\126\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011" +
    "\uffe4\012\uffe4\020\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4" +
    "\031\uffe4\037\uffe4\040\uffe4\050\uffe4\052\uffe4\055\uffe4\061" +
    "\uffe4\062\uffe4\076\uffe4\107\uffe4\112\uffe4\114\uffe4\126\uffe4" +
    "\127\uffe4\131\uffe4\153\uffe4\160\uffe4\161\uffe4\175\uffe4\200" +
    "\uffe4\211\uffe4\214\uffe4\241\uffe4\267\uffe4\311\uffe4\316\uffe4" +
    "\326\uffe4\370\uffe4\u0103\uffe4\u016a\uffe4\u0188\uffe4\001\002\000" +
    "\036\012\034\016\113\017\122\020\127\022\107\042\033" +
    "\050\036\052\124\244\125\377\117\u012c\106\u0131\126\u013c" +
    "\123\u013d\121\001\002\000\036\012\034\016\113\017\122" +
    "\020\127\022\107\042\033\050\036\052\124\244\125\377" +
    "\117\u012c\106\u0131\126\u013c\123\u013d\121\001\002\000\114" +
    "\005\uffa3\012\uffa3\020\uffa3\024\uffa3\025\uffa3\026\uffa3\027" +
    "\uffa3\031\uffa3\037\uffa3\040\uffa3\050\uffa3\055\uffa3\061\uffa3" +
    "\062\uffa3\076\uffa3\107\uffa3\112\uffa3\114\uffa3\126\uffa3\127" +
    "\uffa3\131\uffa3\153\uffa3\160\uffa3\161\uffa3\175\uffa3\200\uffa3" +
    "\211\uffa3\214\uffa3\241\uffa3\267\uffa3\311\uffa3\316\uffa3\326" +
    "\uffa3\370\uffa3\u0103\uffa3\u016a\uffa3\u0188\uffa3\001\002\000\120" +
    "\005\uffa0\006\256\007\255\012\uffa0\020\uffa0\024\uffa0\025" +
    "\uffa0\026\uffa0\027\uffa0\031\uffa0\037\uffa0\040\uffa0\050\uffa0" +
    "\055\uffa0\061\uffa0\062\uffa0\076\uffa0\107\uffa0\112\uffa0\114" +
    "\uffa0\126\uffa0\127\uffa0\131\uffa0\153\uffa0\160\uffa0\161\uffa0" +
    "\175\uffa0\200\uffa0\211\uffa0\214\uffa0\241\uffa0\267\uffa0\311" +
    "\uffa0\316\uffa0\326\uffa0\370\uffa0\u0103\uffa0\u016a\uffa0\u0188\uffa0" +
    "\001\002\000\114\005\uffa2\012\uffa2\020\uffa2\024\uffa2\025" +
    "\uffa2\026\uffa2\027\uffa2\031\uffa2\037\uffa2\040\uffa2\050\uffa2" +
    "\055\uffa2\061\uffa2\062\uffa2\076\uffa2\107\uffa2\112\uffa2\114" +
    "\uffa2\126\uffa2\127\uffa2\131\uffa2\153\uffa2\160\uffa2\161\uffa2" +
    "\175\uffa2\200\uffa2\211\uffa2\214\uffa2\241\uffa2\267\uffa2\311" +
    "\uffa2\316\uffa2\326\uffa2\370\uffa2\u0103\uffa2\u016a\uffa2\u0188\uffa2" +
    "\001\002\000\120\005\uffa0\006\256\007\255\012\uffa0\020" +
    "\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\031\uffa0\037\uffa0" +
    "\040\uffa0\050\uffa0\055\uffa0\061\uffa0\062\uffa0\076\uffa0\107" +
    "\uffa0\112\uffa0\114\uffa0\126\uffa0\127\uffa0\131\uffa0\153\uffa0" +
    "\160\uffa0\161\uffa0\175\uffa0\200\uffa0\211\uffa0\214\uffa0\241" +
    "\uffa0\267\uffa0\311\uffa0\316\uffa0\326\uffa0\370\uffa0\u0103\uffa0" +
    "\u016a\uffa0\u0188\uffa0\001\002\000\114\005\uffa1\012\uffa1\020" +
    "\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\031\uffa1\037\uffa1" +
    "\040\uffa1\050\uffa1\055\uffa1\061\uffa1\062\uffa1\076\uffa1\107" +
    "\uffa1\112\uffa1\114\uffa1\126\uffa1\127\uffa1\131\uffa1\153\uffa1" +
    "\160\uffa1\161\uffa1\175\uffa1\200\uffa1\211\uffa1\214\uffa1\241" +
    "\uffa1\267\uffa1\311\uffa1\316\uffa1\326\uffa1\370\uffa1\u0103\uffa1" +
    "\u016a\uffa1\u0188\uffa1\001\002\000\036\012\034\016\113\017" +
    "\122\020\127\022\107\042\033\050\036\052\124\244\125" +
    "\377\117\u012c\106\u0131\126\u013c\123\u013d\121\001\002\000" +
    "\120\005\uff9f\006\uff9f\007\uff9f\012\uff9f\020\uff9f\024\uff9f" +
    "\025\uff9f\026\uff9f\027\uff9f\031\uff9f\037\uff9f\040\uff9f\050" +
    "\uff9f\055\uff9f\061\uff9f\062\uff9f\076\uff9f\107\uff9f\112\uff9f" +
    "\114\uff9f\126\uff9f\127\uff9f\131\uff9f\153\uff9f\160\uff9f\161" +
    "\uff9f\175\uff9f\200\uff9f\211\uff9f\214\uff9f\241\uff9f\267\uff9f" +
    "\311\uff9f\316\uff9f\326\uff9f\370\uff9f\u0103\uff9f\u016a\uff9f\u0188" +
    "\uff9f\001\002\000\036\012\034\016\113\017\122\020\127" +
    "\022\107\042\033\050\036\052\124\244\125\377\117\u012c" +
    "\106\u0131\126\u013c\123\u013d\121\001\002\000\124\005\uff9c" +
    "\006\uff9c\007\uff9c\010\266\011\264\012\uff9c\020\uff9c\024" +
    "\uff9c\025\uff9c\026\uff9c\027\uff9c\031\uff9c\037\uff9c\040\uff9c" +
    "\050\uff9c\055\uff9c\061\uff9c\062\uff9c\076\uff9c\107\uff9c\112" +
    "\uff9c\114\uff9c\126\uff9c\127\uff9c\131\uff9c\153\uff9c\160\uff9c" +
    "\161\uff9c\175\uff9c\200\uff9c\211\uff9c\214\uff9c\241\uff9c\267" +
    "\uff9c\311\uff9c\316\uff9c\326\uff9c\370\uff9c\u0103\uff9c\u016a\uff9c" +
    "\u0188\uff9c\001\002\000\120\005\uff9e\006\uff9e\007\uff9e\012" +
    "\uff9e\020\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\031\uff9e" +
    "\037\uff9e\040\uff9e\050\uff9e\055\uff9e\061\uff9e\062\uff9e\076" +
    "\uff9e\107\uff9e\112\uff9e\114\uff9e\126\uff9e\127\uff9e\131\uff9e" +
    "\153\uff9e\160\uff9e\161\uff9e\175\uff9e\200\uff9e\211\uff9e\214" +
    "\uff9e\241\uff9e\267\uff9e\311\uff9e\316\uff9e\326\uff9e\370\uff9e" +
    "\u0103\uff9e\u016a\uff9e\u0188\uff9e\001\002\000\124\005\uff9c\006" +
    "\uff9c\007\uff9c\010\266\011\264\012\uff9c\020\uff9c\024\uff9c" +
    "\025\uff9c\026\uff9c\027\uff9c\031\uff9c\037\uff9c\040\uff9c\050" +
    "\uff9c\055\uff9c\061\uff9c\062\uff9c\076\uff9c\107\uff9c\112\uff9c" +
    "\114\uff9c\126\uff9c\127\uff9c\131\uff9c\153\uff9c\160\uff9c\161" +
    "\uff9c\175\uff9c\200\uff9c\211\uff9c\214\uff9c\241\uff9c\267\uff9c" +
    "\311\uff9c\316\uff9c\326\uff9c\370\uff9c\u0103\uff9c\u016a\uff9c\u0188" +
    "\uff9c\001\002\000\120\005\uff9d\006\uff9d\007\uff9d\012\uff9d" +
    "\020\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\031\uff9d\037" +
    "\uff9d\040\uff9d\050\uff9d\055\uff9d\061\uff9d\062\uff9d\076\uff9d" +
    "\107\uff9d\112\uff9d\114\uff9d\126\uff9d\127\uff9d\131\uff9d\153" +
    "\uff9d\160\uff9d\161\uff9d\175\uff9d\200\uff9d\211\uff9d\214\uff9d" +
    "\241\uff9d\267\uff9d\311\uff9d\316\uff9d\326\uff9d\370\uff9d\u0103" +
    "\uff9d\u016a\uff9d\u0188\uff9d\001\002\000\036\012\uff74\016\uff74" +
    "\017\uff74\020\uff74\022\uff74\042\uff74\050\uff74\052\uff74\244" +
    "\uff74\377\uff74\u012c\uff74\u0131\uff74\u013c\uff74\u013d\uff74\001\002" +
    "\000\010\114\221\153\220\214\217\001\002\000\036\012" +
    "\uff75\016\uff75\017\uff75\020\uff75\022\uff75\042\uff75\050\uff75" +
    "\052\uff75\244\uff75\377\uff75\u012c\uff75\u0131\uff75\u013c\uff75\u013d" +
    "\uff75\001\002\000\036\012\uff76\016\uff76\017\uff76\020\uff76" +
    "\022\uff76\042\uff76\050\uff76\052\uff76\244\uff76\377\uff76\u012c" +
    "\uff76\u0131\uff76\u013c\uff76\u013d\uff76\001\002\000\036\012\034" +
    "\016\113\017\122\020\127\022\107\042\033\050\036\052" +
    "\124\244\125\377\117\u012c\106\u0131\126\u013c\123\u013d\121" +
    "\001\002\000\036\012\uff72\016\uff72\017\uff72\020\uff72\022" +
    "\uff72\042\uff72\050\uff72\052\uff72\244\uff72\377\uff72\u012c\uff72" +
    "\u0131\uff72\u013c\uff72\u013d\uff72\001\002\000\036\012\uff77\016" +
    "\uff77\017\uff77\020\uff77\022\uff77\042\uff77\050\uff77\052\uff77" +
    "\244\uff77\377\uff77\u012c\uff77\u0131\uff77\u013c\uff77\u013d\uff77\001" +
    "\002\000\036\012\uff73\016\uff73\017\uff73\020\uff73\022\uff73" +
    "\042\uff73\050\uff73\052\uff73\244\uff73\377\uff73\u012c\uff73\u0131" +
    "\uff73\u013c\uff73\u013d\uff73\001\002\000\042\037\uff78\040\uff78" +
    "\055\uff78\061\uff78\062\uff78\112\uff78\126\uff78\127\uff78\131" +
    "\uff78\161\uff78\200\uff78\211\uff78\311\uff78\326\uff78\u0103\uff78" +
    "\u0188\uff78\001\002\000\006\241\105\244\uff84\001\002\000" +
    "\004\244\306\001\002\000\042\037\uff70\040\uff70\055\uff70" +
    "\061\uff70\062\uff70\112\uff70\126\uff70\127\uff70\131\uff70\161" +
    "\uff70\200\uff70\211\uff70\311\uff70\326\uff70\u0103\uff70\u0188\uff70" +
    "\001\002\000\042\037\uff71\040\uff71\055\uff71\061\uff71\062" +
    "\uff71\112\uff71\126\uff71\127\uff71\131\uff71\161\uff71\200\uff71" +
    "\211\uff71\311\uff71\326\uff71\u0103\uff71\u0188\uff71\001\002\000" +
    "\042\037\uff6f\040\uff6f\055\uff6f\061\uff6f\062\uff6f\112\uff6f" +
    "\126\uff6f\127\uff6f\131\uff6f\161\uff6f\200\uff6f\211\uff6f\311" +
    "\uff6f\326\uff6f\u0103\uff6f\u0188\uff6f\001\002\000\012\010\212" +
    "\012\034\016\211\050\036\001\002\000\124\005\uff92\006" +
    "\uff92\007\uff92\010\uff92\011\uff92\012\uff92\020\uff92\024\uff92" +
    "\025\uff92\026\uff92\027\uff92\031\uff92\037\uff92\040\uff92\050" +
    "\uff92\055\uff92\061\uff92\062\uff92\076\uff92\107\uff92\112\uff92" +
    "\114\uff92\126\uff92\127\uff92\131\uff92\153\uff92\160\uff92\161" +
    "\uff92\175\uff92\200\uff92\211\uff92\214\uff92\241\uff92\267\uff92" +
    "\311\uff92\316\uff92\326\uff92\370\uff92\u0103\uff92\u016a\uff92\u0188" +
    "\uff92\001\002\000\004\055\314\001\002\000\042\037\uff79" +
    "\040\uff79\055\uff79\061\245\062\246\112\uff79\126\uff79\127" +
    "\uff79\131\uff79\161\uff79\200\uff79\211\uff79\311\uff79\326\uff79" +
    "\u0103\uff79\u0188\uff79\001\002\000\036\037\uff7c\040\uff7c\055" +
    "\uff7c\112\uff7c\126\uff7c\127\uff7c\131\uff7c\161\uff7c\200\uff7c" +
    "\211\uff7c\311\uff7c\326\uff7c\u0103\uff7c\u0188\uff7c\001\002\000" +
    "\014\037\uff35\040\317\326\uff35\u0103\uff35\u0188\uff35\001\002" +
    "\000\006\012\034\050\036\001\002\000\012\037\uff38\326" +
    "\uff38\u0103\uff38\u0188\uff38\001\002\000\014\037\uff35\040\317" +
    "\326\uff35\u0103\uff35\u0188\uff35\001\002\000\012\037\uff36\326" +
    "\uff36\u0103\uff36\u0188\uff36\001\002\000\136\005\uffe8\006\uffe8" +
    "\007\uffe8\010\uffe8\011\uffe8\012\uffe8\020\uffe8\024\uffe8\025" +
    "\uffe8\026\uffe8\027\uffe8\031\uffe8\037\uffe8\040\uffe8\050\uffe8" +
    "\052\uffe8\055\uffe8\060\uffe8\061\uffe8\062\uffe8\066\uffe8\076" +
    "\uffe8\107\uffe8\112\uffe8\114\uffe8\126\uffe8\127\uffe8\131\uffe8" +
    "\153\uffe8\160\uffe8\161\uffe8\175\uffe8\200\uffe8\211\uffe8\214" +
    "\uffe8\241\uffe8\267\uffe8\306\uffe8\311\uffe8\316\uffe8\326\uffe8" +
    "\370\uffe8\u0103\uffe8\u015f\uffe8\u016a\uffe8\u0188\uffe8\001\002\000" +
    "\006\012\034\050\036\001\002\000\154\005\uffe9\006\uffe9" +
    "\007\uffe9\010\uffe9\011\uffe9\012\uffe9\020\uffe9\024\uffe9\025" +
    "\uffe9\026\uffe9\027\uffe9\031\uffe9\037\uffe9\040\uffe9\041\330" +
    "\050\uffe9\052\uffe9\055\uffe9\060\uffe9\061\uffe9\062\uffe9\066" +
    "\uffe9\076\uffe9\077\uffe9\102\uffe9\107\uffe9\112\uffe9\114\uffe9" +
    "\126\uffe9\127\uffe9\131\uffe9\141\uffe9\153\uffe9\160\uffe9\161" +
    "\uffe9\174\uffe9\175\uffe9\200\uffe9\211\uffe9\214\uffe9\241\uffe9" +
    "\266\uffe9\267\uffe9\306\uffe9\311\uffe9\316\uffe9\326\uffe9\336" +
    "\uffe9\370\uffe9\u0103\uffe9\u015f\uffe9\u016a\uffe9\u0188\uffe9\001\002" +
    "\000\136\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012" +
    "\uffe7\020\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\031\uffe7" +
    "\037\uffe7\040\uffe7\050\uffe7\052\uffe7\055\uffe7\060\uffe7\061" +
    "\uffe7\062\uffe7\066\uffe7\076\uffe7\107\uffe7\112\uffe7\114\uffe7" +
    "\126\uffe7\127\uffe7\131\uffe7\153\uffe7\160\uffe7\161\uffe7\175" +
    "\uffe7\200\uffe7\211\uffe7\214\uffe7\241\uffe7\267\uffe7\306\uffe7" +
    "\311\uffe7\316\uffe7\326\uffe7\370\uffe7\u0103\uffe7\u015f\uffe7\u016a" +
    "\uffe7\u0188\uffe7\001\002\000\152\005\uffeb\006\uffeb\007\uffeb" +
    "\010\uffeb\011\uffeb\012\uffeb\020\uffeb\024\uffeb\025\uffeb\026" +
    "\uffeb\027\uffeb\031\uffeb\037\uffeb\040\uffeb\050\uffeb\052\uffeb" +
    "\055\uffeb\060\uffeb\061\uffeb\062\uffeb\066\uffeb\076\uffeb\077" +
    "\uffeb\102\uffeb\107\uffeb\112\uffeb\114\uffeb\126\uffeb\127\uffeb" +
    "\131\uffeb\141\uffeb\153\uffeb\160\uffeb\161\uffeb\174\uffeb\175" +
    "\uffeb\200\uffeb\211\uffeb\214\uffeb\241\uffeb\266\uffeb\267\uffeb" +
    "\306\uffeb\311\uffeb\316\uffeb\326\uffeb\336\uffeb\370\uffeb\u0103" +
    "\uffeb\u015f\uffeb\u016a\uffeb\u0188\uffeb\001\002\000\006\012\034" +
    "\050\036\001\002\000\152\005\uffea\006\uffea\007\uffea\010" +
    "\uffea\011\uffea\012\uffea\020\uffea\024\uffea\025\uffea\026\uffea" +
    "\027\uffea\031\uffea\037\uffea\040\uffea\050\uffea\052\uffea\055" +
    "\uffea\060\uffea\061\uffea\062\uffea\066\uffea\076\uffea\077\uffea" +
    "\102\uffea\107\uffea\112\uffea\114\uffea\126\uffea\127\uffea\131" +
    "\uffea\141\uffea\153\uffea\160\uffea\161\uffea\174\uffea\175\uffea" +
    "\200\uffea\211\uffea\214\uffea\241\uffea\266\uffea\267\uffea\306" +
    "\uffea\311\uffea\316\uffea\326\uffea\336\uffea\370\uffea\u0103\uffea" +
    "\u015f\uffea\u016a\uffea\u0188\uffea\001\002\000\010\002\ufffc\132" +
    "\ufffc\166\ufffc\001\002\000\010\037\022\u0103\023\u0188\024" +
    "\001\002\000\022\002\uffff\003\014\066\004\111\017\132" +
    "\uffff\166\uffff\262\012\302\010\001\002\000\010\002\ufffb" +
    "\132\ufffb\166\ufffb\001\002\000\016\003\014\066\004\111" +
    "\017\146\341\262\012\302\342\001\002\000\010\037\022" +
    "\u0103\023\u0188\024\001\002\000\006\132\362\166\357\001" +
    "\002\000\006\242\027\245\025\001\002\000\006\012\034" +
    "\050\036\001\002\000\020\003\014\066\004\111\017\132" +
    "\uffff\166\uffff\262\012\302\010\001\002\000\020\003\014" +
    "\066\004\111\017\132\uffff\166\uffff\262\012\302\010\001" +
    "\002\000\020\003\014\066\004\111\017\132\uffff\166\uffff" +
    "\262\012\302\010\001\002\000\006\132\ufff9\166\ufff9\001" +
    "\002\000\006\132\ufffa\166\ufffa\001\002\000\006\132\ufff8" +
    "\166\ufff8\001\002\000\010\037\022\u0103\023\u0188\024\001" +
    "\002\000\020\003\014\066\004\111\017\132\uffff\166\uffff" +
    "\262\012\302\010\001\002\000\006\132\ufff7\166\ufff7\001" +
    "\002\000\010\012\034\042\033\050\036\001\002\000\010" +
    "\037\ufe6b\u0103\ufe6b\u0188\ufe6b\001\002\000\010\037\022\u0103" +
    "\023\u0188\024\001\002\000\016\037\ufe61\242\027\245\025" +
    "\334\ufe61\u0103\ufe61\u0188\ufe61\001\002\000\010\037\022\u0103" +
    "\023\u0188\024\001\002\000\022\002\ufff1\003\ufff1\066\ufff1" +
    "\111\ufff1\132\ufff1\166\ufff1\262\ufff1\302\ufff1\001\002\000" +
    "\014\037\ufe5a\242\027\245\025\u0103\ufe5a\u0188\ufe5a\001\002" +
    "\000\010\037\ufe5c\u0103\ufe5c\u0188\ufe5c\001\002\000\016\012" +
    "\034\037\ufe66\042\033\050\036\u0103\ufe66\u0188\ufe66\001\002" +
    "\000\012\037\ufe68\334\ufe68\u0103\ufe68\u0188\ufe68\001\002\000" +
    "\012\037\ufe67\334\ufe67\u0103\ufe67\u0188\ufe67\001\002\000\010" +
    "\037\ufe5b\u0103\ufe5b\u0188\ufe5b\001\002\000\022\002\ufe6d\003" +
    "\ufe6d\066\ufe6d\111\ufe6d\132\ufe6d\166\ufe6d\262\ufe6d\302\ufe6d" +
    "\001\002\000\012\037\ufe5f\334\374\u0103\ufe5f\u0188\ufe5f\001" +
    "\002\000\020\012\034\037\ufe66\042\033\050\036\334\ufe66" +
    "\u0103\ufe66\u0188\ufe66\001\002\000\012\037\ufe62\334\ufe62\u0103" +
    "\ufe62\u0188\ufe62\001\002\000\004\052\376\001\002\000\010" +
    "\037\ufe63\u0103\ufe63\u0188\ufe63\001\002\000\004\u018c\377\001" +
    "\002\000\004\005\u0100\001\002\000\006\255\u0103\u015f\u0101" +
    "\001\002\000\004\055\ufe5e\001\002\000\004\055\u0104\001" +
    "\002\000\004\055\ufe5d\001\002\000\010\037\ufe60\u0103\ufe60" +
    "\u0188\ufe60\001\002\000\022\002\ufe6c\003\ufe6c\066\ufe6c\111" +
    "\ufe6c\132\ufe6c\166\ufe6c\262\ufe6c\302\ufe6c\001\002\000\016" +
    "\003\014\066\004\111\017\146\341\262\012\302\342\001" +
    "\002\000\006\132\ufff6\166\ufff6\001\002\000\022\002\ufff3" +
    "\003\ufff3\066\ufff3\111\ufff3\132\ufff3\166\ufff3\262\ufff3\302" +
    "\ufff3\001\002\000\010\037\ufe95\u0103\ufe95\u0188\ufe95\001\002" +
    "\000\010\037\ufe91\u0103\ufe91\u0188\ufe91\001\002\000\004\115" +
    "\u022e\001\002\000\010\012\034\050\036\221\u0226\001\002" +
    "\000\006\012\034\050\036\001\002\000\010\037\ufe94\u0103" +
    "\ufe94\u0188\ufe94\001\002\000\010\037\ufe93\u0103\ufe93\u0188\ufe93" +
    "\001\002\000\010\037\ufe96\u0103\ufe96\u0188\ufe96\001\002\000" +
    "\006\012\034\050\036\001\002\000\006\012\034\050\036" +
    "\001\002\000\010\037\ufe92\u0103\ufe92\u0188\ufe92\001\002\000" +
    "\004\066\u0115\001\002\000\004\115\ufe17\001\002\000\006" +
    "\052\u0118\076\ufe88\001\002\000\004\076\ufe89\001\002\000" +
    "\006\012\034\050\036\001\002\000\004\076\u011a\001\002" +
    "\000\004\157\u011b\001\002\000\046\010\uff5e\012\uff5e\016" +
    "\uff5e\017\uff5e\020\uff5e\022\uff5e\042\uff5e\050\uff5e\052\uff5e" +
    "\237\uff5e\244\uff5e\275\u011d\354\u011e\377\uff5e\u012c\uff5e\u0131" +
    "\uff5e\u013c\uff5e\u013d\uff5e\001\002\000\010\037\ufe8a\u0103\ufe8a" +
    "\u0188\ufe8a\001\002\000\042\010\uff5f\012\uff5f\016\uff5f\017" +
    "\uff5f\020\uff5f\022\uff5f\042\uff5f\050\uff5f\052\uff5f\237\uff5f" +
    "\244\uff5f\377\uff5f\u012c\uff5f\u0131\uff5f\u013c\uff5f\u013d\uff5f\001" +
    "\002\000\042\010\uff60\012\uff60\016\uff60\017\uff60\020\uff60" +
    "\022\uff60\042\uff60\050\uff60\052\uff60\237\uff60\244\uff60\377" +
    "\uff60\u012c\uff60\u0131\uff60\u013c\uff60\u013d\uff60\001\002\000\042" +
    "\010\uff82\012\uff82\016\uff82\017\uff82\020\uff82\022\uff82\042" +
    "\uff82\050\uff82\052\uff82\237\054\244\uff82\377\uff82\u012c\uff82" +
    "\u0131\uff82\u013c\uff82\u013d\uff82\001\002\000\040\010\u0123\012" +
    "\034\016\113\017\122\020\127\022\107\042\033\050\036" +
    "\052\124\244\125\377\117\u012c\106\u0131\126\u013c\123\u013d" +
    "\121\001\002\000\036\012\034\020\u012a\037\uffa6\040\uffa6" +
    "\050\036\055\uffa6\076\u0129\107\uffa6\126\uffa6\131\uffa6\311" +
    "\uffa6\326\uffa6\u0103\uffa6\u0188\uffa6\001\002\000\024\037\uff2a" +
    "\055\uff2a\107\u012f\126\uff2a\131\uff2a\311\uff2a\326\uff2a\u0103" +
    "\uff2a\u0188\uff2a\001\002\000\026\037\uff66\040\u0124\055\uff66" +
    "\107\uff66\126\uff66\131\uff66\311\uff66\326\uff66\u0103\uff66\u0188" +
    "\uff66\001\002\000\036\012\034\016\113\017\122\020\127" +
    "\022\107\042\033\050\036\052\124\244\125\377\117\u012c" +
    "\106\u0131\126\u013c\123\u013d\121\001\002\000\024\037\uff68" +
    "\055\uff68\107\uff68\126\uff68\131\uff68\311\uff68\326\uff68\u0103" +
    "\uff68\u0188\uff68\001\002\000\036\012\034\020\u012a\037\uffa6" +
    "\040\uffa6\050\036\055\uffa6\076\u0129\107\uffa6\126\uffa6\131" +
    "\uffa6\311\uffa6\326\uffa6\u0103\uffa6\u0188\uffa6\001\002\000\042" +
    "\037\uffa5\040\uffa5\055\uffa5\107\uffa5\112\uffa5\126\uffa5\127" +
    "\uffa5\131\uffa5\161\uffa5\200\uffa5\211\uffa5\311\uffa5\326\uffa5" +
    "\u0103\uffa5\u015f\uffa5\u0188\uffa5\001\002\000\042\037\uffa7\040" +
    "\uffa7\055\uffa7\107\uffa7\112\uffa7\126\uffa7\127\uffa7\131\uffa7" +
    "\161\uffa7\200\uffa7\211\uffa7\311\uffa7\326\uffa7\u0103\uffa7\u015f" +
    "\uffa7\u0188\uffa7\001\002\000\010\012\034\020\u012a\050\036" +
    "\001\002\000\042\037\uffa4\040\uffa4\055\uffa4\107\uffa4\112" +
    "\uffa4\126\uffa4\127\uffa4\131\uffa4\161\uffa4\200\uffa4\211\uffa4" +
    "\311\uffa4\326\uffa4\u0103\uffa4\u015f\uffa4\u0188\uffa4\001\002\000" +
    "\026\037\uff66\040\u0124\055\uff66\107\uff66\126\uff66\131\uff66" +
    "\311\uff66\326\uff66\u0103\uff66\u0188\uff66\001\002\000\024\037" +
    "\uff67\055\uff67\107\uff67\126\uff67\131\uff67\311\uff67\326\uff67" +
    "\u0103\uff67\u0188\uff67\001\002\000\042\037\uffa8\040\uffa8\055" +
    "\uffa8\107\uffa8\112\uffa8\126\uffa8\127\uffa8\131\uffa8\161\uffa8" +
    "\200\uffa8\211\uffa8\311\uffa8\326\uffa8\u0103\uffa8\u015f\uffa8\u0188" +
    "\uffa8\001\002\000\022\037\uff6a\055\uff6a\126\uff6a\131\uff6a" +
    "\311\uff6a\326\100\u0103\uff6a\u0188\uff6a\001\002\000\006\012" +
    "\034\050\036\001\002\000\046\012\034\020\u012a\037\uffa6" +
    "\040\uffa6\050\036\055\uffa6\076\u0129\112\uffa6\126\uffa6\127" +
    "\uffa6\131\uffa6\161\uffa6\200\uffa6\211\uffa6\311\uffa6\326\uffa6" +
    "\u0103\uffa6\u0188\uffa6\001\002\000\036\037\uff26\040\uff26\055" +
    "\uff26\112\u0137\126\uff26\127\u0135\131\uff26\161\u0132\200\uff21" +
    "\211\u0134\311\uff26\326\uff26\u0103\uff26\u0188\uff26\001\002\000" +
    "\004\200\uff25\001\002\000\004\200\u0141\001\002\000\006" +
    "\200\uff1f\314\u0138\001\002\000\006\200\uff1f\314\u0138\001" +
    "\002\000\024\037\uff28\040\u013a\055\uff28\126\uff28\131\uff28" +
    "\311\uff28\326\uff28\u0103\uff28\u0188\uff28\001\002\000\006\200" +
    "\uff1f\314\u0138\001\002\000\004\200\uff20\001\002\000\004" +
    "\200\uff22\001\002\000\006\012\034\050\036\001\002\000" +
    "\022\037\uff2b\055\uff2b\126\uff2b\131\uff2b\311\uff2b\326\uff2b" +
    "\u0103\uff2b\u0188\uff2b\001\002\000\044\012\034\020\u012a\037" +
    "\uffa6\050\036\055\uffa6\076\u0129\112\uffa6\126\uffa6\127\uffa6" +
    "\131\uffa6\161\uffa6\200\uffa6\211\uffa6\311\uffa6\326\uffa6\u0103" +
    "\uffa6\u0188\uffa6\001\002\000\034\037\uff26\055\uff26\112\u0137" +
    "\126\uff26\127\u0135\131\uff26\161\u0132\200\uff21\211\u0134\311" +
    "\uff26\326\uff26\u0103\uff26\u0188\uff26\001\002\000\022\037\uff29" +
    "\055\uff29\126\uff29\131\uff29\311\uff29\326\uff29\u0103\uff29\u0188" +
    "\uff29\001\002\000\004\200\uff24\001\002\000\004\200\uff23" +
    "\001\002\000\006\012\034\050\036\001\002\000\014\012" +
    "\034\020\u012a\050\036\076\u0129\u015f\uffa6\001\002\000\004" +
    "\u015f\u0144\001\002\000\040\012\uff84\016\uff84\017\uff84\020" +
    "\uff84\022\uff84\042\uff84\050\uff84\052\102\241\105\244\uff84" +
    "\377\uff84\u012c\uff84\u0131\uff84\u013c\uff84\u013d\uff84\001\002\000" +
    "\036\037\uff26\040\uff26\055\uff26\112\u0137\126\uff26\127\u0135" +
    "\131\uff26\161\u0132\200\uff21\211\u0134\311\uff26\326\uff26\u0103" +
    "\uff26\u0188\uff26\001\002\000\024\037\uff27\040\uff27\055\uff27" +
    "\126\uff27\131\uff27\311\uff27\326\uff27\u0103\uff27\u0188\uff27\001" +
    "\002\000\020\037\uff51\055\uff51\126\u0149\131\uff51\311\uff51" +
    "\u0103\uff51\u0188\uff51\001\002\000\016\037\uff5c\055\uff5c\131" +
    "\u0150\311\uff5c\u0103\uff5c\u0188\uff5c\001\002\000\004\130\u014a" +
    "\001\002\000\036\012\034\016\113\017\122\020\127\022" +
    "\107\042\033\050\036\052\124\244\125\377\117\u012c\106" +
    "\u0131\126\u013c\123\u013d\121\001\002\000\020\037\uff4f\040" +
    "\u014c\055\uff4f\131\uff4f\311\uff4f\u0103\uff4f\u0188\uff4f\001\002" +
    "\000\036\012\034\016\113\017\122\020\127\022\107\042" +
    "\033\050\036\052\124\244\125\377\117\u012c\106\u0131\126" +
    "\u013c\123\u013d\121\001\002\000\016\037\uff52\055\uff52\131" +
    "\uff52\311\uff52\u0103\uff52\u0188\uff52\001\002\000\020\037\uff4f" +
    "\040\u014c\055\uff4f\131\uff4f\311\uff4f\u0103\uff4f\u0188\uff4f\001" +
    "\002\000\016\037\uff50\055\uff50\131\uff50\311\uff50\u0103\uff50" +
    "\u0188\uff50\001\002\000\040\012\uff84\016\uff84\017\uff84\020" +
    "\uff84\022\uff84\042\uff84\050\uff84\052\102\241\105\244\uff84" +
    "\377\uff84\u012c\uff84\u0131\uff84\u013c\uff84\u013d\uff84\001\002\000" +
    "\014\037\uff5a\055\uff5a\311\u0152\u0103\uff5a\u0188\uff5a\001\002" +
    "\000\004\130\u0154\001\002\000\012\037\uff61\055\uff61\u0103" +
    "\uff61\u0188\uff61\001\002\000\036\012\034\016\113\017\122" +
    "\020\127\022\107\042\033\050\036\052\124\244\125\377" +
    "\117\u012c\106\u0131\126\u013c\123\u013d\121\001\002\000\022" +
    "\037\uff58\040\uff58\055\uff58\160\u0156\267\uff58\370\uff58\u0103" +
    "\uff58\u0188\uff58\001\002\000\006\012\034\050\036\001\002" +
    "\000\020\037\uff55\040\uff55\055\uff55\267\u0158\370\u0159\u0103" +
    "\uff55\u0188\uff55\001\002\000\014\037\uff56\040\uff56\055\uff56" +
    "\u0103\uff56\u0188\uff56\001\002\000\014\037\uff57\040\uff57\055" +
    "\uff57\u0103\uff57\u0188\uff57\001\002\000\014\037\uff53\040\u015b" +
    "\055\uff53\u0103\uff53\u0188\uff53\001\002\000\036\012\034\016" +
    "\113\017\122\020\127\022\107\042\033\050\036\052\124" +
    "\244\125\377\117\u012c\106\u0131\126\u013c\123\u013d\121\001" +
    "\002\000\012\037\uff5b\055\uff5b\u0103\uff5b\u0188\uff5b\001\002" +
    "\000\020\037\uff58\055\uff58\160\u0156\267\uff58\370\uff58\u0103" +
    "\uff58\u0188\uff58\001\002\000\016\037\uff55\055\uff55\267\u0158" +
    "\370\u0159\u0103\uff55\u0188\uff55\001\002\000\012\037\uff54\055" +
    "\uff54\u0103\uff54\u0188\uff54\001\002\000\020\037\uff59\040\uff59" +
    "\055\uff59\267\uff59\370\uff59\u0103\uff59\u0188\uff59\001\002\000" +
    "\014\037\uff5d\055\uff5d\311\uff5d\u0103\uff5d\u0188\uff5d\001\002" +
    "\000\026\037\uff66\040\u0124\055\uff66\107\uff66\126\uff66\131" +
    "\uff66\311\uff66\326\uff66\u0103\uff66\u0188\uff66\001\002\000\024" +
    "\037\uff69\055\uff69\107\uff69\126\uff69\131\uff69\311\uff69\326" +
    "\uff69\u0103\uff69\u0188\uff69\001\002\000\006\040\u0168\055\uff62" +
    "\001\002\000\004\055\u0166\001\002\000\004\076\uff65\001" +
    "\002\000\004\055\uff64\001\002\000\006\012\034\050\036" +
    "\001\002\000\006\040\u0168\055\uff62\001\002\000\004\055" +
    "\uff63\001\002\000\010\060\u016e\066\u016d\306\u0171\001\002" +
    "\000\010\037\ufe87\u0103\ufe87\u0188\ufe87\001\002\000\004\163" +
    "\u0215\001\002\000\022\012\034\050\036\077\ufeb6\141\ufeb6" +
    "\156\u0180\174\u0184\266\ufeb6\336\ufeb6\001\002\000\010\037" +
    "\ufe84\u0103\ufe84\u0188\ufe84\001\002\000\010\037\ufe86\u0103\ufe86" +
    "\u0188\ufe86\001\002\000\014\012\ufe77\050\ufe77\150\ufe77\163" +
    "\u0173\174\u0174\001\002\000\012\037\ufe75\040\u017c\u0103\ufe75" +
    "\u0188\ufe75\001\002\000\010\012\uffe1\050\uffe1\150\u0177\001" +
    "\002\000\010\012\ufe78\050\ufe78\150\ufe78\001\002\000\010" +
    "\012\uffe1\050\uffe1\150\u0177\001\002\000\006\012\034\050" +
    "\036\001\002\000\004\340\u0178\001\002\000\006\012\uffe2" +
    "\050\uffe2\001\002\000\012\037\ufe7a\040\ufe7a\u0103\ufe7a\u0188" +
    "\ufe7a\001\002\000\006\012\034\050\036\001\002\000\012" +
    "\037\ufe79\040\ufe79\u0103\ufe79\u0188\ufe79\001\002\000\014\012" +
    "\ufe77\050\ufe77\150\ufe77\163\u0173\174\u0174\001\002\000\010" +
    "\037\ufe7b\u0103\ufe7b\u0188\ufe7b\001\002\000\012\037\ufe75\040" +
    "\u017c\u0103\ufe75\u0188\ufe75\001\002\000\010\037\ufe76\u0103\ufe76" +
    "\u0188\ufe76\001\002\000\006\012\034\050\036\001\002\000" +
    "\012\037\ufedc\040\ufedc\u0103\ufedc\u0188\ufedc\001\002\000\012" +
    "\037\ufedd\040\ufedd\u0103\ufedd\u0188\ufedd\001\002\000\012\037" +
    "\ufed9\040\u020e\u0103\ufed9\u0188\ufed9\001\002\000\006\012\034" +
    "\050\036\001\002\000\052\050\143\240\141\244\157\303" +
    "\162\364\146\376\156\u0104\147\u0111\137\u011a\150\u011d\135" +
    "\u0120\153\u0133\151\u013f\140\u0149\136\u014c\142\u0159\155\u015a" +
    "\144\u0189\161\u018a\133\u018b\134\001\002\000\012\077\u0189" +
    "\141\u0188\266\u018c\336\u018a\001\002\000\012\037\ufedb\040" +
    "\ufedb\u0103\ufedb\u0188\ufedb\001\002\000\006\052\ufee2\241\u01a6" +
    "\001\002\000\004\203\u019d\001\002\000\004\203\u019a\001" +
    "\002\000\012\037\ufea2\040\ufea2\u0103\ufea2\u0188\ufea2\001\002" +
    "\000\010\052\ufeaf\152\u018d\236\u018e\001\002\000\030\037" +
    "\ufeb1\040\ufeb1\052\ufeb1\077\ufeb1\102\ufeb1\141\ufeb1\174\ufeb1" +
    "\266\ufeb1\336\ufeb1\u0103\ufeb1\u0188\ufeb1\001\002\000\030\037" +
    "\ufeb0\040\ufeb0\052\ufeb0\077\ufeb0\102\ufeb0\141\ufeb0\174\ufeb0" +
    "\266\ufeb0\336\ufeb0\u0103\ufeb0\u0188\ufeb0\001\002\000\004\052" +
    "\u0190\001\002\000\006\012\034\050\036\001\002\000\012" +
    "\037\ufea0\040\ufea0\u0103\ufea0\u0188\ufea0\001\002\000\012\040" +
    "\uff55\055\uff55\267\u0158\370\u0159\001\002\000\006\040\u0195" +
    "\055\ufe9b\001\002\000\004\055\u0199\001\002\000\006\012" +
    "\034\050\036\001\002\000\012\040\uff55\055\uff55\267\u0158" +
    "\370\u0159\001\002\000\006\040\u0195\055\ufe9b\001\002\000" +
    "\004\055\ufe9c\001\002\000\012\037\ufe9d\040\ufe9d\u0103\ufe9d" +
    "\u0188\ufe9d\001\002\000\010\052\ufeaf\152\u018d\236\u018e\001" +
    "\002\000\004\052\u0190\001\002\000\012\037\ufea1\040\ufea1" +
    "\u0103\ufea1\u0188\ufea1\001\002\000\004\052\u019e\001\002\000" +
    "\006\012\034\050\036\001\002\000\004\102\u01a0\001\002" +
    "\000\006\012\034\050\036\001\002\000\020\037\ufeab\040" +
    "\ufeab\052\u01a2\241\ufeab\u0103\ufeab\u015f\ufeab\u0188\ufeab\001\002" +
    "\000\006\012\034\050\036\001\002\000\016\037\ufea9\040" +
    "\ufea9\241\ufea9\u0103\ufea9\u015f\u01a4\u0188\ufea9\001\002\000\006" +
    "\262\u01b1\274\u01b2\001\002\000\014\037\ufee2\040\ufee2\241" +
    "\u01a6\u0103\ufee2\u0188\ufee2\001\002\000\006\074\u01a8\244\u01aa" +
    "\001\002\000\012\037\ufe9f\040\ufe9f\u0103\ufe9f\u0188\ufe9f\001" +
    "\002\000\004\105\u01ab\001\002\000\032\037\ufee3\040\ufee3" +
    "\052\ufee3\077\ufee3\102\ufee3\140\ufee3\141\ufee3\174\ufee3\266" +
    "\ufee3\336\ufee3\u0103\ufee3\u0188\ufee3\001\002\000\032\037\ufee0" +
    "\040\ufee0\052\ufee0\077\ufee0\102\ufee0\140\ufee0\141\ufee0\174" +
    "\ufee0\266\ufee0\336\ufee0\u0103\ufee0\u0188\ufee0\001\002\000\034" +
    "\037\ufede\040\ufede\052\ufede\077\ufede\102\ufede\140\ufede\141" +
    "\ufede\174\ufede\241\u01ac\266\ufede\336\ufede\u0103\ufede\u0188\ufede" +
    "\001\002\000\034\037\ufebc\040\ufebc\052\ufebc\077\ufebc\102" +
    "\ufebc\140\ufebc\141\ufebc\174\ufebc\244\u01af\266\ufebc\336\ufebc" +
    "\u0103\ufebc\u0188\ufebc\001\002\000\032\037\ufee1\040\ufee1\052" +
    "\ufee1\077\ufee1\102\ufee1\140\ufee1\141\ufee1\174\ufee1\266\ufee1" +
    "\336\ufee1\u0103\ufee1\u0188\ufee1\001\002\000\032\037\ufedf\040" +
    "\ufedf\052\ufedf\077\ufedf\102\ufedf\140\ufedf\141\ufedf\174\ufedf" +
    "\266\ufedf\336\ufedf\u0103\ufedf\u0188\ufedf\001\002\000\032\037" +
    "\ufebd\040\ufebd\052\ufebd\077\ufebd\102\ufebd\140\ufebd\141\ufebd" +
    "\174\ufebd\266\ufebd\336\ufebd\u0103\ufebd\u0188\ufebd\001\002\000" +
    "\032\037\ufea9\040\ufea9\077\ufea9\102\ufea9\141\ufea9\174\ufea9" +
    "\241\ufea9\266\ufea9\336\ufea9\u0103\ufea9\u015f\u01a4\u0188\ufea9\001" +
    "\002\000\006\133\u01b5\176\u01b4\001\002\000\006\133\u01b5" +
    "\176\u01b4\001\002\000\032\037\ufea7\040\ufea7\077\ufea7\102" +
    "\ufea7\141\ufea7\174\ufea7\241\ufea7\266\ufea7\336\ufea7\u0103\ufea7" +
    "\u015f\ufea7\u0188\ufea7\001\002\000\006\244\u01b8\257\u01b6\001" +
    "\002\000\032\037\ufea4\040\ufea4\077\ufea4\102\ufea4\141\ufea4" +
    "\174\ufea4\241\ufea4\266\ufea4\336\ufea4\u0103\ufea4\u015f\ufea4\u0188" +
    "\ufea4\001\002\000\032\037\ufea5\040\ufea5\077\ufea5\102\ufea5" +
    "\141\ufea5\174\ufea5\241\ufea5\266\ufea5\336\ufea5\u0103\ufea5\u015f" +
    "\ufea5\u0188\ufea5\001\002\000\032\037\ufea3\040\ufea3\077\ufea3" +
    "\102\ufea3\141\ufea3\174\ufea3\241\ufea3\266\ufea3\336\ufea3\u0103" +
    "\ufea3\u015f\ufea3\u0188\ufea3\001\002\000\032\037\ufea6\040\ufea6" +
    "\077\ufea6\102\ufea6\141\ufea6\174\ufea6\241\ufea6\266\ufea6\336" +
    "\ufea6\u0103\ufea6\u015f\ufea6\u0188\ufea6\001\002\000\032\037\ufea8" +
    "\040\ufea8\077\ufea8\102\ufea8\141\ufea8\174\ufea8\241\ufea8\266" +
    "\ufea8\336\ufea8\u0103\ufea8\u015f\ufea8\u0188\ufea8\001\002\000\030" +
    "\037\ufeaa\040\ufeaa\077\ufeaa\102\ufeaa\141\ufeaa\174\ufeaa\241" +
    "\ufeaa\266\ufeaa\336\ufeaa\u0103\ufeaa\u0188\ufeaa\001\002\000\004" +
    "\055\u01bc\001\002\000\032\037\ufeac\040\ufeac\077\ufeac\102" +
    "\ufeac\141\ufeac\174\ufeac\241\ufeac\266\ufeac\336\ufeac\u0103\ufeac" +
    "\u015f\ufeac\u0188\ufeac\001\002\000\006\040\u01bf\055\ufe98\001" +
    "\002\000\004\055\u01c2\001\002\000\006\012\034\050\036" +
    "\001\002\000\006\040\u01bf\055\ufe98\001\002\000\004\055" +
    "\ufe99\001\002\000\004\102\ufe9a\001\002\000\004\052\u01c4" +
    "\001\002\000\040\012\uff84\016\uff84\017\uff84\020\uff84\022" +
    "\uff84\042\uff84\050\uff84\052\102\241\105\244\uff84\377\uff84" +
    "\u012c\uff84\u0131\uff84\u013c\uff84\u013d\uff84\001\002\000\004\055" +
    "\u01c6\001\002\000\012\037\ufe9e\040\ufe9e\u0103\ufe9e\u0188\ufe9e" +
    "\001\002\000\044\037\ufec7\040\ufec7\074\ufec7\077\ufec7\102" +
    "\ufec7\137\ufec7\140\ufec7\141\ufec7\160\u01c8\174\ufec7\241\ufec7" +
    "\244\ufec7\257\ufec7\266\ufec7\336\ufec7\u0103\ufec7\u0188\ufec7\001" +
    "\002\000\006\012\034\050\036\001\002\000\042\037\ufed5" +
    "\040\ufed5\074\ufece\077\u01d7\102\ufead\137\u01ca\140\u01d1\141" +
    "\u01d5\174\u01d0\241\u01d4\244\ufece\257\u01cf\266\u01ce\336\u01d6" +
    "\u0103\ufed5\u0188\ufed5\001\002\000\034\037\ufebe\040\ufebe\052" +
    "\u01f7\077\ufebe\102\ufebe\140\ufebe\141\ufebe\174\ufebe\241\ufebe" +
    "\266\ufebe\336\ufebe\u0103\ufebe\u0188\ufebe\001\002\000\012\037" +
    "\ufed8\040\ufed8\u0103\ufed8\u0188\ufed8\001\002\000\012\037\ufed6" +
    "\040\ufed6\u0103\ufed6\u0188\ufed6\001\002\000\006\074\u01fe\244" +
    "\u01ff\001\002\000\032\037\ufeaf\040\ufeaf\077\ufeaf\102\ufeaf" +
    "\141\ufeaf\152\u018d\174\ufeaf\236\u018e\266\ufeaf\336\ufeaf\u0103" +
    "\ufeaf\u0188\ufeaf\001\002\000\014\016\u01f0\017\u01ed\020\u01eb" +
    "\022\u01ec\244\u01ee\001\002\000\006\012\034\050\036\001" +
    "\002\000\026\037\ufeb8\040\ufeb8\077\ufeb6\102\ufeb6\141\ufeb6" +
    "\174\u0184\266\ufeb6\336\ufeb6\u0103\ufeb8\u0188\ufeb8\001\002\000" +
    "\004\102\u01e3\001\002\000\026\037\ufeb8\040\ufeb8\077\ufeb6" +
    "\102\ufeb6\141\ufeb6\174\u0184\266\ufeb6\336\ufeb6\u0103\ufeb8\u0188" +
    "\ufeb8\001\002\000\006\074\ufecf\244\ufecf\001\002\000\006" +
    "\052\ufee2\241\u01a6\001\002\000\004\203\u01d9\001\002\000" +
    "\004\203\u01d8\001\002\000\004\102\ufeae\001\002\000\032" +
    "\037\ufeaf\040\ufeaf\077\ufeaf\102\ufeaf\141\ufeaf\152\u018d\174" +
    "\ufeaf\236\u018e\266\ufeaf\336\ufeaf\u0103\ufeaf\u0188\ufeaf\001\002" +
    "\000\026\037\ufeb5\040\ufeb5\077\ufeb5\102\ufeb5\141\ufeb5\174" +
    "\ufeb5\266\ufeb5\336\ufeb5\u0103\ufeb5\u0188\ufeb5\001\002\000\004" +
    "\052\u01dc\001\002\000\040\012\uff84\016\uff84\017\uff84\020" +
    "\uff84\022\uff84\042\uff84\050\uff84\052\102\241\105\244\uff84" +
    "\377\uff84\u012c\uff84\u0131\uff84\u013c\uff84\u013d\uff84\001\002\000" +
    "\004\055\u01de\001\002\000\026\037\ufeb2\040\ufeb2\077\ufeb2" +
    "\102\ufeb2\141\ufeb2\174\ufeb2\266\ufeb2\336\ufeb2\u0103\ufeb2\u0188" +
    "\ufeb2\001\002\000\012\037\ufed0\040\ufed0\u0103\ufed0\u0188\ufed0" +
    "\001\002\000\014\077\u01d7\102\ufead\141\u01d5\266\u01ce\336" +
    "\u01d6\001\002\000\026\037\ufeb8\040\ufeb8\077\ufeb6\102\ufeb6" +
    "\141\ufeb6\174\u0184\266\ufeb6\336\ufeb6\u0103\ufeb8\u0188\ufeb8\001" +
    "\002\000\012\037\ufeb9\040\ufeb9\u0103\ufeb9\u0188\ufeb9\001\002" +
    "\000\006\012\034\050\036\001\002\000\034\037\ufeab\040" +
    "\ufeab\052\u01a2\077\ufeab\102\ufeab\141\ufeab\174\ufeab\241\ufeab" +
    "\266\ufeab\336\ufeab\u0103\ufeab\u015f\ufeab\u0188\ufeab\001\002\000" +
    "\032\037\ufea9\040\ufea9\077\ufea9\102\ufea9\141\ufea9\174\ufea9" +
    "\241\ufea9\266\ufea9\336\ufea9\u0103\ufea9\u015f\u01a4\u0188\ufea9\001" +
    "\002\000\030\037\ufee2\040\ufee2\077\ufee2\102\ufee2\141\ufee2" +
    "\174\ufee2\241\u01a6\266\ufee2\336\ufee2\u0103\ufee2\u0188\ufee2\001" +
    "\002\000\026\037\ufeb3\040\ufeb3\077\ufeb3\102\ufeb3\141\ufeb3" +
    "\174\ufeb3\266\ufeb3\336\ufeb3\u0103\ufeb3\u0188\ufeb3\001\002\000" +
    "\012\037\ufed1\040\ufed1\u0103\ufed1\u0188\ufed1\001\002\000\030" +
    "\074\ufece\077\u01d7\102\ufead\137\u01ca\140\u01d1\141\u01d5\241" +
    "\u01d4\244\ufece\257\u01cf\266\u01ce\336\u01d6\001\002\000\012" +
    "\037\ufed7\040\ufed7\u0103\ufed7\u0188\ufed7\001\002\000\034\037" +
    "\ufec4\040\ufec4\077\ufec4\102\ufec4\137\ufec4\140\ufec4\141\ufec4" +
    "\174\ufec4\241\ufec4\266\ufec4\336\ufec4\u0103\ufec4\u0188\ufec4\001" +
    "\002\000\034\037\ufec5\040\ufec5\077\ufec5\102\ufec5\137\ufec5" +
    "\140\ufec5\141\ufec5\174\ufec5\241\ufec5\266\ufec5\336\ufec5\u0103" +
    "\ufec5\u0188\ufec5\001\002\000\034\037\ufec3\040\ufec3\077\ufec3" +
    "\102\ufec3\137\ufec3\140\ufec3\141\ufec3\174\ufec3\241\ufec3\266" +
    "\ufec3\336\ufec3\u0103\ufec3\u0188\ufec3\001\002\000\034\037\ufec2" +
    "\040\ufec2\077\ufec2\102\ufec2\137\ufec2\140\ufec2\141\ufec2\174" +
    "\ufec2\241\ufec2\266\ufec2\336\ufec2\u0103\ufec2\u0188\ufec2\001\002" +
    "\000\034\037\ufec0\040\ufec0\077\ufec0\102\ufec0\137\u01f1\140" +
    "\ufec0\141\ufec0\174\ufec0\241\ufec0\266\ufec0\336\ufec0\u0103\ufec0" +
    "\u0188\ufec0\001\002\000\034\037\ufec6\040\ufec6\077\ufec6\102" +
    "\ufec6\137\ufec6\140\ufec6\141\ufec6\174\ufec6\241\ufec6\266\ufec6" +
    "\336\ufec6\u0103\ufec6\u0188\ufec6\001\002\000\034\037\ufebe\040" +
    "\ufebe\052\u01f7\077\ufebe\102\ufebe\140\ufebe\141\ufebe\174\ufebe" +
    "\241\ufebe\266\ufebe\336\ufebe\u0103\ufebe\u0188\ufebe\001\002\000" +
    "\032\037\ufee2\040\ufee2\077\ufee2\102\ufee2\140\ufee2\141\ufee2" +
    "\174\ufee2\241\u01a6\266\ufee2\336\ufee2\u0103\ufee2\u0188\ufee2\001" +
    "\002\000\030\037\ufeba\040\ufeba\077\ufeba\102\ufeba\140\u01f4" +
    "\141\ufeba\174\ufeba\266\ufeba\336\ufeba\u0103\ufeba\u0188\ufeba\001" +
    "\002\000\026\037\ufebb\040\ufebb\077\ufebb\102\ufebb\141\ufebb" +
    "\174\ufebb\266\ufebb\336\ufebb\u0103\ufebb\u0188\ufebb\001\002\000" +
    "\026\037\ufeb8\040\ufeb8\077\ufeb6\102\ufeb6\141\ufeb6\174\u0184" +
    "\266\ufeb6\336\ufeb6\u0103\ufeb8\u0188\ufeb8\001\002\000\012\037" +
    "\ufed4\040\ufed4\u0103\ufed4\u0188\ufed4\001\002\000\004\016\u01f9" +
    "\001\002\000\032\037\ufec1\040\ufec1\077\ufec1\102\ufec1\140" +
    "\ufec1\141\ufec1\174\ufec1\241\ufec1\266\ufec1\336\ufec1\u0103\ufec1" +
    "\u0188\ufec1\001\002\000\004\040\u01fa\001\002\000\004\016" +
    "\u01fb\001\002\000\004\055\u01fc\001\002\000\032\037\ufebf" +
    "\040\ufebf\077\ufebf\102\ufebf\140\ufebf\141\ufebf\174\ufebf\241" +
    "\ufebf\266\ufebf\336\ufebf\u0103\ufebf\u0188\ufebf\001\002\000\026" +
    "\037\ufeb4\040\ufeb4\077\ufeb4\102\ufeb4\141\ufeb4\174\ufeb4\266" +
    "\ufeb4\336\ufeb4\u0103\ufeb4\u0188\ufeb4\001\002\000\004\105\u0203" +
    "\001\002\000\030\037\ufecd\040\ufecd\077\ufecd\102\ufecd\140" +
    "\ufecd\141\ufecd\174\ufecd\266\ufecd\336\ufecd\u0103\ufecd\u0188\ufecd" +
    "\001\002\000\030\037\ufeba\040\ufeba\077\ufeba\102\ufeba\140" +
    "\u01f4\141\ufeba\174\ufeba\266\ufeba\336\ufeba\u0103\ufeba\u0188\ufeba" +
    "\001\002\000\026\037\ufeb8\040\ufeb8\077\ufeb6\102\ufeb6\141" +
    "\ufeb6\174\u0184\266\ufeb6\336\ufeb6\u0103\ufeb8\u0188\ufeb8\001\002" +
    "\000\012\037\ufed2\040\ufed2\u0103\ufed2\u0188\ufed2\001\002\000" +
    "\034\037\ufec9\040\ufec9\077\ufec9\102\ufec9\140\ufec9\141\ufec9" +
    "\174\ufec9\241\u0205\244\u0206\266\ufec9\336\ufec9\u0103\ufec9\u0188" +
    "\ufec9\001\002\000\030\037\ufecc\040\ufecc\077\ufecc\102\ufecc" +
    "\140\ufecc\141\ufecc\174\ufecc\266\ufecc\336\ufecc\u0103\ufecc\u0188" +
    "\ufecc\001\002\000\004\244\u0207\001\002\000\030\037\ufeca" +
    "\040\ufeca\077\ufeca\102\ufeca\140\ufeca\141\ufeca\174\ufeca\266" +
    "\ufeca\336\ufeca\u0103\ufeca\u0188\ufeca\001\002\000\030\037\ufecb" +
    "\040\ufecb\077\ufecb\102\ufecb\140\ufecb\141\ufecb\174\ufecb\266" +
    "\ufecb\336\ufecb\u0103\ufecb\u0188\ufecb\001\002\000\032\037\ufee2" +
    "\040\ufee2\077\ufee2\102\ufee2\140\ufee2\141\ufee2\174\ufee2\241" +
    "\u01a6\266\ufee2\336\ufee2\u0103\ufee2\u0188\ufee2\001\002\000\030" +
    "\037\ufeba\040\ufeba\077\ufeba\102\ufeba\140\u01f4\141\ufeba\174" +
    "\ufeba\266\ufeba\336\ufeba\u0103\ufeba\u0188\ufeba\001\002\000\026" +
    "\037\ufeb8\040\ufeb8\077\ufeb6\102\ufeb6\141\ufeb6\174\u0184\266" +
    "\ufeb6\336\ufeb6\u0103\ufeb8\u0188\ufeb8\001\002\000\012\037\ufed3" +
    "\040\ufed3\u0103\ufed3\u0188\ufed3\001\002\000\042\037\ufec8\040" +
    "\ufec8\074\ufec8\077\ufec8\102\ufec8\137\ufec8\140\ufec8\141\ufec8" +
    "\174\ufec8\241\ufec8\244\ufec8\257\ufec8\266\ufec8\336\ufec8\u0103" +
    "\ufec8\u0188\ufec8\001\002\000\014\077\ufeb7\102\ufeb7\141\ufeb7" +
    "\266\ufeb7\336\ufeb7\001\002\000\022\012\034\050\036\077" +
    "\ufeb6\141\ufeb6\156\u0180\174\u0184\266\ufeb6\336\ufeb6\001\002" +
    "\000\010\037\ufe85\u0103\ufe85\u0188\ufe85\001\002\000\012\037" +
    "\ufed9\040\u020e\u0103\ufed9\u0188\ufed9\001\002\000\010\037\ufeda" +
    "\u0103\ufeda\u0188\ufeda\001\002\000\010\052\ufeaf\152\u018d\236" +
    "\u018e\001\002\000\004\052\u0190\001\002\000\012\037\ufe97" +
    "\040\ufe97\u0103\ufe97\u0188\ufe97\001\002\000\006\012\034\050" +
    "\036\001\002\000\056\050\143\060\u0218\240\141\244\157" +
    "\303\162\306\u0219\364\146\376\156\u0104\147\u0111\137\u011a" +
    "\150\u011d\135\u0120\153\u0133\151\u013f\140\u0149\136\u014c\142" +
    "\u0159\155\u015a\144\u0189\161\u018a\133\u018b\134\001\002\000" +
    "\014\037\ufec7\160\u01c8\244\ufec7\u0103\ufec7\u0188\ufec7\001\002" +
    "\000\006\140\ufe7f\241\ufe7f\001\002\000\006\140\ufe7e\241" +
    "\ufe7e\001\002\000\006\140\u021d\241\u021e\001\002\000\010" +
    "\037\ufe83\u0103\ufe83\u0188\ufe83\001\002\000\010\037\ufe82\u0103" +
    "\ufe82\u0188\ufe82\001\002\000\010\037\ufe7d\u0103\ufe7d\u0188\ufe7d" +
    "\001\002\000\004\074\u0220\001\002\000\010\037\ufe81\u0103" +
    "\ufe81\u0188\ufe81\001\002\000\004\105\u0221\001\002\000\010" +
    "\037\ufe7c\u0103\ufe7c\u0188\ufe7c\001\002\000\012\037\ufebc\244" +
    "\u01af\u0103\ufebc\u0188\ufebc\001\002\000\010\037\ufe80\u0103\ufe80" +
    "\u0188\ufe80\001\002\000\010\037\ufe8b\u0103\ufe8b\u0188\ufe8b\001" +
    "\002\000\006\160\ufe8f\176\ufe8f\001\002\000\006\160\ufe8e" +
    "\176\ufe8e\001\002\000\006\160\u0228\176\u022a\001\002\000" +
    "\006\012\034\050\036\001\002\000\010\037\ufe90\u0103\ufe90" +
    "\u0188\ufe90\001\002\000\004\132\u022b\001\002\000\004\u010b" +
    "\u022c\001\002\000\010\037\ufe8c\u0103\ufe8c\u0188\ufe8c\001\002" +
    "\000\010\037\ufe8d\u0103\ufe8d\u0188\ufe8d\001\002\000\006\012" +
    "\034\050\036\001\002\000\004\052\u0230\001\002\000\006" +
    "\042\033\055\ufe18\001\002\000\004\055\ufe19\001\002\000" +
    "\006\040\u0272\055\ufe10\001\002\000\040\012\ufe13\016\ufe13" +
    "\017\ufe13\020\ufe13\022\ufe13\042\ufe13\050\ufe13\052\ufe13\076" +
    "\u023e\244\ufe13\377\ufe13\u012c\ufe13\u0131\ufe13\u013c\ufe13\u013d\ufe13" +
    "\001\002\000\004\055\u0235\001\002\000\004\u016c\u0236\001" +
    "\002\000\052\220\u0239\240\141\244\157\303\162\364\146" +
    "\376\156\u0104\147\u0111\137\u011a\150\u011d\135\u0120\153\u0133" +
    "\151\u013f\140\u0149\136\u014c\142\u0159\155\u015a\144\u0189\161" +
    "\u018a\133\u018b\134\001\002\000\010\037\ufe0c\u0103\ufe0c\u0188" +
    "\ufe0c\001\002\000\010\037\ufe0d\u0103\ufe0d\u0188\ufe0d\001\002" +
    "\000\010\076\ufdfe\116\ufdfe\334\u023c\001\002\000\010\037" +
    "\ufe1a\u0103\ufe1a\u0188\ufe1a\001\002\000\010\076\ufdfe\111\ufdfe" +
    "\334\u023c\001\002\000\020\332\u0248\335\u0246\u016b\u0250\u016c" +
    "\u0247\u016d\u024d\u016e\u024c\u016f\u024e\001\002\000\006\076\u023e" +
    "\111\ufe13\001\002\000\042\012\ufe14\016\ufe14\017\ufe14\020" +
    "\ufe14\022\ufe14\042\ufe14\050\ufe14\052\ufe14\111\ufe14\116\ufe14" +
    "\244\ufe14\377\ufe14\u012c\ufe14\u0131\ufe14\u013c\ufe14\u013d\ufe14\001" +
    "\002\000\004\111\u0240\001\002\000\006\003\u0241\262\012" +
    "\001\002\000\010\037\022\u0103\023\u0188\024\001\002\000" +
    "\004\116\u0243\001\002\000\036\012\034\016\113\017\122" +
    "\020\127\022\107\042\033\050\036\052\124\244\125\377" +
    "\117\u012c\106\u0131\126\u013c\123\u013d\121\001\002\000\004" +
    "\316\u0245\001\002\000\010\037\ufe0b\u0103\ufe0b\u0188\ufe0b\001" +
    "\002\000\004\076\ufe40\001\002\000\004\244\u0261\001\002" +
    "\000\004\076\ufe3f\001\002\000\010\076\ufdff\111\ufdff\116" +
    "\ufdff\001\002\000\004\076\u025b\001\002\000\012\040\u0258" +
    "\076\ufdf5\111\ufdf5\116\ufdf5\001\002\000\004\u015f\u0255\001" +
    "\002\000\012\040\ufdfb\076\ufdfb\111\ufdfb\116\ufdfb\001\002" +
    "\000\004\005\u0251\001\002\000\012\040\ufdf8\076\ufdf8\111" +
    "\ufdf8\116\ufdf8\001\002\000\012\040\ufdfc\076\ufdfc\111\ufdfc" +
    "\116\ufdfc\001\002\000\006\255\u0254\u015f\u0252\001\002\000" +
    "\012\040\ufdf4\076\ufdf4\111\ufdf4\116\ufdf4\001\002\000\012" +
    "\040\ufdf7\076\ufdf7\111\ufdf7\116\ufdf7\001\002\000\012\040" +
    "\ufdf3\076\ufdf3\111\ufdf3\116\ufdf3\001\002\000\004\244\u0256" +
    "\001\002\000\004\u0119\u0257\001\002\000\012\040\ufdf9\076" +
    "\ufdf9\111\ufdf9\116\ufdf9\001\002\000\020\332\u0248\335\u0246" +
    "\u016b\u0250\u016c\u0247\u016d\u024d\u016e\u024c\u016f\u024e\001\002\000" +
    "\010\076\ufdfd\111\ufdfd\116\ufdfd\001\002\000\010\076\ufdf6" +
    "\111\ufdf6\116\ufdf6\001\002\000\014\012\034\050\036\u0170" +
    "\u025d\u0171\u0260\u0172\u025c\001\002\000\012\040\ufe3a\076\ufe3a" +
    "\111\ufe3a\116\ufe3a\001\002\000\012\040\ufe3c\076\ufe3c\111" +
    "\ufe3c\116\ufe3c\001\002\000\012\040\ufe39\076\ufe39\111\ufe39" +
    "\116\ufe39\001\002\000\012\040\ufdf2\076\ufdf2\111\ufdf2\116" +
    "\ufdf2\001\002\000\012\040\ufe3b\076\ufe3b\111\ufe3b\116\ufe3b" +
    "\001\002\000\004\u015f\u0262\001\002\000\004\244\u0263\001" +
    "\002\000\004\u0119\u0264\001\002\000\012\040\ufdfa\076\ufdfa" +
    "\111\ufdfa\116\ufdfa\001\002\000\006\076\u023e\116\ufe13\001" +
    "\002\000\004\116\u0267\001\002\000\006\052\u0268\157\u011b" +
    "\001\002\000\004\157\u011b\001\002\000\010\037\ufe0a\u0103" +
    "\ufe0a\u0188\ufe0a\001\002\000\010\037\ufe08\u0103\ufe08\u0188\ufe08" +
    "\001\002\000\004\055\u026c\001\002\000\010\037\ufe09\u0103" +
    "\ufe09\u0188\ufe09\001\002\000\036\012\034\016\113\017\122" +
    "\020\127\022\107\042\033\050\036\052\124\244\125\377" +
    "\117\u012c\106\u0131\126\u013c\123\u013d\121\001\002\000\010" +
    "\040\ufe0e\055\ufe0e\u016a\u0270\001\002\000\006\040\ufe15\055" +
    "\ufe15\001\002\000\006\040\ufe0f\055\ufe0f\001\002\000\004" +
    "\055\ufe12\001\002\000\004\042\033\001\002\000\004\055" +
    "\ufe11\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0271\000\022\003\014\004\006\005\012\006\015\007" +
    "\010\116\017\227\004\253\005\001\001\000\020\230\u010f" +
    "\231\u010e\234\u010d\235\u0112\237\u0108\314\u0109\316\u010a\001" +
    "\001\000\004\011\u0107\001\001\000\004\011\335\001\001" +
    "\000\002\001\001\000\006\012\114\017\332\001\001\000" +
    "\022\003\331\004\006\005\012\006\015\007\010\116\017" +
    "\227\004\253\005\001\001\000\004\057\052\001\001\000" +
    "\022\003\051\004\006\005\012\006\015\007\010\116\017" +
    "\227\004\253\005\001\001\000\004\011\050\001\001\000" +
    "\002\001\001\000\022\003\046\004\006\005\012\006\015" +
    "\007\010\116\017\227\004\253\005\001\001\000\004\262" +
    "\025\001\001\000\004\011\020\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\027\022\031\254\034\260\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\255" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\256\045\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\117\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\060\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\012\063\015\065\120\064" +
    "\001\001\000\004\016\322\001\001\000\002\001\001\000" +
    "\004\121\076\001\001\000\004\123\070\001\001\000\004" +
    "\012\071\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\063\015\315\001\001\000\004\067\100\001\001\000" +
    "\006\056\102\062\103\001\001\000\002\001\001\000\006" +
    "\056\102\062\312\001\001\000\022\012\114\017\127\022" +
    "\117\047\110\051\113\053\111\054\107\064\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\276\056\273" +
    "\065\302\001\001\000\004\052\264\001\001\000\002\001" +
    "\001\000\004\050\256\001\001\000\004\020\251\001\001" +
    "\000\004\063\246\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\012\114\017\127\022\117\047\215\051\113\053" +
    "\111\054\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\367\131\001\001\000\012\023" +
    "\144\024\153\025\157\370\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\u0103\204\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\u0103\203\001\001\000\004\025" +
    "\201\001\001\000\004\u0103\176\001\001\000\004\371\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\026\163\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\027\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\023\144\024\153\025\157\370\174" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\114\017\206\055\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\066\221\001\001\000\020\012\114\017\127\022\117\047" +
    "\235\051\113\053\111\054\107\001\001\000\002\001\001" +
    "\000\020\012\114\017\127\022\117\047\223\051\113\053" +
    "\111\054\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\012\114\017\127\022\117\047" +
    "\225\051\113\053\111\054\107\001\001\000\002\001\001" +
    "\000\020\012\114\017\127\022\117\047\227\051\113\053" +
    "\111\054\107\001\001\000\004\061\231\001\001\000\020" +
    "\012\114\017\127\022\117\047\233\051\113\053\111\054" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\061\234\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\114\017\206\055\237\001\001\000\002\001\001" +
    "\000\010\012\114\017\206\055\241\001\001\000\002\001" +
    "\001\000\010\012\114\017\206\055\243\001\001\000\002" +
    "\001\001\000\006\056\102\062\250\001\001\000\006\056" +
    "\102\062\247\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\063\015" +
    "\253\001\001\000\002\001\001\000\016\012\114\017\127" +
    "\022\117\051\261\053\111\054\107\001\001\000\016\012" +
    "\114\017\127\022\117\051\257\053\111\054\107\001\001" +
    "\000\002\001\001\000\004\050\260\001\001\000\002\001" +
    "\001\000\004\050\262\001\001\000\002\001\001\000\014" +
    "\012\114\017\127\022\117\053\270\054\107\001\001\000" +
    "\002\001\001\000\014\012\114\017\127\022\117\053\266" +
    "\054\107\001\001\000\004\052\267\001\001\000\002\001" +
    "\001\000\004\052\271\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\066\307\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\012\114\017\127\022\117\047\306" +
    "\051\113\053\111\054\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\056\304\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\114\017\206" +
    "\055\311\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\063\314\001\001\000\002\001\001\000\004\122\317" +
    "\001\001\000\006\012\063\015\320\001\001\000\002\001" +
    "\001\000\004\122\321\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\324\013\325\001\001\000\004\014" +
    "\326\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\330\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\333\001\001\000\022\003\334\004\006\005\012" +
    "\006\015\007\010\116\017\227\004\253\005\001\001\000" +
    "\002\001\001\000\022\005\343\006\344\007\342\116\017" +
    "\227\004\253\005\257\336\350\337\001\001\000\004\011" +
    "\u0105\001\001\000\010\263\357\265\355\375\360\001\001" +
    "\000\004\262\353\001\001\000\006\012\114\017\350\001" +
    "\001\000\022\003\347\004\006\005\012\006\015\007\010" +
    "\116\017\227\004\253\005\001\001\000\022\003\346\004" +
    "\006\005\012\006\015\007\010\116\017\227\004\253\005" +
    "\001\001\000\022\003\345\004\006\005\012\006\015\007" +
    "\010\116\017\227\004\253\005\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\351\001" +
    "\001\000\022\003\352\004\006\005\012\006\015\007\010" +
    "\116\017\227\004\253\005\001\001\000\002\001\001\000" +
    "\010\012\027\022\031\260\354\001\001\000\002\001\001" +
    "\000\004\011\u0104\001\001\000\006\262\371\264\370\001" +
    "\001\000\004\011\367\001\001\000\002\001\001\000\006" +
    "\262\363\266\362\001\001\000\002\001\001\000\010\012" +
    "\364\022\365\261\366\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\377" +
    "\374\001\001\000\010\012\364\022\365\261\372\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\376\u0101\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\005\343\006\344" +
    "\007\342\116\017\227\004\253\005\257\336\350\u0106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\u0224\232" +
    "\u0226\001\001\000\004\012\u0223\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\063\015" +
    "\u016a\001\001\000\006\012\324\013\u0115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\072" +
    "\u0116\236\u0118\001\001\000\002\001\001\000\006\012\u0163" +
    "\073\u0164\001\001\000\002\001\001\000\004\075\u011b\001" +
    "\001\000\004\076\u011e\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\057\u011f\001\001\000" +
    "\022\012\114\017\127\022\117\047\u0120\051\113\053\111" +
    "\054\107\070\u0121\001\001\000\010\012\u0126\045\u0161\046" +
    "\u0127\001\001\000\004\131\u012d\001\001\000\004\071\u0124" +
    "\001\001\000\020\012\114\017\127\022\117\047\u0125\051" +
    "\113\053\111\054\107\001\001\000\002\001\001\000\010" +
    "\012\u0126\045\u012a\046\u0127\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\u0126\046\u012c\001\001\000\002" +
    "\001\001\000\004\071\u012b\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\067\u0146\001\001\000\006\012\063" +
    "\015\u012f\001\001\000\010\012\u0126\045\u0130\046\u0127\001" +
    "\001\000\006\133\u0135\134\u0132\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\135\u013f\001\001\000\004\135" +
    "\u013e\001\001\000\004\132\u013a\001\001\000\004\135\u0138" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\063\015\u013b\001\001\000\002\001\001\000\010\012\u0126" +
    "\045\u013c\046\u0127\001\001\000\006\133\u013d\134\u0132\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\063\015\u0141\001\001\000\010\012\u0126\045" +
    "\u0142\046\u0127\001\001\000\002\001\001\000\006\056\102" +
    "\062\u0144\001\001\000\006\133\u0145\134\u0132\001\001\000" +
    "\002\001\001\000\004\104\u0147\001\001\000\004\077\u0150" +
    "\001\001\000\002\001\001\000\020\012\114\017\127\022" +
    "\117\047\u014a\051\113\053\111\054\107\001\001\000\004" +
    "\105\u014c\001\001\000\020\012\114\017\127\022\117\047" +
    "\u014d\051\113\053\111\054\107\001\001\000\002\001\001" +
    "\000\004\105\u014e\001\001\000\002\001\001\000\006\056" +
    "\102\062\u0160\001\001\000\004\100\u0152\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\012\114\017\127\022" +
    "\117\047\u0154\051\113\053\111\054\107\001\001\000\004" +
    "\101\u0156\001\001\000\004\012\u015f\001\001\000\004\102" +
    "\u0159\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\103\u015b\001\001\000\020\012\114\017\127\022\117\047" +
    "\u015c\051\113\053\111\054\107\001\001\000\002\001\001" +
    "\000\004\101\u015d\001\001\000\004\102\u015e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\071\u0162\001\001\000\002\001\001\000\004\074\u0166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\u0168\001\001\000\004\074\u0169\001\001\000" +
    "\002\001\001\000\010\240\u016b\241\u016f\246\u016e\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\012\u0184\175" +
    "\u0182\177\u0181\207\u0185\220\u0180\226\u0186\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\247\u0171\250\u0174\001" +
    "\001\000\004\251\u017c\001\001\000\004\021\u0179\001\001" +
    "\000\002\001\001\000\004\021\u0175\001\001\000\004\012" +
    "\u0178\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\u017a\001\001\000\002\001\001\000" +
    "\006\247\u017d\250\u0174\001\001\000\002\001\001\000\004" +
    "\251\u017e\001\001\000\002\001\001\000\004\012\u0211\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\176\u020e" +
    "\001\001\000\004\012\u020c\001\001\000\010\023\u01c6\024" +
    "\153\025\157\001\001\000\004\221\u018a\001\001\000\002" +
    "\001\001\000\004\174\u01c2\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\211\u018e\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\222\u0190\001" +
    "\001\000\004\012\u0191\001\001\000\002\001\001\000\004" +
    "\102\u0192\001\001\000\004\223\u0193\001\001\000\002\001" +
    "\001\000\004\012\u0195\001\001\000\004\102\u0196\001\001" +
    "\000\004\223\u0197\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\211\u019a\001\001\000\004\222\u019b\001\001" +
    "\000\002\001\001\000\004\224\u019e\001\001\000\004\012" +
    "\u01bc\001\001\000\002\001\001\000\006\012\324\013\u01a0" +
    "\001\001\000\004\213\u01a2\001\001\000\004\012\u01ba\001" +
    "\001\000\004\214\u01a4\001\001\000\004\215\u01af\001\001" +
    "\000\004\174\u01a6\001\001\000\004\351\u01a8\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\352\u01ac\001\001\000\004\204\u01ad\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\214\u01b9\001\001\000\004\217\u01b8\001\001\000" +
    "\004\217\u01b2\001\001\000\002\001\001\000\004\216\u01b6" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\225\u01bd\001" +
    "\001\000\002\001\001\000\004\012\u01bf\001\001\000\004" +
    "\225\u01c0\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\056\102\062\u01c4\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\200\u01c8\001\001\000" +
    "\004\012\u020b\001\001\000\014\210\u01d2\212\u01d1\354\u01cc" +
    "\356\u01ca\357\u01cb\001\001\000\004\203\u0207\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\355\u01ff\001\001" +
    "\000\004\211\u01fc\001\001\000\004\201\u01ee\001\001\000" +
    "\004\012\u01e8\001\001\000\006\206\u01e7\207\u01df\001\001" +
    "\000\002\001\001\000\006\206\u01de\207\u01df\001\001\000" +
    "\002\001\001\000\004\174\u01da\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\211\u01d9\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\056\102" +
    "\062\u01dc\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\210\u01e0\212\u01d1\001\001\000\006" +
    "\206\u01e1\207\u01df\001\001\000\002\001\001\000\006\012" +
    "\324\013\u01e3\001\001\000\004\213\u01e4\001\001\000\004" +
    "\214\u01e5\001\001\000\004\174\u01e6\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\210\u01d2\212\u01d1\354\u01cc" +
    "\357\u01e9\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\202\u01f1\001\001\000\002\001\001\000\004\203\u01f7\001" +
    "\001\000\004\174\u01f2\001\001\000\004\205\u01f4\001\001" +
    "\000\002\001\001\000\006\206\u01f5\207\u01df\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\205\u0200\001\001\000\006\206\u0201\207\u01df\001" +
    "\001\000\002\001\001\000\004\353\u0203\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\174\u0208\001\001\000\004\205\u0209\001\001" +
    "\000\006\206\u020a\207\u01df\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\012\u0184\175\u020f" +
    "\177\u0181\207\u0185\220\u0180\226\u0186\001\001\000\002\001" +
    "\001\000\004\176\u0210\001\001\000\002\001\001\000\004" +
    "\211\u0212\001\001\000\004\222\u0213\001\001\000\002\001" +
    "\001\000\004\012\u0215\001\001\000\016\023\u0216\024\153" +
    "\025\157\242\u021a\243\u021b\244\u0219\001\001\000\004\200" +
    "\u0221\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\245\u021e\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\204\u0222\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\233\u0228\001\001\000\004\012\u022c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\324\013" +
    "\u022e\001\001\000\002\001\001\000\012\022\u0232\315\u0233" +
    "\317\u0231\320\u0230\001\001\000\002\001\001\000\004\321" +
    "\u0270\001\001\000\004\322\u026c\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\025\u023a\324\u0239\325\u0237\326" +
    "\u0236\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\331\u0264\001\001\000\002\001\001\000\004\331\u023c\001" +
    "\001\000\012\304\u0249\332\u0248\333\u024a\366\u024e\001\001" +
    "\000\004\322\u023e\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\u0241\116\017\001\001\000\004\011\050" +
    "\001\001\000\002\001\001\000\020\012\114\017\127\022" +
    "\117\047\u0243\051\113\053\111\054\107\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\334\u0258\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\335\u0252\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\304\u0249\332\u0259\333\u024a\366" +
    "\u024e\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\u025d\306\u025e\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\322\u0265\001\001\000\002\001\001" +
    "\000\006\075\u0269\327\u0268\001\001\000\004\075\u026a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\012\114\017\127\022\117\047" +
    "\u026d\051\113\053\111\054\107\001\001\000\004\323\u026e" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\022\u0232\317\u0231\320\u0272\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

    public LinkedList<String> SyntacticErrors = new LinkedList<String>();
    private Symbol s;

    public final Class getSymbolContainer() {
    return sym.class;
    }


    public void syntax_error(Symbol cur_token){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        String Auxiliar = "";
        List<Integer> ids = expected_token_ids();
        LinkedList<String> list = new LinkedList<String>(); 
        for (Integer expected : ids) {
                  Auxiliar = symbl_name_from_id(expected);
                  Auxiliar = " " + Auxiliar + " ";
                  list.add(Auxiliar);
        }
        SyntacticErrors.add("* Error Sintactico. Linea: " + (s.right+1) + " Columna: " + (s.left+1) + ". Simbolo:  \'" + s.value + "\'  * Se esperaba: " + list);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
      java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        String Auxiliar = "";
        List<Integer> ids = expected_token_ids();
        LinkedList<String> list = new LinkedList<String>(); 
        for (Integer expected : ids) {
                  Auxiliar = symbl_name_from_id(expected);
                  Auxiliar = " " + Auxiliar + " ";
                  list.add(Auxiliar);
        }
        SyntacticErrors.add("* Error Sintactico. Linea: " + (s.right+1) + " Columna: " + (s.left+1) + ". Simbolo:  \'" + s.value + "\'  * Se esperaba: " + list);
    }


    public String symbl_name_from_id(int id) {
	  Field[] fields = getSymbolContainer().getFields();
	  for(Field f : fields){
		  try {
			if (f.getInt(null)==id)
			  return f.getName();
		} catch (IllegalArgumentException e) {
			//e.printStackTrace();
		} catch (IllegalAccessException e) {
			//e.printStackTrace();
		}
	  }
	  return "Simbolo Invalido id";
    }
   

     public List<Integer> expected_token_ids() {
        List<Integer> ret = new LinkedList<Integer>();
	  int parse_state = ((Symbol)stack.peek()).parse_state ;
	  short[] row = action_tab[parse_state];
	  for (int i = 0; i<row.length; i+=2){
		  if (row[i]==-1) continue;
		  if (!validate_expected_symbol(row[i])) continue;
		  ret.add(new Integer(row[i]));
	  }
	  return ret;

    }

    /*protected static final int _error_sync_size(){
        return 1;
    }*/

    protected int error_sync_size() {
            return 1;
    }

    private boolean validate_expected_symbol(int id){
	  short lhs,rhs_size;
	  int act;
	  try {
		  virtual_parse_stack vstack = new virtual_parse_stack(stack);
		  for (;;)
		  {
			  act = get_action(vstack.top(), id);

			  if (act == 0) return false;

			  if (act > 0)
			  {
				  vstack.push(act-1);

				  if (!advance_lookahead()) return true;
			  }
			  else
			  {
				  if ((-act)-1 == start_production())  return true;

				  lhs = production_tab[(-act)-1][0];
				  rhs_size = production_tab[(-act)-1][1];
				  for (int i = 0; i < rhs_size; i++) vstack.pop();

				  vstack.push(get_reduce(vstack.top(), lhs));
			  }
		  }

	  } catch (Exception e) {
		  e.printStackTrace();
	  }
	  return true;
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 539: // Data_Type ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data_Type",243, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 538: // Data_Type ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data_Type",243, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 537: // Data_Type ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data_Type",243, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 536: // Data_Type ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data_Type",243, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 535: // Data_Type ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data_Type",243, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 534: // RepeatProcedureA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatProcedureA",242, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 533: // RepeatProcedureA ::= Coma RepeatProcedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatProcedureA",242, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 532: // RepeatProcedure ::= Data_Type RepeatProcedureA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatProcedure",241, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 531: // RepeatProcedure ::= Variable Igual Data_Type RepeatProcedureA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RepeatProcedure",241, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 530: // ExecProcedure ::= ClauseExec Object4 RepeatProcedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExecProcedure",240, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 529: // ExecProcedure ::= ClauseExec Object4 Apertura_de_paréntesis RepeatProcedure Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExecProcedure",240, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 528: // ExecProcedure ::= ClauseExec Object4 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExecProcedure",240, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 527: // EXECUTE_AS_CLAUSE ::= ClauseExec AS Clause 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXECUTE_AS_CLAUSE",244, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 526: // FuncOpcC ::= OFF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcC",219, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 525: // FuncOpcC ::= ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcC",219, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 524: // FuncOpcB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcB",218, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 523: // FuncOpcB ::= Coma FuncOpc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcB",218, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 522: // FuncOpcA ::= INLINE Igual FuncOpcC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 521: // FuncOpcA ::= EXECUTE_AS_CLAUSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 520: // FuncOpcA ::= CALLED ON NULL INPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 519: // FuncOpcA ::= RETURNS NULL ON NULL INPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 518: // FuncOpcA ::= SCHEMABINDING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 517: // FuncOpcA ::= ENCRYPTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 516: // FuncOpc ::= FuncOpcA FuncOpcB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpc",216, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 515: // With ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("With",215, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 514: // With ::= WITH FuncOpc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("With",215, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // DType ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // DType ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // DType ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // DType ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // DType ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // DType ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // DTypes ::= DType 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DTypes",248, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // DTypes ::= Apertura_de_paréntesis DType Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DTypes",248, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // SCT ::= Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCT",213, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // SCT ::= Apertura_de_paréntesis Select Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCT",213, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // Table ::= TABLE With As RETURN SCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Table",212, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // Data ::= Tipo_datoA With As BEGIN DML RETURN Expresion END 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data",211, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // Type_Return ::= Table 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type_Return",210, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // Type_Return ::= Data 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type_Return",210, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // ReadOnly ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReadOnly",209, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // ReadOnly ::= READONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReadOnly",209, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // Param_B ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param_B",207, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // Param_B ::= Coma Param_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param_B",207, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // Param_A ::= Param Param_B 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param_A",206, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // As ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("As",208, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // As ::= AS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("As",208, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // Param ::= Variable As Expresion ReadOnly 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param",205, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // OrAlter ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrAlter",204, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // OrAlter ::= OR ALTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrAlter",204, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // Params ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Params",203, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // Params ::= Param_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Params",203, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // Function ::= OrAlter FUNCTION Object2 Apertura_de_paréntesis Params Cierre_de_paréntesis RETURNS Type_Return 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Function",202, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // CursorDeclareg ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareg",229, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // CursorDeclareg ::= OF ColumnListA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareg",229, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // CursorDeclaref ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaref",228, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // CursorDeclaref ::= FOR UPDATE CursorDeclareg 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaref",228, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // CursorDeclaree ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaree",227, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // CursorDeclaree ::= TYPE_WARNING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaree",227, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // CursorDeclared ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // CursorDeclared ::= OPTIMISTIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // CursorDeclared ::= SCROLL_LOCKS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // CursorDeclared ::= READ_ONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // CursorDeclarec ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // CursorDeclarec ::= FAST_FORWARD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // CursorDeclarec ::= DYNAMIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // CursorDeclarec ::= KEYSET 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // CursorDeclarec ::= STATIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // CursorDeclareb ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // CursorDeclareb ::= FORWARD_ONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // CursorDeclareb ::= SCROLL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // CursorDeclarea ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // CursorDeclarea ::= GLOBAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // CursorDeclarea ::= LOCAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // CursorDeclare ::= DECLARE ID CURSOR CursorDeclarea CursorDeclareb CursorDeclarec CursorDeclared CursorDeclaree FOR Select CursorDeclaref 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclare",222, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // StmtSP2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP2",201, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // StmtSP2 ::= DML 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP2",201, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // StmtSP1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP1",200, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // StmtSP1 ::= DML StmtSP2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP1",200, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // StmtSP ::= DML StmtSP1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP",199, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // StartSP ::= BEGIN StmtSP END 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StartSP",198, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // ReplicationSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReplicationSP",197, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // ReplicationSP ::= FOR REPLICATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReplicationSP",197, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // Clause ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // Clause ::= OWNER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // Clause ::= SELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // Clause ::= CALLER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // ProcOptionRec ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOptionRec",195, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // ProcOptionRec ::= Coma ProcOption1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOptionRec",195, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // ClauseExec ::= EXEC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ClauseExec",194, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // ClauseExec ::= EXECUTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ClauseExec",194, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // ProcOption2 ::= ClauseExec AS Clause 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // ProcOption2 ::= RECOMPILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // ProcOption2 ::= ENCRYPTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // ProcOption1 ::= ProcOption2 ProcOptionRec 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption1",192, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // ProcOption ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption",191, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // ProcOption ::= WITH ProcOption1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption",191, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // TipoD_SP3 ::= OUTPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP3",190, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // TipoD_SP3 ::= OUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP3",190, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // TipoD_SP2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP2",189, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // TipoD_SP2 ::= TipoD_SP3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP2",189, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // TipoD_SP1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP1",188, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // TipoD_SP1 ::= Igual DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP1",188, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // TipoD_SP ::= ID READONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // TipoD_SP ::= CURSOR VARYING TipoD_SP3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // TipoD_SP ::= Tipo_dato TipoD_SP1 TipoD_SP2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // ParamsB_SP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsB_SP",186, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // ParamsB_SP ::= Coma ParamsA_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsB_SP",186, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // ParamsA_SP ::= Variable TipoD_SP ParamsB_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsA_SP",185, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // ParamsSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsSP",184, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // ParamsSP ::= ParamsA_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsSP",184, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // NumSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NumSP",183, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // NumSP ::= Punto_y_coma Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NumSP",183, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // SP_Reservada ::= PROCEDURE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SP_Reservada",182, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // SP_Reservada ::= PROC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SP_Reservada",182, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // Procedure ::= OrAlter SP_Reservada Object2 NumSP ParamsSP ProcOption ReplicationSP AS StartSP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Procedure",181, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // RollbackA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RollbackA",180, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // RollbackA ::= TranName NameA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RollbackA",180, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // Rollback ::= ROLLBACK RollbackA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Rollback",179, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // OnOff ::= OFF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OnOff",252, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // OnOff ::= ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OnOff",252, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // CommitB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CommitB",253, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // CommitB ::= WITH Apertura_de_paréntesis DELAYED_DURABILITY Igual OnOff Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CommitB",253, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // CommitA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CommitA",178, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // CommitA ::= TranName NameA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CommitA",178, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // Commit ::= COMMIT CommitA CommitB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Commit",177, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // TranName ::= TRANSACTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TranName",176, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // TranName ::= TRAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TranName",176, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // NameA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // NameA ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // NameA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // Name ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Name",174, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // Name ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Name",174, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // SavePoint ::= SAVE TranName Name 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SavePoint",173, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // FinalTran ::= Rollback Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FinalTran",251, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // FinalTran ::= Commit Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FinalTran",251, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // BeginTranC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranC",172, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // BeginTranC ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranC",172, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // BeginTranB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranB",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // BeginTranB ::= WITH MARK BeginTranC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranB",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // BeginTranA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranA",170, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // BeginTranA ::= Name BeginTranB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranA",170, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // BeginTran ::= BEGIN TranName BeginTranA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTran",169, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // AlterTableDropC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropC",167, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // AlterTableDropC ::= Coma AlterTableDropA AlterTableDropC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropC",167, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // AlterTableDropB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropB",166, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // AlterTableDropB ::= CONSTRAINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropB",166, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // AlterTableDropA ::= COLUMN IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropA",165, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // AlterTableDropA ::= AlterTableDropB IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropA",165, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // AlterTableDrop ::= DROP AlterTableDropA AlterTableDropC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDrop",164, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // AlterColumnE ::= NOT FOR REPLICATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnE",163, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // AlterColumnE ::= ROWGUIDCOL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnE",163, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // AlterColumnD ::= DROP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnD",162, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // AlterColumnD ::= ADD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnD",162, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // AlterColumnA ::= Tipo_dato ColumnDefA ColumnDefG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnA",161, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // AlterColumnC ::= AlterColumnD AlterColumnE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnC",160, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // AlterColumnC ::= AlterColumnA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnC",160, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // AlterColumn ::= ALTER COLUMN ID AlterColumnC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumn",159, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // AlterTableA ::= AlterTableDrop 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // AlterTableA ::= ADD CNC CNCA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // AlterTableA ::= AlterColumn 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // AlterTable ::= TABLE Object3 AlterTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTable",157, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // AlterViewA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterViewA",156, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // AlterViewA ::= ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterViewA",156, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // AlterView ::= VIEW Object2 AlterViewA AS Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterView",155, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // AlterUser ::= USER ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterUser",154, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // AlterDBB ::= SET ROLLBACK IMMEDIATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBB",153, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // AlterDBB ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBB",153, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // AlterDBA ::= CURRENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBA",152, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // AlterDBA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBA",152, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // AlterDatabase ::= DATABASE AlterDBA AlterDBB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDatabase",151, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // AlterA ::= Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // AlterA ::= AlterView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // AlterA ::= AlterDatabase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // AlterA ::= AlterUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // AlterA ::= AlterTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // Alter ::= ALTER AlterA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alter",149, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // TableIndex ::= INDEX ID ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableIndex",148, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // TableConstrE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrE",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // TableConstrE ::= Coma ID TableConstrE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrE",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // TableConstrD ::= Apertura_de_paréntesis ID TableConstrE Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrD",146, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // TableConstrC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrC",145, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // TableConstrC ::= Coma ID OrderB TableConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrC",145, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // TableConstrB ::= Apertura_de_paréntesis ID OrderB TableConstrC Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrB",144, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // TableConstrA ::= CHECK NFR Apertura_de_paréntesis SearchCondition Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // TableConstrA ::= FOREIGN KEY TableConstrD REFERENCES Object2 ColumnConstrE ColumnConstrF NFR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // TableConstrA ::= UNIQUE ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // TableConstrA ::= PRIMARY KEY ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // TableConstr ::= ColumnConstrA TableConstrA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstr",142, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // ColumnConstrI ::= SET ColumnConstrH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrI",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // ColumnConstrI ::= CASCADE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrI",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // ColumnConstrH ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrH",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // ColumnConstrH ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrH",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // ColumnConstrG ::= UPDATE ColumnConstrI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrG",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // ColumnConstrG ::= DELETE ColumnConstrI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrG",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // ColumnConstrF ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrF",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // ColumnConstrF ::= ON ColumnConstrG ColumnConstrF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrF",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // ColumnConstrE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrE",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // ColumnConstrE ::= Apertura_de_paréntesis ID Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrE",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // ColumnConstrD ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrD",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // ColumnConstrD ::= FOREIGN KEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrD",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // ColumnConstrC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // ColumnConstrC ::= NONCLUSTERED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // ColumnConstrC ::= CLUSTERED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // ColumnConstrB ::= CHECK NFR Apertura_de_paréntesis SearchCondition Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // ColumnConstrB ::= ColumnConstrD REFERENCES Object2 ColumnConstrE ColumnConstrF NFR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // ColumnConstrB ::= UNIQUE ColumnConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // ColumnConstrB ::= PRIMARY KEY ColumnConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // ColumnConstrA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrA",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // ColumnConstrA ::= CONSTRAINT ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrA",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // ColumnConstr ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstr",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // ColumnConstr ::= ColumnConstrA ColumnConstrB ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstr",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // ColumnDefH ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefH",131, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // ColumnDefH ::= ROWGUIDCOL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefH",131, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // ColumnDefG ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefG",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // ColumnDefG ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefG",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // ColumnDefF ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefF",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // ColumnDefF ::= Apertura_de_paréntesis Int Coma Int Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefF",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // ColumnDefE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefE",128, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // ColumnDefE ::= IDENTITY ColumnDefF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefE",128, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // ColumnDefD ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // ColumnDefD ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // ColumnDefD ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // ColumnDefD ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // ColumnDefD ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // ColumnDefA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefA",126, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // ColumnDefA ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefA",126, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // ColumnDefV ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // ColumnDefV ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // ColumnDefV ::= NOT NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // ColumnDefW ::= FOR REPLICATION ColumnDefV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefW",235, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // ColumnDefW ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefW",235, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // ColumnDefX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefX",234, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // ColumnDefX ::= NOT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefX",234, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // ColumnDefY ::= ColumnConstrB ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // ColumnDefY ::= ROWGUIDCOL ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // ColumnDefY ::= ColumnDefX ColumnDefW ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // ColumnDefY ::= IDENTITY ColumnDefF NFR ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // ColumnDefY ::= DEFAULT ColumnDefD ColumnDefE NFR ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // ColumnDefZ ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // ColumnDefZ ::= ColumnDefY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // ColumnDefZ ::= CONSTRAINT ID ColumnDefY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // ColumnDef ::= ID Tipo_dato ColumnDefA ColumnDefZ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDef",125, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // CNCA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNCA",124, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // CNCA ::= Coma CNC CNCA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNCA",124, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // CNC ::= TableIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // CNC ::= TableConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // CNC ::= ColumnDef 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // NFR2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR2",232, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // NFR2 ::= NOT ColumnDefG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR2",232, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // NFR1 ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR1",231, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // NFR1 ::= FOR REPLICATION NFR2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR1",231, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // NFR ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // NFR ::= NOT NFR1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // FileGroup ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileGroup",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // FileGroup ::= ON PRIMARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileGroup",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // CreateTable ::= TABLE Object3 Apertura_de_paréntesis CNC CNCA Cierre_de_paréntesis FileGroup 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateTable",120, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // OptionalOn ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OptionalOn",119, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // OptionalOn ::= ON ID Apertura_de_paréntesis ID Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OptionalOn",119, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // IncludeIndex ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IncludeIndex",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // IncludeIndex ::= INCLUDE ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IncludeIndex",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // ColumnIndexB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexB",117, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // ColumnIndexB ::= Coma ID OrderB ColumnIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexB",117, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // ColumnIndexA ::= ID OrderB ColumnIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexA",116, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // ColumnIndex ::= Apertura_de_paréntesis ColumnIndexA Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndex",115, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // CreateIndexA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndexA",114, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // CreateIndexA ::= UNIQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndexA",114, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // CreateIndex ::= CreateIndexA ColumnConstrC INDEX ID ON Object3 ColumnIndex IncludeIndex Where OptionalOn 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndex",113, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // CreateView ::= VIEW Object2 AS Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateView",112, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // Filegrowth_A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // Filegrowth_A ::= MODULAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // Filegrowth_A ::= Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // Filegrowth ::= FILEGROWTH Igual Int Filegrowth_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth",110, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // Maxsize_A ::= UNLIMITED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize_A",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // Maxsize_A ::= Int Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize_A",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // Maxsize ::= MAXSIZE Igual Maxsize_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize",108, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // Size_A ::= TB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // Size_A ::= GB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // Size_A ::= MB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // Size_A ::= KB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // Sizenw ::= SIZE Igual Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sizenw",239, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // Sizew ::= SIZE Igual Int Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sizew",238, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // Size ::= Sizenw 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size",106, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // Size ::= Sizew 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size",106, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // Optional ::= Filegrowth 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // Optional ::= Maxsize 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // Optional ::= Size 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // Optionals ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optionals",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // Optionals ::= Coma Optional Optionals 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optionals",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // COLLATEDB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLLATEDB",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // COLLATEDB ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLLATEDB",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // FileDB ::= FILENAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileDB",250, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // FileDB ::= FILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileDB",250, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // NameDB ::= NAMES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameDB",249, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // NameDB ::= NAME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameDB",249, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // FileSpec ::= Apertura_de_paréntesis NameDB Igual String Coma FileDB Igual String Optionals Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpec",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // FileSpecs ::= FileSpec 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpecs",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // FileSpecs ::= FileSpec Coma FileSpecs 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpecs",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // Primary ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Primary",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // Primary ::= PRIMARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Primary",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // CreateDBB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBB",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // CreateDBB ::= ON Primary FileSpecs 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBB",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // CreateDBA ::= CreateDBB COLLATEDB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBA",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // CreateDB ::= DATABASE ID CreateDBA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDB",95, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // CreateUser ::= USER ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateUser",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // CreateA ::= Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // CreateA ::= Procedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // CreateA ::= CreateView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // CreateA ::= CreateUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // CreateA ::= CreateIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // CreateA ::= CreateDB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // CreateA ::= CreateTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // Create ::= CREATE CreateA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Create",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // Outer ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Outer",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // Outer ::= OUTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Outer",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // Type ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // Type ::= FULL Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // Type ::= LEFT Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // Type ::= RIGHT Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // Type ::= INNER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // Join ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Join",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // Join ::= Type JOIN Object3 Alias ON SearchCondition Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Join",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // FromSelectA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelectA",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // FromSelectA ::= Coma Object3 Alias Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelectA",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // FromSelect ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelect",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // FromSelect ::= FROM Object3 Alias Join FromSelectA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelect",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // FromUpdate ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromUpdate",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // FromUpdate ::= FROM Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromUpdate",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // UpdateC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateC",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // UpdateC ::= Coma UpdateA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateC",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // UpdateB ::= Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateB",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // UpdateB ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateB",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // UpdateA ::= ID Igual UpdateB UpdateC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateA",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // Update ::= UPDATE Top Object3 SET UpdateA FromUpdate Where 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Update",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // Server ::= Apertura_de_paréntesis ID Coma Int Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Server",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // DeleteC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteC",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // DeleteC ::= Coma Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteC",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // DeleteB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteB",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // DeleteB ::= FROM Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteB",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // DeleteA ::= Object3 DeleteB Where 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteA",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // DeleteA ::= OPENQUERY Server 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteA",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // FromDelete ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromDelete",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // FromDelete ::= FROM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromDelete",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // Delete ::= DELETE Top FromDelete DeleteA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Delete",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // InsertValoresA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValoresA",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // InsertValoresA ::= Coma Apertura_de_paréntesis InsertExpresion Cierre_de_paréntesis InsertValoresA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValoresA",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // InsertValores ::= DEFAULT VALUES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValores",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // InsertValores ::= VALUES Apertura_de_paréntesis InsertExpresion Cierre_de_paréntesis InsertValoresA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValores",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // InsertExpresionB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionB",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // InsertExpresionB ::= Coma InsertExpresionA InsertExpresionB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionB",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // InsertExpresionA ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // InsertExpresionA ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // InsertExpresionA ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // InsertExpresionA ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // InsertExpresionA ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // InsertExpresion ::= InsertExpresionA InsertExpresionB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresion",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // InsertColumnList ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertColumnList",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // InsertColumnList ::= ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertColumnList",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // InsertInto ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertInto",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // InsertInto ::= INTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertInto",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // Insert ::= INSERT Top InsertInto Object3 InsertColumnList InsertValores 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Insert",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // GroupA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GroupA",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // GroupA ::= Coma Expresion GroupA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GroupA",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // Group ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Group",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // Group ::= GROUP BY Expresion GroupA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Group",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // OrderC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderC",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // OrderC ::= Coma Expresion OrderA OrderB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderC",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // OrderB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // OrderB ::= DESC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // OrderB ::= ASC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // OrderA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderA",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // OrderA ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderA",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Order ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Order",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Order ::= ORDER BY Expresion OrderA OrderB OrderC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Order",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Having ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Having",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Having ::= HAVING SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Having",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // SelectA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // SelectA ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // SelectA ::= ALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Select ::= SELECT SelectA Top SelectColumns FromSelect Where Group Having Order 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Select",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // ColumnListB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListB",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // ColumnListB ::= Coma ID ColumnListB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListB",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // ColumnListA ::= ID ColumnListB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListA",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // ColumnList ::= Apertura_de_paréntesis ColumnListA Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnList",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // SelectColumnsA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumnsA",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // SelectColumnsA ::= Coma Expresion Alias SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumnsA",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // SelectColumns ::= Multiplicacion SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumns",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // SelectColumns ::= Expresion Alias SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumns",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Where ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Where",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Where ::= WHERE SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Where",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // PredicadoC ::= LIKE Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // PredicadoC ::= BETWEEN Expresion AND Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // PredicadoC ::= IN Apertura_de_paréntesis Expresion Expresiones Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // PredicadoA ::= Not PredicadoC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // PredicadoA ::= IS Not NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // PredicadoA ::= OperadoresBooleanos Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OperadoresBooleanos ::= Menor_o_igual_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OperadoresBooleanos ::= Menor_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OperadoresBooleanos ::= Mayor_o_igual_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // OperadoresBooleanos ::= Mayor_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // OperadoresBooleanos ::= Operador_no_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // OperadoresBooleanos ::= Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Predicado ::= Expresion PredicadoA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Predicado",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SearchConditionA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // SearchConditionA ::= OR SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // SearchConditionA ::= AND SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // SearchCondition ::= Apertura_de_paréntesis SearchCondition Cierre_de_paréntesis SearchConditionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchCondition",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // SearchCondition ::= Not Predicado SearchConditionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchCondition",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Expresiones ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresiones",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Expresiones ::= Coma Expresion Expresiones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresiones",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // TopA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TopA",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // TopA ::= PERCENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TopA",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Top ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Top",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Top ::= TOP Apertura_de_paréntesis Int Cierre_de_paréntesis TopA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Top",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Not ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Not",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Not ::= NOT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Not",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ExpresionF ::= Multiplicacion Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ExpresionF ::= Int Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ExpresionF ::= Object4 Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // FunctionContentA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FunctionContentA",247, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // FunctionContentA ::= Coma FunctionContent 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FunctionContentA",247, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // FunctionContent ::= Tipo_dato FunctionContentA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FunctionContent",246, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // CallFunction ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallFunction",245, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // CallFunction ::= Apertura_de_paréntesis FunctionContent Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CallFunction",245, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ExpresionE ::= COUNT Apertura_de_paréntesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // ExpresionE ::= MAX Apertura_de_paréntesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ExpresionE ::= MIN Apertura_de_paréntesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ExpresionE ::= AVG Apertura_de_paréntesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ExpresionE ::= SUM Apertura_de_paréntesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ExpresionE ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ExpresionE ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ExpresionE ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ExpresionE ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ExpresionE ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ExpresionE ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ExpresionE ::= Object4 CallFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ExpresionD ::= ExpresionE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ExpresionD ::= Apertura_de_paréntesis Expresion PredicadoC Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ExpresionC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ExpresionC ::= Division ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ExpresionC ::= Multiplicacion ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ExpresionB ::= ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionB",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ExpresionA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ExpresionA ::= Resta ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ExpresionA ::= Suma ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expresion ::= ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresion",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // AliasA ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AliasA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // AliasA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AliasA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Alias ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Alias ::= AliasA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Alias ::= AS AliasA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Truncate ::= TRUNCATE TABLE Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Truncate",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DropIndexB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexB",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DropIndexB ::= Coma DropIndexA DropIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexB",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DropIndexA ::= ID ON Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexA",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DropIndex ::= INDEX IFE DropIndexA DropIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndex",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DropViewA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropViewA",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DropViewA ::= Coma Object2 DropViewA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropViewA",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DropView ::= VIEW IFE Object2 DropViewA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropView",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DropDatabaseA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabaseA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DropDatabaseA ::= Coma ID DropDatabaseA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabaseA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DropDatabase ::= DATABASE IFE ID DropDatabaseA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabase",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DropUser ::= USER IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropUser",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DropTableA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTableA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DropTableA ::= Coma Object3 DropTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTableA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DropTable ::= TABLE IFE Object3 DropTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTable",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DropProcedureA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropProcedureA",255, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DropProcedureA ::= Coma Object2 DropProcedureA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropProcedureA",255, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DropProcedure ::= SP_Reservada IFE Object2 DropProcedureA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropProcedure",254, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DropFunction ::= FUNCTION IFE Object2 DropProcedureA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropFunction",256, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DropA ::= DropFunction 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DropA ::= DropProcedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DropA ::= DropIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DropA ::= DropView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DropA ::= DropDatabase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DropA ::= DropUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DropA ::= DropTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Drop ::= DROP DropA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Drop",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DataOptional ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DataOptional",257, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DataOptional ::= Apertura_de_paréntesis Int Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DataOptional",257, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Tipo_datoC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoC",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Tipo_datoC ::= Coma Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoC",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Tipo_datoB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoB",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Tipo_datoB ::= Apertura_de_paréntesis Int Tipo_datoC Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoB",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Tipo_datoA ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Tipo_datoA ::= DATETIME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Tipo_datoA ::= MONEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Tipo_datoA ::= NVARCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Tipo_datoA ::= NUMERIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Tipo_datoA ::= SMALLINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Tipo_datoA ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Tipo_datoA ::= INT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Tipo_datoA ::= TIME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Tipo_datoA ::= REAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Tipo_datoA ::= NCHAR DataOptional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Tipo_datoA ::= CURSOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Tipo_datoA ::= CHAR DataOptional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Tipo_datoA ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Tipo_datoA ::= BIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Tipo_datoA ::= DATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Tipo_datoA ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Tipo_datoA ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Tipo_datoA ::= VARCHAR DataOptional 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Tipo_datoD ::= Apertura_de_corchetes Tipo_datoA Cierre_de_corchetes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Tipo_datoD ::= Tipo_datoA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Tipo_dato ::= Tipo_datoD Tipo_datoB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_dato",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Variable ::= Arroba Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // IFE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IFE ::= IF EXISTS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Object4A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4A",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Object4A ::= Punto Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4A",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Object4 ::= ID Object4A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Object3A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3A",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Object3A ::= Punto Object2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3A",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Object3 ::= ID Object3A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Object2A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2A",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Object2A ::= Punto ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2A",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Object2 ::= ID Object2A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ID ::= Apertura_de_corchetes Identificador Cierre_de_corchetes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ID ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Final ::= PYCGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Final",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Final ::= GO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Final",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Final ::= Punto_y_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Final",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TCL ::= BeginTran Final InicialB FinalTran 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DDL ::= error 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DDL ::= Alter Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DML ::= error Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DML ::= Delete Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // InicialB ::= SavePoint Final InicialB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialB",230, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // InicialB ::= USE Object4 Final Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialB",230, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // InicialB ::= TCL Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialB",230, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // InicialB ::= DDL Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialB",230, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // InicialB ::= DML Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialB",230, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // InicialA ::= USE Object4 Final Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // InicialA ::= TCL Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // InicialA ::= DDL Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // InicialA ::= DML Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Inicial ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicial",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicial ::= InicialA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicial",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

