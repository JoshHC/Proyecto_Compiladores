
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Oct 28 14:29:35 CST 2019
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java_cup.runtime.virtual_parse_stack;
import java.lang.reflect.Field;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Oct 28 14:29:35 CST 2019
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u01f3\000\002\002\004\000\002\003\005\000\002\003" +
    "\005\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\010\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\012\003\000\002" +
    "\012\005\000\002\013\004\000\002\014\004\000\002\014" +
    "\002\000\002\015\004\000\002\016\004\000\002\016\002" +
    "\000\002\017\004\000\002\020\004\000\002\020\002\000" +
    "\002\021\004\000\002\021\002\000\002\022\004\000\002" +
    "\023\004\000\002\024\003\000\002\024\005\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\026\006\000\002\026\002" +
    "\000\002\027\004\000\002\027\002\000\002\030\004\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\032\006\000\002\033" +
    "\005\000\002\033\002\000\002\034\005\000\002\035\006" +
    "\000\002\036\005\000\002\036\002\000\002\037\006\000" +
    "\002\040\005\000\002\040\002\000\002\041\006\000\002" +
    "\042\005\000\002\043\005\000\002\043\002\000\002\044" +
    "\005\000\002\045\004\000\002\045\003\000\002\045\002" +
    "\000\002\046\003\000\002\046\003\000\002\047\004\000" +
    "\002\050\005\000\002\050\005\000\002\050\002\000\002" +
    "\051\004\000\002\052\005\000\002\052\005\000\002\052" +
    "\002\000\002\053\006\000\002\053\003\000\002\054\003" +
    "\000\002\054\003\000\002\054\003\000\002\054\003\000" +
    "\002\054\003\000\002\054\003\000\002\054\005\000\002" +
    "\054\005\000\002\054\005\000\002\054\005\000\002\054" +
    "\005\000\002\055\004\000\002\055\004\000\002\055\004" +
    "\000\002\056\003\000\002\056\002\000\002\057\007\000" +
    "\002\057\002\000\002\060\003\000\002\060\002\000\002" +
    "\061\005\000\002\061\002\000\002\062\005\000\002\063" +
    "\004\000\002\063\004\000\002\063\002\000\002\064\004" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\065\004\000\002\065\005\000\002\065\004\000\002\066" +
    "\007\000\002\066\006\000\002\066\004\000\002\067\004" +
    "\000\002\067\002\000\002\070\005\000\002\070\004\000" +
    "\002\071\006\000\002\071\002\000\002\072\005\000\002" +
    "\073\004\000\002\074\005\000\002\074\002\000\002\075" +
    "\013\000\002\076\003\000\002\076\003\000\002\076\002" +
    "\000\002\077\004\000\002\077\002\000\002\100\010\000" +
    "\002\100\002\000\002\101\004\000\002\101\002\000\002" +
    "\102\003\000\002\102\003\000\002\102\002\000\002\103" +
    "\005\000\002\103\002\000\002\104\006\000\002\104\002" +
    "\000\002\105\005\000\002\105\002\000\002\106\010\000" +
    "\002\107\003\000\002\107\002\000\002\110\003\000\002" +
    "\110\002\000\002\111\004\000\002\112\003\000\002\112" +
    "\003\000\002\112\003\000\002\112\003\000\002\112\003" +
    "\000\002\113\005\000\002\113\002\000\002\114\007\000" +
    "\002\114\004\000\002\115\007\000\002\115\002\000\002" +
    "\116\006\000\002\117\003\000\002\117\002\000\002\120" +
    "\004\000\002\120\005\000\002\121\005\000\002\122\005" +
    "\000\002\122\002\000\002\123\007\000\002\124\011\000" +
    "\002\125\006\000\002\126\003\000\002\126\003\000\002" +
    "\127\004\000\002\127\002\000\002\130\005\000\002\130" +
    "\002\000\002\131\007\000\002\131\002\000\002\132\006" +
    "\000\002\132\002\000\002\133\011\000\002\133\002\000" +
    "\002\134\003\000\002\134\004\000\002\134\004\000\002" +
    "\134\004\000\002\134\002\000\002\135\003\000\002\135" +
    "\002\000\002\136\004\000\002\137\003\000\002\137\003" +
    "\000\002\137\003\000\002\137\003\000\002\137\003\000" +
    "\002\137\003\000\002\137\003\000\002\140\004\000\002" +
    "\141\005\000\002\142\004\000\002\143\005\000\002\143" +
    "\002\000\002\144\003\000\002\144\002\000\002\145\005" +
    "\000\002\145\003\000\002\146\014\000\002\147\004\000" +
    "\002\147\002\000\002\151\005\000\002\151\002\000\002" +
    "\153\003\000\002\153\003\000\002\153\003\000\002\154" +
    "\003\000\002\154\003\000\002\360\006\000\002\361\005" +
    "\000\002\155\003\000\002\155\003\000\002\155\003\000" +
    "\002\155\003\000\002\156\005\000\002\157\004\000\002" +
    "\157\003\000\002\160\006\000\002\161\003\000\002\161" +
    "\003\000\002\161\002\000\002\162\006\000\002\163\014" +
    "\000\002\164\003\000\002\164\002\000\002\165\005\000" +
    "\002\166\005\000\002\167\006\000\002\167\002\000\002" +
    "\170\004\000\002\170\002\000\002\171\007\000\002\171" +
    "\002\000\002\172\011\000\002\173\004\000\002\173\002" +
    "\000\002\174\004\000\002\174\002\000\002\351\005\000" +
    "\002\351\003\000\002\352\004\000\002\352\002\000\002" +
    "\175\003\000\002\175\003\000\002\175\003\000\002\176" +
    "\005\000\002\176\002\000\002\177\006\000\002\356\005" +
    "\000\002\356\003\000\002\356\002\000\002\357\010\000" +
    "\002\357\007\000\002\357\006\000\002\357\004\000\002" +
    "\357\004\000\002\354\003\000\002\354\002\000\002\355" +
    "\003\000\002\355\005\000\002\353\004\000\002\353\003" +
    "\000\002\353\002\000\002\200\004\000\002\200\002\000" +
    "\002\201\003\000\002\201\003\000\002\201\003\000\002" +
    "\201\003\000\002\201\003\000\002\202\004\000\002\202" +
    "\002\000\002\203\007\000\002\203\002\000\002\204\003" +
    "\000\002\204\002\000\002\205\003\000\002\205\002\000" +
    "\002\206\005\000\002\206\002\000\002\207\004\000\002" +
    "\207\002\000\002\210\005\000\002\210\004\000\002\210" +
    "\010\000\002\210\007\000\002\211\003\000\002\211\003" +
    "\000\002\211\002\000\002\212\004\000\002\212\002\000" +
    "\002\213\005\000\002\213\002\000\002\214\005\000\002" +
    "\214\002\000\002\215\004\000\002\215\004\000\002\216" +
    "\003\000\002\216\003\000\002\217\003\000\002\217\004" +
    "\000\002\220\004\000\002\221\006\000\002\221\005\000" +
    "\002\221\012\000\002\221\007\000\002\222\007\000\002" +
    "\223\006\000\002\223\002\000\002\224\006\000\002\225" +
    "\005\000\002\225\002\000\002\226\006\000\002\227\004" +
    "\000\002\230\003\000\002\230\003\000\002\230\003\000" +
    "\002\230\003\000\002\230\003\000\002\230\003\000\002" +
    "\231\005\000\002\232\003\000\002\232\003\000\002\233" +
    "\004\000\002\233\005\000\002\234\004\000\002\235\007" +
    "\000\002\236\003\000\002\236\002\000\002\237\005\000" +
    "\002\240\003\000\002\240\005\000\002\240\003\000\002" +
    "\241\006\000\002\242\003\000\002\242\004\000\002\243" +
    "\005\000\002\244\003\000\002\244\003\000\002\245\003" +
    "\000\002\245\005\000\002\246\005\000\002\247\005\000" +
    "\002\247\005\000\002\250\003\000\002\250\002\000\002" +
    "\251\005\000\002\251\002\000\002\253\005\000\002\254" +
    "\004\000\002\254\002\000\002\255\005\000\002\255\002" +
    "\000\002\256\003\000\002\256\002\000\002\257\005\000" +
    "\002\260\003\000\002\260\003\000\002\261\003\000\002" +
    "\261\003\000\002\261\002\000\002\262\003\000\002\262" +
    "\003\000\002\263\004\000\002\264\004\000\002\264\002" +
    "\000\002\265\004\000\002\266\004\000\002\266\002\000" +
    "\002\267\013\000\002\270\003\000\002\270\003\000\002" +
    "\271\004\000\002\271\002\000\002\272\003\000\002\272" +
    "\002\000\002\273\005\000\002\274\004\000\002\274\002" +
    "\000\002\275\005\000\002\275\005\000\002\275\004\000" +
    "\002\276\004\000\002\276\002\000\002\277\003\000\002" +
    "\277\002\000\002\300\003\000\002\300\003\000\002\301" +
    "\004\000\002\301\002\000\002\302\004\000\002\303\003" +
    "\000\002\303\003\000\002\303\005\000\002\304\003\000" +
    "\002\304\003\000\002\305\004\000\002\305\002\000\002" +
    "\306\003\000\002\306\003\000\002\306\003\000\002\306" +
    "\003\000\002\307\004\000\002\307\002\000\002\310\005" +
    "\000\002\310\003\000\002\311\005\000\002\312\005\000" +
    "\002\312\002\000\002\313\004\000\002\313\002\000\002" +
    "\340\015\000\002\341\003\000\002\341\003\000\002\341" +
    "\002\000\002\342\003\000\002\342\003\000\002\342\002" +
    "\000\002\343\003\000\002\343\003\000\002\343\003\000" +
    "\002\343\003\000\002\343\002\000\002\344\003\000\002" +
    "\344\003\000\002\344\003\000\002\344\002\000\002\345" +
    "\003\000\002\345\002\000\002\346\005\000\002\346\002" +
    "\000\002\347\004\000\002\347\002\000\002\314\012\000" +
    "\002\315\003\000\002\315\002\000\002\316\004\000\002" +
    "\316\002\000\002\317\006\000\002\320\004\000\002\321" +
    "\004\000\002\321\002\000\002\322\003\000\002\322\002" +
    "\000\002\323\003\000\002\323\002\000\002\324\003\000" +
    "\002\324\003\000\002\325\012\000\002\326\007\000\002" +
    "\327\005\000\002\327\003\000\002\330\003\000\002\330" +
    "\003\000\002\330\003\000\002\330\003\000\002\330\003" +
    "\000\002\331\004\000\002\332\004\000\002\333\003\000" +
    "\002\333\003\000\002\333\007\000\002\333\006\000\002" +
    "\333\003\000\002\333\005\000\002\334\004\000\002\334" +
    "\002\000\002\335\003\000\002\335\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u035b\000\040\002\ufffe\003\035\066\032\111\024\132" +
    "\022\146\010\157\011\164\027\166\023\213\026\253\013" +
    "\254\042\262\040\274\037\306\034\001\002\000\010\037" +
    "\uffee\u0103\uffee\u0189\uffee\001\002\000\010\037\uffed\u0103\uffed" +
    "\u0189\uffed\001\002\000\010\037\ufff2\u0103\ufff2\u0189\ufff2\001" +
    "\002\000\004\002\u035d\001\002\000\006\242\u0303\245\u0301" +
    "\001\002\000\044\010\uff6d\012\uff6d\016\uff6d\017\uff6d\020" +
    "\uff6d\022\uff6d\050\uff6d\052\uff6d\237\uff6d\244\uff6d\275\u0317" +
    "\354\u0318\377\uff6d\u012c\uff6d\u0131\uff6d\u013c\uff6d\u013d\uff6d\001" +
    "\002\000\010\037\ufffc\u0103\ufffc\u0189\ufffc\001\002\000\004" +
    "\220\u0315\001\002\000\010\037\ufffd\u0103\ufffd\u0189\ufffd\001" +
    "\002\000\012\037\ufff7\116\ufff7\u0103\ufff7\u0189\ufff7\001\002" +
    "\000\012\037\ufff6\116\ufff6\u0103\ufff6\u0189\ufff6\001\002\000" +
    "\010\037\ufff4\u0103\ufff4\u0189\ufff4\001\002\000\010\037\ufff0" +
    "\u0103\ufff0\u0189\ufff0\001\002\000\010\037\ufffa\u0103\ufffa\u0189" +
    "\ufffa\001\002\000\014\037\ufe73\242\u0303\245\u0301\u0103\ufe73" +
    "\u0189\ufe73\001\002\000\014\037\ufe76\242\u0303\245\u0301\u0103" +
    "\ufe76\u0189\ufe76\001\002\000\006\242\u0303\245\u0301\001\002" +
    "\000\010\037\ufff1\u0103\ufff1\u0189\ufff1\001\002\000\032\062" +
    "\u0114\115\ufe2e\152\uff03\156\uff03\220\u02a4\236\uff03\243\u029d" +
    "\266\u02a0\305\u029f\315\u02a3\344\ufe2e\372\ufe2e\001\002\000" +
    "\012\012\uff90\050\uff90\172\uff90\237\117\001\002\000\012" +
    "\037\ufff9\116\ufff9\u0103\ufff9\u0189\ufff9\001\002\000\010\037" +
    "\ufff3\u0103\ufff3\u0189\ufff3\001\002\000\022\062\u0114\115\ufe2e" +
    "\220\u0111\243\u010c\305\u010d\315\u0112\344\ufe2e\372\ufe2e\001" +
    "\002\000\010\037\ufffb\u0103\ufffb\u0189\ufffb\001\002\000\014" +
    "\156\341\220\344\243\340\305\342\315\345\001\002\000" +
    "\010\037\046\u0103\047\u0189\050\001\002\000\010\037\uffef" +
    "\u0103\uffef\u0189\uffef\001\002\000\010\012\uff90\050\uff90\237" +
    "\117\001\002\000\014\012\uff90\050\uff90\107\uff90\237\117" +
    "\273\uff90\001\002\000\010\037\ufff5\u0103\ufff5\u0189\ufff5\001" +
    "\002\000\006\012\053\050\054\001\002\000\010\037\046" +
    "\u0103\047\u0189\050\001\002\000\012\037\ufff8\116\ufff8\u0103" +
    "\ufff8\u0189\ufff8\001\002\000\040\002\ufffe\003\035\066\032" +
    "\111\024\132\022\146\010\157\011\164\027\166\023\213" +
    "\026\253\013\254\042\262\040\274\037\306\034\001\002" +
    "\000\050\002\uffec\003\uffec\037\uffec\066\uffec\111\uffec\132" +
    "\uffec\146\uffec\157\uffec\164\uffec\166\uffec\213\uffec\253\uffec" +
    "\254\uffec\262\uffec\274\uffec\306\uffec\316\uffec\u0103\uffec\u0189" +
    "\uffec\001\002\000\050\002\uffeb\003\uffeb\037\uffeb\066\uffeb" +
    "\111\uffeb\132\uffeb\146\uffeb\157\uffeb\164\uffeb\166\uffeb\213" +
    "\uffeb\253\uffeb\254\uffeb\262\uffeb\274\uffeb\306\uffeb\316\uffeb" +
    "\u0103\uffeb\u0189\uffeb\001\002\000\050\002\uffea\003\uffea\037" +
    "\uffea\066\uffea\111\uffea\132\uffea\146\uffea\157\uffea\164\uffea" +
    "\166\uffea\213\uffea\253\uffea\254\uffea\262\uffea\274\uffea\306" +
    "\uffea\316\uffea\u0103\uffea\u0189\uffea\001\002\000\004\002\000" +
    "\001\002\000\004\240\057\001\002\000\260\005\uffe9\006" +
    "\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\016\uffe9\017\uffe9" +
    "\020\uffe9\022\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\031" +
    "\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\050\uffe9\052\uffe9" +
    "\055\uffe9\060\uffe9\061\uffe9\062\uffe9\066\uffe9\074\uffe9\076" +
    "\uffe9\077\uffe9\102\uffe9\107\uffe9\112\uffe9\114\uffe9\116\uffe9" +
    "\126\uffe9\127\uffe9\131\uffe9\137\uffe9\140\uffe9\141\uffe9\152" +
    "\uffe9\153\uffe9\160\uffe9\161\uffe9\174\uffe9\175\uffe9\176\uffe9" +
    "\200\uffe9\211\uffe9\214\uffe9\236\uffe9\240\uffe9\241\uffe9\244" +
    "\uffe9\257\uffe9\266\uffe9\267\uffe9\303\uffe9\306\uffe9\307\uffe9" +
    "\311\uffe9\326\uffe9\334\uffe9\336\uffe9\364\uffe9\370\uffe9\376" +
    "\uffe9\377\uffe9\u0103\uffe9\u0104\uffe9\u0111\uffe9\u011a\uffe9\u011d\uffe9" +
    "\u0120\uffe9\u012c\uffe9\u0131\uffe9\u0133\uffe9\u013c\uffe9\u013d\uffe9\u013f" +
    "\uffe9\u0149\uffe9\u014c\uffe9\u0159\uffe9\u015a\uffe9\u015f\uffe9\u016a\uffe9" +
    "\u0189\uffe9\001\002\000\004\012\055\001\002\000\004\053" +
    "\056\001\002\000\260\005\uffe8\006\uffe8\007\uffe8\010\uffe8" +
    "\011\uffe8\012\uffe8\016\uffe8\017\uffe8\020\uffe8\022\uffe8\024" +
    "\uffe8\025\uffe8\026\uffe8\027\uffe8\031\uffe8\037\uffe8\040\uffe8" +
    "\041\uffe8\042\uffe8\050\uffe8\052\uffe8\055\uffe8\060\uffe8\061" +
    "\uffe8\062\uffe8\066\uffe8\074\uffe8\076\uffe8\077\uffe8\102\uffe8" +
    "\107\uffe8\112\uffe8\114\uffe8\116\uffe8\126\uffe8\127\uffe8\131" +
    "\uffe8\137\uffe8\140\uffe8\141\uffe8\152\uffe8\153\uffe8\160\uffe8" +
    "\161\uffe8\174\uffe8\175\uffe8\176\uffe8\200\uffe8\211\uffe8\214" +
    "\uffe8\236\uffe8\240\uffe8\241\uffe8\244\uffe8\257\uffe8\266\uffe8" +
    "\267\uffe8\303\uffe8\306\uffe8\307\uffe8\311\uffe8\326\uffe8\334" +
    "\uffe8\336\uffe8\364\uffe8\370\uffe8\376\uffe8\377\uffe8\u0103\uffe8" +
    "\u0104\uffe8\u0111\uffe8\u011a\uffe8\u011d\uffe8\u0120\uffe8\u012c\uffe8\u0131" +
    "\uffe8\u0133\uffe8\u013c\uffe8\u013d\uffe8\u013f\uffe8\u0149\uffe8\u014c\uffe8" +
    "\u0159\uffe8\u015a\uffe8\u015f\uffe8\u016a\uffe8\u0189\uffe8\001\002\000" +
    "\034\074\ufe45\u0101\060\u010a\ufe45\u0137\061\u0175\ufe45\u0176\ufe45" +
    "\u0177\ufe45\u0178\ufe45\u0179\ufe45\u017a\ufe45\u017b\ufe45\u017c\ufe45\u017d" +
    "\ufe45\001\002\000\030\074\ufe46\u010a\ufe46\u0175\ufe46\u0176\ufe46" +
    "\u0177\ufe46\u0178\ufe46\u0179\ufe46\u017a\ufe46\u017b\ufe46\u017c\ufe46\u017d" +
    "\ufe46\001\002\000\030\074\ufe47\u010a\ufe47\u0175\ufe47\u0176\ufe47" +
    "\u0177\ufe47\u0178\ufe47\u0179\ufe47\u017a\ufe47\u017b\ufe47\u017c\ufe47\u017d" +
    "\ufe47\001\002\000\030\074\ufe42\u010a\065\u0175\063\u0176\ufe42" +
    "\u0177\ufe42\u0178\ufe42\u0179\ufe42\u017a\ufe42\u017b\ufe42\u017c\ufe42\u017d" +
    "\ufe42\001\002\000\024\074\ufe43\u0176\ufe43\u0177\ufe43\u0178\ufe43" +
    "\u0179\ufe43\u017a\ufe43\u017b\ufe43\u017c\ufe43\u017d\ufe43\001\002\000" +
    "\024\074\ufe3d\u0176\066\u0177\067\u0178\071\u0179\070\u017a\ufe3d" +
    "\u017b\ufe3d\u017c\ufe3d\u017d\ufe3d\001\002\000\024\074\ufe44\u0176" +
    "\ufe44\u0177\ufe44\u0178\ufe44\u0179\ufe44\u017a\ufe44\u017b\ufe44\u017c\ufe44" +
    "\u017d\ufe44\001\002\000\014\074\ufe41\u017a\ufe41\u017b\ufe41\u017c" +
    "\ufe41\u017d\ufe41\001\002\000\014\074\ufe40\u017a\ufe40\u017b\ufe40" +
    "\u017c\ufe40\u017d\ufe40\001\002\000\014\074\ufe3e\u017a\ufe3e\u017b" +
    "\ufe3e\u017c\ufe3e\u017d\ufe3e\001\002\000\014\074\ufe3f\u017a\ufe3f" +
    "\u017b\ufe3f\u017c\ufe3f\u017d\ufe3f\001\002\000\014\074\ufe39\u017a" +
    "\076\u017b\074\u017c\075\u017d\ufe39\001\002\000\006\074\ufe37" +
    "\u017d\100\001\002\000\006\074\ufe3b\u017d\ufe3b\001\002\000" +
    "\006\074\ufe3a\u017d\ufe3a\001\002\000\006\074\ufe3c\u017d\ufe3c" +
    "\001\002\000\004\074\101\001\002\000\004\074\ufe38\001" +
    "\002\000\004\157\011\001\002\000\012\037\ufe35\074\104" +
    "\u0103\ufe35\u0189\ufe35\001\002\000\010\037\ufe48\u0103\ufe48\u0189" +
    "\ufe48\001\002\000\004\274\105\001\002\000\012\037\ufe33" +
    "\252\107\u0103\ufe33\u0189\ufe33\001\002\000\010\037\ufe36\u0103" +
    "\ufe36\u0189\ufe36\001\002\000\006\012\053\050\054\001\002" +
    "\000\014\037\uff71\040\113\055\uff71\u0103\uff71\u0189\uff71\001" +
    "\002\000\010\037\ufe34\u0103\ufe34\u0189\ufe34\001\002\000\012" +
    "\037\uff73\055\uff73\u0103\uff73\u0189\uff73\001\002\000\006\012" +
    "\053\050\054\001\002\000\014\037\uff71\040\113\055\uff71" +
    "\u0103\uff71\u0189\uff71\001\002\000\012\037\uff72\055\uff72\u0103" +
    "\uff72\u0189\uff72\001\002\000\012\012\uff4a\050\uff4a\107\125" +
    "\273\uff4a\001\002\000\004\052\120\001\002\000\004\016" +
    "\121\001\002\000\004\055\122\001\002\000\046\010\uff8e" +
    "\012\uff8e\016\uff8e\017\uff8e\020\uff8e\022\uff8e\050\uff8e\052" +
    "\uff8e\107\uff8e\172\uff8e\244\uff8e\273\uff8e\322\124\377\uff8e" +
    "\u012c\uff8e\u0131\uff8e\u013c\uff8e\u013d\uff8e\001\002\000\044\010" +
    "\uff91\012\uff91\016\uff91\017\uff91\020\uff91\022\uff91\050\uff91" +
    "\052\uff91\107\uff91\172\uff91\244\uff91\273\uff91\377\uff91\u012c" +
    "\uff91\u0131\uff91\u013c\uff91\u013d\uff91\001\002\000\044\010\uff8f" +
    "\012\uff8f\016\uff8f\017\uff8f\020\uff8f\022\uff8f\050\uff8f\052" +
    "\uff8f\107\uff8f\172\uff8f\244\uff8f\273\uff8f\377\uff8f\u012c\uff8f" +
    "\u0131\uff8f\u013c\uff8f\u013d\uff8f\001\002\000\010\012\uff4b\050" +
    "\uff4b\273\uff4b\001\002\000\010\012\053\050\054\273\132" +
    "\001\002\000\012\037\uff4c\116\uff4c\u0103\uff4c\u0189\uff4c\001" +
    "\002\000\170\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2" +
    "\012\uffe2\016\uffe2\017\uffe2\020\uffe2\022\uffe2\024\uffe2\025" +
    "\uffe2\026\uffe2\027\uffe2\031\uffe2\037\uffe2\040\uffe2\041\305" +
    "\050\uffe2\052\uffe2\055\uffe2\060\uffe2\061\uffe2\062\uffe2\066" +
    "\uffe2\074\uffe2\076\uffe2\107\uffe2\112\uffe2\114\uffe2\116\uffe2" +
    "\126\uffe2\127\uffe2\131\uffe2\153\uffe2\160\uffe2\161\uffe2\175" +
    "\uffe2\176\uffe2\200\uffe2\211\uffe2\214\uffe2\241\uffe2\244\uffe2" +
    "\257\uffe2\267\uffe2\306\uffe2\307\uffe2\311\uffe2\326\uffe2\370" +
    "\uffe2\377\uffe2\u0103\uffe2\u012c\uffe2\u0131\uffe2\u013c\uffe2\u013d\uffe2" +
    "\u015f\uffe2\u0189\uffe2\001\002\000\004\107\141\001\002\000" +
    "\004\052\133\001\002\000\006\012\053\050\054\001\002" +
    "\000\012\037\uff49\116\uff49\u0103\uff49\u0189\uff49\001\002\000" +
    "\004\040\136\001\002\000\004\016\137\001\002\000\004" +
    "\055\140\001\002\000\012\037\uff44\116\uff44\u0103\uff44\u0189" +
    "\uff44\001\002\000\006\012\053\050\054\001\002\000\014" +
    "\037\uff79\116\uff79\326\143\u0103\uff79\u0189\uff79\001\002\000" +
    "\036\012\uff92\016\uff92\017\uff92\020\uff92\022\uff92\050\uff92" +
    "\052\uff92\241\147\244\uff92\377\uff92\u012c\uff92\u0131\uff92\u013c" +
    "\uff92\u013d\uff92\001\002\000\012\037\uff48\116\uff48\u0103\uff48" +
    "\u0189\uff48\001\002\000\026\037\uff7a\055\uff7a\074\uff7a\116" +
    "\uff7a\126\uff7a\131\uff7a\311\uff7a\u0103\uff7a\u015f\uff7a\u0189\uff7a" +
    "\001\002\000\034\012\053\016\155\017\163\020\170\022" +
    "\151\050\054\052\165\244\167\377\161\u012c\150\u0131\166" +
    "\u013c\164\u013d\162\001\002\000\042\012\uff93\016\uff93\017" +
    "\uff93\020\uff93\022\uff93\050\uff93\052\uff93\114\uff93\153\uff93" +
    "\214\uff93\244\uff93\377\uff93\u012c\uff93\u0131\uff93\u013c\uff93\u013d" +
    "\uff93\001\002\000\004\052\275\001\002\000\152\005\uff9f" +
    "\006\uff9f\007\uff9f\010\uff9f\011\uff9f\012\uff9f\016\uff9f\017" +
    "\uff9f\020\uff9f\022\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f" +
    "\031\uff9f\037\uff9f\040\uff9f\050\uff9f\052\uff9f\055\uff9f\061" +
    "\uff9f\062\uff9f\074\uff9f\076\uff9f\107\uff9f\112\uff9f\114\uff9f" +
    "\116\uff9f\126\uff9f\127\uff9f\131\uff9f\153\uff9f\160\uff9f\161" +
    "\uff9f\175\uff9f\200\uff9f\211\uff9f\214\uff9f\241\uff9f\244\uff9f" +
    "\267\uff9f\311\uff9f\326\uff9f\370\uff9f\377\uff9f\u0103\uff9f\u012c" +
    "\uff9f\u0131\uff9f\u013c\uff9f\u013d\uff9f\u015f\uff9f\u0189\uff9f\001\002" +
    "\000\152\005\uffa2\006\uffa2\007\uffa2\010\uffa2\011\uffa2\012" +
    "\uffa2\016\uffa2\017\uffa2\020\uffa2\022\uffa2\024\uffa2\025\uffa2" +
    "\026\uffa2\027\uffa2\031\uffa2\037\uffa2\040\uffa2\050\uffa2\052" +
    "\uffa2\055\uffa2\061\uffa2\062\uffa2\074\uffa2\076\uffa2\107\uffa2" +
    "\112\uffa2\114\uffa2\116\uffa2\126\uffa2\127\uffa2\131\uffa2\153" +
    "\uffa2\160\uffa2\161\uffa2\175\uffa2\200\uffa2\211\uffa2\214\uffa2" +
    "\241\uffa2\244\uffa2\267\uffa2\311\uffa2\326\uffa2\370\uffa2\377" +
    "\uffa2\u0103\uffa2\u012c\uffa2\u0131\uffa2\u013c\uffa2\u013d\uffa2\u015f\uffa2" +
    "\u0189\uffa2\001\002\000\030\005\266\024\265\025\264\026" +
    "\261\027\257\031\262\114\uff92\153\uff92\175\270\214\uff92" +
    "\241\147\001\002\000\152\005\uffa4\006\uffa4\007\uffa4\010" +
    "\252\011\250\012\uffa4\016\uffa4\017\uffa4\020\uffa4\022\uffa4" +
    "\024\uffa4\025\uffa4\026\uffa4\027\uffa4\031\uffa4\037\uffa4\040" +
    "\uffa4\050\uffa4\052\uffa4\055\uffa4\061\uffa4\062\uffa4\074\uffa4" +
    "\076\uffa4\107\uffa4\112\uffa4\114\uffa4\116\uffa4\126\uffa4\127" +
    "\uffa4\131\uffa4\153\uffa4\160\uffa4\161\uffa4\175\uffa4\200\uffa4" +
    "\211\uffa4\214\uffa4\241\uffa4\244\uffa4\267\uffa4\311\uffa4\326" +
    "\uffa4\370\uffa4\377\uffa4\u0103\uffa4\u012c\uffa4\u0131\uffa4\u013c\uffa4" +
    "\u013d\uffa4\u015f\uffa4\u0189\uffa4\001\002\000\152\005\uffa0\006" +
    "\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\016\uffa0\017\uffa0" +
    "\020\uffa0\022\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\031" +
    "\uffa0\037\uffa0\040\uffa0\050\uffa0\052\uffa0\055\uffa0\061\uffa0" +
    "\062\uffa0\074\uffa0\076\uffa0\107\uffa0\112\uffa0\114\uffa0\116" +
    "\uffa0\126\uffa0\127\uffa0\131\uffa0\153\uffa0\160\uffa0\161\uffa0" +
    "\175\uffa0\200\uffa0\211\uffa0\214\uffa0\241\uffa0\244\uffa0\267" +
    "\uffa0\311\uffa0\326\uffa0\370\uffa0\377\uffa0\u0103\uffa0\u012c\uffa0" +
    "\u0131\uffa0\u013c\uffa0\u013d\uffa0\u015f\uffa0\u0189\uffa0\001\002\000" +
    "\146\005\uffa8\006\242\007\241\012\uffa8\016\uffa8\017\uffa8" +
    "\020\uffa8\022\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\031" +
    "\uffa8\037\uffa8\040\uffa8\050\uffa8\052\uffa8\055\uffa8\061\uffa8" +
    "\062\uffa8\074\uffa8\076\uffa8\107\uffa8\112\uffa8\114\uffa8\116" +
    "\uffa8\126\uffa8\127\uffa8\131\uffa8\153\uffa8\160\uffa8\161\uffa8" +
    "\175\uffa8\200\uffa8\211\uffa8\214\uffa8\241\uffa8\244\uffa8\267" +
    "\uffa8\311\uffa8\326\uffa8\370\uffa8\377\uffa8\u0103\uffa8\u012c\uffa8" +
    "\u0131\uffa8\u013c\uffa8\u013d\uffa8\u015f\uffa8\u0189\uffa8\001\002\000" +
    "\154\005\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf" +
    "\016\uffdf\017\uffdf\020\uffdf\022\uffdf\024\uffdf\025\uffdf\026" +
    "\uffdf\027\uffdf\031\uffdf\037\uffdf\040\uffdf\041\237\050\uffdf" +
    "\052\uffdf\055\uffdf\061\uffdf\062\uffdf\074\uffdf\076\uffdf\107" +
    "\uffdf\112\uffdf\114\uffdf\116\uffdf\126\uffdf\127\uffdf\131\uffdf" +
    "\153\uffdf\160\uffdf\161\uffdf\175\uffdf\200\uffdf\211\uffdf\214" +
    "\uffdf\241\uffdf\244\uffdf\267\uffdf\311\uffdf\326\uffdf\370\uffdf" +
    "\377\uffdf\u0103\uffdf\u012c\uffdf\u0131\uffdf\u013c\uffdf\u013d\uffdf\u015f" +
    "\uffdf\u0189\uffdf\001\002\000\050\037\uff88\040\uff88\055\uff88" +
    "\061\231\062\232\074\uff88\112\uff88\116\uff88\126\uff88\127" +
    "\uff88\131\uff88\161\uff88\200\uff88\211\uff88\311\uff88\326\uff88" +
    "\u0103\uff88\u015f\uff88\u0189\uff88\001\002\000\004\052\227\001" +
    "\002\000\004\052\225\001\002\000\152\005\uff9d\006\uff9d" +
    "\007\uff9d\010\uff9d\011\uff9d\012\uff9d\016\uff9d\017\uff9d\020" +
    "\uff9d\022\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\031\uff9d" +
    "\037\uff9d\040\uff9d\050\uff9d\052\uff9d\055\uff9d\061\uff9d\062" +
    "\uff9d\074\uff9d\076\uff9d\107\uff9d\112\uff9d\114\uff9d\116\uff9d" +
    "\126\uff9d\127\uff9d\131\uff9d\153\uff9d\160\uff9d\161\uff9d\175" +
    "\uff9d\200\uff9d\211\uff9d\214\uff9d\241\uff9d\244\uff9d\267\uff9d" +
    "\311\uff9d\326\uff9d\370\uff9d\377\uff9d\u0103\uff9d\u012c\uff9d\u0131" +
    "\uff9d\u013c\uff9d\u013d\uff9d\u015f\uff9d\u0189\uff9d\001\002\000\004" +
    "\052\223\001\002\000\034\012\053\016\155\017\163\020" +
    "\170\022\151\050\054\052\165\244\167\377\161\u012c\150" +
    "\u0131\166\u013c\164\u013d\162\001\002\000\004\052\172\001" +
    "\002\000\152\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c" +
    "\012\uff9c\016\uff9c\017\uff9c\020\uff9c\022\uff9c\024\uff9c\025" +
    "\uff9c\026\uff9c\027\uff9c\031\uff9c\037\uff9c\040\uff9c\050\uff9c" +
    "\052\uff9c\055\uff9c\061\uff9c\062\uff9c\074\uff9c\076\uff9c\107" +
    "\uff9c\112\uff9c\114\uff9c\116\uff9c\126\uff9c\127\uff9c\131\uff9c" +
    "\153\uff9c\160\uff9c\161\uff9c\175\uff9c\200\uff9c\211\uff9c\214" +
    "\uff9c\241\uff9c\244\uff9c\267\uff9c\311\uff9c\326\uff9c\370\uff9c" +
    "\377\uff9c\u0103\uff9c\u012c\uff9c\u0131\uff9c\u013c\uff9c\u013d\uff9c\u015f" +
    "\uff9c\u0189\uff9c\001\002\000\152\005\uff9e\006\uff9e\007\uff9e" +
    "\010\uff9e\011\uff9e\012\uff9e\016\uff9e\017\uff9e\020\uff9e\022" +
    "\uff9e\024\uff9e\025\uff9e\026\uff9e\027\uff9e\031\uff9e\037\uff9e" +
    "\040\uff9e\050\uff9e\052\uff9e\055\uff9e\061\uff9e\062\uff9e\074" +
    "\uff9e\076\uff9e\107\uff9e\112\uff9e\114\uff9e\116\uff9e\126\uff9e" +
    "\127\uff9e\131\uff9e\153\uff9e\160\uff9e\161\uff9e\175\uff9e\200" +
    "\uff9e\211\uff9e\214\uff9e\241\uff9e\244\uff9e\267\uff9e\311\uff9e" +
    "\326\uff9e\370\uff9e\377\uff9e\u0103\uff9e\u012c\uff9e\u0131\uff9e\u013c" +
    "\uff9e\u013d\uff9e\u015f\uff9e\u0189\uff9e\001\002\000\152\005\uffa1" +
    "\006\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\016\uffa1\017" +
    "\uffa1\020\uffa1\022\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1" +
    "\031\uffa1\037\uffa1\040\uffa1\050\uffa1\052\uffa1\055\uffa1\061" +
    "\uffa1\062\uffa1\074\uffa1\076\uffa1\107\uffa1\112\uffa1\114\uffa1" +
    "\116\uffa1\126\uffa1\127\uffa1\131\uffa1\153\uffa1\160\uffa1\161" +
    "\uffa1\175\uffa1\200\uffa1\211\uffa1\214\uffa1\241\uffa1\244\uffa1" +
    "\267\uffa1\311\uffa1\326\uffa1\370\uffa1\377\uffa1\u0103\uffa1\u012c" +
    "\uffa1\u0131\uffa1\u013c\uffa1\u013d\uffa1\u015f\uffa1\u0189\uffa1\001\002" +
    "\000\012\010\176\012\053\016\175\050\054\001\002\000" +
    "\004\055\201\001\002\000\152\005\uff97\006\uff97\007\uff97" +
    "\010\uff97\011\uff97\012\uff97\016\uff97\017\uff97\020\uff97\022" +
    "\uff97\024\uff97\025\uff97\026\uff97\027\uff97\031\uff97\037\uff97" +
    "\040\uff97\050\uff97\052\uff97\055\uff97\061\uff97\062\uff97\074" +
    "\uff97\076\uff97\107\uff97\112\uff97\114\uff97\116\uff97\126\uff97" +
    "\127\uff97\131\uff97\153\uff97\160\uff97\161\uff97\175\uff97\200" +
    "\uff97\211\uff97\214\uff97\241\uff97\244\uff97\267\uff97\311\uff97" +
    "\326\uff97\370\uff97\377\uff97\u0103\uff97\u012c\uff97\u0131\uff97\u013c" +
    "\uff97\u013d\uff97\u015f\uff97\u0189\uff97\001\002\000\004\055\200" +
    "\001\002\000\004\055\177\001\002\000\152\005\uff94\006" +
    "\uff94\007\uff94\010\uff94\011\uff94\012\uff94\016\uff94\017\uff94" +
    "\020\uff94\022\uff94\024\uff94\025\uff94\026\uff94\027\uff94\031" +
    "\uff94\037\uff94\040\uff94\050\uff94\052\uff94\055\uff94\061\uff94" +
    "\062\uff94\074\uff94\076\uff94\107\uff94\112\uff94\114\uff94\116" +
    "\uff94\126\uff94\127\uff94\131\uff94\153\uff94\160\uff94\161\uff94" +
    "\175\uff94\200\uff94\211\uff94\214\uff94\241\uff94\244\uff94\267" +
    "\uff94\311\uff94\326\uff94\370\uff94\377\uff94\u0103\uff94\u012c\uff94" +
    "\u0131\uff94\u013c\uff94\u013d\uff94\u015f\uff94\u0189\uff94\001\002\000" +
    "\152\005\uff95\006\uff95\007\uff95\010\uff95\011\uff95\012\uff95" +
    "\016\uff95\017\uff95\020\uff95\022\uff95\024\uff95\025\uff95\026" +
    "\uff95\027\uff95\031\uff95\037\uff95\040\uff95\050\uff95\052\uff95" +
    "\055\uff95\061\uff95\062\uff95\074\uff95\076\uff95\107\uff95\112" +
    "\uff95\114\uff95\116\uff95\126\uff95\127\uff95\131\uff95\153\uff95" +
    "\160\uff95\161\uff95\175\uff95\200\uff95\211\uff95\214\uff95\241" +
    "\uff95\244\uff95\267\uff95\311\uff95\326\uff95\370\uff95\377\uff95" +
    "\u0103\uff95\u012c\uff95\u0131\uff95\u013c\uff95\u013d\uff95\u015f\uff95\u0189" +
    "\uff95\001\002\000\152\005\uff96\006\uff96\007\uff96\010\uff96" +
    "\011\uff96\012\uff96\016\uff96\017\uff96\020\uff96\022\uff96\024" +
    "\uff96\025\uff96\026\uff96\027\uff96\031\uff96\037\uff96\040\uff96" +
    "\050\uff96\052\uff96\055\uff96\061\uff96\062\uff96\074\uff96\076" +
    "\uff96\107\uff96\112\uff96\114\uff96\116\uff96\126\uff96\127\uff96" +
    "\131\uff96\153\uff96\160\uff96\161\uff96\175\uff96\200\uff96\211" +
    "\uff96\214\uff96\241\uff96\244\uff96\267\uff96\311\uff96\326\uff96" +
    "\370\uff96\377\uff96\u0103\uff96\u012c\uff96\u0131\uff96\u013c\uff96\u013d" +
    "\uff96\u015f\uff96\u0189\uff96\001\002\000\010\114\205\153\204" +
    "\214\203\001\002\000\034\012\053\016\155\017\163\020" +
    "\170\022\151\050\054\052\165\244\167\377\161\u012c\150" +
    "\u0131\166\u013c\164\u013d\162\001\002\000\004\052\213\001" +
    "\002\000\034\012\053\016\155\017\163\020\170\022\151" +
    "\050\054\052\165\244\167\377\161\u012c\150\u0131\166\u013c" +
    "\164\u013d\162\001\002\000\004\055\207\001\002\000\152" +
    "\005\uffa3\006\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\016" +
    "\uffa3\017\uffa3\020\uffa3\022\uffa3\024\uffa3\025\uffa3\026\uffa3" +
    "\027\uffa3\031\uffa3\037\uffa3\040\uffa3\050\uffa3\052\uffa3\055" +
    "\uffa3\061\uffa3\062\uffa3\074\uffa3\076\uffa3\107\uffa3\112\uffa3" +
    "\114\uffa3\116\uffa3\126\uffa3\127\uffa3\131\uffa3\153\uffa3\160" +
    "\uffa3\161\uffa3\175\uffa3\200\uffa3\211\uffa3\214\uffa3\241\uffa3" +
    "\244\uffa3\267\uffa3\311\uffa3\326\uffa3\370\uffa3\377\uffa3\u0103" +
    "\uffa3\u012c\uffa3\u0131\uffa3\u013c\uffa3\u013d\uffa3\u015f\uffa3\u0189\uffa3" +
    "\001\002\000\004\061\211\001\002\000\034\012\053\016" +
    "\155\017\163\020\170\022\151\050\054\052\165\244\167" +
    "\377\161\u012c\150\u0131\166\u013c\164\u013d\162\001\002\000" +
    "\050\037\uff7c\040\uff7c\055\uff7c\061\uff7c\062\uff7c\074\uff7c" +
    "\112\uff7c\116\uff7c\126\uff7c\127\uff7c\131\uff7c\161\uff7c\200" +
    "\uff7c\211\uff7c\311\uff7c\326\uff7c\u0103\uff7c\u015f\uff7c\u0189\uff7c" +
    "\001\002\000\034\012\053\016\155\017\163\020\170\022" +
    "\151\050\054\052\165\244\167\377\161\u012c\150\u0131\166" +
    "\u013c\164\u013d\162\001\002\000\006\040\215\055\uff8c\001" +
    "\002\000\034\012\053\016\155\017\163\020\170\022\151" +
    "\050\054\052\165\244\167\377\161\u012c\150\u0131\166\u013c" +
    "\164\u013d\162\001\002\000\004\055\217\001\002\000\050" +
    "\037\uff7d\040\uff7d\055\uff7d\061\uff7d\062\uff7d\074\uff7d\112" +
    "\uff7d\116\uff7d\126\uff7d\127\uff7d\131\uff7d\161\uff7d\200\uff7d" +
    "\211\uff7d\311\uff7d\326\uff7d\u0103\uff7d\u015f\uff7d\u0189\uff7d\001" +
    "\002\000\006\040\215\055\uff8c\001\002\000\004\055\uff8d" +
    "\001\002\000\050\037\uff7b\040\uff7b\055\uff7b\061\uff7b\062" +
    "\uff7b\074\uff7b\112\uff7b\116\uff7b\126\uff7b\127\uff7b\131\uff7b" +
    "\161\uff7b\200\uff7b\211\uff7b\311\uff7b\326\uff7b\u0103\uff7b\u015f" +
    "\uff7b\u0189\uff7b\001\002\000\012\010\176\012\053\016\175" +
    "\050\054\001\002\000\152\005\uff98\006\uff98\007\uff98\010" +
    "\uff98\011\uff98\012\uff98\016\uff98\017\uff98\020\uff98\022\uff98" +
    "\024\uff98\025\uff98\026\uff98\027\uff98\031\uff98\037\uff98\040" +
    "\uff98\050\uff98\052\uff98\055\uff98\061\uff98\062\uff98\074\uff98" +
    "\076\uff98\107\uff98\112\uff98\114\uff98\116\uff98\126\uff98\127" +
    "\uff98\131\uff98\153\uff98\160\uff98\161\uff98\175\uff98\200\uff98" +
    "\211\uff98\214\uff98\241\uff98\244\uff98\267\uff98\311\uff98\326" +
    "\uff98\370\uff98\377\uff98\u0103\uff98\u012c\uff98\u0131\uff98\u013c\uff98" +
    "\u013d\uff98\u015f\uff98\u0189\uff98\001\002\000\012\010\176\012" +
    "\053\016\175\050\054\001\002\000\152\005\uff99\006\uff99" +
    "\007\uff99\010\uff99\011\uff99\012\uff99\016\uff99\017\uff99\020" +
    "\uff99\022\uff99\024\uff99\025\uff99\026\uff99\027\uff99\031\uff99" +
    "\037\uff99\040\uff99\050\uff99\052\uff99\055\uff99\061\uff99\062" +
    "\uff99\074\uff99\076\uff99\107\uff99\112\uff99\114\uff99\116\uff99" +
    "\126\uff99\127\uff99\131\uff99\153\uff99\160\uff99\161\uff99\175" +
    "\uff99\200\uff99\211\uff99\214\uff99\241\uff99\244\uff99\267\uff99" +
    "\311\uff99\326\uff99\370\uff99\377\uff99\u0103\uff99\u012c\uff99\u0131" +
    "\uff99\u013c\uff99\u013d\uff99\u015f\uff99\u0189\uff99\001\002\000\012" +
    "\010\176\012\053\016\175\050\054\001\002\000\152\005" +
    "\uff9a\006\uff9a\007\uff9a\010\uff9a\011\uff9a\012\uff9a\016\uff9a" +
    "\017\uff9a\020\uff9a\022\uff9a\024\uff9a\025\uff9a\026\uff9a\027" +
    "\uff9a\031\uff9a\037\uff9a\040\uff9a\050\uff9a\052\uff9a\055\uff9a" +
    "\061\uff9a\062\uff9a\074\uff9a\076\uff9a\107\uff9a\112\uff9a\114" +
    "\uff9a\116\uff9a\126\uff9a\127\uff9a\131\uff9a\153\uff9a\160\uff9a" +
    "\161\uff9a\175\uff9a\200\uff9a\211\uff9a\214\uff9a\241\uff9a\244" +
    "\uff9a\267\uff9a\311\uff9a\326\uff9a\370\uff9a\377\uff9a\u0103\uff9a" +
    "\u012c\uff9a\u0131\uff9a\u013c\uff9a\u013d\uff9a\u015f\uff9a\u0189\uff9a\001" +
    "\002\000\036\012\uff92\016\uff92\017\uff92\020\uff92\022\uff92" +
    "\050\uff92\052\uff92\241\147\244\uff92\377\uff92\u012c\uff92\u0131" +
    "\uff92\u013c\uff92\u013d\uff92\001\002\000\036\012\uff92\016\uff92" +
    "\017\uff92\020\uff92\022\uff92\050\uff92\052\uff92\241\147\244" +
    "\uff92\377\uff92\u012c\uff92\u0131\uff92\u013c\uff92\u013d\uff92\001\002" +
    "\000\044\037\uff8b\040\uff8b\055\uff8b\074\uff8b\112\uff8b\116" +
    "\uff8b\126\uff8b\127\uff8b\131\uff8b\161\uff8b\200\uff8b\211\uff8b" +
    "\311\uff8b\326\uff8b\u0103\uff8b\u015f\uff8b\u0189\uff8b\001\002\000" +
    "\044\037\uff89\040\uff89\055\uff89\074\uff89\112\uff89\116\uff89" +
    "\126\uff89\127\uff89\131\uff89\161\uff89\200\uff89\211\uff89\311" +
    "\uff89\326\uff89\u0103\uff89\u015f\uff89\u0189\uff89\001\002\000\044" +
    "\037\uff8a\040\uff8a\055\uff8a\074\uff8a\112\uff8a\116\uff8a\126" +
    "\uff8a\127\uff8a\131\uff8a\161\uff8a\200\uff8a\211\uff8a\311\uff8a" +
    "\326\uff8a\u0103\uff8a\u015f\uff8a\u0189\uff8a\001\002\000\152\005" +
    "\uffe1\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\016\uffe1" +
    "\017\uffe1\020\uffe1\022\uffe1\024\uffe1\025\uffe1\026\uffe1\027" +
    "\uffe1\031\uffe1\037\uffe1\040\uffe1\050\uffe1\052\uffe1\055\uffe1" +
    "\061\uffe1\062\uffe1\074\uffe1\076\uffe1\107\uffe1\112\uffe1\114" +
    "\uffe1\116\uffe1\126\uffe1\127\uffe1\131\uffe1\153\uffe1\160\uffe1" +
    "\161\uffe1\175\uffe1\200\uffe1\211\uffe1\214\uffe1\241\uffe1\244" +
    "\uffe1\267\uffe1\311\uffe1\326\uffe1\370\uffe1\377\uffe1\u0103\uffe1" +
    "\u012c\uffe1\u0131\uffe1\u013c\uffe1\u013d\uffe1\u015f\uffe1\u0189\uffe1\001" +
    "\002\000\006\012\053\050\054\001\002\000\152\005\uffe0" +
    "\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0\016\uffe0\017" +
    "\uffe0\020\uffe0\022\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0" +
    "\031\uffe0\037\uffe0\040\uffe0\050\uffe0\052\uffe0\055\uffe0\061" +
    "\uffe0\062\uffe0\074\uffe0\076\uffe0\107\uffe0\112\uffe0\114\uffe0" +
    "\116\uffe0\126\uffe0\127\uffe0\131\uffe0\153\uffe0\160\uffe0\161" +
    "\uffe0\175\uffe0\200\uffe0\211\uffe0\214\uffe0\241\uffe0\244\uffe0" +
    "\267\uffe0\311\uffe0\326\uffe0\370\uffe0\377\uffe0\u0103\uffe0\u012c" +
    "\uffe0\u0131\uffe0\u013c\uffe0\u013d\uffe0\u015f\uffe0\u0189\uffe0\001\002" +
    "\000\034\012\053\016\155\017\163\020\170\022\151\050" +
    "\054\052\165\244\167\377\161\u012c\150\u0131\166\u013c\164" +
    "\u013d\162\001\002\000\034\012\053\016\155\017\163\020" +
    "\170\022\151\050\054\052\165\244\167\377\161\u012c\150" +
    "\u0131\166\u013c\164\u013d\162\001\002\000\142\005\uffab\012" +
    "\uffab\016\uffab\017\uffab\020\uffab\022\uffab\024\uffab\025\uffab" +
    "\026\uffab\027\uffab\031\uffab\037\uffab\040\uffab\050\uffab\052" +
    "\uffab\055\uffab\061\uffab\062\uffab\074\uffab\076\uffab\107\uffab" +
    "\112\uffab\114\uffab\116\uffab\126\uffab\127\uffab\131\uffab\153" +
    "\uffab\160\uffab\161\uffab\175\uffab\200\uffab\211\uffab\214\uffab" +
    "\241\uffab\244\uffab\267\uffab\311\uffab\326\uffab\370\uffab\377" +
    "\uffab\u0103\uffab\u012c\uffab\u0131\uffab\u013c\uffab\u013d\uffab\u015f\uffab" +
    "\u0189\uffab\001\002\000\146\005\uffa8\006\242\007\241\012" +
    "\uffa8\016\uffa8\017\uffa8\020\uffa8\022\uffa8\024\uffa8\025\uffa8" +
    "\026\uffa8\027\uffa8\031\uffa8\037\uffa8\040\uffa8\050\uffa8\052" +
    "\uffa8\055\uffa8\061\uffa8\062\uffa8\074\uffa8\076\uffa8\107\uffa8" +
    "\112\uffa8\114\uffa8\116\uffa8\126\uffa8\127\uffa8\131\uffa8\153" +
    "\uffa8\160\uffa8\161\uffa8\175\uffa8\200\uffa8\211\uffa8\214\uffa8" +
    "\241\uffa8\244\uffa8\267\uffa8\311\uffa8\326\uffa8\370\uffa8\377" +
    "\uffa8\u0103\uffa8\u012c\uffa8\u0131\uffa8\u013c\uffa8\u013d\uffa8\u015f\uffa8" +
    "\u0189\uffa8\001\002\000\142\005\uffaa\012\uffaa\016\uffaa\017" +
    "\uffaa\020\uffaa\022\uffaa\024\uffaa\025\uffaa\026\uffaa\027\uffaa" +
    "\031\uffaa\037\uffaa\040\uffaa\050\uffaa\052\uffaa\055\uffaa\061" +
    "\uffaa\062\uffaa\074\uffaa\076\uffaa\107\uffaa\112\uffaa\114\uffaa" +
    "\116\uffaa\126\uffaa\127\uffaa\131\uffaa\153\uffaa\160\uffaa\161" +
    "\uffaa\175\uffaa\200\uffaa\211\uffaa\214\uffaa\241\uffaa\244\uffaa" +
    "\267\uffaa\311\uffaa\326\uffaa\370\uffaa\377\uffaa\u0103\uffaa\u012c" +
    "\uffaa\u0131\uffaa\u013c\uffaa\u013d\uffaa\u015f\uffaa\u0189\uffaa\001\002" +
    "\000\146\005\uffa8\006\242\007\241\012\uffa8\016\uffa8\017" +
    "\uffa8\020\uffa8\022\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8" +
    "\031\uffa8\037\uffa8\040\uffa8\050\uffa8\052\uffa8\055\uffa8\061" +
    "\uffa8\062\uffa8\074\uffa8\076\uffa8\107\uffa8\112\uffa8\114\uffa8" +
    "\116\uffa8\126\uffa8\127\uffa8\131\uffa8\153\uffa8\160\uffa8\161" +
    "\uffa8\175\uffa8\200\uffa8\211\uffa8\214\uffa8\241\uffa8\244\uffa8" +
    "\267\uffa8\311\uffa8\326\uffa8\370\uffa8\377\uffa8\u0103\uffa8\u012c" +
    "\uffa8\u0131\uffa8\u013c\uffa8\u013d\uffa8\u015f\uffa8\u0189\uffa8\001\002" +
    "\000\142\005\uffa9\012\uffa9\016\uffa9\017\uffa9\020\uffa9\022" +
    "\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\031\uffa9\037\uffa9" +
    "\040\uffa9\050\uffa9\052\uffa9\055\uffa9\061\uffa9\062\uffa9\074" +
    "\uffa9\076\uffa9\107\uffa9\112\uffa9\114\uffa9\116\uffa9\126\uffa9" +
    "\127\uffa9\131\uffa9\153\uffa9\160\uffa9\161\uffa9\175\uffa9\200" +
    "\uffa9\211\uffa9\214\uffa9\241\uffa9\244\uffa9\267\uffa9\311\uffa9" +
    "\326\uffa9\370\uffa9\377\uffa9\u0103\uffa9\u012c\uffa9\u0131\uffa9\u013c" +
    "\uffa9\u013d\uffa9\u015f\uffa9\u0189\uffa9\001\002\000\034\012\053" +
    "\016\155\017\163\020\170\022\151\050\054\052\165\244" +
    "\167\377\161\u012c\150\u0131\166\u013c\164\u013d\162\001\002" +
    "\000\146\005\uffa7\006\uffa7\007\uffa7\012\uffa7\016\uffa7\017" +
    "\uffa7\020\uffa7\022\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7" +
    "\031\uffa7\037\uffa7\040\uffa7\050\uffa7\052\uffa7\055\uffa7\061" +
    "\uffa7\062\uffa7\074\uffa7\076\uffa7\107\uffa7\112\uffa7\114\uffa7" +
    "\116\uffa7\126\uffa7\127\uffa7\131\uffa7\153\uffa7\160\uffa7\161" +
    "\uffa7\175\uffa7\200\uffa7\211\uffa7\214\uffa7\241\uffa7\244\uffa7" +
    "\267\uffa7\311\uffa7\326\uffa7\370\uffa7\377\uffa7\u0103\uffa7\u012c" +
    "\uffa7\u0131\uffa7\u013c\uffa7\u013d\uffa7\u015f\uffa7\u0189\uffa7\001\002" +
    "\000\034\012\053\016\155\017\163\020\170\022\151\050" +
    "\054\052\165\244\167\377\161\u012c\150\u0131\166\u013c\164" +
    "\u013d\162\001\002\000\152\005\uffa4\006\uffa4\007\uffa4\010" +
    "\252\011\250\012\uffa4\016\uffa4\017\uffa4\020\uffa4\022\uffa4" +
    "\024\uffa4\025\uffa4\026\uffa4\027\uffa4\031\uffa4\037\uffa4\040" +
    "\uffa4\050\uffa4\052\uffa4\055\uffa4\061\uffa4\062\uffa4\074\uffa4" +
    "\076\uffa4\107\uffa4\112\uffa4\114\uffa4\116\uffa4\126\uffa4\127" +
    "\uffa4\131\uffa4\153\uffa4\160\uffa4\161\uffa4\175\uffa4\200\uffa4" +
    "\211\uffa4\214\uffa4\241\uffa4\244\uffa4\267\uffa4\311\uffa4\326" +
    "\uffa4\370\uffa4\377\uffa4\u0103\uffa4\u012c\uffa4\u0131\uffa4\u013c\uffa4" +
    "\u013d\uffa4\u015f\uffa4\u0189\uffa4\001\002\000\146\005\uffa6\006" +
    "\uffa6\007\uffa6\012\uffa6\016\uffa6\017\uffa6\020\uffa6\022\uffa6" +
    "\024\uffa6\025\uffa6\026\uffa6\027\uffa6\031\uffa6\037\uffa6\040" +
    "\uffa6\050\uffa6\052\uffa6\055\uffa6\061\uffa6\062\uffa6\074\uffa6" +
    "\076\uffa6\107\uffa6\112\uffa6\114\uffa6\116\uffa6\126\uffa6\127" +
    "\uffa6\131\uffa6\153\uffa6\160\uffa6\161\uffa6\175\uffa6\200\uffa6" +
    "\211\uffa6\214\uffa6\241\uffa6\244\uffa6\267\uffa6\311\uffa6\326" +
    "\uffa6\370\uffa6\377\uffa6\u0103\uffa6\u012c\uffa6\u0131\uffa6\u013c\uffa6" +
    "\u013d\uffa6\u015f\uffa6\u0189\uffa6\001\002\000\152\005\uffa4\006" +
    "\uffa4\007\uffa4\010\252\011\250\012\uffa4\016\uffa4\017\uffa4" +
    "\020\uffa4\022\uffa4\024\uffa4\025\uffa4\026\uffa4\027\uffa4\031" +
    "\uffa4\037\uffa4\040\uffa4\050\uffa4\052\uffa4\055\uffa4\061\uffa4" +
    "\062\uffa4\074\uffa4\076\uffa4\107\uffa4\112\uffa4\114\uffa4\116" +
    "\uffa4\126\uffa4\127\uffa4\131\uffa4\153\uffa4\160\uffa4\161\uffa4" +
    "\175\uffa4\200\uffa4\211\uffa4\214\uffa4\241\uffa4\244\uffa4\267" +
    "\uffa4\311\uffa4\326\uffa4\370\uffa4\377\uffa4\u0103\uffa4\u012c\uffa4" +
    "\u0131\uffa4\u013c\uffa4\u013d\uffa4\u015f\uffa4\u0189\uffa4\001\002\000" +
    "\146\005\uffa5\006\uffa5\007\uffa5\012\uffa5\016\uffa5\017\uffa5" +
    "\020\uffa5\022\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\031" +
    "\uffa5\037\uffa5\040\uffa5\050\uffa5\052\uffa5\055\uffa5\061\uffa5" +
    "\062\uffa5\074\uffa5\076\uffa5\107\uffa5\112\uffa5\114\uffa5\116" +
    "\uffa5\126\uffa5\127\uffa5\131\uffa5\153\uffa5\160\uffa5\161\uffa5" +
    "\175\uffa5\200\uffa5\211\uffa5\214\uffa5\241\uffa5\244\uffa5\267" +
    "\uffa5\311\uffa5\326\uffa5\370\uffa5\377\uffa5\u0103\uffa5\u012c\uffa5" +
    "\u0131\uffa5\u013c\uffa5\u013d\uffa5\u015f\uffa5\u0189\uffa5\001\002\000" +
    "\034\012\uff83\016\uff83\017\uff83\020\uff83\022\uff83\050\uff83" +
    "\052\uff83\244\uff83\377\uff83\u012c\uff83\u0131\uff83\u013c\uff83\u013d" +
    "\uff83\001\002\000\010\114\205\153\204\214\203\001\002" +
    "\000\034\012\uff84\016\uff84\017\uff84\020\uff84\022\uff84\050" +
    "\uff84\052\uff84\244\uff84\377\uff84\u012c\uff84\u0131\uff84\u013c\uff84" +
    "\u013d\uff84\001\002\000\034\012\uff85\016\uff85\017\uff85\020" +
    "\uff85\022\uff85\050\uff85\052\uff85\244\uff85\377\uff85\u012c\uff85" +
    "\u0131\uff85\u013c\uff85\u013d\uff85\001\002\000\034\012\053\016" +
    "\155\017\163\020\170\022\151\050\054\052\165\244\167" +
    "\377\161\u012c\150\u0131\166\u013c\164\u013d\162\001\002\000" +
    "\034\012\uff81\016\uff81\017\uff81\020\uff81\022\uff81\050\uff81" +
    "\052\uff81\244\uff81\377\uff81\u012c\uff81\u0131\uff81\u013c\uff81\u013d" +
    "\uff81\001\002\000\034\012\uff82\016\uff82\017\uff82\020\uff82" +
    "\022\uff82\050\uff82\052\uff82\244\uff82\377\uff82\u012c\uff82\u0131" +
    "\uff82\u013c\uff82\u013d\uff82\001\002\000\034\012\uff86\016\uff86" +
    "\017\uff86\020\uff86\022\uff86\050\uff86\052\uff86\244\uff86\377" +
    "\uff86\u012c\uff86\u0131\uff86\u013c\uff86\u013d\uff86\001\002\000\050" +
    "\037\uff87\040\uff87\055\uff87\061\uff87\062\uff87\074\uff87\112" +
    "\uff87\116\uff87\126\uff87\127\uff87\131\uff87\161\uff87\200\uff87" +
    "\211\uff87\311\uff87\326\uff87\u0103\uff87\u015f\uff87\u0189\uff87\001" +
    "\002\000\006\241\147\244\uff92\001\002\000\004\244\272" +
    "\001\002\000\050\037\uff7f\040\uff7f\055\uff7f\061\uff7f\062" +
    "\uff7f\074\uff7f\112\uff7f\116\uff7f\126\uff7f\127\uff7f\131\uff7f" +
    "\161\uff7f\200\uff7f\211\uff7f\311\uff7f\326\uff7f\u0103\uff7f\u015f" +
    "\uff7f\u0189\uff7f\001\002\000\050\037\uff80\040\uff80\055\uff80" +
    "\061\uff80\062\uff80\074\uff80\112\uff80\116\uff80\126\uff80\127" +
    "\uff80\131\uff80\161\uff80\200\uff80\211\uff80\311\uff80\326\uff80" +
    "\u0103\uff80\u015f\uff80\u0189\uff80\001\002\000\050\037\uff7e\040" +
    "\uff7e\055\uff7e\061\uff7e\062\uff7e\074\uff7e\112\uff7e\116\uff7e" +
    "\126\uff7e\127\uff7e\131\uff7e\161\uff7e\200\uff7e\211\uff7e\311" +
    "\uff7e\326\uff7e\u0103\uff7e\u015f\uff7e\u0189\uff7e\001\002\000\012" +
    "\010\176\012\053\016\175\050\054\001\002\000\152\005" +
    "\uff9b\006\uff9b\007\uff9b\010\uff9b\011\uff9b\012\uff9b\016\uff9b" +
    "\017\uff9b\020\uff9b\022\uff9b\024\uff9b\025\uff9b\026\uff9b\027" +
    "\uff9b\031\uff9b\037\uff9b\040\uff9b\050\uff9b\052\uff9b\055\uff9b" +
    "\061\uff9b\062\uff9b\074\uff9b\076\uff9b\107\uff9b\112\uff9b\114" +
    "\uff9b\116\uff9b\126\uff9b\127\uff9b\131\uff9b\153\uff9b\160\uff9b" +
    "\161\uff9b\175\uff9b\200\uff9b\211\uff9b\214\uff9b\241\uff9b\244" +
    "\uff9b\267\uff9b\311\uff9b\326\uff9b\370\uff9b\377\uff9b\u0103\uff9b" +
    "\u012c\uff9b\u0131\uff9b\u013c\uff9b\u013d\uff9b\u015f\uff9b\u0189\uff9b\001" +
    "\002\000\016\037\uff45\040\300\116\uff45\326\uff45\u0103\uff45" +
    "\u0189\uff45\001\002\000\006\012\053\050\054\001\002\000" +
    "\014\037\uff47\116\uff47\326\uff47\u0103\uff47\u0189\uff47\001\002" +
    "\000\016\037\uff45\040\300\116\uff45\326\uff45\u0103\uff45\u0189" +
    "\uff45\001\002\000\014\037\uff46\116\uff46\326\uff46\u0103\uff46" +
    "\u0189\uff46\001\002\000\166\005\uffe4\006\uffe4\007\uffe4\010" +
    "\uffe4\011\uffe4\012\uffe4\016\uffe4\017\uffe4\020\uffe4\022\uffe4" +
    "\024\uffe4\025\uffe4\026\uffe4\027\uffe4\031\uffe4\037\uffe4\040" +
    "\uffe4\050\uffe4\052\uffe4\055\uffe4\060\uffe4\061\uffe4\062\uffe4" +
    "\066\uffe4\074\uffe4\076\uffe4\107\uffe4\112\uffe4\114\uffe4\116" +
    "\uffe4\126\uffe4\127\uffe4\131\uffe4\153\uffe4\160\uffe4\161\uffe4" +
    "\175\uffe4\176\uffe4\200\uffe4\211\uffe4\214\uffe4\241\uffe4\244" +
    "\uffe4\257\uffe4\267\uffe4\306\uffe4\307\uffe4\311\uffe4\326\uffe4" +
    "\370\uffe4\377\uffe4\u0103\uffe4\u012c\uffe4\u0131\uffe4\u013c\uffe4\u013d" +
    "\uffe4\u015f\uffe4\u0189\uffe4\001\002\000\006\012\053\050\054" +
    "\001\002\000\210\005\uffe5\006\uffe5\007\uffe5\010\uffe5\011" +
    "\uffe5\012\uffe5\016\uffe5\017\uffe5\020\uffe5\022\uffe5\024\uffe5" +
    "\025\uffe5\026\uffe5\027\uffe5\031\uffe5\037\uffe5\040\uffe5\041" +
    "\311\042\uffe5\050\uffe5\052\uffe5\055\uffe5\060\uffe5\061\uffe5" +
    "\062\uffe5\066\uffe5\074\uffe5\076\uffe5\077\uffe5\102\uffe5\107" +
    "\uffe5\112\uffe5\114\uffe5\116\uffe5\126\uffe5\127\uffe5\131\uffe5" +
    "\141\uffe5\153\uffe5\160\uffe5\161\uffe5\174\uffe5\175\uffe5\176" +
    "\uffe5\200\uffe5\211\uffe5\214\uffe5\241\uffe5\244\uffe5\257\uffe5" +
    "\266\uffe5\267\uffe5\306\uffe5\307\uffe5\311\uffe5\326\uffe5\334" +
    "\uffe5\336\uffe5\370\uffe5\377\uffe5\u0103\uffe5\u012c\uffe5\u0131\uffe5" +
    "\u013c\uffe5\u013d\uffe5\u015f\uffe5\u0189\uffe5\001\002\000\166\005" +
    "\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\016\uffe3" +
    "\017\uffe3\020\uffe3\022\uffe3\024\uffe3\025\uffe3\026\uffe3\027" +
    "\uffe3\031\uffe3\037\uffe3\040\uffe3\050\uffe3\052\uffe3\055\uffe3" +
    "\060\uffe3\061\uffe3\062\uffe3\066\uffe3\074\uffe3\076\uffe3\107" +
    "\uffe3\112\uffe3\114\uffe3\116\uffe3\126\uffe3\127\uffe3\131\uffe3" +
    "\153\uffe3\160\uffe3\161\uffe3\175\uffe3\176\uffe3\200\uffe3\211" +
    "\uffe3\214\uffe3\241\uffe3\244\uffe3\257\uffe3\267\uffe3\306\uffe3" +
    "\307\uffe3\311\uffe3\326\uffe3\370\uffe3\377\uffe3\u0103\uffe3\u012c" +
    "\uffe3\u0131\uffe3\u013c\uffe3\u013d\uffe3\u015f\uffe3\u0189\uffe3\001\002" +
    "\000\206\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012" +
    "\uffe7\016\uffe7\017\uffe7\020\uffe7\022\uffe7\024\uffe7\025\uffe7" +
    "\026\uffe7\027\uffe7\031\uffe7\037\uffe7\040\uffe7\042\uffe7\050" +
    "\uffe7\052\uffe7\055\uffe7\060\uffe7\061\uffe7\062\uffe7\066\uffe7" +
    "\074\uffe7\076\uffe7\077\uffe7\102\uffe7\107\uffe7\112\uffe7\114" +
    "\uffe7\116\uffe7\126\uffe7\127\uffe7\131\uffe7\141\uffe7\153\uffe7" +
    "\160\uffe7\161\uffe7\174\uffe7\175\uffe7\176\uffe7\200\uffe7\211" +
    "\uffe7\214\uffe7\241\uffe7\244\uffe7\257\uffe7\266\uffe7\267\uffe7" +
    "\306\uffe7\307\uffe7\311\uffe7\326\uffe7\334\uffe7\336\uffe7\370" +
    "\uffe7\377\uffe7\u0103\uffe7\u012c\uffe7\u0131\uffe7\u013c\uffe7\u013d\uffe7" +
    "\u015f\uffe7\u0189\uffe7\001\002\000\006\012\053\050\054\001" +
    "\002\000\206\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\012\uffe6\016\uffe6\017\uffe6\020\uffe6\022\uffe6\024\uffe6\025" +
    "\uffe6\026\uffe6\027\uffe6\031\uffe6\037\uffe6\040\uffe6\042\uffe6" +
    "\050\uffe6\052\uffe6\055\uffe6\060\uffe6\061\uffe6\062\uffe6\066" +
    "\uffe6\074\uffe6\076\uffe6\077\uffe6\102\uffe6\107\uffe6\112\uffe6" +
    "\114\uffe6\116\uffe6\126\uffe6\127\uffe6\131\uffe6\141\uffe6\153" +
    "\uffe6\160\uffe6\161\uffe6\174\uffe6\175\uffe6\176\uffe6\200\uffe6" +
    "\211\uffe6\214\uffe6\241\uffe6\244\uffe6\257\uffe6\266\uffe6\267" +
    "\uffe6\306\uffe6\307\uffe6\311\uffe6\326\uffe6\334\uffe6\336\uffe6" +
    "\370\uffe6\377\uffe6\u0103\uffe6\u012c\uffe6\u0131\uffe6\u013c\uffe6\u013d" +
    "\uffe6\u015f\uffe6\u0189\uffe6\001\002\000\006\012\053\050\054" +
    "\001\002\000\004\176\315\001\002\000\006\012\053\050" +
    "\054\001\002\000\004\005\325\001\002\000\016\037\uff3c" +
    "\107\321\116\uff3c\326\uff3c\u0103\uff3c\u0189\uff3c\001\002\000" +
    "\014\037\uff79\116\uff79\326\143\u0103\uff79\u0189\uff79\001\002" +
    "\000\006\012\053\050\054\001\002\000\016\037\uff45\040" +
    "\300\116\uff45\326\uff45\u0103\uff45\u0189\uff45\001\002\000\014" +
    "\037\uff3d\116\uff3d\326\uff3d\u0103\uff3d\u0189\uff3d\001\002\000" +
    "\012\037\uff43\116\uff43\u0103\uff43\u0189\uff43\001\002\000\036" +
    "\012\053\016\155\017\163\020\170\022\151\050\054\052" +
    "\165\244\167\257\330\377\161\u012c\150\u0131\166\u013c\164" +
    "\u013d\162\001\002\000\020\037\uff3e\040\331\107\uff3e\116" +
    "\uff3e\326\uff3e\u0103\uff3e\u0189\uff3e\001\002\000\020\037\uff40" +
    "\040\uff40\107\uff40\116\uff40\326\uff40\u0103\uff40\u0189\uff40\001" +
    "\002\000\020\037\uff41\040\uff41\107\uff41\116\uff41\326\uff41" +
    "\u0103\uff41\u0189\uff41\001\002\000\006\012\053\050\054\001" +
    "\002\000\016\037\uff42\107\uff42\116\uff42\326\uff42\u0103\uff42" +
    "\u0189\uff42\001\002\000\016\037\uff3f\107\uff3f\116\uff3f\326" +
    "\uff3f\u0103\uff3f\u0189\uff3f\001\002\000\040\002\ufffe\003\035" +
    "\066\032\111\024\132\022\146\010\157\011\164\027\166" +
    "\023\213\026\253\013\254\042\262\040\274\037\306\034" +
    "\001\002\000\004\002\uffff\001\002\000\010\037\uffc4\u0103" +
    "\uffc4\u0189\uffc4\001\002\000\010\037\uffc2\u0103\uffc2\u0189\uffc2" +
    "\001\002\000\010\012\uffdd\050\uffdd\150\352\001\002\000" +
    "\010\012\uffdd\050\uffdd\150\352\001\002\000\010\012\uffdd" +
    "\050\uffdd\150\352\001\002\000\010\037\uffc3\u0103\uffc3\u0189" +
    "\uffc3\001\002\000\010\012\uffdd\050\uffdd\150\352\001\002" +
    "\000\010\012\uffdd\050\uffdd\150\352\001\002\000\010\037" +
    "\uffc5\u0103\uffc5\u0189\uffc5\001\002\000\010\037\uffc0\u0103\uffc0" +
    "\u0189\uffc0\001\002\000\010\037\uffc1\u0103\uffc1\u0189\uffc1\001" +
    "\002\000\006\012\053\050\054\001\002\000\004\340\353" +
    "\001\002\000\006\012\uffde\050\uffde\001\002\000\012\037" +
    "\uffb6\040\355\u0103\uffb6\u0189\uffb6\001\002\000\006\012\053" +
    "\050\054\001\002\000\010\037\uffb8\u0103\uffb8\u0189\uffb8\001" +
    "\002\000\012\037\uffb6\040\355\u0103\uffb6\u0189\uffb6\001\002" +
    "\000\010\037\uffb7\u0103\uffb7\u0189\uffb7\001\002\000\006\012" +
    "\053\050\054\001\002\000\012\037\uffbd\040\363\u0103\uffbd" +
    "\u0189\uffbd\001\002\000\006\012\053\050\054\001\002\000" +
    "\010\037\uffbf\u0103\uffbf\u0189\uffbf\001\002\000\012\037\uffbd" +
    "\040\363\u0103\uffbd\u0189\uffbd\001\002\000\010\037\uffbe\u0103" +
    "\uffbe\u0189\uffbe\001\002\000\006\012\053\050\054\001\002" +
    "\000\010\037\uffbc\u0103\uffbc\u0189\uffbc\001\002\000\006\012" +
    "\053\050\054\001\002\000\004\u015f\u0100\001\002\000\012" +
    "\037\uffb2\040\375\u0103\uffb2\u0189\uffb2\001\002\000\010\037" +
    "\uffb5\u0103\uffb5\u0189\uffb5\001\002\000\006\012\053\050\054" +
    "\001\002\000\012\037\uffb2\040\375\u0103\uffb2\u0189\uffb2\001" +
    "\002\000\010\037\uffb3\u0103\uffb3\u0189\uffb3\001\002\000\006" +
    "\012\053\050\054\001\002\000\012\037\uffb4\040\uffb4\u0103" +
    "\uffb4\u0189\uffb4\001\002\000\006\012\053\050\054\001\002" +
    "\000\012\037\uffb9\040\u0104\u0103\uffb9\u0189\uffb9\001\002\000" +
    "\006\012\053\050\054\001\002\000\010\037\uffbb\u0103\uffbb" +
    "\u0189\uffbb\001\002\000\012\037\uffb9\040\u0104\u0103\uffb9\u0189" +
    "\uffb9\001\002\000\010\037\uffba\u0103\uffba\u0189\uffba\001\002" +
    "\000\010\037\ufea9\u0103\ufea9\u0189\ufea9\001\002\000\010\037" +
    "\ufea4\u0103\ufea4\u0189\ufea4\001\002\000\010\115\u01ff\344\u01fe" +
    "\372\u01fc\001\002\000\010\037\ufea5\u0103\ufea5\u0189\ufea5\001" +
    "\002\000\010\012\053\050\054\221\u01f4\001\002\000\006" +
    "\012\053\050\054\001\002\000\010\037\ufea8\u0103\ufea8\u0189" +
    "\ufea8\001\002\000\010\037\ufea7\u0103\ufea7\u0189\ufea7\001\002" +
    "\000\010\037\ufeaa\u0103\ufeaa\u0189\ufeaa\001\002\000\006\012" +
    "\053\050\054\001\002\000\006\012\053\050\054\001\002" +
    "\000\010\037\ufea6\u0103\ufea6\u0189\ufea6\001\002\000\004\066" +
    "\u0115\001\002\000\010\115\ufe2f\344\ufe2f\372\ufe2f\001\002" +
    "\000\006\052\u0117\076\ufe9b\001\002\000\006\012\053\050" +
    "\054\001\002\000\004\076\ufe9c\001\002\000\004\076\u011a" +
    "\001\002\000\004\157\011\001\002\000\010\037\ufe9d\u0103" +
    "\ufe9d\u0189\ufe9d\001\002\000\004\055\u011d\001\002\000\022" +
    "\037\uff74\076\uff74\257\uff74\307\uff74\326\uff74\u0103\uff74\u015f" +
    "\uff74\u0189\uff74\001\002\000\010\060\u0121\066\u0120\306\u0124" +
    "\001\002\000\010\037\ufe9a\u0103\ufe9a\u0189\ufe9a\001\002\000" +
    "\004\163\u01e3\001\002\000\022\012\053\050\054\077\ufeca" +
    "\141\ufeca\156\u0131\174\u0135\266\ufeca\336\ufeca\001\002\000" +
    "\010\037\ufe97\u0103\ufe97\u0189\ufe97\001\002\000\010\037\ufe99" +
    "\u0103\ufe99\u0189\ufe99\001\002\000\014\012\ufe8a\050\ufe8a\150" +
    "\ufe8a\163\u0127\174\u0126\001\002\000\012\037\ufe88\040\u012d" +
    "\u0103\ufe88\u0189\ufe88\001\002\000\010\012\ufe8b\050\ufe8b\150" +
    "\ufe8b\001\002\000\010\012\uffdd\050\uffdd\150\352\001\002" +
    "\000\010\012\uffdd\050\uffdd\150\352\001\002\000\006\012" +
    "\053\050\054\001\002\000\012\037\ufe8d\040\ufe8d\u0103\ufe8d" +
    "\u0189\ufe8d\001\002\000\006\012\053\050\054\001\002\000" +
    "\012\037\ufe8c\040\ufe8c\u0103\ufe8c\u0189\ufe8c\001\002\000\014" +
    "\012\ufe8a\050\ufe8a\150\ufe8a\163\u0127\174\u0126\001\002\000" +
    "\010\037\ufe8e\u0103\ufe8e\u0189\ufe8e\001\002\000\012\037\ufe88" +
    "\040\u012d\u0103\ufe88\u0189\ufe88\001\002\000\010\037\ufe89\u0103" +
    "\ufe89\u0189\ufe89\001\002\000\006\012\053\050\054\001\002" +
    "\000\014\037\ufef0\040\ufef0\055\ufef0\u0103\ufef0\u0189\ufef0\001" +
    "\002\000\014\037\ufef1\040\ufef1\055\ufef1\u0103\ufef1\u0189\ufef1" +
    "\001\002\000\012\037\ufeed\040\u01dc\u0103\ufeed\u0189\ufeed\001" +
    "\002\000\006\012\053\050\054\001\002\000\042\050\u0180" +
    "\240\u017e\303\u018c\364\u0183\376\u018a\u0104\u0184\u0111\u017b\u011a" +
    "\u0185\u011d\u017a\u0120\u0187\u0133\u0186\u013f\u017d\u0149\u017c\u014c\u017f" +
    "\u0159\u0189\u015a\u0182\001\002\000\012\077\u0139\141\u013a\266" +
    "\u013d\336\u013b\001\002\000\014\037\ufeef\040\ufeef\055\ufeef" +
    "\u0103\ufeef\u0189\ufeef\001\002\000\004\203\u015d\001\002\000" +
    "\006\052\ufef6\241\u0150\001\002\000\004\203\u014d\001\002" +
    "\000\014\037\ufeb6\040\ufeb6\055\ufeb6\u0103\ufeb6\u0189\ufeb6\001" +
    "\002\000\010\052\ufec3\152\u013f\236\u013e\001\002\000\034" +
    "\037\ufec4\040\ufec4\052\ufec4\055\ufec4\077\ufec4\102\ufec4\141" +
    "\ufec4\156\ufec4\174\ufec4\266\ufec4\336\ufec4\u0103\ufec4\u0189\ufec4" +
    "\001\002\000\034\037\ufec5\040\ufec5\052\ufec5\055\ufec5\077" +
    "\ufec5\102\ufec5\141\ufec5\156\ufec5\174\ufec5\266\ufec5\336\ufec5" +
    "\u0103\ufec5\u0189\ufec5\001\002\000\004\052\u0141\001\002\000" +
    "\006\012\053\050\054\001\002\000\014\037\ufeb4\040\ufeb4" +
    "\055\ufeb4\u0103\ufeb4\u0189\ufeb4\001\002\000\012\040\uff64\055" +
    "\uff64\267\u0145\370\u0144\001\002\000\052\012\uff66\016\uff66" +
    "\017\uff66\020\uff66\022\uff66\037\uff66\040\uff66\050\uff66\052" +
    "\uff66\055\uff66\074\uff66\116\uff66\244\uff66\377\uff66\u0103\uff66" +
    "\u012c\uff66\u0131\uff66\u013c\uff66\u013d\uff66\u0189\uff66\001\002\000" +
    "\052\012\uff65\016\uff65\017\uff65\020\uff65\022\uff65\037\uff65" +
    "\040\uff65\050\uff65\052\uff65\055\uff65\074\uff65\116\uff65\244" +
    "\uff65\377\uff65\u0103\uff65\u012c\uff65\u0131\uff65\u013c\uff65\u013d\uff65" +
    "\u0189\uff65\001\002\000\006\040\u0148\055\ufeaf\001\002\000" +
    "\004\055\u014c\001\002\000\006\012\053\050\054\001\002" +
    "\000\012\040\uff64\055\uff64\267\u0145\370\u0144\001\002\000" +
    "\006\040\u0148\055\ufeaf\001\002\000\004\055\ufeb0\001\002" +
    "\000\014\037\ufeb1\040\ufeb1\055\ufeb1\u0103\ufeb1\u0189\ufeb1\001" +
    "\002\000\010\052\ufec3\152\u013f\236\u013e\001\002\000\004" +
    "\052\u0141\001\002\000\014\037\ufeb5\040\ufeb5\055\ufeb5\u0103" +
    "\ufeb5\u0189\ufeb5\001\002\000\006\074\u0155\244\u0157\001\002" +
    "\000\004\052\u0152\001\002\000\036\012\uff92\016\uff92\017" +
    "\uff92\020\uff92\022\uff92\050\uff92\052\uff92\241\147\244\uff92" +
    "\377\uff92\u012c\uff92\u0131\uff92\u013c\uff92\u013d\uff92\001\002\000" +
    "\004\055\u0154\001\002\000\014\037\ufeb2\040\ufeb2\055\ufeb2" +
    "\u0103\ufeb2\u0189\ufeb2\001\002\000\004\105\u0158\001\002\000" +
    "\034\037\ufef7\040\ufef7\052\ufef7\055\ufef7\077\ufef7\102\ufef7" +
    "\140\ufef7\141\ufef7\174\ufef7\266\ufef7\336\ufef7\u0103\ufef7\u0189" +
    "\ufef7\001\002\000\034\037\ufef4\040\ufef4\052\ufef4\055\ufef4" +
    "\077\ufef4\102\ufef4\140\ufef4\141\ufef4\174\ufef4\266\ufef4\336" +
    "\ufef4\u0103\ufef4\u0189\ufef4\001\002\000\036\037\ufef2\040\ufef2" +
    "\052\ufef2\055\ufef2\077\ufef2\102\ufef2\140\ufef2\141\ufef2\174" +
    "\ufef2\241\u0159\266\ufef2\336\ufef2\u0103\ufef2\u0189\ufef2\001\002" +
    "\000\036\037\ufed0\040\ufed0\052\ufed0\055\ufed0\077\ufed0\102" +
    "\ufed0\140\ufed0\141\ufed0\174\ufed0\244\u015c\266\ufed0\336\ufed0" +
    "\u0103\ufed0\u0189\ufed0\001\002\000\034\037\ufef5\040\ufef5\052" +
    "\ufef5\055\ufef5\077\ufef5\102\ufef5\140\ufef5\141\ufef5\174\ufef5" +
    "\266\ufef5\336\ufef5\u0103\ufef5\u0189\ufef5\001\002\000\034\037" +
    "\ufef3\040\ufef3\052\ufef3\055\ufef3\077\ufef3\102\ufef3\140\ufef3" +
    "\141\ufef3\174\ufef3\266\ufef3\336\ufef3\u0103\ufef3\u0189\ufef3\001" +
    "\002\000\034\037\ufed1\040\ufed1\052\ufed1\055\ufed1\077\ufed1" +
    "\102\ufed1\140\ufed1\141\ufed1\174\ufed1\266\ufed1\336\ufed1\u0103" +
    "\ufed1\u0189\ufed1\001\002\000\004\052\u015e\001\002\000\006" +
    "\012\053\050\054\001\002\000\004\102\u0160\001\002\000" +
    "\006\012\053\050\054\001\002\000\022\037\ufebf\040\ufebf" +
    "\052\u0162\055\ufebf\241\ufebf\u0103\ufebf\u015f\ufebf\u0189\ufebf\001" +
    "\002\000\006\012\053\050\054\001\002\000\020\037\ufebd" +
    "\040\ufebd\055\ufebd\241\ufebd\u0103\ufebd\u015f\u0164\u0189\ufebd\001" +
    "\002\000\006\262\u0168\274\u0169\001\002\000\016\037\ufef6" +
    "\040\ufef6\055\ufef6\241\u0150\u0103\ufef6\u0189\ufef6\001\002\000" +
    "\014\037\ufeb3\040\ufeb3\055\ufeb3\u0103\ufeb3\u0189\ufeb3\001\002" +
    "\000\034\037\ufebd\040\ufebd\055\ufebd\077\ufebd\102\ufebd\141" +
    "\ufebd\174\ufebd\241\ufebd\266\ufebd\336\ufebd\u0103\ufebd\u015f\u0164" +
    "\u0189\ufebd\001\002\000\006\133\u016c\176\u016b\001\002\000" +
    "\006\133\u016c\176\u016b\001\002\000\034\037\ufebb\040\ufebb" +
    "\055\ufebb\077\ufebb\102\ufebb\141\ufebb\174\ufebb\241\ufebb\266" +
    "\ufebb\336\ufebb\u0103\ufebb\u015f\ufebb\u0189\ufebb\001\002\000\006" +
    "\244\u016f\257\u016d\001\002\000\034\037\ufeb8\040\ufeb8\055" +
    "\ufeb8\077\ufeb8\102\ufeb8\141\ufeb8\174\ufeb8\241\ufeb8\266\ufeb8" +
    "\336\ufeb8\u0103\ufeb8\u015f\ufeb8\u0189\ufeb8\001\002\000\034\037" +
    "\ufeb9\040\ufeb9\055\ufeb9\077\ufeb9\102\ufeb9\141\ufeb9\174\ufeb9" +
    "\241\ufeb9\266\ufeb9\336\ufeb9\u0103\ufeb9\u015f\ufeb9\u0189\ufeb9\001" +
    "\002\000\034\037\ufeb7\040\ufeb7\055\ufeb7\077\ufeb7\102\ufeb7" +
    "\141\ufeb7\174\ufeb7\241\ufeb7\266\ufeb7\336\ufeb7\u0103\ufeb7\u015f" +
    "\ufeb7\u0189\ufeb7\001\002\000\034\037\ufeba\040\ufeba\055\ufeba" +
    "\077\ufeba\102\ufeba\141\ufeba\174\ufeba\241\ufeba\266\ufeba\336" +
    "\ufeba\u0103\ufeba\u015f\ufeba\u0189\ufeba\001\002\000\034\037\ufebc" +
    "\040\ufebc\055\ufebc\077\ufebc\102\ufebc\141\ufebc\174\ufebc\241" +
    "\ufebc\266\ufebc\336\ufebc\u0103\ufebc\u015f\ufebc\u0189\ufebc\001\002" +
    "\000\032\037\ufebe\040\ufebe\055\ufebe\077\ufebe\102\ufebe\141" +
    "\ufebe\174\ufebe\241\ufebe\266\ufebe\336\ufebe\u0103\ufebe\u0189\ufebe" +
    "\001\002\000\004\055\u0173\001\002\000\034\037\ufec0\040" +
    "\ufec0\055\ufec0\077\ufec0\102\ufec0\141\ufec0\174\ufec0\241\ufec0" +
    "\266\ufec0\336\ufec0\u0103\ufec0\u015f\ufec0\u0189\ufec0\001\002\000" +
    "\006\040\u0176\055\ufeac\001\002\000\004\055\u0179\001\002" +
    "\000\006\012\053\050\054\001\002\000\006\040\u0176\055" +
    "\ufeac\001\002\000\004\055\ufead\001\002\000\004\102\ufeae" +
    "\001\002\000\066\005\uffcd\037\uffcd\040\uffcd\052\uffcd\053" +
    "\uffcd\055\uffcd\074\uffcd\076\uffcd\077\uffcd\102\uffcd\137\uffcd" +
    "\140\uffcd\141\uffcd\160\uffcd\174\uffcd\241\uffcd\244\uffcd\257" +
    "\uffcd\266\uffcd\334\uffcd\336\uffcd\u0103\uffcd\u0166\uffcd\u0169\uffcd" +
    "\u016a\uffcd\u0189\uffcd\001\002\000\066\005\uffd2\037\uffd2\040" +
    "\uffd2\052\uffd2\053\uffd2\055\uffd2\074\uffd2\076\uffd2\077\uffd2" +
    "\102\uffd2\137\uffd2\140\uffd2\141\uffd2\160\uffd2\174\uffd2\241" +
    "\uffd2\244\uffd2\257\uffd2\266\uffd2\334\uffd2\336\uffd2\u0103\uffd2" +
    "\u0166\uffd2\u0169\uffd2\u016a\uffd2\u0189\uffd2\001\002\000\066\005" +
    "\uffcc\037\uffcc\040\uffcc\052\uffcc\053\uffcc\055\uffcc\074\uffcc" +
    "\076\uffcc\077\uffcc\102\uffcc\137\uffcc\140\uffcc\141\uffcc\160" +
    "\uffcc\174\uffcc\241\uffcc\244\uffcc\257\uffcc\266\uffcc\334\uffcc" +
    "\336\uffcc\u0103\uffcc\u0166\uffcc\u0169\uffcc\u016a\uffcc\u0189\uffcc\001" +
    "\002\000\066\005\uffd5\037\uffd5\040\uffd5\052\uffd5\053\uffd5" +
    "\055\uffd5\074\uffd5\076\uffd5\077\uffd5\102\uffd5\137\uffd5\140" +
    "\uffd5\141\uffd5\160\uffd5\174\uffd5\241\uffd5\244\uffd5\257\uffd5" +
    "\266\uffd5\334\uffd5\336\uffd5\u0103\uffd5\u0166\uffd5\u0169\uffd5\u016a" +
    "\uffd5\u0189\uffd5\001\002\000\056\037\uffd1\040\uffd1\052\uffd1" +
    "\053\uffd1\055\uffd1\074\uffd1\077\uffd1\102\uffd1\137\uffd1\140" +
    "\uffd1\141\uffd1\160\uffd1\174\uffd1\241\uffd1\244\uffd1\257\uffd1" +
    "\266\uffd1\334\uffd1\336\uffd1\u0103\uffd1\u016a\uffd1\u0189\uffd1\001" +
    "\002\000\066\005\uffd0\037\uffd0\040\uffd0\052\uffd0\053\uffd0" +
    "\055\uffd0\074\uffd0\076\uffd0\077\uffd0\102\uffd0\137\uffd0\140" +
    "\uffd0\141\uffd0\160\uffd0\174\uffd0\241\uffd0\244\uffd0\257\uffd0" +
    "\266\uffd0\334\uffd0\336\uffd0\u0103\uffd0\u0166\uffd0\u0169\uffd0\u016a" +
    "\uffd0\u0189\uffd0\001\002\000\040\240\u017e\303\u018c\364\u0183" +
    "\376\u018a\u0104\u0184\u0111\u017b\u011a\u0185\u011d\u017a\u0120\u0187\u0133" +
    "\u0186\u013f\u017d\u0149\u017c\u014c\u017f\u0159\u0189\u015a\u0182\001\002" +
    "\000\046\037\ufedb\040\ufedb\055\ufedb\074\ufedb\077\ufedb\102" +
    "\ufedb\137\ufedb\140\ufedb\141\ufedb\160\u0194\174\ufedb\241\ufedb" +
    "\244\ufedb\257\ufedb\266\ufedb\336\ufedb\u0103\ufedb\u0189\ufedb\001" +
    "\002\000\066\005\uffd8\037\uffd8\040\uffd8\052\uffd8\053\uffd8" +
    "\055\uffd8\074\uffd8\076\uffd8\077\uffd8\102\uffd8\137\uffd8\140" +
    "\uffd8\141\uffd8\160\uffd8\174\uffd8\241\uffd8\244\uffd8\257\uffd8" +
    "\266\uffd8\334\uffd8\336\uffd8\u0103\uffd8\u0166\uffd8\u0169\uffd8\u016a" +
    "\uffd8\u0189\uffd8\001\002\000\066\005\uffd6\037\uffd6\040\uffd6" +
    "\052\uffd6\053\uffd6\055\uffd6\074\uffd6\076\uffd6\077\uffd6\102" +
    "\uffd6\137\uffd6\140\uffd6\141\uffd6\160\uffd6\174\uffd6\241\uffd6" +
    "\244\uffd6\257\uffd6\266\uffd6\334\uffd6\336\uffd6\u0103\uffd6\u0166" +
    "\uffd6\u0169\uffd6\u016a\uffd6\u0189\uffd6\001\002\000\066\005\uffd4" +
    "\037\uffd4\040\uffd4\052\uffd4\053\uffd4\055\uffd4\074\uffd4\076" +
    "\uffd4\077\uffd4\102\uffd4\137\uffd4\140\uffd4\141\uffd4\160\uffd4" +
    "\174\uffd4\241\uffd4\244\uffd4\257\uffd4\266\uffd4\334\uffd4\336" +
    "\uffd4\u0103\uffd4\u0166\uffd4\u0169\uffd4\u016a\uffd4\u0189\uffd4\001\002" +
    "\000\066\005\uffcb\037\uffcb\040\uffcb\052\uffcb\053\uffcb\055" +
    "\uffcb\074\uffcb\076\uffcb\077\uffcb\102\uffcb\137\uffcb\140\uffcb" +
    "\141\uffcb\160\uffcb\174\uffcb\241\uffcb\244\uffcb\257\uffcb\266" +
    "\uffcb\334\uffcb\336\uffcb\u0103\uffcb\u0166\uffcb\u0169\uffcb\u016a\uffcb" +
    "\u0189\uffcb\001\002\000\066\005\uffce\037\uffce\040\uffce\052" +
    "\uffce\053\uffce\055\uffce\074\uffce\076\uffce\077\uffce\102\uffce" +
    "\137\uffce\140\uffce\141\uffce\160\uffce\174\uffce\241\uffce\244" +
    "\uffce\257\uffce\266\uffce\334\uffce\336\uffce\u0103\uffce\u0166\uffce" +
    "\u0169\uffce\u016a\uffce\u0189\uffce\001\002\000\066\005\uffd7\037" +
    "\uffd7\040\uffd7\052\uffd7\053\uffd7\055\uffd7\074\uffd7\076\uffd7" +
    "\077\uffd7\102\uffd7\137\uffd7\140\uffd7\141\uffd7\160\uffd7\174" +
    "\uffd7\241\uffd7\244\uffd7\257\uffd7\266\uffd7\334\uffd7\336\uffd7" +
    "\u0103\uffd7\u0166\uffd7\u0169\uffd7\u016a\uffd7\u0189\uffd7\001\002\000" +
    "\050\037\uffc8\040\uffc8\052\u018d\055\uffc8\074\uffc8\077\uffc8" +
    "\102\uffc8\137\uffc8\140\uffc8\141\uffc8\160\uffc8\174\uffc8\241" +
    "\uffc8\244\uffc8\257\uffc8\266\uffc8\336\uffc8\u0103\uffc8\u0189\uffc8" +
    "\001\002\000\066\005\uffca\037\uffca\040\uffca\052\uffca\053" +
    "\uffca\055\uffca\074\uffca\076\uffca\077\uffca\102\uffca\137\uffca" +
    "\140\uffca\141\uffca\160\uffca\174\uffca\241\uffca\244\uffca\257" +
    "\uffca\266\uffca\334\uffca\336\uffca\u0103\uffca\u0166\uffca\u0169\uffca" +
    "\u016a\uffca\u0189\uffca\001\002\000\066\005\uffcf\037\uffcf\040" +
    "\uffcf\052\uffcf\053\uffcf\055\uffcf\074\uffcf\076\uffcf\077\uffcf" +
    "\102\uffcf\137\uffcf\140\uffcf\141\uffcf\160\uffcf\174\uffcf\241" +
    "\uffcf\244\uffcf\257\uffcf\266\uffcf\334\uffcf\336\uffcf\u0103\uffcf" +
    "\u0166\uffcf\u0169\uffcf\u016a\uffcf\u0189\uffcf\001\002\000\050\037" +
    "\uffda\040\uffda\052\uffda\055\uffda\074\uffda\077\uffda\102\uffda" +
    "\137\uffda\140\uffda\141\uffda\160\uffda\174\uffda\241\uffda\244" +
    "\uffda\257\uffda\266\uffda\336\uffda\u0103\uffda\u0189\uffda\001\002" +
    "\000\066\005\uffd3\037\uffd3\040\uffd3\052\uffd3\053\uffd3\055" +
    "\uffd3\074\uffd3\076\uffd3\077\uffd3\102\uffd3\137\uffd3\140\uffd3" +
    "\141\uffd3\160\uffd3\174\uffd3\241\uffd3\244\uffd3\257\uffd3\266" +
    "\uffd3\334\uffd3\336\uffd3\u0103\uffd3\u0166\uffd3\u0169\uffd3\u016a\uffd3" +
    "\u0189\uffd3\001\002\000\004\016\u018f\001\002\000\046\037" +
    "\uffdb\040\uffdb\055\uffdb\074\uffdb\077\uffdb\102\uffdb\137\uffdb" +
    "\140\uffdb\141\uffdb\160\uffdb\174\uffdb\241\uffdb\244\uffdb\257" +
    "\uffdb\266\uffdb\336\uffdb\u0103\uffdb\u0189\uffdb\001\002\000\006" +
    "\040\u0190\055\uffc6\001\002\000\004\016\u0193\001\002\000" +
    "\004\055\u0192\001\002\000\046\037\uffc9\040\uffc9\055\uffc9" +
    "\074\uffc9\077\uffc9\102\uffc9\137\uffc9\140\uffc9\141\uffc9\160" +
    "\uffc9\174\uffc9\241\uffc9\244\uffc9\257\uffc9\266\uffc9\336\uffc9" +
    "\u0103\uffc9\u0189\uffc9\001\002\000\004\055\uffc7\001\002\000" +
    "\006\012\053\050\054\001\002\000\044\037\ufee9\040\ufee9" +
    "\055\ufee9\074\ufee2\077\u01a3\102\ufec1\137\u0196\140\u019d\141" +
    "\u01a1\174\u019c\241\u01a0\244\ufee2\257\u019b\266\u019a\336\u01a2" +
    "\u0103\ufee9\u0189\ufee9\001\002\000\036\037\ufed2\040\ufed2\052" +
    "\u01c3\055\ufed2\077\ufed2\102\ufed2\140\ufed2\141\ufed2\174\ufed2" +
    "\241\ufed2\266\ufed2\336\ufed2\u0103\ufed2\u0189\ufed2\001\002\000" +
    "\014\037\ufeec\040\ufeec\055\ufeec\u0103\ufeec\u0189\ufeec\001\002" +
    "\000\014\037\ufeea\040\ufeea\055\ufeea\u0103\ufeea\u0189\ufeea\001" +
    "\002\000\006\074\u01ca\244\u01cb\001\002\000\034\037\ufec3" +
    "\040\ufec3\055\ufec3\077\ufec3\102\ufec3\141\ufec3\152\u013f\174" +
    "\ufec3\236\u013e\266\ufec3\336\ufec3\u0103\ufec3\u0189\ufec3\001\002" +
    "\000\014\016\u01bc\017\u01b9\020\u01b7\022\u01b8\244\u01bb\001" +
    "\002\000\006\012\053\050\054\001\002\000\030\037\ufecc" +
    "\040\ufecc\055\ufecc\077\ufeca\102\ufeca\141\ufeca\174\u0135\266" +
    "\ufeca\336\ufeca\u0103\ufecc\u0189\ufecc\001\002\000\004\102\u01af" +
    "\001\002\000\030\037\ufecc\040\ufecc\055\ufecc\077\ufeca\102" +
    "\ufeca\141\ufeca\174\u0135\266\ufeca\336\ufeca\u0103\ufecc\u0189\ufecc" +
    "\001\002\000\006\074\ufee3\244\ufee3\001\002\000\006\052" +
    "\ufef6\241\u0150\001\002\000\004\203\u01a5\001\002\000\004" +
    "\203\u01a4\001\002\000\004\102\ufec2\001\002\000\034\037" +
    "\ufec3\040\ufec3\055\ufec3\077\ufec3\102\ufec3\141\ufec3\152\u013f" +
    "\174\ufec3\236\u013e\266\ufec3\336\ufec3\u0103\ufec3\u0189\ufec3\001" +
    "\002\000\030\037\ufec9\040\ufec9\055\ufec9\077\ufec9\102\ufec9" +
    "\141\ufec9\174\ufec9\266\ufec9\336\ufec9\u0103\ufec9\u0189\ufec9\001" +
    "\002\000\004\052\u01a8\001\002\000\036\012\uff92\016\uff92" +
    "\017\uff92\020\uff92\022\uff92\050\uff92\052\uff92\241\147\244" +
    "\uff92\377\uff92\u012c\uff92\u0131\uff92\u013c\uff92\u013d\uff92\001\002" +
    "\000\004\055\u01aa\001\002\000\030\037\ufec6\040\ufec6\055" +
    "\ufec6\077\ufec6\102\ufec6\141\ufec6\174\ufec6\266\ufec6\336\ufec6" +
    "\u0103\ufec6\u0189\ufec6\001\002\000\014\037\ufee4\040\ufee4\055" +
    "\ufee4\u0103\ufee4\u0189\ufee4\001\002\000\014\077\u01a3\102\ufec1" +
    "\141\u01a1\266\u019a\336\u01a2\001\002\000\030\037\ufecc\040" +
    "\ufecc\055\ufecc\077\ufeca\102\ufeca\141\ufeca\174\u0135\266\ufeca" +
    "\336\ufeca\u0103\ufecc\u0189\ufecc\001\002\000\014\037\ufecd\040" +
    "\ufecd\055\ufecd\u0103\ufecd\u0189\ufecd\001\002\000\006\012\053" +
    "\050\054\001\002\000\036\037\ufebf\040\ufebf\052\u0162\055" +
    "\ufebf\077\ufebf\102\ufebf\141\ufebf\174\ufebf\241\ufebf\266\ufebf" +
    "\336\ufebf\u0103\ufebf\u015f\ufebf\u0189\ufebf\001\002\000\034\037" +
    "\ufebd\040\ufebd\055\ufebd\077\ufebd\102\ufebd\141\ufebd\174\ufebd" +
    "\241\ufebd\266\ufebd\336\ufebd\u0103\ufebd\u015f\u0164\u0189\ufebd\001" +
    "\002\000\032\037\ufef6\040\ufef6\055\ufef6\077\ufef6\102\ufef6" +
    "\141\ufef6\174\ufef6\241\u0150\266\ufef6\336\ufef6\u0103\ufef6\u0189" +
    "\ufef6\001\002\000\030\037\ufec7\040\ufec7\055\ufec7\077\ufec7" +
    "\102\ufec7\141\ufec7\174\ufec7\266\ufec7\336\ufec7\u0103\ufec7\u0189" +
    "\ufec7\001\002\000\014\037\ufee5\040\ufee5\055\ufee5\u0103\ufee5" +
    "\u0189\ufee5\001\002\000\030\074\ufee2\077\u01a3\102\ufec1\137" +
    "\u0196\140\u019d\141\u01a1\241\u01a0\244\ufee2\257\u019b\266\u019a" +
    "\336\u01a2\001\002\000\014\037\ufeeb\040\ufeeb\055\ufeeb\u0103" +
    "\ufeeb\u0189\ufeeb\001\002\000\036\037\ufed8\040\ufed8\055\ufed8" +
    "\077\ufed8\102\ufed8\137\ufed8\140\ufed8\141\ufed8\174\ufed8\241" +
    "\ufed8\266\ufed8\336\ufed8\u0103\ufed8\u0189\ufed8\001\002\000\036" +
    "\037\ufed9\040\ufed9\055\ufed9\077\ufed9\102\ufed9\137\ufed9\140" +
    "\ufed9\141\ufed9\174\ufed9\241\ufed9\266\ufed9\336\ufed9\u0103\ufed9" +
    "\u0189\ufed9\001\002\000\036\037\ufed7\040\ufed7\055\ufed7\077" +
    "\ufed7\102\ufed7\137\ufed7\140\ufed7\141\ufed7\174\ufed7\241\ufed7" +
    "\266\ufed7\336\ufed7\u0103\ufed7\u0189\ufed7\001\002\000\036\037" +
    "\ufed4\040\ufed4\055\ufed4\077\ufed4\102\ufed4\137\u01bd\140\ufed4" +
    "\141\ufed4\174\ufed4\241\ufed4\266\ufed4\336\ufed4\u0103\ufed4\u0189" +
    "\ufed4\001\002\000\036\037\ufed6\040\ufed6\055\ufed6\077\ufed6" +
    "\102\ufed6\137\ufed6\140\ufed6\141\ufed6\174\ufed6\241\ufed6\266" +
    "\ufed6\336\ufed6\u0103\ufed6\u0189\ufed6\001\002\000\036\037\ufeda" +
    "\040\ufeda\055\ufeda\077\ufeda\102\ufeda\137\ufeda\140\ufeda\141" +
    "\ufeda\174\ufeda\241\ufeda\266\ufeda\336\ufeda\u0103\ufeda\u0189\ufeda" +
    "\001\002\000\036\037\ufed2\040\ufed2\052\u01c3\055\ufed2\077" +
    "\ufed2\102\ufed2\140\ufed2\141\ufed2\174\ufed2\241\ufed2\266\ufed2" +
    "\336\ufed2\u0103\ufed2\u0189\ufed2\001\002\000\034\037\ufef6\040" +
    "\ufef6\055\ufef6\077\ufef6\102\ufef6\140\ufef6\141\ufef6\174\ufef6" +
    "\241\u0150\266\ufef6\336\ufef6\u0103\ufef6\u0189\ufef6\001\002\000" +
    "\032\037\ufece\040\ufece\055\ufece\077\ufece\102\ufece\140\u01c0" +
    "\141\ufece\174\ufece\266\ufece\336\ufece\u0103\ufece\u0189\ufece\001" +
    "\002\000\030\037\ufecf\040\ufecf\055\ufecf\077\ufecf\102\ufecf" +
    "\141\ufecf\174\ufecf\266\ufecf\336\ufecf\u0103\ufecf\u0189\ufecf\001" +
    "\002\000\030\037\ufecc\040\ufecc\055\ufecc\077\ufeca\102\ufeca" +
    "\141\ufeca\174\u0135\266\ufeca\336\ufeca\u0103\ufecc\u0189\ufecc\001" +
    "\002\000\014\037\ufee8\040\ufee8\055\ufee8\u0103\ufee8\u0189\ufee8" +
    "\001\002\000\004\016\u01c5\001\002\000\034\037\ufed5\040" +
    "\ufed5\055\ufed5\077\ufed5\102\ufed5\140\ufed5\141\ufed5\174\ufed5" +
    "\241\ufed5\266\ufed5\336\ufed5\u0103\ufed5\u0189\ufed5\001\002\000" +
    "\004\040\u01c6\001\002\000\004\016\u01c7\001\002\000\004" +
    "\055\u01c8\001\002\000\034\037\ufed3\040\ufed3\055\ufed3\077" +
    "\ufed3\102\ufed3\140\ufed3\141\ufed3\174\ufed3\241\ufed3\266\ufed3" +
    "\336\ufed3\u0103\ufed3\u0189\ufed3\001\002\000\030\037\ufec8\040" +
    "\ufec8\055\ufec8\077\ufec8\102\ufec8\141\ufec8\174\ufec8\266\ufec8" +
    "\336\ufec8\u0103\ufec8\u0189\ufec8\001\002\000\004\105\u01cf\001" +
    "\002\000\032\037\ufee1\040\ufee1\055\ufee1\077\ufee1\102\ufee1" +
    "\140\ufee1\141\ufee1\174\ufee1\266\ufee1\336\ufee1\u0103\ufee1\u0189" +
    "\ufee1\001\002\000\032\037\ufece\040\ufece\055\ufece\077\ufece" +
    "\102\ufece\140\u01c0\141\ufece\174\ufece\266\ufece\336\ufece\u0103" +
    "\ufece\u0189\ufece\001\002\000\030\037\ufecc\040\ufecc\055\ufecc" +
    "\077\ufeca\102\ufeca\141\ufeca\174\u0135\266\ufeca\336\ufeca\u0103" +
    "\ufecc\u0189\ufecc\001\002\000\014\037\ufee6\040\ufee6\055\ufee6" +
    "\u0103\ufee6\u0189\ufee6\001\002\000\036\037\ufedd\040\ufedd\055" +
    "\ufedd\077\ufedd\102\ufedd\140\ufedd\141\ufedd\174\ufedd\241\u01d1" +
    "\244\u01d2\266\ufedd\336\ufedd\u0103\ufedd\u0189\ufedd\001\002\000" +
    "\032\037\ufee0\040\ufee0\055\ufee0\077\ufee0\102\ufee0\140\ufee0" +
    "\141\ufee0\174\ufee0\266\ufee0\336\ufee0\u0103\ufee0\u0189\ufee0\001" +
    "\002\000\004\244\u01d3\001\002\000\032\037\ufede\040\ufede" +
    "\055\ufede\077\ufede\102\ufede\140\ufede\141\ufede\174\ufede\266" +
    "\ufede\336\ufede\u0103\ufede\u0189\ufede\001\002\000\032\037\ufedf" +
    "\040\ufedf\055\ufedf\077\ufedf\102\ufedf\140\ufedf\141\ufedf\174" +
    "\ufedf\266\ufedf\336\ufedf\u0103\ufedf\u0189\ufedf\001\002\000\034" +
    "\037\ufef6\040\ufef6\055\ufef6\077\ufef6\102\ufef6\140\ufef6\141" +
    "\ufef6\174\ufef6\241\u0150\266\ufef6\336\ufef6\u0103\ufef6\u0189\ufef6" +
    "\001\002\000\032\037\ufece\040\ufece\055\ufece\077\ufece\102" +
    "\ufece\140\u01c0\141\ufece\174\ufece\266\ufece\336\ufece\u0103\ufece" +
    "\u0189\ufece\001\002\000\030\037\ufecc\040\ufecc\055\ufecc\077" +
    "\ufeca\102\ufeca\141\ufeca\174\u0135\266\ufeca\336\ufeca\u0103\ufecc" +
    "\u0189\ufecc\001\002\000\014\037\ufee7\040\ufee7\055\ufee7\u0103" +
    "\ufee7\u0189\ufee7\001\002\000\044\037\ufedc\040\ufedc\055\ufedc" +
    "\074\ufedc\077\ufedc\102\ufedc\137\ufedc\140\ufedc\141\ufedc\174" +
    "\ufedc\241\ufedc\244\ufedc\257\ufedc\266\ufedc\336\ufedc\u0103\ufedc" +
    "\u0189\ufedc\001\002\000\004\053\u01da\001\002\000\050\037" +
    "\uffd9\040\uffd9\052\uffd9\055\uffd9\074\uffd9\077\uffd9\102\uffd9" +
    "\137\uffd9\140\uffd9\141\uffd9\160\uffd9\174\uffd9\241\uffd9\244" +
    "\uffd9\257\uffd9\266\uffd9\336\uffd9\u0103\uffd9\u0189\uffd9\001\002" +
    "\000\014\077\ufecb\102\ufecb\141\ufecb\266\ufecb\336\ufecb\001" +
    "\002\000\022\012\053\050\054\077\ufeca\141\ufeca\156\u0131" +
    "\174\u0135\266\ufeca\336\ufeca\001\002\000\010\037\ufe98\u0103" +
    "\ufe98\u0189\ufe98\001\002\000\014\037\ufeed\040\u01dc\055\ufeed" +
    "\u0103\ufeed\u0189\ufeed\001\002\000\012\037\ufeee\055\ufeee\u0103" +
    "\ufeee\u0189\ufeee\001\002\000\010\052\ufec3\152\u013f\236\u013e" +
    "\001\002\000\004\052\u0141\001\002\000\014\037\ufeab\040" +
    "\ufeab\055\ufeab\u0103\ufeab\u0189\ufeab\001\002\000\006\012\053" +
    "\050\054\001\002\000\046\050\u0180\060\u01e6\240\u017e\303" +
    "\u018c\306\u01e7\364\u0183\376\u018a\u0104\u0184\u0111\u017b\u011a\u0185" +
    "\u011d\u017a\u0120\u0187\u0133\u0186\u013f\u017d\u0149\u017c\u014c\u017f\u0159" +
    "\u0189\u015a\u0182\001\002\000\014\037\ufedb\160\u0194\244\ufedb" +
    "\u0103\ufedb\u0189\ufedb\001\002\000\006\140\ufe92\241\ufe92\001" +
    "\002\000\006\140\ufe91\241\ufe91\001\002\000\006\140\u01eb" +
    "\241\u01ec\001\002\000\010\037\ufe96\u0103\ufe96\u0189\ufe96\001" +
    "\002\000\010\037\ufe95\u0103\ufe95\u0189\ufe95\001\002\000\010" +
    "\037\ufe90\u0103\ufe90\u0189\ufe90\001\002\000\004\074\u01ee\001" +
    "\002\000\010\037\ufe94\u0103\ufe94\u0189\ufe94\001\002\000\004" +
    "\105\u01ef\001\002\000\010\037\ufe8f\u0103\ufe8f\u0189\ufe8f\001" +
    "\002\000\012\037\ufed0\244\u015c\u0103\ufed0\u0189\ufed0\001\002" +
    "\000\010\037\ufe93\u0103\ufe93\u0189\ufe93\001\002\000\010\037" +
    "\ufe9e\u0103\ufe9e\u0189\ufe9e\001\002\000\006\160\ufea2\176\ufea2" +
    "\001\002\000\006\160\ufea1\176\ufea1\001\002\000\006\160" +
    "\u01f6\176\u01f8\001\002\000\006\012\053\050\054\001\002" +
    "\000\010\037\ufea3\u0103\ufea3\u0189\ufea3\001\002\000\004\132" +
    "\u01f9\001\002\000\004\u010b\u01fa\001\002\000\010\037\ufe9f" +
    "\u0103\ufe9f\u0189\ufe9f\001\002\000\010\037\ufea0\u0103\ufea0\u0189" +
    "\ufea0\001\002\000\006\012\ufe70\050\ufe70\001\002\000\006" +
    "\012\053\050\054\001\002\000\006\012\ufe71\050\ufe71\001" +
    "\002\000\006\012\053\050\054\001\002\000\004\052\u0201" +
    "\001\002\000\006\042\u0205\055\ufe30\001\002\000\004\055" +
    "\ufe31\001\002\000\042\076\u0210\240\ufe28\303\ufe28\364\ufe28" +
    "\376\ufe28\u0104\ufe28\u0111\ufe28\u011a\ufe28\u011d\ufe28\u0120\ufe28\u0133" +
    "\ufe28\u013f\ufe28\u0149\ufe28\u014c\ufe28\u0159\ufe28\u015a\ufe28\001\002" +
    "\000\006\040\u023c\055\ufe2a\001\002\000\004\012\u023a\001" +
    "\002\000\004\055\u0207\001\002\000\004\u016c\u0208\001\002" +
    "\000\042\220\u020b\240\u017e\303\u018c\364\u0183\376\u018a\u0104" +
    "\u0184\u0111\u017b\u011a\u0185\u011d\u017a\u0120\u0187\u0133\u0186\u013f\u017d" +
    "\u0149\u017c\u014c\u017f\u0159\u0189\u015a\u0182\001\002\000\010\037" +
    "\ufe24\u0103\ufe24\u0189\ufe24\001\002\000\010\037\ufe25\u0103\ufe25" +
    "\u0189\ufe25\001\002\000\004\334\u020e\001\002\000\010\037" +
    "\ufe32\u0103\ufe32\u0189\ufe32\001\002\000\004\334\u020e\001\002" +
    "\000\016\u016b\u0221\u016c\u021d\u016d\u021e\u016e\u021f\u016f\u0223\u0188" +
    "\u0220\001\002\000\006\076\u0210\111\ufe28\001\002\000\044" +
    "\111\ufe29\116\ufe29\240\ufe29\303\ufe29\364\ufe29\376\ufe29\u0104" +
    "\ufe29\u0111\ufe29\u011a\ufe29\u011d\ufe29\u0120\ufe29\u0133\ufe29\u013f\ufe29" +
    "\u0149\ufe29\u014c\ufe29\u0159\ufe29\u015a\ufe29\001\002\000\004\111" +
    "\u0212\001\002\000\012\157\011\164\027\262\040\274\037" +
    "\001\002\000\004\116\u0214\001\002\000\014\016\u021a\017" +
    "\u0219\020\u0215\022\u0217\042\u0205\001\002\000\004\316\ufe1c" +
    "\001\002\000\004\316\u021b\001\002\000\004\316\ufe1d\001" +
    "\002\000\004\316\ufe1f\001\002\000\004\316\ufe1b\001\002" +
    "\000\004\316\ufe1e\001\002\000\010\037\ufe23\u0103\ufe23\u0189" +
    "\ufe23\001\002\000\010\076\ufe1a\111\ufe1a\116\ufe1a\001\002" +
    "\000\004\244\u022e\001\002\000\012\040\ufe17\076\ufe17\111" +
    "\ufe17\116\ufe17\001\002\000\004\u015f\u022b\001\002\000\012" +
    "\040\ufe14\076\ufe14\111\ufe14\116\ufe14\001\002\000\012\040" +
    "\ufe18\076\ufe18\111\ufe18\116\ufe18\001\002\000\012\040\u0228" +
    "\076\ufe11\111\ufe11\116\ufe11\001\002\000\004\005\u0224\001" +
    "\002\000\006\255\u0227\u015f\u0225\001\002\000\012\040\ufe10" +
    "\076\ufe10\111\ufe10\116\ufe10\001\002\000\012\040\ufe13\076" +
    "\ufe13\111\ufe13\116\ufe13\001\002\000\012\040\ufe0f\076\ufe0f" +
    "\111\ufe0f\116\ufe0f\001\002\000\016\u016b\u0221\u016c\u021d\u016d" +
    "\u021e\u016e\u021f\u016f\u0223\u0188\u0220\001\002\000\010\076\ufe19" +
    "\111\ufe19\116\ufe19\001\002\000\010\076\ufe12\111\ufe12\116" +
    "\ufe12\001\002\000\004\244\u022c\001\002\000\004\u0119\u022d" +
    "\001\002\000\012\040\ufe15\076\ufe15\111\ufe15\116\ufe15\001" +
    "\002\000\004\u015f\u022f\001\002\000\004\244\u0230\001\002" +
    "\000\004\u0119\u0231\001\002\000\012\040\ufe16\076\ufe16\111" +
    "\ufe16\116\ufe16\001\002\000\006\076\u0210\116\ufe28\001\002" +
    "\000\004\116\u0234\001\002\000\006\052\u0235\157\011\001" +
    "\002\000\004\157\011\001\002\000\010\037\ufe22\u0103\ufe22" +
    "\u0189\ufe22\001\002\000\010\037\ufe20\u0103\ufe20\u0189\ufe20\001" +
    "\002\000\004\055\u0239\001\002\000\010\037\ufe21\u0103\ufe21" +
    "\u0189\ufe21\001\002\000\060\012\uffdc\037\uffdc\050\uffdc\076" +
    "\uffdc\240\uffdc\303\uffdc\316\uffdc\334\uffdc\364\uffdc\376\uffdc" +
    "\u0103\uffdc\u0104\uffdc\u0111\uffdc\u011a\uffdc\u011d\uffdc\u0120\uffdc\u0133" +
    "\uffdc\u013f\uffdc\u0149\uffdc\u014c\uffdc\u0159\uffdc\u015a\uffdc\u0189\uffdc" +
    "\001\002\000\004\055\ufe2c\001\002\000\004\042\u0205\001" +
    "\002\000\004\055\ufe2b\001\002\000\040\240\u017e\303\u018c" +
    "\364\u0183\376\u018a\u0104\u0184\u0111\u017b\u011a\u0185\u011d\u017a\u0120" +
    "\u0187\u0133\u0186\u013f\u017d\u0149\u017c\u014c\u017f\u0159\u0189\u015a\u0182" +
    "\001\002\000\010\040\ufe26\055\ufe26\u016a\u0241\001\002\000" +
    "\006\040\ufe2d\055\ufe2d\001\002\000\006\040\ufe27\055\ufe27" +
    "\001\002\000\014\037\u0243\042\ufe6e\074\ufe6e\076\ufe6e\334" +
    "\ufe6e\001\002\000\004\016\u027c\001\002\000\012\042\u0205" +
    "\074\ufe6c\076\ufe6c\334\ufe6c\001\002\000\010\074\ufe5e\076" +
    "\ufe5e\334\u0259\001\002\000\044\012\053\050\054\240\u0248" +
    "\303\u018c\364\u0183\376\u018a\u0104\u0184\u0111\u017b\u011a\u0185\u011d" +
    "\u017a\u0120\u0187\u0133\u0186\u013f\u017d\u0149\u017c\u014c\u017f\u0159\u0189" +
    "\u015a\u0182\001\002\000\010\074\ufe6d\076\ufe6d\334\ufe6d\001" +
    "\002\000\022\005\uffd1\040\uffd1\074\uffd1\076\uffd1\334\uffd1" +
    "\u015d\u0257\u0166\uffd1\u0169\uffd1\001\002\000\004\u016a\u0256\001" +
    "\002\000\012\040\u0254\074\ufe69\076\ufe69\334\ufe69\001\002" +
    "\000\020\005\u024d\040\ufe64\074\ufe64\076\ufe64\334\ufe64\u0166" +
    "\ufe64\u0169\ufe64\001\002\000\016\040\ufe62\074\ufe62\076\ufe62" +
    "\334\ufe62\u0166\u0251\u0169\u024f\001\002\000\004\257\u024e\001" +
    "\002\000\016\040\ufe65\074\ufe65\076\ufe65\334\ufe65\u0166\ufe65" +
    "\u0169\ufe65\001\002\000\012\040\ufe61\074\ufe61\076\ufe61\334" +
    "\ufe61\001\002\000\012\040\ufe68\074\ufe68\076\ufe68\334\ufe68" +
    "\001\002\000\012\040\ufe60\074\ufe60\076\ufe60\334\ufe60\001" +
    "\002\000\012\040\ufe63\074\ufe63\076\ufe63\334\ufe63\001\002" +
    "\000\010\074\ufe6b\076\ufe6b\334\ufe6b\001\002\000\004\042" +
    "\u0205\001\002\000\010\074\ufe6a\076\ufe6a\334\ufe6a\001\002" +
    "\000\012\040\ufe66\074\ufe66\076\ufe66\334\ufe66\001\002\000" +
    "\006\u0166\u0251\u0169\u024f\001\002\000\012\040\ufe67\074\ufe67" +
    "\076\ufe67\334\ufe67\001\002\000\012\332\u0270\335\u026c\u016b" +
    "\u026f\u0173\u0272\001\002\000\006\074\u025c\076\ufe50\001\002" +
    "\000\004\076\u025e\001\002\000\004\105\u025d\001\002\000" +
    "\004\076\ufe51\001\002\000\014\111\u0262\157\011\164\027" +
    "\262\040\274\037\001\002\000\010\037\ufe72\u0103\ufe72\u0189" +
    "\ufe72\001\002\000\010\037\046\u0103\047\u0189\050\001\002" +
    "\000\010\037\ufe4e\u0103\ufe4e\u0189\ufe4e\001\002\000\012\157" +
    "\011\164\027\262\040\274\037\001\002\000\004\316\u0264" +
    "\001\002\000\010\037\ufe4f\u0103\ufe4f\u0189\ufe4f\001\002\000" +
    "\022\037\ufe4b\157\011\164\027\262\040\274\037\316\ufe4b" +
    "\u0103\ufe4b\u0189\ufe4b\001\002\000\010\037\046\u0103\047\u0189" +
    "\050\001\002\000\012\037\ufe4d\316\ufe4d\u0103\ufe4d\u0189\ufe4d" +
    "\001\002\000\022\037\ufe49\157\011\164\027\262\040\274" +
    "\037\316\ufe49\u0103\ufe49\u0189\ufe49\001\002\000\010\037\046" +
    "\u0103\047\u0189\050\001\002\000\012\037\ufe4c\316\ufe4c\u0103" +
    "\ufe4c\u0189\ufe4c\001\002\000\012\037\ufe4a\316\ufe4a\u0103\ufe4a" +
    "\u0189\ufe4a\001\002\000\004\076\ufe59\001\002\000\010\040" +
    "\u027a\074\ufe56\076\ufe56\001\002\000\006\074\ufe5f\076\ufe5f" +
    "\001\002\000\010\040\ufe5c\074\ufe5c\076\ufe5c\001\002\000" +
    "\004\076\ufe58\001\002\000\004\076\u0273\001\002\000\010" +
    "\040\ufe5b\074\ufe5b\076\ufe5b\001\002\000\014\012\053\050" +
    "\054\u0170\u0275\u0171\u0278\u0172\u0274\001\002\000\010\040\ufe53" +
    "\074\ufe53\076\ufe53\001\002\000\010\040\ufe55\074\ufe55\076" +
    "\ufe55\001\002\000\010\040\ufe52\074\ufe52\076\ufe52\001\002" +
    "\000\010\040\ufe5a\074\ufe5a\076\ufe5a\001\002\000\010\040" +
    "\ufe54\074\ufe54\076\ufe54\001\002\000\006\074\ufe5d\076\ufe5d" +
    "\001\002\000\012\332\u0270\335\u026c\u016b\u026f\u0173\u0272\001" +
    "\002\000\006\074\ufe57\076\ufe57\001\002\000\012\042\ufe6f" +
    "\074\ufe6f\076\ufe6f\334\ufe6f\001\002\000\010\012\uff5b\050" +
    "\uff5b\172\u027e\001\002\000\006\012\uff5c\050\uff5c\001\002" +
    "\000\006\012\053\050\054\001\002\000\010\052\u0117\257" +
    "\uff59\307\uff59\001\002\000\006\257\uff5a\307\uff5a\001\002" +
    "\000\006\257\u0283\307\u0284\001\002\000\004\307\u0299\001" +
    "\002\000\004\052\u0286\001\002\000\012\037\uff5d\116\uff5d" +
    "\u0103\uff5d\u0189\uff5d\001\002\000\014\016\u028d\017\u028a\020" +
    "\u0288\022\u0289\257\u0287\001\002\000\006\040\uff57\055\uff57" +
    "\001\002\000\006\040\uff54\055\uff54\001\002\000\006\040" +
    "\uff55\055\uff55\001\002\000\006\040\uff53\055\uff53\001\002" +
    "\000\004\055\u0292\001\002\000\006\040\u028e\055\uff51\001" +
    "\002\000\006\040\uff56\055\uff56\001\002\000\014\016\u028d" +
    "\017\u028a\020\u0288\022\u0289\257\u0287\001\002\000\004\055" +
    "\uff58\001\002\000\006\040\u028e\055\uff51\001\002\000\004" +
    "\055\uff52\001\002\000\014\037\uff4d\040\u0294\116\uff4d\u0103" +
    "\uff4d\u0189\uff4d\001\002\000\012\037\uff50\116\uff50\u0103\uff50" +
    "\u0189\uff50\001\002\000\004\052\u0295\001\002\000\014\016" +
    "\u028d\017\u028a\020\u0288\022\u0289\257\u0287\001\002\000\004" +
    "\055\u0297\001\002\000\014\037\uff4d\040\u0294\116\uff4d\u0103" +
    "\uff4d\u0189\uff4d\001\002\000\012\037\uff4e\116\uff4e\u0103\uff4e" +
    "\u0189\uff4e\001\002\000\012\037\uff4f\116\uff4f\u0103\uff4f\u0189" +
    "\uff4f\001\002\000\010\037\uff27\u0103\uff27\u0189\uff27\001\002" +
    "\000\010\037\uff2d\u0103\uff2d\u0189\uff2d\001\002\000\010\037" +
    "\uff29\u0103\uff29\u0189\uff29\001\002\000\006\012\053\050\054" +
    "\001\002\000\010\037\uff28\u0103\uff28\u0189\uff28\001\002\000" +
    "\004\012\u02cd\001\002\000\010\152\uff04\156\uff04\236\uff04" +
    "\001\002\000\010\037\uff2c\u0103\uff2c\u0189\uff2c\001\002\000" +
    "\010\037\uff2e\u0103\uff2e\u0189\uff2e\001\002\000\006\012\053" +
    "\050\054\001\002\000\006\012\053\050\054\001\002\000" +
    "\010\037\uff2b\u0103\uff2b\u0189\uff2b\001\002\000\010\037\uff2a" +
    "\u0103\uff2a\u0189\uff2a\001\002\000\010\152\u013f\156\ufec3\236" +
    "\u013e\001\002\000\004\156\u02a9\001\002\000\006\012\053" +
    "\050\054\001\002\000\004\u015f\u02ab\001\002\000\006\012" +
    "\053\050\054\001\002\000\004\052\u02ad\001\002\000\006" +
    "\012\053\050\054\001\002\000\016\037\ufefd\326\ufefd\u0103" +
    "\ufefd\u0110\u02af\u015f\ufefd\u0189\ufefd\001\002\000\004\052\u0117" +
    "\001\002\000\014\037\uff79\326\143\u0103\uff79\u015f\uff79\u0189" +
    "\uff79\001\002\000\012\037\ufefb\u0103\ufefb\u015f\u02b2\u0189\ufefb" +
    "\001\002\000\006\012\053\050\054\001\002\000\010\037" +
    "\uff05\u0103\uff05\u0189\uff05\001\002\000\004\052\u02b5\001\002" +
    "\000\006\012\053\050\054\001\002\000\004\055\u02b7\001" +
    "\002\000\010\037\ufefc\u0103\ufefc\u0189\ufefc\001\002\000\014" +
    "\037\ufefe\326\ufefe\u0103\ufefe\u015f\ufefe\u0189\ufefe\001\002\000" +
    "\012\040\uff64\055\uff64\267\u0145\370\u0144\001\002\000\004" +
    "\055\u02bb\001\002\000\016\037\uff02\326\uff02\u0103\uff02\u0110" +
    "\uff02\u015f\uff02\u0189\uff02\001\002\000\006\040\u02be\055\ufeff" +
    "\001\002\000\004\055\uff01\001\002\000\006\012\053\050" +
    "\054\001\002\000\012\040\uff64\055\uff64\267\u0145\370\u0144" +
    "\001\002\000\006\040\u02be\055\ufeff\001\002\000\004\055" +
    "\uff00\001\002\000\004\052\u02c3\001\002\000\022\012\053" +
    "\050\054\077\ufeca\141\ufeca\156\u0131\174\u0135\266\ufeca\336" +
    "\ufeca\001\002\000\006\040\u01dc\055\ufeed\001\002\000\004" +
    "\055\u02c6\001\002\000\012\037\ufef8\u0103\ufef8\u015f\u02c8\u0189" +
    "\ufef8\001\002\000\010\037\ufefa\u0103\ufefa\u0189\ufefa\001\002" +
    "\000\004\336\u02c9\001\002\000\010\037\ufef9\u0103\ufef9\u0189" +
    "\ufef9\001\002\000\004\076\u02cb\001\002\000\004\157\011" +
    "\001\002\000\010\037\uff06\u0103\uff06\u0189\uff06\001\002\000" +
    "\010\037\uff26\u0103\uff26\u0189\uff26\001\002\000\014\037\uff22" +
    "\160\uff22\u0103\uff22\u015f\u02d0\u0189\uff22\001\002\000\012\037" +
    "\uff1b\160\u02fe\u0103\uff1b\u0189\uff1b\001\002\000\006\052\uff20" +
    "\336\u02d2\001\002\000\010\037\uff25\u0103\uff25\u0189\uff25\001" +
    "\002\000\004\052\uff21\001\002\000\004\052\u02d4\001\002" +
    "\000\004\u017e\u02d9\001\002\000\012\037\uff23\160\uff23\u0103" +
    "\uff23\u0189\uff23\001\002\000\014\037\uff1e\040\u02d7\160\uff1e" +
    "\u0103\uff1e\u0189\uff1e\001\002\000\004\052\u02d4\001\002\000" +
    "\012\037\uff1f\160\uff1f\u0103\uff1f\u0189\uff1f\001\002\000\004" +
    "\005\u02da\001\002\000\004\020\u02db\001\002\000\004\040" +
    "\u02dc\001\002\000\004\u017f\u02dd\001\002\000\004\005\u02de" +
    "\001\002\000\004\020\u02df\001\002\000\006\040\u02e1\055" +
    "\uff19\001\002\000\004\055\u02fd\001\002\000\010\u0118\u02ea" +
    "\u0184\u02e9\u0186\u02e8\001\002\000\006\040\uff14\055\uff14\001" +
    "\002\000\006\040\uff17\055\uff17\001\002\000\006\040\uff18" +
    "\055\uff18\001\002\000\006\040\u02e1\055\uff19\001\002\000" +
    "\006\040\uff16\055\uff16\001\002\000\006\040\uff15\055\uff15" +
    "\001\002\000\004\005\u02f7\001\002\000\004\005\u02f2\001" +
    "\002\000\004\005\u02eb\001\002\000\004\016\u02ec\001\002" +
    "\000\016\040\uff12\055\uff12\u0180\u02ef\u0181\u02f0\u0182\u02ed\u0183" +
    "\u02f1\001\002\000\006\040\uff0e\055\uff0e\001\002\000\006" +
    "\040\uff13\055\uff13\001\002\000\006\040\uff11\055\uff11\001" +
    "\002\000\006\040\uff0f\055\uff0f\001\002\000\006\040\uff10" +
    "\055\uff10\001\002\000\006\016\u02f4\u0185\u02f5\001\002\000" +
    "\006\040\uff0d\055\uff0d\001\002\000\012\u0180\u02ef\u0181\u02f0" +
    "\u0182\u02ed\u0183\u02f1\001\002\000\006\040\uff0b\055\uff0b\001" +
    "\002\000\006\040\uff0c\055\uff0c\001\002\000\004\016\u02f8" +
    "\001\002\000\020\040\uff07\055\uff07\u0180\u02ef\u0181\u02f0\u0182" +
    "\u02ed\u0183\u02f1\u0187\u02fa\001\002\000\006\040\uff09\055\uff09" +
    "\001\002\000\006\040\uff08\055\uff08\001\002\000\006\040" +
    "\uff0a\055\uff0a\001\002\000\004\055\uff1a\001\002\000\014" +
    "\037\uff1d\040\uff1d\160\uff1d\u0103\uff1d\u0189\uff1d\001\002\000" +
    "\006\012\053\050\054\001\002\000\010\037\uff24\u0103\uff24" +
    "\u0189\uff24\001\002\000\010\037\uff1c\u0103\uff1c\u0189\uff1c\001" +
    "\002\000\016\012\ufe79\037\ufe79\042\ufe79\050\ufe79\u0103\ufe79" +
    "\u0189\ufe79\001\002\000\016\012\053\037\ufe85\042\u0205\050" +
    "\054\u0103\ufe85\u0189\ufe85\001\002\000\016\012\ufe7a\037\ufe7a" +
    "\042\ufe7a\050\ufe7a\u0103\ufe7a\u0189\ufe7a\001\002\000\012\037" +
    "\ufe7f\334\ufe7f\u0103\ufe7f\u0189\ufe7f\001\002\000\012\037\ufe83" +
    "\334\u0308\u0103\ufe83\u0189\ufe83\001\002\000\012\037\ufe7e\334" +
    "\ufe7e\u0103\ufe7e\u0189\ufe7e\001\002\000\010\037\ufe87\u0103\ufe87" +
    "\u0189\ufe87\001\002\000\004\u0174\u030a\001\002\000\010\037" +
    "\ufe86\u0103\ufe86\u0189\ufe86\001\002\000\012\020\u030b\037\ufe81" +
    "\u0103\ufe81\u0189\ufe81\001\002\000\010\037\ufe82\u0103\ufe82\u0189" +
    "\ufe82\001\002\000\010\037\ufe84\u0103\ufe84\u0189\ufe84\001\002" +
    "\000\010\037\ufe78\u0103\ufe78\u0189\ufe78\001\002\000\016\012" +
    "\053\037\ufe7b\042\u0205\050\054\u0103\ufe7b\u0189\ufe7b\001\002" +
    "\000\010\037\ufe7d\u0103\ufe7d\u0189\ufe7d\001\002\000\010\037" +
    "\ufe7c\u0103\ufe7c\u0189\ufe7c\001\002\000\010\037\ufe77\u0103\ufe77" +
    "\u0189\ufe77\001\002\000\010\037\ufe75\u0103\ufe75\u0189\ufe75\001" +
    "\002\000\016\012\053\037\ufe7b\042\u0205\050\054\u0103\ufe7b" +
    "\u0189\ufe7b\001\002\000\010\037\ufe74\u0103\ufe74\u0189\ufe74\001" +
    "\002\000\006\012\053\050\054\001\002\000\010\037\uffb1" +
    "\u0103\uffb1\u0189\uffb1\001\002\000\040\010\uff6e\012\uff6e\016" +
    "\uff6e\017\uff6e\020\uff6e\022\uff6e\050\uff6e\052\uff6e\237\uff6e" +
    "\244\uff6e\377\uff6e\u012c\uff6e\u0131\uff6e\u013c\uff6e\u013d\uff6e\001" +
    "\002\000\040\010\uff6f\012\uff6f\016\uff6f\017\uff6f\020\uff6f" +
    "\022\uff6f\050\uff6f\052\uff6f\237\uff6f\244\uff6f\377\uff6f\u012c" +
    "\uff6f\u0131\uff6f\u013c\uff6f\u013d\uff6f\001\002\000\040\010\uff90" +
    "\012\uff90\016\uff90\017\uff90\020\uff90\022\uff90\050\uff90\052" +
    "\uff90\237\117\244\uff90\377\uff90\u012c\uff90\u0131\uff90\u013c\uff90" +
    "\u013d\uff90\001\002\000\036\010\u031d\012\053\016\155\017" +
    "\163\020\170\022\151\050\054\052\165\244\167\377\161" +
    "\u012c\150\u0131\166\u013c\164\u013d\162\001\002\000\042\012" +
    "\053\020\u0324\037\uffae\040\uffae\050\054\055\uffae\074\uffae" +
    "\076\u0323\107\uffae\116\uffae\126\uffae\131\uffae\311\uffae\326" +
    "\uffae\u0103\uffae\u0189\uffae\001\002\000\030\037\uff3a\055\uff3a" +
    "\074\uff3a\107\u0329\116\uff3a\126\uff3a\131\uff3a\311\uff3a\326" +
    "\uff3a\u0103\uff3a\u0189\uff3a\001\002\000\032\037\uff75\040\u031e" +
    "\055\uff75\074\uff75\107\uff75\116\uff75\126\uff75\131\uff75\311" +
    "\uff75\326\uff75\u0103\uff75\u0189\uff75\001\002\000\034\012\053" +
    "\016\155\017\163\020\170\022\151\050\054\052\165\244" +
    "\167\377\161\u012c\150\u0131\166\u013c\164\u013d\162\001\002" +
    "\000\030\037\uff77\055\uff77\074\uff77\107\uff77\116\uff77\126" +
    "\uff77\131\uff77\311\uff77\326\uff77\u0103\uff77\u0189\uff77\001\002" +
    "\000\042\012\053\020\u0324\037\uffae\040\uffae\050\054\055" +
    "\uffae\074\uffae\076\u0323\107\uffae\116\uffae\126\uffae\131\uffae" +
    "\311\uffae\326\uffae\u0103\uffae\u0189\uffae\001\002\000\046\037" +
    "\uffad\040\uffad\055\uffad\074\uffad\107\uffad\112\uffad\116\uffad" +
    "\126\uffad\127\uffad\131\uffad\161\uffad\200\uffad\211\uffad\311" +
    "\uffad\326\uffad\u0103\uffad\u015f\uffad\u0189\uffad\001\002\000\046" +
    "\037\uffaf\040\uffaf\055\uffaf\074\uffaf\107\uffaf\112\uffaf\116" +
    "\uffaf\126\uffaf\127\uffaf\131\uffaf\161\uffaf\200\uffaf\211\uffaf" +
    "\311\uffaf\326\uffaf\u0103\uffaf\u015f\uffaf\u0189\uffaf\001\002\000" +
    "\010\012\053\020\u0324\050\054\001\002\000\046\037\uffac" +
    "\040\uffac\055\uffac\074\uffac\107\uffac\112\uffac\116\uffac\126" +
    "\uffac\127\uffac\131\uffac\161\uffac\200\uffac\211\uffac\311\uffac" +
    "\326\uffac\u0103\uffac\u015f\uffac\u0189\uffac\001\002\000\032\037" +
    "\uff75\040\u031e\055\uff75\074\uff75\107\uff75\116\uff75\126\uff75" +
    "\131\uff75\311\uff75\326\uff75\u0103\uff75\u0189\uff75\001\002\000" +
    "\030\037\uff76\055\uff76\074\uff76\107\uff76\116\uff76\126\uff76" +
    "\131\uff76\311\uff76\326\uff76\u0103\uff76\u0189\uff76\001\002\000" +
    "\046\037\uffb0\040\uffb0\055\uffb0\074\uffb0\107\uffb0\112\uffb0" +
    "\116\uffb0\126\uffb0\127\uffb0\131\uffb0\161\uffb0\200\uffb0\211" +
    "\uffb0\311\uffb0\326\uffb0\u0103\uffb0\u015f\uffb0\u0189\uffb0\001\002" +
    "\000\026\037\uff79\055\uff79\074\uff79\116\uff79\126\uff79\131" +
    "\uff79\311\uff79\326\143\u0103\uff79\u0189\uff79\001\002\000\006" +
    "\012\053\050\054\001\002\000\052\012\053\020\u0324\037" +
    "\uffae\040\uffae\050\054\055\uffae\074\uffae\076\u0323\112\uffae" +
    "\116\uffae\126\uffae\127\uffae\131\uffae\161\uffae\200\uffae\211" +
    "\uffae\311\uffae\326\uffae\u0103\uffae\u0189\uffae\001\002\000\042" +
    "\037\uff36\040\uff36\055\uff36\074\uff36\112\u0331\116\uff36\126" +
    "\uff36\127\u032f\131\uff36\161\u032c\200\uff31\211\u032e\311\uff36" +
    "\326\uff36\u0103\uff36\u0189\uff36\001\002\000\004\200\uff35\001" +
    "\002\000\004\200\u033b\001\002\000\006\200\uff2f\314\u0332" +
    "\001\002\000\006\200\uff2f\314\u0332\001\002\000\030\037" +
    "\uff38\040\u0334\055\uff38\074\uff38\116\uff38\126\uff38\131\uff38" +
    "\311\uff38\326\uff38\u0103\uff38\u0189\uff38\001\002\000\006\200" +
    "\uff2f\314\u0332\001\002\000\004\200\uff30\001\002\000\004" +
    "\200\uff32\001\002\000\006\012\053\050\054\001\002\000" +
    "\026\037\uff3b\055\uff3b\074\uff3b\116\uff3b\126\uff3b\131\uff3b" +
    "\311\uff3b\326\uff3b\u0103\uff3b\u0189\uff3b\001\002\000\050\012" +
    "\053\020\u0324\037\uffae\050\054\055\uffae\074\uffae\076\u0323" +
    "\112\uffae\116\uffae\126\uffae\127\uffae\131\uffae\161\uffae\200" +
    "\uffae\211\uffae\311\uffae\326\uffae\u0103\uffae\u0189\uffae\001\002" +
    "\000\040\037\uff36\055\uff36\074\uff36\112\u0331\116\uff36\126" +
    "\uff36\127\u032f\131\uff36\161\u032c\200\uff31\211\u032e\311\uff36" +
    "\326\uff36\u0103\uff36\u0189\uff36\001\002\000\026\037\uff39\055" +
    "\uff39\074\uff39\116\uff39\126\uff39\131\uff39\311\uff39\326\uff39" +
    "\u0103\uff39\u0189\uff39\001\002\000\004\200\uff34\001\002\000" +
    "\004\200\uff33\001\002\000\006\012\053\050\054\001\002" +
    "\000\014\012\053\020\u0324\050\054\076\u0323\u015f\uffae\001" +
    "\002\000\004\u015f\u033e\001\002\000\036\012\uff92\016\uff92" +
    "\017\uff92\020\uff92\022\uff92\050\uff92\052\uff92\241\147\244" +
    "\uff92\377\uff92\u012c\uff92\u0131\uff92\u013c\uff92\u013d\uff92\001\002" +
    "\000\042\037\uff36\040\uff36\055\uff36\074\uff36\112\u0331\116" +
    "\uff36\126\uff36\127\u032f\131\uff36\161\u032c\200\uff31\211\u032e" +
    "\311\uff36\326\uff36\u0103\uff36\u0189\uff36\001\002\000\030\037" +
    "\uff37\040\uff37\055\uff37\074\uff37\116\uff37\126\uff37\131\uff37" +
    "\311\uff37\326\uff37\u0103\uff37\u0189\uff37\001\002\000\024\037" +
    "\uff60\055\uff60\074\uff60\116\uff60\126\u0343\131\uff60\311\uff60" +
    "\u0103\uff60\u0189\uff60\001\002\000\022\037\uff6b\055\uff6b\074" +
    "\uff6b\116\uff6b\131\u034a\311\uff6b\u0103\uff6b\u0189\uff6b\001\002" +
    "\000\004\130\u0344\001\002\000\034\012\053\016\155\017" +
    "\163\020\170\022\151\050\054\052\165\244\167\377\161" +
    "\u012c\150\u0131\166\u013c\164\u013d\162\001\002\000\024\037" +
    "\uff5e\040\u0347\055\uff5e\074\uff5e\116\uff5e\131\uff5e\311\uff5e" +
    "\u0103\uff5e\u0189\uff5e\001\002\000\022\037\uff61\055\uff61\074" +
    "\uff61\116\uff61\131\uff61\311\uff61\u0103\uff61\u0189\uff61\001\002" +
    "\000\034\012\053\016\155\017\163\020\170\022\151\050" +
    "\054\052\165\244\167\377\161\u012c\150\u0131\166\u013c\164" +
    "\u013d\162\001\002\000\024\037\uff5e\040\u0347\055\uff5e\074" +
    "\uff5e\116\uff5e\131\uff5e\311\uff5e\u0103\uff5e\u0189\uff5e\001\002" +
    "\000\022\037\uff5f\055\uff5f\074\uff5f\116\uff5f\131\uff5f\311" +
    "\uff5f\u0103\uff5f\u0189\uff5f\001\002\000\036\012\uff92\016\uff92" +
    "\017\uff92\020\uff92\022\uff92\050\uff92\052\uff92\241\147\244" +
    "\uff92\377\uff92\u012c\uff92\u0131\uff92\u013c\uff92\u013d\uff92\001\002" +
    "\000\020\037\uff69\055\uff69\074\uff69\116\uff69\311\u034c\u0103" +
    "\uff69\u0189\uff69\001\002\000\004\130\u034e\001\002\000\016" +
    "\037\uff70\055\uff70\074\uff70\116\uff70\u0103\uff70\u0189\uff70\001" +
    "\002\000\034\012\053\016\155\017\163\020\170\022\151" +
    "\050\054\052\165\244\167\377\161\u012c\150\u0131\166\u013c" +
    "\164\u013d\162\001\002\000\056\012\uff67\016\uff67\017\uff67" +
    "\020\uff67\022\uff67\037\uff67\050\uff67\052\uff67\055\uff67\074" +
    "\uff67\116\uff67\160\u0350\244\uff67\267\uff67\370\uff67\377\uff67" +
    "\u0103\uff67\u012c\uff67\u0131\uff67\u013c\uff67\u013d\uff67\u0189\uff67\001" +
    "\002\000\006\012\053\050\054\001\002\000\054\012\uff64" +
    "\016\uff64\017\uff64\020\uff64\022\uff64\037\uff64\050\uff64\052" +
    "\uff64\055\uff64\074\uff64\116\uff64\244\uff64\267\u0145\370\u0144" +
    "\377\uff64\u0103\uff64\u012c\uff64\u0131\uff64\u013c\uff64\u013d\uff64\u0189" +
    "\uff64\001\002\000\050\012\053\016\155\017\163\020\170" +
    "\022\151\037\uff62\050\054\052\165\055\uff62\074\uff62\116" +
    "\uff62\244\167\377\161\u0103\uff62\u012c\150\u0131\166\u013c\164" +
    "\u013d\162\u0189\uff62\001\002\000\016\037\uff6a\055\uff6a\074" +
    "\uff6a\116\uff6a\u0103\uff6a\u0189\uff6a\001\002\000\024\037\uff67" +
    "\055\uff67\074\uff67\116\uff67\160\u0350\267\uff67\370\uff67\u0103" +
    "\uff67\u0189\uff67\001\002\000\022\037\uff64\055\uff64\074\uff64" +
    "\116\uff64\267\u0145\370\u0144\u0103\uff64\u0189\uff64\001\002\000" +
    "\016\037\uff63\055\uff63\074\uff63\116\uff63\u0103\uff63\u0189\uff63" +
    "\001\002\000\054\012\uff68\016\uff68\017\uff68\020\uff68\022" +
    "\uff68\037\uff68\050\uff68\052\uff68\055\uff68\074\uff68\116\uff68" +
    "\244\uff68\267\uff68\370\uff68\377\uff68\u0103\uff68\u012c\uff68\u0131" +
    "\uff68\u013c\uff68\u013d\uff68\u0189\uff68\001\002\000\020\037\uff6c" +
    "\055\uff6c\074\uff6c\116\uff6c\311\uff6c\u0103\uff6c\u0189\uff6c\001" +
    "\002\000\032\037\uff75\040\u031e\055\uff75\074\uff75\107\uff75" +
    "\116\uff75\126\uff75\131\uff75\311\uff75\326\uff75\u0103\uff75\u0189" +
    "\uff75\001\002\000\030\037\uff78\055\uff78\074\uff78\107\uff78" +
    "\116\uff78\126\uff78\131\uff78\311\uff78\326\uff78\u0103\uff78\u0189" +
    "\uff78\001\002\000\010\012\053\042\u0205\050\054\001\002" +
    "\000\010\037\ufe80\u0103\ufe80\u0189\ufe80\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u035b\000\050\003\006\004\042\005\013\006\011\007" +
    "\032\010\020\030\030\044\005\075\027\106\043\116\014" +
    "\124\015\136\040\227\016\253\024\257\003\263\035\265" +
    "\017\340\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\262\u035a\001" +
    "\001\000\004\076\u0318\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\262\u0312\266\u0311\001\001\000\006\262\u030d\264" +
    "\u030c\001\001\000\004\262\u0301\001\001\000\002\001\001" +
    "\000\026\137\u02a1\140\u02a5\141\u02a0\162\u029b\163\u02a4\164" +
    "\u02a6\172\u029a\267\u029d\314\u0299\316\u0109\001\001\000\004" +
    "\057\u027c\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\230\u010f\231\u010e\234\u010d\235\u0112\237\u0107\267\u010a" +
    "\314\u0108\316\u0109\001\001\000\002\001\001\000\016\031" +
    "\345\032\335\034\342\035\336\037\347\041\346\001\001" +
    "\000\004\011\333\001\001\000\002\001\001\000\004\057" +
    "\312\001\001\000\004\057\115\001\001\000\002\001\001" +
    "\000\004\012\051\001\001\000\004\011\044\001\001\000" +
    "\002\001\001\000\050\003\050\004\042\005\013\006\011" +
    "\007\032\010\020\030\030\044\005\075\027\106\043\116" +
    "\014\124\015\136\040\227\016\253\024\257\003\263\035" +
    "\265\017\340\004\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\341\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\342\063\001\001\000\002\001" +
    "\001\000\004\343\071\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\344\072\001\001\000\004\345\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\075\101\001\001" +
    "\000\004\346\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\347\105\001\001\000\002\001\001\000\006" +
    "\012\107\073\110\001\001\000\004\074\111\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\113\001\001" +
    "\000\004\074\114\001\001\000\002\001\001\000\004\117" +
    "\125\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\060\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\127\015\130" +
    "\120\126\001\001\000\002\001\001\000\004\016\303\001" +
    "\001\000\004\121\141\001\001\000\004\123\133\001\001" +
    "\000\004\012\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\127\015\276\001\001\000\004\067\143\001" +
    "\001\000\006\056\145\062\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\012\156\017\170\047\152\051" +
    "\155\053\153\054\151\064\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\262\056\257\065\266\001\001\000\004\052\250" +
    "\001\001\000\002\001\001\000\004\050\242\001\001\000" +
    "\004\020\235\001\001\000\004\063\232\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\012\156\017\170\047\201\051\155\053\153" +
    "\054\151\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\156\017\172" +
    "\055\173\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\066\205\001\001\000" +
    "\016\012\156\017\170\047\221\051\155\053\153\054\151" +
    "\001\001\000\002\001\001\000\016\012\156\017\170\047" +
    "\207\051\155\053\153\054\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\012\156\017" +
    "\170\047\211\051\155\053\153\054\151\001\001\000\002" +
    "\001\001\000\016\012\156\017\170\047\213\051\155\053" +
    "\153\054\151\001\001\000\004\061\215\001\001\000\016" +
    "\012\156\017\170\047\217\051\155\053\153\054\151\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\220" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\156\017\172\055\223\001\001\000\002\001\001\000\010" +
    "\012\156\017\172\055\225\001\001\000\002\001\001\000" +
    "\010\012\156\017\172\055\227\001\001\000\002\001\001" +
    "\000\006\056\145\062\234\001\001\000\006\056\145\062" +
    "\233\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\127\015\237\001" +
    "\001\000\002\001\001\000\014\012\156\017\170\051\245" +
    "\053\153\054\151\001\001\000\014\012\156\017\170\051" +
    "\243\053\153\054\151\001\001\000\002\001\001\000\004" +
    "\050\244\001\001\000\002\001\001\000\004\050\246\001" +
    "\001\000\002\001\001\000\012\012\156\017\170\053\254" +
    "\054\151\001\001\000\002\001\001\000\012\012\156\017" +
    "\170\053\252\054\151\001\001\000\004\052\253\001\001" +
    "\000\002\001\001\000\004\052\255\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\066\273\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\012\156\017\170\047" +
    "\272\051\155\053\153\054\151\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\056\270\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\156\017" +
    "\172\055\275\001\001\000\002\001\001\000\004\122\300" +
    "\001\001\000\006\012\127\015\301\001\001\000\002\001" +
    "\001\000\004\122\302\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\305\013\306\001\001\000\004\014" +
    "\307\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\311\001\001\000\002\001\001\000\006\012\127\015" +
    "\313\001\001\000\002\001\001\000\006\012\315\125\316" +
    "\001\001\000\002\001\001\000\004\130\317\001\001\000" +
    "\004\067\323\001\001\000\006\012\127\015\321\001\001" +
    "\000\004\122\322\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\012\156\017\170\047\326\051\155\053\153" +
    "\054\151\126\325\001\001\000\004\127\331\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\315\125\332" +
    "\001\001\000\002\001\001\000\002\001\001\000\050\003" +
    "\334\004\042\005\013\006\011\007\032\010\020\030\030" +
    "\044\005\075\027\106\043\116\014\124\015\136\040\227" +
    "\016\253\024\257\003\263\035\265\017\340\004\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\021\u0101\001\001\000\004\021\370\001\001\000\004" +
    "\021\366\001\001\000\002\001\001\000\004\021\360\001" +
    "\001\000\004\021\350\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\305\013\353\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\040\355" +
    "\001\001\000\006\012\305\013\356\001\001\000\002\001" +
    "\001\000\004\040\357\001\001\000\002\001\001\000\006" +
    "\012\127\015\361\001\001\000\004\033\363\001\001\000" +
    "\006\012\127\015\364\001\001\000\002\001\001\000\004" +
    "\033\365\001\001\000\002\001\001\000\004\012\367\001" +
    "\001\000\002\001\001\000\006\012\371\042\372\001\001" +
    "\000\002\001\001\000\004\043\373\001\001\000\002\001" +
    "\001\000\006\012\371\042\375\001\001\000\004\043\376" +
    "\001\001\000\002\001\001\000\006\012\127\015\u0100\001" +
    "\001\000\002\001\001\000\004\012\u0102\001\001\000\004" +
    "\036\u0104\001\001\000\004\012\u0105\001\001\000\002\001" +
    "\001\000\004\036\u0106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\270\u01fc\001\001\000" +
    "\002\001\001\000\006\012\u01f2\232\u01f4\001\001\000\004" +
    "\012\u01f1\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\127\015\u011d\001\001\000\006" +
    "\012\305\013\u0115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\072\u0117\236\u0118\001\001" +
    "\000\006\012\107\073\u011b\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\075\u011a\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\240\u011e\241" +
    "\u0122\246\u0121\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\012\u0135\175\u0133\177\u0132\207\u0136\220\u0131\226" +
    "\u0137\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\247\u0124\250\u0127\001\001\000\004\251\u012d\001\001\000" +
    "\002\001\001\000\004\021\u012a\001\001\000\004\021\u0128" +
    "\001\001\000\004\012\u0129\001\001\000\002\001\001\000" +
    "\004\012\u012b\001\001\000\002\001\001\000\006\247\u012e" +
    "\250\u0127\001\001\000\002\001\001\000\004\251\u012f\001" +
    "\001\000\002\001\001\000\004\012\u01df\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\176\u01dc\001\001\000" +
    "\004\012\u01da\001\001\000\010\023\u0180\024\u0187\025\u018a" +
    "\001\001\000\004\221\u013b\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\174\u0150\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\211\u013f\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\222\u0141\001\001\000\004" +
    "\012\u0142\001\001\000\002\001\001\000\004\102\u0145\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\223\u0146" +
    "\001\001\000\002\001\001\000\004\012\u0148\001\001\000" +
    "\004\102\u0149\001\001\000\004\223\u014a\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\211\u014d\001\001\000" +
    "\004\222\u014e\001\001\000\002\001\001\000\004\351\u0155" +
    "\001\001\000\002\001\001\000\006\056\145\062\u0152\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\352\u0159\001" +
    "\001\000\004\204\u015a\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\224\u015e\001\001\000" +
    "\004\012\u0173\001\001\000\002\001\001\000\006\012\305" +
    "\013\u0160\001\001\000\004\213\u0162\001\001\000\004\012" +
    "\u0171\001\001\000\004\214\u0164\001\001\000\004\215\u0166" +
    "\001\001\000\004\174\u0165\001\001\000\002\001\001\000" +
    "\004\214\u0170\001\001\000\004\217\u016f\001\001\000\004" +
    "\217\u0169\001\001\000\002\001\001\000\004\216\u016d\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\225\u0174\001\001" +
    "\000\002\001\001\000\004\012\u0176\001\001\000\004\225" +
    "\u0177\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\u01d8" +
    "\001\001\000\004\200\u0194\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\u018d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\027" +
    "\u0190\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u01d7\001\001\000" +
    "\014\210\u019e\212\u019d\354\u0198\356\u0196\357\u0197\001\001" +
    "\000\004\203\u01d3\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\355\u01cb\001\001\000\004\211\u01c8\001\001" +
    "\000\004\201\u01b9\001\001\000\004\012\u01b4\001\001\000" +
    "\006\206\u01b3\207\u01ab\001\001\000\002\001\001\000\006" +
    "\206\u01aa\207\u01ab\001\001\000\002\001\001\000\004\174" +
    "\u01a6\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\211\u01a5\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\056\145\062\u01a8\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\210" +
    "\u01ac\212\u019d\001\001\000\006\206\u01ad\207\u01ab\001\001" +
    "\000\002\001\001\000\006\012\305\013\u01af\001\001\000" +
    "\004\213\u01b0\001\001\000\004\214\u01b1\001\001\000\004" +
    "\174\u01b2\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\210\u019e\212\u019d\354\u0198\357\u01b5\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\202\u01bd\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\203\u01c3\001\001\000\004\174\u01be\001" +
    "\001\000\004\205\u01c0\001\001\000\002\001\001\000\006" +
    "\206\u01c1\207\u01ab\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\205\u01cc\001\001" +
    "\000\006\206\u01cd\207\u01ab\001\001\000\002\001\001\000" +
    "\004\353\u01cf\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\174\u01d4\001" +
    "\001\000\004\205\u01d5\001\001\000\006\206\u01d6\207\u01ab" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\012\u0135" +
    "\175\u01dd\177\u0132\207\u0136\220\u0131\226\u0137\001\001\000" +
    "\002\001\001\000\004\176\u01de\001\001\000\002\001\001" +
    "\000\004\211\u01e0\001\001\000\004\222\u01e1\001\001\000" +
    "\002\001\001\000\004\012\u01e3\001\001\000\016\023\u01e4" +
    "\024\u0187\025\u018a\242\u01e8\243\u01e9\244\u01e7\001\001\000" +
    "\004\200\u01ef\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\245\u01ec\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\204\u01f0\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\233\u01f6\001\001\000\004\012" +
    "\u01fa\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\305\013\u0241\001\001\000\002\001\001" +
    "\000\006\012\305\013\u01ff\001\001\000\002\001\001\000" +
    "\012\022\u0202\315\u0205\317\u0203\320\u0201\001\001\000\002" +
    "\001\001\000\004\322\u023d\001\001\000\004\321\u023a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\025\u020c\324\u020b\325\u0209\326\u0208\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\331\u0231\001\001" +
    "\000\002\001\001\000\004\331\u020e\001\001\000\006\332" +
    "\u021b\333\u0221\001\001\000\004\322\u0210\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\005\u0212\075\027\106" +
    "\043\116\014\124\015\001\001\000\002\001\001\000\006" +
    "\022\u0217\330\u0215\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\334\u0228\001\001\000" +
    "\002\001\001\000\004\335\u0225\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\332\u0229\333" +
    "\u0221\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\322\u0232\001\001\000\002\001\001\000\006\075" +
    "\u0236\327\u0235\001\001\000\004\075\u0237\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\022\u0202" +
    "\317\u0203\320\u023c\001\001\000\002\001\001\000\004\025" +
    "\u023e\001\001\000\004\323\u023f\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\271\u0243\001\001\000\002\001" +
    "\001\000\010\022\u0245\272\u0244\273\u0246\001\001\000\004" +
    "\301\u0259\001\001\000\010\012\u0248\025\u024a\275\u0249\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\274\u0252\001\001\000\004\276\u024b\001\001\000" +
    "\006\277\u024f\300\u0251\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\022\u0245" +
    "\273\u0254\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\300\u0257\001\001\000\002\001\001\000\010\302\u026d" +
    "\303\u026c\304\u0270\001\001\000\004\307\u025a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\005\u025f\075\027\106\043\116\014\124\015\310\u025e\311" +
    "\u0260\001\001\000\002\001\001\000\004\011\u0264\001\001" +
    "\000\002\001\001\000\016\005\u025f\075\027\106\043\116" +
    "\014\124\015\311\u0262\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\005\u0265\075\027\106\043\116\014\124" +
    "\015\312\u0266\001\001\000\004\011\u0267\001\001\000\002" +
    "\001\001\000\016\005\u0268\075\027\106\043\116\014\124" +
    "\015\313\u0269\001\001\000\004\011\u026a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\305" +
    "\u0278\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\u0275\306\u0276\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\302\u027a\303\u026c\304\u0270\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\107\u027e\001" +
    "\001\000\002\001\001\000\006\012\127\015\u027f\001\001" +
    "\000\006\072\u0280\110\u0281\001\001\000\002\001\001\000" +
    "\004\114\u0284\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\111\u028a\112\u028b\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\113\u028e\001\001\000" +
    "\002\001\001\000\004\112\u028f\001\001\000\002\001\001" +
    "\000\004\113\u0290\001\001\000\002\001\001\000\004\115" +
    "\u0292\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\111\u0295\112\u028b\001\001\000\002\001\001\000\004\115" +
    "\u0297\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\u02cd\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\305\013\u02c9\001\001\000\006\012\127\015\u02c1\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\211\u02a7\001" +
    "\001\000\002\001\001\000\004\012\u02a9\001\001\000\002" +
    "\001\001\000\006\012\127\015\u02ab\001\001\000\004\165" +
    "\u02ad\001\001\000\006\012\u02b8\166\u02b9\001\001\000\004" +
    "\170\u02af\001\001\000\004\072\u02b7\001\001\000\004\067" +
    "\u02b0\001\001\000\004\171\u02b2\001\001\000\004\012\u02b3" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\u02b5\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\102\u02bb\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\167\u02bc\001\001\000\002\001\001" +
    "\000\004\012\u02be\001\001\000\004\102\u02bf\001\001\000" +
    "\004\167\u02c0\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\012\u0135\175\u02c3\177\u0132\207\u0136\220\u0131\226" +
    "\u0137\001\001\000\004\176\u02c4\001\001\000\002\001\001" +
    "\000\004\173\u02c6\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\075\u02cb" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\142" +
    "\u02d0\143\u02ce\001\001\000\004\147\u02fe\001\001\000\004" +
    "\144\u02d2\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\145\u02d4\146\u02d5\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\145\u02d7\146\u02d5\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\151\u02df\001\001\000\002\001\001" +
    "\000\016\153\u02e4\154\u02e3\156\u02e2\160\u02e5\360\u02e6\361" +
    "\u02e1\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\151\u02fb\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\155\u02ed\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\157\u02f2\001\001\000" +
    "\002\001\001\000\004\155\u02f5\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\155\u02f8\161" +
    "\u02fa\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\u02ff\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\012\u0303\022\u0305\254\u0306\260\u0304\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\255\u0308" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\256\u030b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\u030e\022\u030f\261\u0310\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\u030e\022\u030f\261\u0313\001\001\000\002\001\001\000\006" +
    "\012\127\015\u0315\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\057\u0319\001\001\000\020" +
    "\012\156\017\170\047\u031a\051\155\053\153\054\151\070" +
    "\u031b\001\001\000\010\012\u0320\045\u0358\046\u0321\001\001" +
    "\000\004\131\u0327\001\001\000\004\071\u031e\001\001\000" +
    "\016\012\156\017\170\047\u031f\051\155\053\153\054\151" +
    "\001\001\000\002\001\001\000\010\012\u0320\045\u0324\046" +
    "\u0321\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\u0320\046\u0326\001\001\000\002\001\001\000\004\071" +
    "\u0325\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\067\u0340\001\001\000\006\012\127\015\u0329\001\001\000" +
    "\010\012\u0320\045\u032a\046\u0321\001\001\000\006\133\u032f" +
    "\134\u032c\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\135\u0339\001\001\000\004\135\u0338\001\001\000\004" +
    "\132\u0334\001\001\000\004\135\u0332\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\127\015\u0335\001\001" +
    "\000\002\001\001\000\010\012\u0320\045\u0336\046\u0321\001" +
    "\001\000\006\133\u0337\134\u032c\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\127\015" +
    "\u033b\001\001\000\010\012\u0320\045\u033c\046\u0321\001\001" +
    "\000\002\001\001\000\006\056\145\062\u033e\001\001\000" +
    "\006\133\u033f\134\u032c\001\001\000\002\001\001\000\004" +
    "\104\u0341\001\001\000\004\077\u034a\001\001\000\002\001" +
    "\001\000\016\012\156\017\170\047\u0344\051\155\053\153" +
    "\054\151\001\001\000\004\105\u0345\001\001\000\002\001" +
    "\001\000\016\012\156\017\170\047\u0347\051\155\053\153" +
    "\054\151\001\001\000\004\105\u0348\001\001\000\002\001" +
    "\001\000\006\056\145\062\u0357\001\001\000\004\100\u034c" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\012" +
    "\156\017\170\047\u034e\051\155\053\153\054\151\001\001" +
    "\000\004\101\u0350\001\001\000\004\012\u0356\001\001\000" +
    "\004\102\u0351\001\001\000\020\012\156\017\170\047\u0353" +
    "\051\155\053\153\054\151\103\u0352\001\001\000\002\001" +
    "\001\000\004\101\u0354\001\001\000\004\102\u0355\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\071\u0359\001\001\000\002\001\001\000\010\012\u0303" +
    "\022\u0305\260\u035b\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

    public LinkedList<String> SyntacticErrors = new LinkedList<String>();
    private Symbol s;

    public final Class getSymbolContainer() {
    return sym.class;
    }


    public void syntax_error(Symbol cur_token){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        String Auxiliar = "";
        List<Integer> ids = expected_token_ids();
        LinkedList<String> list = new LinkedList<String>(); 
        for (Integer expected : ids) {
                  Auxiliar = symbl_name_from_id(expected);
                  Auxiliar = " " + Auxiliar + " ";
                  list.add(Auxiliar);
        }
        SyntacticErrors.add("* Error Sintactico. Columna: " + (s.left+1) + " Linea: " + (s.right+1) + ". Simbolo:  \'" + s.value + "\'  * Se esperaba: " + list);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
      java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        String Auxiliar = "";
        List<Integer> ids = expected_token_ids();
        LinkedList<String> list = new LinkedList<String>(); 
        for (Integer expected : ids) {
                  Auxiliar = symbl_name_from_id(expected);
                  Auxiliar = " " + Auxiliar + " ";
                  list.add(Auxiliar);
        }
        SyntacticErrors.add("* Error Sintactico. Columna: " + (s.left+1) + " Linea: " + (s.right+1) + ". Simbolo:  \'" + s.value + "\'  * Se esperaba: " + list);
    }


    public String symbl_name_from_id(int id) {
	  Field[] fields = getSymbolContainer().getFields();
	  for(Field f : fields){
		  try {
			if (f.getInt(null)==id)
			  return f.getName();
		} catch (IllegalArgumentException e) {
			//e.printStackTrace();
		} catch (IllegalAccessException e) {
			//e.printStackTrace();
		}
	  }
	  return "Simbolo Invalido id";
    }
   

     public List<Integer> expected_token_ids() {
        List<Integer> ret = new LinkedList<Integer>();
	  int parse_state = ((Symbol)stack.peek()).parse_state ;
	  short[] row = action_tab[parse_state];
	  for (int i = 0; i<row.length; i+=2){
		  if (row[i]==-1) continue;
		  if (!validate_expected_symbol(row[i])) continue;
		  ret.add(new Integer(row[i]));
	  }
	  return ret;

    }

    protected static final int _error_sync_size(){
    return 1;
    }

    private boolean validate_expected_symbol(int id){
	  short lhs,rhs_size;
	  int act;
	  try {
		  virtual_parse_stack vstack = new virtual_parse_stack(stack);
		  for (;;)
		  {
			  act = get_action(vstack.top(), id);

			  if (act == 0) return false;

			  if (act > 0)
			  {
				  vstack.push(act-1);

				  if (!advance_lookahead()) return true;
			  }
			  else
			  {
				  if ((-act)-1 == start_production())  return true;

				  lhs = production_tab[(-act)-1][0];
				  rhs_size = production_tab[(-act)-1][1];
				  for (int i = 0; i < rhs_size; i++) vstack.pop();

				  vstack.push(get_reduce(vstack.top(), lhs));
			  }
		  }

	  } catch (Exception e) {
		  e.printStackTrace();
	  }
	  return true;
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // FuncOpcC ::= OFF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcC",219, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // FuncOpcC ::= ON 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcC",219, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // FuncOpcB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcB",218, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // FuncOpcB ::= Coma FuncOpc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcB",218, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // FuncOpcA ::= INLINE Igual FuncOpcC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // FuncOpcA ::= EXECUTE_AS_CLAUSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // FuncOpcA ::= CALLED ON NULL INPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // FuncOpcA ::= RETURNS NULL ON NULL INPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // FuncOpcA ::= SCHEMABINDING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // FuncOpcA ::= ENCRYPTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpcA",217, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // FuncOpc ::= FuncOpcA FuncOpcB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FuncOpc",216, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // With ::= WITH FuncOpc 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("With",215, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // DType ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // DType ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // DType ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // DType ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // DType ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DType",214, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // SCT ::= Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCT",213, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // SCT ::= Apertura_de_paréntesis Select Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SCT",213, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // Table ::= TABLE With As RETURN SCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Table",212, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // Data ::= Tipo_datoA With As BEGIN DML RETURN DType END 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Data",211, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // Type_Return ::= Table 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type_Return",210, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // Type_Return ::= Data 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type_Return",210, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // ReadOnly ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReadOnly",209, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // ReadOnly ::= READONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReadOnly",209, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // As ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("As",208, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // As ::= AS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("As",208, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // Param_B ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param_B",207, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // Param_B ::= Coma Param_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param_B",207, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // Param_A ::= Param Param_B 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param_A",206, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // Param ::= Variable As Tipo_datoA ReadOnly 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Param",205, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // OrAlter ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrAlter",204, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // OrAlter ::= OR ALTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrAlter",204, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // Params ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Params",203, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // Params ::= Param_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Params",203, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // Function ::= OrAlter FUNCTION Object2 Apertura_de_paréntesis Params Cierre_de_paréntesis RETURNS Type_Return 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Function",202, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // CursorDeclareg ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareg",229, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // CursorDeclareg ::= OF ColumnListA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareg",229, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // CursorDeclaref ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaref",228, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // CursorDeclaref ::= FOR UPDATE CursorDeclareg 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaref",228, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // CursorDeclaree ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaree",227, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // CursorDeclaree ::= TYPE_WARNING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaree",227, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // CursorDeclared ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // CursorDeclared ::= OPTIMISTIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // CursorDeclared ::= SCROLL_LOCKS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // CursorDeclared ::= READ_ONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // CursorDeclarec ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // CursorDeclarec ::= FAST_FORWARD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // CursorDeclarec ::= DYNAMIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // CursorDeclarec ::= KEYSET 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // CursorDeclarec ::= STATIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // CursorDeclareb ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // CursorDeclareb ::= FORWARD_ONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // CursorDeclareb ::= SCROLL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // CursorDeclarea ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // CursorDeclarea ::= GLOBAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // CursorDeclarea ::= LOCAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // CursorDeclare ::= DECLARE ID CURSOR CursorDeclarea CursorDeclareb CursorDeclarec CursorDeclared CursorDeclaree FOR Select CursorDeclaref 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclare",222, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // StmtSP2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP2",201, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // StmtSP2 ::= DML Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP2",201, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // StmtSP1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP1",200, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // StmtSP1 ::= DML Final StmtSP2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP1",200, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // StmtSP ::= DML Final StmtSP1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP",199, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // StartSP ::= StmtSP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StartSP",198, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // StartSP ::= BEGIN StmtSP END 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StartSP",198, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // ReplicationSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReplicationSP",197, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // ReplicationSP ::= FOR REPLICATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReplicationSP",197, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // Clause ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // Clause ::= OWNER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // Clause ::= SELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // Clause ::= CALLER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // ProcOptionRec ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOptionRec",195, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // ProcOptionRec ::= Coma ProcOption1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOptionRec",195, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // ClauseExec ::= EXEC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ClauseExec",194, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // ClauseExec ::= EXECUTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ClauseExec",194, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // ProcOption2 ::= ClauseExec AS Clause 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // ProcOption2 ::= RECOMPILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // ProcOption2 ::= ENCRYPTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // ProcOption1 ::= ProcOption2 ProcOptionRec 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption1",192, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // ProcOption ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption",191, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // ProcOption ::= WITH ProcOption1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption",191, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // TipoD_SP3 ::= OUTPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP3",190, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // TipoD_SP3 ::= OUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP3",190, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // TipoD_SP2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP2",189, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // TipoD_SP2 ::= TipoD_SP3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP2",189, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // TipoD_SP1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP1",188, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // TipoD_SP1 ::= Igual DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP1",188, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // TipoD_SP ::= ID READONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // TipoD_SP ::= CURSOR VARYING TipoD_SP3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // TipoD_SP ::= Tipo_datoA TipoD_SP1 TipoD_SP2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // ParamsB_SP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsB_SP",186, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // ParamsB_SP ::= Coma ParamsA_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsB_SP",186, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // ParamsA_SP ::= Variable TipoD_SP ParamsB_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsA_SP",185, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // ParamsSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsSP",184, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // ParamsSP ::= ParamsA_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsSP",184, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // NumSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NumSP",183, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // NumSP ::= Punto_y_coma Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NumSP",183, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // SP_Reservada ::= PROCEDURE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SP_Reservada",182, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // SP_Reservada ::= PROC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SP_Reservada",182, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // Procedure ::= OrAlter SP_Reservada Object2 NumSP ParamsSP ProcOption ReplicationSP AS StartSP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Procedure",181, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // RollbackA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RollbackA",180, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // RollbackA ::= TranName NameA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RollbackA",180, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // Rollback ::= ROLLBACK RollbackA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Rollback",179, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // CommitA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CommitA",178, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // CommitA ::= TranName NameA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CommitA",178, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // Commit ::= COMMIT CommitA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Commit",177, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // TranName ::= TRANSACTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TranName",176, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // TranName ::= TRAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TranName",176, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // NameA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // NameA ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // NameA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // Name ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Name",174, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // Name ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Name",174, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // SavePoint ::= SAVE TranName Name 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SavePoint",173, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // BeginTranC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranC",172, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // BeginTranC ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranC",172, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // BeginTranB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranB",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // BeginTranB ::= WITH MARK BeginTranC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranB",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // BeginTranA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranA",170, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // BeginTranA ::= Name BeginTranB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranA",170, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // BeginTran ::= BEGIN TranName BeginTranA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTran",169, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // AlterTableDropC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropC",167, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // AlterTableDropC ::= Coma AlterTableDropA AlterTableDropC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropC",167, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // AlterTableDropB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropB",166, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // AlterTableDropB ::= CONSTRAINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropB",166, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // AlterTableDropA ::= COLUMN IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropA",165, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // AlterTableDropA ::= AlterTableDropB IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropA",165, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // AlterTableDrop ::= DROP AlterTableDropA AlterTableDropC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDrop",164, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // AlterColumnE ::= NOT FOR REPLICATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnE",163, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // AlterColumnE ::= ROWGUIDCOL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnE",163, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // AlterColumnD ::= DROP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnD",162, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // AlterColumnD ::= ADD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnD",162, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // AlterColumnA ::= Tipo_dato ColumnDefA ColumnDefG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnA",161, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // AlterColumnC ::= AlterColumnD AlterColumnE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnC",160, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // AlterColumnC ::= AlterColumnA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnC",160, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // AlterColumn ::= ALTER COLUMN ID AlterColumnC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumn",159, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // AlterTableA ::= AlterTableDrop 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // AlterTableA ::= ADD CNC CNCA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // AlterTableA ::= AlterColumn 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // AlterTable ::= TABLE Object3 AlterTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTable",157, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // AlterViewA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterViewA",156, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // AlterViewA ::= ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterViewA",156, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // AlterView ::= VIEW Object2 AlterViewA AS Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterView",155, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // AlterUser ::= USER ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterUser",154, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // AlterDBB ::= SET ROLLBACK IMMEDIATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBB",153, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // AlterDBB ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBB",153, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // AlterDBA ::= CURRENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBA",152, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // AlterDBA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBA",152, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // AlterDatabase ::= DATABASE AlterDBA AlterDBB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDatabase",151, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // AlterA ::= Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // AlterA ::= Procedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // AlterA ::= AlterView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // AlterA ::= AlterDatabase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // AlterA ::= AlterUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // AlterA ::= AlterTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // Alter ::= ALTER AlterA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alter",149, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // TableIndex ::= INDEX ID ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableIndex",148, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // TableConstrE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrE",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // TableConstrE ::= Coma ID TableConstrE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrE",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // TableConstrD ::= Apertura_de_paréntesis ID TableConstrE Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrD",146, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // TableConstrC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrC",145, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // TableConstrC ::= Coma ID OrderB TableConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrC",145, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // TableConstrB ::= Apertura_de_paréntesis ID OrderB TableConstrC Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrB",144, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // TableConstrA ::= CHECK NFR Apertura_de_paréntesis SearchCondition Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // TableConstrA ::= FOREIGN KEY TableConstrD REFERENCES Object2 ColumnConstrE ColumnConstrF NFR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // TableConstrA ::= UNIQUE ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // TableConstrA ::= PRIMARY KEY ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // TableConstr ::= ColumnConstrA TableConstrA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstr",142, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // ColumnConstrI ::= SET ColumnConstrH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrI",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // ColumnConstrI ::= CASCADE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrI",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // ColumnConstrH ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrH",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // ColumnConstrH ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrH",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // ColumnConstrG ::= UPDATE ColumnConstrI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrG",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // ColumnConstrG ::= DELETE ColumnConstrI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrG",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // ColumnConstrF ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrF",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // ColumnConstrF ::= ON ColumnConstrG ColumnConstrF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrF",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // ColumnConstrE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrE",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // ColumnConstrE ::= Apertura_de_paréntesis ID Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrE",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // ColumnConstrD ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrD",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // ColumnConstrD ::= FOREIGN KEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrD",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // ColumnConstrC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // ColumnConstrC ::= NONCLUSTERED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // ColumnConstrC ::= CLUSTERED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // ColumnConstrB ::= CHECK NFR Apertura_de_paréntesis SearchCondition Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // ColumnConstrB ::= ColumnConstrD REFERENCES Object2 ColumnConstrE ColumnConstrF NFR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // ColumnConstrB ::= UNIQUE ColumnConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // ColumnConstrB ::= PRIMARY KEY ColumnConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // ColumnConstrA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrA",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // ColumnConstrA ::= CONSTRAINT ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrA",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // ColumnConstr ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstr",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // ColumnConstr ::= ColumnConstrA ColumnConstrB ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstr",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // ColumnDefH ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefH",131, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // ColumnDefH ::= ROWGUIDCOL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefH",131, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // ColumnDefG ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefG",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // ColumnDefG ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefG",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // ColumnDefF ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefF",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // ColumnDefF ::= Apertura_de_paréntesis Int Coma Int Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefF",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // ColumnDefE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefE",128, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // ColumnDefE ::= IDENTITY ColumnDefF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefE",128, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // ColumnDefD ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // ColumnDefD ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // ColumnDefD ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // ColumnDefD ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // ColumnDefD ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // ColumnDefA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefA",126, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // ColumnDefA ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefA",126, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // ColumnDefV ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // ColumnDefV ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // ColumnDefV ::= NOT NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // ColumnDefW ::= FOR REPLICATION ColumnDefV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefW",235, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // ColumnDefW ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefW",235, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // ColumnDefX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefX",234, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // ColumnDefX ::= NOT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefX",234, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // ColumnDefY ::= ColumnConstrB ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // ColumnDefY ::= ROWGUIDCOL ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // ColumnDefY ::= ColumnDefX ColumnDefW ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // ColumnDefY ::= IDENTITY ColumnDefF NFR ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // ColumnDefY ::= DEFAULT ColumnDefD ColumnDefE NFR ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // ColumnDefZ ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // ColumnDefZ ::= ColumnDefY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // ColumnDefZ ::= CONSTRAINT ID ColumnDefY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // ColumnDef ::= ID Tipo_dato ColumnDefA ColumnDefZ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDef",125, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // CNCA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNCA",124, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // CNCA ::= Coma CNC CNCA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNCA",124, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // CNC ::= TableIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // CNC ::= TableConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // CNC ::= ColumnDef 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // NFR2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR2",232, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // NFR2 ::= NOT ColumnDefG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR2",232, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // NFR1 ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR1",231, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // NFR1 ::= FOR REPLICATION NFR2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR1",231, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // NFR ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // NFR ::= NOT NFR1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // FileGroup ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileGroup",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // FileGroup ::= ON PRIMARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileGroup",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // CreateTable ::= TABLE Object3 Apertura_de_paréntesis CNC CNCA Cierre_de_paréntesis FileGroup 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateTable",120, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // OptionalOn ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OptionalOn",119, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // OptionalOn ::= ON ID Apertura_de_paréntesis ID Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OptionalOn",119, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // IncludeIndex ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IncludeIndex",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // IncludeIndex ::= INCLUDE ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IncludeIndex",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // ColumnIndexB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexB",117, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // ColumnIndexB ::= Coma ID OrderB ColumnIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexB",117, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // ColumnIndexA ::= ID OrderB ColumnIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexA",116, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // ColumnIndex ::= Apertura_de_paréntesis ColumnIndexA Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndex",115, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // CreateIndexA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndexA",114, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // CreateIndexA ::= UNIQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndexA",114, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // CreateIndex ::= CreateIndexA ColumnConstrC INDEX ID ON Object3 ColumnIndex IncludeIndex Where OptionalOn 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndex",113, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // CreateView ::= VIEW Object2 AS Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateView",112, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // Filegrowth_A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // Filegrowth_A ::= MODULAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // Filegrowth_A ::= Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // Filegrowth ::= FILEGROWTH Igual Int Filegrowth_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth",110, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // Maxsize_A ::= UNLIMITED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize_A",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // Maxsize_A ::= Int Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize_A",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // Maxsize ::= MAXSIZE Igual Maxsize_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize",108, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // Size_A ::= TB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // Size_A ::= GB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // Size_A ::= MB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // Size_A ::= KB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // Sizenw ::= SIZE Igual Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sizenw",239, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // Sizew ::= SIZE Igual Int Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Sizew",238, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // Size ::= Sizenw 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size",106, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // Size ::= Sizew 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size",106, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // Optional ::= Filegrowth 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // Optional ::= Maxsize 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // Optional ::= Size 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // Optionals ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optionals",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // Optionals ::= Coma Optional Optionals 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optionals",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // COLLATEDB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLLATEDB",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // COLLATEDB ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLLATEDB",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // FileSpec ::= Apertura_de_paréntesis NAME Igual String Coma FILENAME Igual String Optionals Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpec",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // FileSpecs ::= FileSpec 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpecs",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // FileSpecs ::= FileSpec Coma FileSpecs 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpecs",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // Primary ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Primary",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // Primary ::= PRIMARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Primary",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // CreateDBB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBB",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // CreateDBB ::= ON Primary FileSpecs 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBB",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // CreateDBA ::= CreateDBB COLLATEDB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBA",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // CreateDB ::= DATABASE ID CreateDBA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDB",95, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // CreateUser ::= USER Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateUser",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // CreateA ::= Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // CreateA ::= Procedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // CreateA ::= CreateView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // CreateA ::= CreateUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // CreateA ::= CreateIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // CreateA ::= CreateDB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // CreateA ::= CreateTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // Create ::= CREATE CreateA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Create",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // Outer ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Outer",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // Outer ::= OUTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Outer",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // Type ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // Type ::= FULL Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // Type ::= LEFT Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // Type ::= RIGHT Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // Type ::= INNER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // Join ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Join",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // Join ::= Type JOIN Object3 Alias ON SearchCondition Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Join",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // FromSelectA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelectA",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // FromSelectA ::= Coma Object3 Alias Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelectA",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // FromSelect ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelect",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // FromSelect ::= FROM Object3 Alias Join FromSelectA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelect",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // FromUpdate ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromUpdate",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // FromUpdate ::= FROM Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromUpdate",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // UpdateC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateC",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // UpdateC ::= Coma UpdateA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateC",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // UpdateB ::= Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateB",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // UpdateB ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateB",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // UpdateA ::= ID Igual UpdateB UpdateC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateA",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // Update ::= UPDATE Top Object3 SET UpdateA FromUpdate Where 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Update",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // Server ::= Apertura_de_paréntesis ID Coma Int Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Server",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // DeleteC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteC",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // DeleteC ::= Coma Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteC",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // DeleteB ::= FROM Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteB",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // DeleteA ::= Object3 DeleteB Where 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteA",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // DeleteA ::= OPENQUERY Server 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteA",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // FromDelete ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromDelete",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // FromDelete ::= FROM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromDelete",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // Delete ::= DELETE Top FromDelete DeleteA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Delete",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // InsertValoresA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValoresA",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // InsertValoresA ::= Coma Apertura_de_paréntesis InsertExpresion Cierre_de_paréntesis InsertValoresA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValoresA",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // InsertValores ::= DEFAULT VALUES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValores",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // InsertValores ::= VALUES Apertura_de_paréntesis InsertExpresion Cierre_de_paréntesis InsertValoresA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValores",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // InsertExpresionB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionB",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // InsertExpresionB ::= Coma InsertExpresionA InsertExpresionB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionB",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // InsertExpresionA ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // InsertExpresionA ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // InsertExpresionA ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // InsertExpresionA ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // InsertExpresionA ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // InsertExpresion ::= InsertExpresionA InsertExpresionB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresion",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // InsertColumnList ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertColumnList",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // InsertColumnList ::= ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertColumnList",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // InsertInto ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertInto",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // InsertInto ::= INTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertInto",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Insert ::= INSERT Top InsertInto Object3 InsertColumnList InsertValores 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Insert",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // GroupA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GroupA",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // GroupA ::= Coma Expresion GroupA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GroupA",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Group ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Group",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Group ::= GROUP BY Expresion GroupA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Group",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // OrderC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderC",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // OrderC ::= Expresion OrderA OrderB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderC",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // OrderB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // OrderB ::= DESC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // OrderB ::= ASC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // OrderA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderA",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // OrderA ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderA",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Order ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Order",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Order ::= ORDER BY Expresion OrderA OrderB OrderC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Order",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Having ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Having",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Having ::= HAVING SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Having",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // SelectA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // SelectA ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // SelectA ::= ALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // Select ::= SELECT SelectA Top SelectColumns FromSelect Where Group Having Order 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Select",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ColumnListB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListB",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ColumnListB ::= Coma ID ColumnListB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListB",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ColumnListA ::= ID ColumnListB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListA",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ColumnList ::= Apertura_de_paréntesis ColumnListA Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnList",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // SelectColumnsA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumnsA",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SelectColumnsA ::= Coma Expresion Alias SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumnsA",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SelectColumns ::= Multiplicacion SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumns",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SelectColumns ::= Expresion Alias SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumns",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Where ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Where",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Where ::= WHERE SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Where",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // PredicadoC ::= LIKE Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // PredicadoC ::= BETWEEN Expresion AND Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // PredicadoC ::= IN Apertura_de_paréntesis Expresion Expresiones Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // PredicadoA ::= Not PredicadoC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // PredicadoA ::= IS Not NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // PredicadoA ::= OperadoresBooleanos Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // OperadoresBooleanos ::= Menor_o_igual_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OperadoresBooleanos ::= Menor_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OperadoresBooleanos ::= Mayor_o_igual_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OperadoresBooleanos ::= Mayor_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OperadoresBooleanos ::= Operador_no_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OperadoresBooleanos ::= Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Predicado ::= Expresion PredicadoA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Predicado",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // SearchConditionA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SearchConditionA ::= OR SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SearchConditionA ::= AND SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SearchCondition ::= Not Predicado SearchConditionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchCondition",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Expresiones ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresiones",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Expresiones ::= Coma Expresion Expresiones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresiones",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // TopA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TopA",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // TopA ::= PERCENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TopA",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Top ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Top",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Top ::= TOP Apertura_de_paréntesis Int Cierre_de_paréntesis TopA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Top",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Not ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Not",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Not ::= NOT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Not",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ExpresionF ::= Multiplicacion Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ExpresionF ::= Int Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ExpresionF ::= Object4 Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ExpresionE ::= COUNT Apertura_de_paréntesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ExpresionE ::= MAX Apertura_de_paréntesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ExpresionE ::= MIN Apertura_de_paréntesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ExpresionE ::= AVG Apertura_de_paréntesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ExpresionE ::= SUM Apertura_de_paréntesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ExpresionE ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ExpresionE ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ExpresionE ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ExpresionE ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ExpresionE ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ExpresionE ::= Object4 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ExpresionD ::= ExpresionE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ExpresionD ::= Apertura_de_paréntesis Expresion PredicadoC Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ExpresionC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ExpresionC ::= Division ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ExpresionC ::= Multiplicacion ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ExpresionB ::= ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionB",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ExpresionA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ExpresionA ::= Resta ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ExpresionA ::= Suma ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expresion ::= ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresion",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // AliasA ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AliasA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // AliasA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AliasA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Alias ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Alias ::= AliasA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Alias ::= AS AliasA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Truncate ::= TRUNCATE TABLE Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Truncate",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DropIndexB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexB",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DropIndexB ::= Coma DropIndexA DropIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexB",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DropIndexA ::= ID ON Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexA",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DropIndex ::= INDEX IFE DropIndexA DropIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndex",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DropViewA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropViewA",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DropViewA ::= Coma Object2 DropViewA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropViewA",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DropView ::= VIEW IFE Object2 DropViewA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropView",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DropDatabaseA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabaseA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DropDatabaseA ::= Coma ID DropDatabaseA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabaseA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DropDatabase ::= DATABASE IFE ID DropDatabaseA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabase",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DropUser ::= USER IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropUser",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DropTableA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTableA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DropTableA ::= Coma Object3 DropTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTableA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DropTable ::= TABLE IFE Object3 DropTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTable",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DropA ::= DropIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DropA ::= DropView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DropA ::= DropDatabase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DropA ::= DropUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DropA ::= DropTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Drop ::= DROP DropA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Drop",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Tipo_datoC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoC",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Tipo_datoC ::= Coma Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoC",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Tipo_datoB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoB",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Tipo_datoB ::= Apertura_de_paréntesis Int Tipo_datoC Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoB",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Tipo_datoA ::= NUMERIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Tipo_datoA ::= SMALLINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Tipo_datoA ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Tipo_datoA ::= INT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Tipo_datoA ::= TIME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Tipo_datoA ::= REAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Tipo_datoA ::= NCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Tipo_datoA ::= CURSOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Tipo_datoA ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Tipo_datoA ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Tipo_datoA ::= BIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Tipo_datoA ::= DATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Tipo_datoA ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Tipo_datoA ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Tipo_datoA ::= VARCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Tipo_datoD ::= Apertura_de_corchetes Tipo_datoA Cierre_de_corchetes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Tipo_datoD ::= Tipo_datoA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Tipo_dato ::= Tipo_datoD Tipo_datoB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_dato",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Variable ::= Arroba Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // IFE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IFE ::= IF EXISTS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Object4A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4A",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Object4A ::= Punto Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4A",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Object4 ::= ID Object4A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Object3A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3A",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Object3A ::= Punto Object2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3A",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Object3 ::= ID Object3A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Object2A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2A",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Object2A ::= Punto ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2A",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Object2 ::= ID Object2A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ID ::= Apertura_de_corchetes Identificador Cierre_de_corchetes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ID ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Final ::= PYCGO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Final",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Final ::= GO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Final",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Final ::= Punto_y_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Final",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TSQL ::= CursorDeclare 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TSQL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TCL ::= SavePoint 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TCL ::= Commit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TCL ::= Rollback 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TCL ::= BeginTran 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DDL ::= Truncate 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DDL ::= Drop 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DDL ::= Alter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DDL ::= Create 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DML ::= Update 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DML ::= Delete 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DML ::= Insert 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DML ::= Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // InicialA ::= TSQL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // InicialA ::= TCL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // InicialA ::= DDL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // InicialA ::= DML 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Inicial ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicial",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Inicial ::= error Final Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicial",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicial ::= InicialA Final Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicial",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

