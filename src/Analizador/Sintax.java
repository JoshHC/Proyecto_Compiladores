
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Oct 27 21:11:09 CST 2019
//----------------------------------------------------

package Analizador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java_cup.runtime.virtual_parse_stack;
import java.lang.reflect.Field;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Oct 27 21:11:09 CST 2019
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u01cb\000\002\002\004\000\002\003\005\000\002\003" +
    "\005\000\002\003\002\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\010\003\000\002\011\003\000" +
    "\002\011\003\000\002\012\003\000\002\012\005\000\002" +
    "\013\004\000\002\014\004\000\002\014\002\000\002\015" +
    "\004\000\002\016\004\000\002\016\002\000\002\017\004" +
    "\000\002\020\004\000\002\020\002\000\002\021\004\000" +
    "\002\021\002\000\002\022\004\000\002\023\004\000\002" +
    "\024\003\000\002\024\005\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\025\003" +
    "\000\002\025\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\026\006\000\002\026\002\000\002\027\004" +
    "\000\002\027\002\000\002\030\004\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\032\006\000\002\033\005\000\002\033" +
    "\002\000\002\034\005\000\002\035\006\000\002\036\005" +
    "\000\002\036\002\000\002\037\006\000\002\040\005\000" +
    "\002\040\002\000\002\041\006\000\002\042\005\000\002" +
    "\043\005\000\002\043\002\000\002\044\005\000\002\045" +
    "\004\000\002\045\003\000\002\045\002\000\002\046\003" +
    "\000\002\046\003\000\002\047\004\000\002\050\005\000" +
    "\002\050\005\000\002\050\002\000\002\051\004\000\002" +
    "\052\005\000\002\052\005\000\002\052\002\000\002\053" +
    "\006\000\002\053\003\000\002\054\003\000\002\054\003" +
    "\000\002\054\003\000\002\054\003\000\002\054\003\000" +
    "\002\054\003\000\002\054\005\000\002\054\005\000\002" +
    "\054\005\000\002\054\005\000\002\054\005\000\002\055" +
    "\004\000\002\055\004\000\002\055\004\000\002\056\003" +
    "\000\002\056\002\000\002\057\007\000\002\057\002\000" +
    "\002\060\003\000\002\060\002\000\002\061\005\000\002" +
    "\061\002\000\002\062\005\000\002\063\004\000\002\063" +
    "\004\000\002\063\002\000\002\064\004\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\065\004\000\002" +
    "\065\005\000\002\065\004\000\002\066\007\000\002\066" +
    "\006\000\002\066\004\000\002\067\004\000\002\067\002" +
    "\000\002\070\005\000\002\070\004\000\002\071\006\000" +
    "\002\071\002\000\002\072\005\000\002\073\004\000\002" +
    "\074\005\000\002\074\002\000\002\075\013\000\002\076" +
    "\003\000\002\076\003\000\002\076\002\000\002\077\004" +
    "\000\002\077\002\000\002\100\010\000\002\100\002\000" +
    "\002\101\004\000\002\101\002\000\002\102\003\000\002" +
    "\102\003\000\002\102\002\000\002\103\005\000\002\103" +
    "\002\000\002\104\006\000\002\104\002\000\002\105\005" +
    "\000\002\105\002\000\002\106\010\000\002\107\003\000" +
    "\002\107\002\000\002\110\003\000\002\110\002\000\002" +
    "\111\004\000\002\112\003\000\002\112\003\000\002\112" +
    "\003\000\002\112\003\000\002\112\003\000\002\113\005" +
    "\000\002\113\002\000\002\114\007\000\002\114\004\000" +
    "\002\115\007\000\002\115\002\000\002\116\006\000\002" +
    "\117\003\000\002\117\002\000\002\120\004\000\002\120" +
    "\005\000\002\121\005\000\002\122\005\000\002\122\002" +
    "\000\002\123\007\000\002\124\011\000\002\125\006\000" +
    "\002\126\003\000\002\126\003\000\002\127\004\000\002" +
    "\127\002\000\002\130\005\000\002\130\002\000\002\131" +
    "\007\000\002\131\002\000\002\132\006\000\002\132\002" +
    "\000\002\133\011\000\002\133\002\000\002\134\003\000" +
    "\002\134\004\000\002\134\004\000\002\134\004\000\002" +
    "\134\002\000\002\135\003\000\002\135\002\000\002\136" +
    "\004\000\002\137\003\000\002\137\003\000\002\137\003" +
    "\000\002\137\003\000\002\137\003\000\002\137\003\000" +
    "\002\137\003\000\002\140\004\000\002\141\005\000\002" +
    "\142\004\000\002\143\005\000\002\143\002\000\002\144" +
    "\003\000\002\144\002\000\002\145\005\000\002\145\003" +
    "\000\002\146\014\000\002\147\004\000\002\147\002\000" +
    "\002\151\005\000\002\151\002\000\002\153\003\000\002" +
    "\153\003\000\002\153\003\000\002\154\006\000\002\155" +
    "\003\000\002\155\003\000\002\155\003\000\002\155\003" +
    "\000\002\156\005\000\002\157\004\000\002\157\003\000" +
    "\002\160\006\000\002\161\003\000\002\161\003\000\002" +
    "\161\002\000\002\162\006\000\002\163\014\000\002\164" +
    "\003\000\002\164\002\000\002\165\005\000\002\166\005" +
    "\000\002\167\006\000\002\167\002\000\002\170\004\000" +
    "\002\170\002\000\002\171\007\000\002\171\002\000\002" +
    "\172\011\000\002\173\004\000\002\173\002\000\002\174" +
    "\004\000\002\174\002\000\002\351\005\000\002\351\003" +
    "\000\002\352\004\000\002\352\002\000\002\175\003\000" +
    "\002\175\003\000\002\175\003\000\002\176\005\000\002" +
    "\176\002\000\002\177\006\000\002\356\005\000\002\356" +
    "\003\000\002\356\002\000\002\357\010\000\002\357\007" +
    "\000\002\357\006\000\002\357\004\000\002\357\004\000" +
    "\002\354\003\000\002\354\002\000\002\355\003\000\002" +
    "\355\005\000\002\353\004\000\002\353\003\000\002\353" +
    "\002\000\002\200\004\000\002\200\002\000\002\201\003" +
    "\000\002\201\003\000\002\201\003\000\002\201\003\000" +
    "\002\201\003\000\002\202\004\000\002\202\002\000\002" +
    "\203\007\000\002\203\002\000\002\204\003\000\002\204" +
    "\002\000\002\205\003\000\002\205\002\000\002\206\005" +
    "\000\002\206\002\000\002\207\004\000\002\207\002\000" +
    "\002\210\005\000\002\210\004\000\002\210\010\000\002" +
    "\210\007\000\002\211\003\000\002\211\003\000\002\211" +
    "\002\000\002\212\004\000\002\212\002\000\002\213\005" +
    "\000\002\213\002\000\002\214\005\000\002\214\002\000" +
    "\002\215\004\000\002\215\004\000\002\216\003\000\002" +
    "\216\003\000\002\217\003\000\002\217\004\000\002\220" +
    "\004\000\002\221\006\000\002\221\005\000\002\221\012" +
    "\000\002\221\007\000\002\222\007\000\002\223\006\000" +
    "\002\223\002\000\002\224\006\000\002\225\005\000\002" +
    "\225\002\000\002\226\006\000\002\227\004\000\002\230" +
    "\003\000\002\230\003\000\002\230\003\000\002\230\003" +
    "\000\002\230\003\000\002\230\003\000\002\231\005\000" +
    "\002\232\003\000\002\232\003\000\002\233\004\000\002" +
    "\233\005\000\002\234\004\000\002\235\007\000\002\236" +
    "\003\000\002\236\002\000\002\237\005\000\002\240\003" +
    "\000\002\240\005\000\002\240\003\000\002\241\006\000" +
    "\002\242\003\000\002\242\004\000\002\243\005\000\002" +
    "\244\003\000\002\244\003\000\002\245\003\000\002\245" +
    "\005\000\002\246\005\000\002\247\005\000\002\247\005" +
    "\000\002\250\003\000\002\250\002\000\002\251\005\000" +
    "\002\251\002\000\002\253\005\000\002\254\004\000\002" +
    "\254\002\000\002\255\005\000\002\255\002\000\002\256" +
    "\003\000\002\256\002\000\002\257\005\000\002\260\003" +
    "\000\002\260\003\000\002\261\003\000\002\261\003\000" +
    "\002\261\002\000\002\262\003\000\002\262\003\000\002" +
    "\263\004\000\002\264\004\000\002\264\002\000\002\265" +
    "\004\000\002\266\004\000\002\266\002\000\002\267\013" +
    "\000\002\270\003\000\002\270\003\000\002\271\004\000" +
    "\002\271\002\000\002\272\003\000\002\272\002\000\002" +
    "\273\005\000\002\274\004\000\002\274\002\000\002\275" +
    "\005\000\002\275\005\000\002\275\004\000\002\276\004" +
    "\000\002\276\002\000\002\277\003\000\002\277\002\000" +
    "\002\300\003\000\002\300\003\000\002\301\004\000\002" +
    "\301\002\000\002\302\004\000\002\303\003\000\002\303" +
    "\003\000\002\303\005\000\002\304\003\000\002\304\003" +
    "\000\002\305\004\000\002\305\002\000\002\306\003\000" +
    "\002\306\003\000\002\306\003\000\002\306\003\000\002" +
    "\307\004\000\002\307\002\000\002\310\005\000\002\310" +
    "\003\000\002\311\005\000\002\312\005\000\002\312\002" +
    "\000\002\313\004\000\002\313\002\000\002\340\015\000" +
    "\002\341\003\000\002\341\003\000\002\341\002\000\002" +
    "\342\003\000\002\342\003\000\002\342\002\000\002\343" +
    "\003\000\002\343\003\000\002\343\003\000\002\343\003" +
    "\000\002\343\002\000\002\344\003\000\002\344\003\000" +
    "\002\344\003\000\002\344\002\000\002\345\003\000\002" +
    "\345\002\000\002\346\005\000\002\346\002\000\002\347" +
    "\004\000\002\347\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0315\000\040\002\ufffe\003\035\066\032\111\024\132" +
    "\022\146\011\157\010\164\027\166\023\213\025\253\012" +
    "\254\042\262\037\274\040\306\034\001\002\000\006\037" +
    "\uffee\u0103\uffee\001\002\000\006\037\uffed\u0103\uffed\001\002" +
    "\000\006\037\ufff2\u0103\ufff2\001\002\000\004\002\u0317\001" +
    "\002\000\044\010\uff6e\012\uff6e\016\uff6e\017\uff6e\020\uff6e" +
    "\022\uff6e\050\uff6e\052\uff6e\237\uff6e\244\uff6e\275\u02d3\354" +
    "\u02d4\377\uff6e\u012c\uff6e\u0131\uff6e\u013c\uff6e\u013d\uff6e\001\002" +
    "\000\006\242\u02bd\245\u02bb\001\002\000\004\220\u02cf\001" +
    "\002\000\006\037\ufffc\u0103\ufffc\001\002\000\006\037\ufffd" +
    "\u0103\ufffd\001\002\000\006\037\ufff7\u0103\ufff7\001\002\000" +
    "\006\037\ufff6\u0103\ufff6\001\002\000\006\037\ufff4\u0103\ufff4" +
    "\001\002\000\006\037\ufff0\u0103\ufff0\001\002\000\006\037" +
    "\ufffa\u0103\ufffa\001\002\000\012\037\ufe77\242\u02bd\245\u02bb" +
    "\u0103\ufe77\001\002\000\012\037\ufe7a\242\u02bd\245\u02bb\u0103" +
    "\ufe7a\001\002\000\006\242\u02bd\245\u02bb\001\002\000\022" +
    "\152\uff07\156\uff07\220\u025f\236\uff07\243\u025a\266\u025c\305" +
    "\u025b\315\u0260\001\002\000\006\037\ufff1\u0103\ufff1\001\002" +
    "\000\012\012\uff91\050\uff91\172\uff91\237\116\001\002\000" +
    "\006\037\ufff9\u0103\ufff9\001\002\000\006\037\ufff3\u0103\ufff3" +
    "\001\002\000\012\220\u0110\243\u010b\305\u010c\315\u0111\001" +
    "\002\000\006\037\ufffb\u0103\ufffb\001\002\000\014\156\340" +
    "\220\344\243\337\305\341\315\343\001\002\000\006\037" +
    "\046\u0103\047\001\002\000\006\037\uffef\u0103\uffef\001\002" +
    "\000\014\012\uff91\050\uff91\107\uff91\237\116\273\uff91\001" +
    "\002\000\010\012\uff91\050\uff91\237\116\001\002\000\006" +
    "\037\ufff5\u0103\ufff5\001\002\000\006\012\052\050\053\001" +
    "\002\000\006\037\046\u0103\047\001\002\000\006\037\ufff8" +
    "\u0103\ufff8\001\002\000\040\002\ufffe\003\035\066\032\111" +
    "\024\132\022\146\011\157\010\164\027\166\023\213\025" +
    "\253\012\254\042\262\037\274\040\306\034\001\002\000" +
    "\046\002\uffec\003\uffec\037\uffec\066\uffec\111\uffec\132\uffec" +
    "\146\uffec\157\uffec\164\uffec\166\uffec\213\uffec\253\uffec\254" +
    "\uffec\262\uffec\274\uffec\306\uffec\316\uffec\u0103\uffec\001\002" +
    "\000\046\002\uffeb\003\uffeb\037\uffeb\066\uffeb\111\uffeb\132" +
    "\uffeb\146\uffeb\157\uffeb\164\uffeb\166\uffeb\213\uffeb\253\uffeb" +
    "\254\uffeb\262\uffeb\274\uffeb\306\uffeb\316\uffeb\u0103\uffeb\001" +
    "\002\000\004\002\000\001\002\000\004\240\056\001\002" +
    "\000\254\005\uffea\006\uffea\007\uffea\010\uffea\011\uffea\012" +
    "\uffea\016\uffea\017\uffea\020\uffea\022\uffea\024\uffea\025\uffea" +
    "\026\uffea\027\uffea\031\uffea\037\uffea\040\uffea\041\uffea\042" +
    "\uffea\050\uffea\052\uffea\055\uffea\060\uffea\061\uffea\062\uffea" +
    "\066\uffea\074\uffea\076\uffea\077\uffea\102\uffea\107\uffea\112" +
    "\uffea\114\uffea\126\uffea\127\uffea\131\uffea\137\uffea\140\uffea" +
    "\141\uffea\152\uffea\153\uffea\160\uffea\161\uffea\174\uffea\175" +
    "\uffea\176\uffea\200\uffea\211\uffea\214\uffea\236\uffea\240\uffea" +
    "\241\uffea\244\uffea\257\uffea\266\uffea\267\uffea\303\uffea\306" +
    "\uffea\307\uffea\311\uffea\326\uffea\334\uffea\336\uffea\364\uffea" +
    "\370\uffea\376\uffea\377\uffea\u0103\uffea\u0104\uffea\u0111\uffea\u011a" +
    "\uffea\u011d\uffea\u0120\uffea\u012c\uffea\u0131\uffea\u0133\uffea\u013c\uffea" +
    "\u013d\uffea\u013f\uffea\u0149\uffea\u014c\uffea\u0159\uffea\u015a\uffea\u015f" +
    "\uffea\u016a\uffea\001\002\000\004\012\054\001\002\000\004" +
    "\053\055\001\002\000\254\005\uffe9\006\uffe9\007\uffe9\010" +
    "\uffe9\011\uffe9\012\uffe9\016\uffe9\017\uffe9\020\uffe9\022\uffe9" +
    "\024\uffe9\025\uffe9\026\uffe9\027\uffe9\031\uffe9\037\uffe9\040" +
    "\uffe9\041\uffe9\042\uffe9\050\uffe9\052\uffe9\055\uffe9\060\uffe9" +
    "\061\uffe9\062\uffe9\066\uffe9\074\uffe9\076\uffe9\077\uffe9\102" +
    "\uffe9\107\uffe9\112\uffe9\114\uffe9\126\uffe9\127\uffe9\131\uffe9" +
    "\137\uffe9\140\uffe9\141\uffe9\152\uffe9\153\uffe9\160\uffe9\161" +
    "\uffe9\174\uffe9\175\uffe9\176\uffe9\200\uffe9\211\uffe9\214\uffe9" +
    "\236\uffe9\240\uffe9\241\uffe9\244\uffe9\257\uffe9\266\uffe9\267" +
    "\uffe9\303\uffe9\306\uffe9\307\uffe9\311\uffe9\326\uffe9\334\uffe9" +
    "\336\uffe9\364\uffe9\370\uffe9\376\uffe9\377\uffe9\u0103\uffe9\u0104" +
    "\uffe9\u0111\uffe9\u011a\uffe9\u011d\uffe9\u0120\uffe9\u012c\uffe9\u0131\uffe9" +
    "\u0133\uffe9\u013c\uffe9\u013d\uffe9\u013f\uffe9\u0149\uffe9\u014c\uffe9\u0159" +
    "\uffe9\u015a\uffe9\u015f\uffe9\u016a\uffe9\001\002\000\034\074\ufe49" +
    "\u0101\057\u010a\ufe49\u0137\060\u0175\ufe49\u0176\ufe49\u0177\ufe49\u0178" +
    "\ufe49\u0179\ufe49\u017a\ufe49\u017b\ufe49\u017c\ufe49\u017d\ufe49\001\002" +
    "\000\030\074\ufe4a\u010a\ufe4a\u0175\ufe4a\u0176\ufe4a\u0177\ufe4a\u0178" +
    "\ufe4a\u0179\ufe4a\u017a\ufe4a\u017b\ufe4a\u017c\ufe4a\u017d\ufe4a\001\002" +
    "\000\030\074\ufe4b\u010a\ufe4b\u0175\ufe4b\u0176\ufe4b\u0177\ufe4b\u0178" +
    "\ufe4b\u0179\ufe4b\u017a\ufe4b\u017b\ufe4b\u017c\ufe4b\u017d\ufe4b\001\002" +
    "\000\030\074\ufe46\u010a\064\u0175\062\u0176\ufe46\u0177\ufe46\u0178" +
    "\ufe46\u0179\ufe46\u017a\ufe46\u017b\ufe46\u017c\ufe46\u017d\ufe46\001\002" +
    "\000\024\074\ufe47\u0176\ufe47\u0177\ufe47\u0178\ufe47\u0179\ufe47\u017a" +
    "\ufe47\u017b\ufe47\u017c\ufe47\u017d\ufe47\001\002\000\024\074\ufe41" +
    "\u0176\065\u0177\066\u0178\067\u0179\071\u017a\ufe41\u017b\ufe41\u017c" +
    "\ufe41\u017d\ufe41\001\002\000\024\074\ufe48\u0176\ufe48\u0177\ufe48" +
    "\u0178\ufe48\u0179\ufe48\u017a\ufe48\u017b\ufe48\u017c\ufe48\u017d\ufe48\001" +
    "\002\000\014\074\ufe45\u017a\ufe45\u017b\ufe45\u017c\ufe45\u017d\ufe45" +
    "\001\002\000\014\074\ufe44\u017a\ufe44\u017b\ufe44\u017c\ufe44\u017d" +
    "\ufe44\001\002\000\014\074\ufe43\u017a\ufe43\u017b\ufe43\u017c\ufe43" +
    "\u017d\ufe43\001\002\000\014\074\ufe3d\u017a\075\u017b\074\u017c" +
    "\073\u017d\ufe3d\001\002\000\014\074\ufe42\u017a\ufe42\u017b\ufe42" +
    "\u017c\ufe42\u017d\ufe42\001\002\000\006\074\ufe3b\u017d\077\001" +
    "\002\000\006\074\ufe3e\u017d\ufe3e\001\002\000\006\074\ufe3f" +
    "\u017d\ufe3f\001\002\000\006\074\ufe40\u017d\ufe40\001\002\000" +
    "\004\074\100\001\002\000\004\074\ufe3c\001\002\000\004" +
    "\157\010\001\002\000\010\037\ufe39\074\103\u0103\ufe39\001" +
    "\002\000\006\037\ufe4c\u0103\ufe4c\001\002\000\004\274\104" +
    "\001\002\000\010\037\ufe37\252\106\u0103\ufe37\001\002\000" +
    "\006\037\ufe3a\u0103\ufe3a\001\002\000\006\012\052\050\053" +
    "\001\002\000\012\037\uff72\040\112\055\uff72\u0103\uff72\001" +
    "\002\000\006\037\ufe38\u0103\ufe38\001\002\000\010\037\uff74" +
    "\055\uff74\u0103\uff74\001\002\000\006\012\052\050\053\001" +
    "\002\000\012\037\uff72\040\112\055\uff72\u0103\uff72\001\002" +
    "\000\010\037\uff73\055\uff73\u0103\uff73\001\002\000\006\012" +
    "\052\050\053\001\002\000\004\052\117\001\002\000\004" +
    "\016\120\001\002\000\004\055\121\001\002\000\046\010" +
    "\uff8f\012\uff8f\016\uff8f\017\uff8f\020\uff8f\022\uff8f\050\uff8f" +
    "\052\uff8f\107\uff8f\172\uff8f\244\uff8f\273\uff8f\322\123\377" +
    "\uff8f\u012c\uff8f\u0131\uff8f\u013c\uff8f\u013d\uff8f\001\002\000\044" +
    "\010\uff92\012\uff92\016\uff92\017\uff92\020\uff92\022\uff92\050" +
    "\uff92\052\uff92\107\uff92\172\uff92\244\uff92\273\uff92\377\uff92" +
    "\u012c\uff92\u0131\uff92\u013c\uff92\u013d\uff92\001\002\000\044\010" +
    "\uff90\012\uff90\016\uff90\017\uff90\020\uff90\022\uff90\050\uff90" +
    "\052\uff90\107\uff90\172\uff90\244\uff90\273\uff90\377\uff90\u012c" +
    "\uff90\u0131\uff90\u013c\uff90\u013d\uff90\001\002\000\164\005\uffe3" +
    "\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\016\uffe3\017" +
    "\uffe3\020\uffe3\022\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3" +
    "\031\uffe3\037\uffe3\040\uffe3\041\304\050\uffe3\052\uffe3\055" +
    "\uffe3\060\uffe3\061\uffe3\062\uffe3\066\uffe3\074\uffe3\076\uffe3" +
    "\107\uffe3\112\uffe3\114\uffe3\126\uffe3\127\uffe3\131\uffe3\153" +
    "\uffe3\160\uffe3\161\uffe3\175\uffe3\176\uffe3\200\uffe3\211\uffe3" +
    "\214\uffe3\241\uffe3\244\uffe3\257\uffe3\267\uffe3\306\uffe3\307" +
    "\uffe3\311\uffe3\326\uffe3\370\uffe3\377\uffe3\u0103\uffe3\u012c\uffe3" +
    "\u0131\uffe3\u013c\uffe3\u013d\uffe3\u015f\uffe3\001\002\000\004\176" +
    "\126\001\002\000\006\012\052\050\053\001\002\000\004" +
    "\005\274\001\002\000\012\037\uff3d\107\132\326\uff3d\u0103" +
    "\uff3d\001\002\000\010\037\uff7a\326\140\u0103\uff7a\001\002" +
    "\000\006\012\052\050\053\001\002\000\012\037\uff46\040" +
    "\134\326\uff46\u0103\uff46\001\002\000\006\012\052\050\053" +
    "\001\002\000\010\037\uff3e\326\uff3e\u0103\uff3e\001\002\000" +
    "\012\037\uff46\040\134\326\uff46\u0103\uff46\001\002\000\010" +
    "\037\uff47\326\uff47\u0103\uff47\001\002\000\036\012\uff93\016" +
    "\uff93\017\uff93\020\uff93\022\uff93\050\uff93\052\uff93\241\144" +
    "\244\uff93\377\uff93\u012c\uff93\u0131\uff93\u013c\uff93\u013d\uff93\001" +
    "\002\000\006\037\uff44\u0103\uff44\001\002\000\034\012\052" +
    "\016\152\017\160\020\165\022\146\050\053\052\162\244" +
    "\163\377\156\u012c\145\u0131\164\u013c\161\u013d\157\001\002" +
    "\000\020\037\uff7b\074\uff7b\126\uff7b\131\uff7b\311\uff7b\u0103" +
    "\uff7b\u015f\uff7b\001\002\000\042\012\uff94\016\uff94\017\uff94" +
    "\020\uff94\022\uff94\050\uff94\052\uff94\114\uff94\153\uff94\214" +
    "\uff94\244\uff94\377\uff94\u012c\uff94\u0131\uff94\u013c\uff94\u013d\uff94" +
    "\001\002\000\004\052\272\001\002\000\146\005\uffa0\006" +
    "\uffa0\007\uffa0\010\uffa0\011\uffa0\012\uffa0\016\uffa0\017\uffa0" +
    "\020\uffa0\022\uffa0\024\uffa0\025\uffa0\026\uffa0\027\uffa0\031" +
    "\uffa0\037\uffa0\040\uffa0\050\uffa0\052\uffa0\055\uffa0\061\uffa0" +
    "\062\uffa0\074\uffa0\076\uffa0\107\uffa0\112\uffa0\114\uffa0\126" +
    "\uffa0\127\uffa0\131\uffa0\153\uffa0\160\uffa0\161\uffa0\175\uffa0" +
    "\200\uffa0\211\uffa0\214\uffa0\241\uffa0\244\uffa0\267\uffa0\311" +
    "\uffa0\326\uffa0\370\uffa0\377\uffa0\u0103\uffa0\u012c\uffa0\u0131\uffa0" +
    "\u013c\uffa0\u013d\uffa0\u015f\uffa0\001\002\000\146\005\uffa3\006" +
    "\uffa3\007\uffa3\010\uffa3\011\uffa3\012\uffa3\016\uffa3\017\uffa3" +
    "\020\uffa3\022\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\031" +
    "\uffa3\037\uffa3\040\uffa3\050\uffa3\052\uffa3\055\uffa3\061\uffa3" +
    "\062\uffa3\074\uffa3\076\uffa3\107\uffa3\112\uffa3\114\uffa3\126" +
    "\uffa3\127\uffa3\131\uffa3\153\uffa3\160\uffa3\161\uffa3\175\uffa3" +
    "\200\uffa3\211\uffa3\214\uffa3\241\uffa3\244\uffa3\267\uffa3\311" +
    "\uffa3\326\uffa3\370\uffa3\377\uffa3\u0103\uffa3\u012c\uffa3\u0131\uffa3" +
    "\u013c\uffa3\u013d\uffa3\u015f\uffa3\001\002\000\146\005\uffa5\006" +
    "\uffa5\007\uffa5\010\265\011\263\012\uffa5\016\uffa5\017\uffa5" +
    "\020\uffa5\022\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\031" +
    "\uffa5\037\uffa5\040\uffa5\050\uffa5\052\uffa5\055\uffa5\061\uffa5" +
    "\062\uffa5\074\uffa5\076\uffa5\107\uffa5\112\uffa5\114\uffa5\126" +
    "\uffa5\127\uffa5\131\uffa5\153\uffa5\160\uffa5\161\uffa5\175\uffa5" +
    "\200\uffa5\211\uffa5\214\uffa5\241\uffa5\244\uffa5\267\uffa5\311" +
    "\uffa5\326\uffa5\370\uffa5\377\uffa5\u0103\uffa5\u012c\uffa5\u0131\uffa5" +
    "\u013c\uffa5\u013d\uffa5\u015f\uffa5\001\002\000\030\005\253\024" +
    "\254\025\252\026\247\027\245\031\250\114\uff93\153\uff93" +
    "\175\256\214\uff93\241\144\001\002\000\146\005\uffa1\006" +
    "\uffa1\007\uffa1\010\uffa1\011\uffa1\012\uffa1\016\uffa1\017\uffa1" +
    "\020\uffa1\022\uffa1\024\uffa1\025\uffa1\026\uffa1\027\uffa1\031" +
    "\uffa1\037\uffa1\040\uffa1\050\uffa1\052\uffa1\055\uffa1\061\uffa1" +
    "\062\uffa1\074\uffa1\076\uffa1\107\uffa1\112\uffa1\114\uffa1\126" +
    "\uffa1\127\uffa1\131\uffa1\153\uffa1\160\uffa1\161\uffa1\175\uffa1" +
    "\200\uffa1\211\uffa1\214\uffa1\241\uffa1\244\uffa1\267\uffa1\311" +
    "\uffa1\326\uffa1\370\uffa1\377\uffa1\u0103\uffa1\u012c\uffa1\u0131\uffa1" +
    "\u013c\uffa1\u013d\uffa1\u015f\uffa1\001\002\000\142\005\uffa9\006" +
    "\237\007\236\012\uffa9\016\uffa9\017\uffa9\020\uffa9\022\uffa9" +
    "\024\uffa9\025\uffa9\026\uffa9\027\uffa9\031\uffa9\037\uffa9\040" +
    "\uffa9\050\uffa9\052\uffa9\055\uffa9\061\uffa9\062\uffa9\074\uffa9" +
    "\076\uffa9\107\uffa9\112\uffa9\114\uffa9\126\uffa9\127\uffa9\131" +
    "\uffa9\153\uffa9\160\uffa9\161\uffa9\175\uffa9\200\uffa9\211\uffa9" +
    "\214\uffa9\241\uffa9\244\uffa9\267\uffa9\311\uffa9\326\uffa9\370" +
    "\uffa9\377\uffa9\u0103\uffa9\u012c\uffa9\u0131\uffa9\u013c\uffa9\u013d\uffa9" +
    "\u015f\uffa9\001\002\000\150\005\uffe0\006\uffe0\007\uffe0\010" +
    "\uffe0\011\uffe0\012\uffe0\016\uffe0\017\uffe0\020\uffe0\022\uffe0" +
    "\024\uffe0\025\uffe0\026\uffe0\027\uffe0\031\uffe0\037\uffe0\040" +
    "\uffe0\041\234\050\uffe0\052\uffe0\055\uffe0\061\uffe0\062\uffe0" +
    "\074\uffe0\076\uffe0\107\uffe0\112\uffe0\114\uffe0\126\uffe0\127" +
    "\uffe0\131\uffe0\153\uffe0\160\uffe0\161\uffe0\175\uffe0\200\uffe0" +
    "\211\uffe0\214\uffe0\241\uffe0\244\uffe0\267\uffe0\311\uffe0\326" +
    "\uffe0\370\uffe0\377\uffe0\u0103\uffe0\u012c\uffe0\u0131\uffe0\u013c\uffe0" +
    "\u013d\uffe0\u015f\uffe0\001\002\000\044\037\uff89\040\uff89\055" +
    "\uff89\061\226\062\227\074\uff89\112\uff89\126\uff89\127\uff89" +
    "\131\uff89\161\uff89\200\uff89\211\uff89\311\uff89\326\uff89\u0103" +
    "\uff89\u015f\uff89\001\002\000\004\052\224\001\002\000\004" +
    "\052\222\001\002\000\146\005\uff9e\006\uff9e\007\uff9e\010" +
    "\uff9e\011\uff9e\012\uff9e\016\uff9e\017\uff9e\020\uff9e\022\uff9e" +
    "\024\uff9e\025\uff9e\026\uff9e\027\uff9e\031\uff9e\037\uff9e\040" +
    "\uff9e\050\uff9e\052\uff9e\055\uff9e\061\uff9e\062\uff9e\074\uff9e" +
    "\076\uff9e\107\uff9e\112\uff9e\114\uff9e\126\uff9e\127\uff9e\131" +
    "\uff9e\153\uff9e\160\uff9e\161\uff9e\175\uff9e\200\uff9e\211\uff9e" +
    "\214\uff9e\241\uff9e\244\uff9e\267\uff9e\311\uff9e\326\uff9e\370" +
    "\uff9e\377\uff9e\u0103\uff9e\u012c\uff9e\u0131\uff9e\u013c\uff9e\u013d\uff9e" +
    "\u015f\uff9e\001\002\000\004\052\220\001\002\000\034\012" +
    "\052\016\152\017\160\020\165\022\146\050\053\052\162" +
    "\244\163\377\156\u012c\145\u0131\164\u013c\161\u013d\157\001" +
    "\002\000\146\005\uff9d\006\uff9d\007\uff9d\010\uff9d\011\uff9d" +
    "\012\uff9d\016\uff9d\017\uff9d\020\uff9d\022\uff9d\024\uff9d\025" +
    "\uff9d\026\uff9d\027\uff9d\031\uff9d\037\uff9d\040\uff9d\050\uff9d" +
    "\052\uff9d\055\uff9d\061\uff9d\062\uff9d\074\uff9d\076\uff9d\107" +
    "\uff9d\112\uff9d\114\uff9d\126\uff9d\127\uff9d\131\uff9d\153\uff9d" +
    "\160\uff9d\161\uff9d\175\uff9d\200\uff9d\211\uff9d\214\uff9d\241" +
    "\uff9d\244\uff9d\267\uff9d\311\uff9d\326\uff9d\370\uff9d\377\uff9d" +
    "\u0103\uff9d\u012c\uff9d\u0131\uff9d\u013c\uff9d\u013d\uff9d\u015f\uff9d\001" +
    "\002\000\004\052\167\001\002\000\146\005\uff9f\006\uff9f" +
    "\007\uff9f\010\uff9f\011\uff9f\012\uff9f\016\uff9f\017\uff9f\020" +
    "\uff9f\022\uff9f\024\uff9f\025\uff9f\026\uff9f\027\uff9f\031\uff9f" +
    "\037\uff9f\040\uff9f\050\uff9f\052\uff9f\055\uff9f\061\uff9f\062" +
    "\uff9f\074\uff9f\076\uff9f\107\uff9f\112\uff9f\114\uff9f\126\uff9f" +
    "\127\uff9f\131\uff9f\153\uff9f\160\uff9f\161\uff9f\175\uff9f\200" +
    "\uff9f\211\uff9f\214\uff9f\241\uff9f\244\uff9f\267\uff9f\311\uff9f" +
    "\326\uff9f\370\uff9f\377\uff9f\u0103\uff9f\u012c\uff9f\u0131\uff9f\u013c" +
    "\uff9f\u013d\uff9f\u015f\uff9f\001\002\000\146\005\uffa2\006\uffa2" +
    "\007\uffa2\010\uffa2\011\uffa2\012\uffa2\016\uffa2\017\uffa2\020" +
    "\uffa2\022\uffa2\024\uffa2\025\uffa2\026\uffa2\027\uffa2\031\uffa2" +
    "\037\uffa2\040\uffa2\050\uffa2\052\uffa2\055\uffa2\061\uffa2\062" +
    "\uffa2\074\uffa2\076\uffa2\107\uffa2\112\uffa2\114\uffa2\126\uffa2" +
    "\127\uffa2\131\uffa2\153\uffa2\160\uffa2\161\uffa2\175\uffa2\200" +
    "\uffa2\211\uffa2\214\uffa2\241\uffa2\244\uffa2\267\uffa2\311\uffa2" +
    "\326\uffa2\370\uffa2\377\uffa2\u0103\uffa2\u012c\uffa2\u0131\uffa2\u013c" +
    "\uffa2\u013d\uffa2\u015f\uffa2\001\002\000\012\010\172\012\052" +
    "\016\173\050\053\001\002\000\004\055\176\001\002\000" +
    "\146\005\uff98\006\uff98\007\uff98\010\uff98\011\uff98\012\uff98" +
    "\016\uff98\017\uff98\020\uff98\022\uff98\024\uff98\025\uff98\026" +
    "\uff98\027\uff98\031\uff98\037\uff98\040\uff98\050\uff98\052\uff98" +
    "\055\uff98\061\uff98\062\uff98\074\uff98\076\uff98\107\uff98\112" +
    "\uff98\114\uff98\126\uff98\127\uff98\131\uff98\153\uff98\160\uff98" +
    "\161\uff98\175\uff98\200\uff98\211\uff98\214\uff98\241\uff98\244" +
    "\uff98\267\uff98\311\uff98\326\uff98\370\uff98\377\uff98\u0103\uff98" +
    "\u012c\uff98\u0131\uff98\u013c\uff98\u013d\uff98\u015f\uff98\001\002\000" +
    "\004\055\175\001\002\000\004\055\174\001\002\000\146" +
    "\005\uff96\006\uff96\007\uff96\010\uff96\011\uff96\012\uff96\016" +
    "\uff96\017\uff96\020\uff96\022\uff96\024\uff96\025\uff96\026\uff96" +
    "\027\uff96\031\uff96\037\uff96\040\uff96\050\uff96\052\uff96\055" +
    "\uff96\061\uff96\062\uff96\074\uff96\076\uff96\107\uff96\112\uff96" +
    "\114\uff96\126\uff96\127\uff96\131\uff96\153\uff96\160\uff96\161" +
    "\uff96\175\uff96\200\uff96\211\uff96\214\uff96\241\uff96\244\uff96" +
    "\267\uff96\311\uff96\326\uff96\370\uff96\377\uff96\u0103\uff96\u012c" +
    "\uff96\u0131\uff96\u013c\uff96\u013d\uff96\u015f\uff96\001\002\000\146" +
    "\005\uff95\006\uff95\007\uff95\010\uff95\011\uff95\012\uff95\016" +
    "\uff95\017\uff95\020\uff95\022\uff95\024\uff95\025\uff95\026\uff95" +
    "\027\uff95\031\uff95\037\uff95\040\uff95\050\uff95\052\uff95\055" +
    "\uff95\061\uff95\062\uff95\074\uff95\076\uff95\107\uff95\112\uff95" +
    "\114\uff95\126\uff95\127\uff95\131\uff95\153\uff95\160\uff95\161" +
    "\uff95\175\uff95\200\uff95\211\uff95\214\uff95\241\uff95\244\uff95" +
    "\267\uff95\311\uff95\326\uff95\370\uff95\377\uff95\u0103\uff95\u012c" +
    "\uff95\u0131\uff95\u013c\uff95\u013d\uff95\u015f\uff95\001\002\000\146" +
    "\005\uff97\006\uff97\007\uff97\010\uff97\011\uff97\012\uff97\016" +
    "\uff97\017\uff97\020\uff97\022\uff97\024\uff97\025\uff97\026\uff97" +
    "\027\uff97\031\uff97\037\uff97\040\uff97\050\uff97\052\uff97\055" +
    "\uff97\061\uff97\062\uff97\074\uff97\076\uff97\107\uff97\112\uff97" +
    "\114\uff97\126\uff97\127\uff97\131\uff97\153\uff97\160\uff97\161" +
    "\uff97\175\uff97\200\uff97\211\uff97\214\uff97\241\uff97\244\uff97" +
    "\267\uff97\311\uff97\326\uff97\370\uff97\377\uff97\u0103\uff97\u012c" +
    "\uff97\u0131\uff97\u013c\uff97\u013d\uff97\u015f\uff97\001\002\000\010" +
    "\114\202\153\201\214\200\001\002\000\034\012\052\016" +
    "\152\017\160\020\165\022\146\050\053\052\162\244\163" +
    "\377\156\u012c\145\u0131\164\u013c\161\u013d\157\001\002\000" +
    "\004\052\210\001\002\000\034\012\052\016\152\017\160" +
    "\020\165\022\146\050\053\052\162\244\163\377\156\u012c" +
    "\145\u0131\164\u013c\161\u013d\157\001\002\000\004\055\204" +
    "\001\002\000\146\005\uffa4\006\uffa4\007\uffa4\010\uffa4\011" +
    "\uffa4\012\uffa4\016\uffa4\017\uffa4\020\uffa4\022\uffa4\024\uffa4" +
    "\025\uffa4\026\uffa4\027\uffa4\031\uffa4\037\uffa4\040\uffa4\050" +
    "\uffa4\052\uffa4\055\uffa4\061\uffa4\062\uffa4\074\uffa4\076\uffa4" +
    "\107\uffa4\112\uffa4\114\uffa4\126\uffa4\127\uffa4\131\uffa4\153" +
    "\uffa4\160\uffa4\161\uffa4\175\uffa4\200\uffa4\211\uffa4\214\uffa4" +
    "\241\uffa4\244\uffa4\267\uffa4\311\uffa4\326\uffa4\370\uffa4\377" +
    "\uffa4\u0103\uffa4\u012c\uffa4\u0131\uffa4\u013c\uffa4\u013d\uffa4\u015f\uffa4" +
    "\001\002\000\004\061\206\001\002\000\034\012\052\016" +
    "\152\017\160\020\165\022\146\050\053\052\162\244\163" +
    "\377\156\u012c\145\u0131\164\u013c\161\u013d\157\001\002\000" +
    "\044\037\uff7d\040\uff7d\055\uff7d\061\uff7d\062\uff7d\074\uff7d" +
    "\112\uff7d\126\uff7d\127\uff7d\131\uff7d\161\uff7d\200\uff7d\211" +
    "\uff7d\311\uff7d\326\uff7d\u0103\uff7d\u015f\uff7d\001\002\000\034" +
    "\012\052\016\152\017\160\020\165\022\146\050\053\052" +
    "\162\244\163\377\156\u012c\145\u0131\164\u013c\161\u013d\157" +
    "\001\002\000\006\040\212\055\uff8d\001\002\000\034\012" +
    "\052\016\152\017\160\020\165\022\146\050\053\052\162" +
    "\244\163\377\156\u012c\145\u0131\164\u013c\161\u013d\157\001" +
    "\002\000\004\055\214\001\002\000\044\037\uff7e\040\uff7e" +
    "\055\uff7e\061\uff7e\062\uff7e\074\uff7e\112\uff7e\126\uff7e\127" +
    "\uff7e\131\uff7e\161\uff7e\200\uff7e\211\uff7e\311\uff7e\326\uff7e" +
    "\u0103\uff7e\u015f\uff7e\001\002\000\006\040\212\055\uff8d\001" +
    "\002\000\004\055\uff8e\001\002\000\044\037\uff7c\040\uff7c" +
    "\055\uff7c\061\uff7c\062\uff7c\074\uff7c\112\uff7c\126\uff7c\127" +
    "\uff7c\131\uff7c\161\uff7c\200\uff7c\211\uff7c\311\uff7c\326\uff7c" +
    "\u0103\uff7c\u015f\uff7c\001\002\000\012\010\172\012\052\016" +
    "\173\050\053\001\002\000\146\005\uff99\006\uff99\007\uff99" +
    "\010\uff99\011\uff99\012\uff99\016\uff99\017\uff99\020\uff99\022" +
    "\uff99\024\uff99\025\uff99\026\uff99\027\uff99\031\uff99\037\uff99" +
    "\040\uff99\050\uff99\052\uff99\055\uff99\061\uff99\062\uff99\074" +
    "\uff99\076\uff99\107\uff99\112\uff99\114\uff99\126\uff99\127\uff99" +
    "\131\uff99\153\uff99\160\uff99\161\uff99\175\uff99\200\uff99\211" +
    "\uff99\214\uff99\241\uff99\244\uff99\267\uff99\311\uff99\326\uff99" +
    "\370\uff99\377\uff99\u0103\uff99\u012c\uff99\u0131\uff99\u013c\uff99\u013d" +
    "\uff99\u015f\uff99\001\002\000\012\010\172\012\052\016\173" +
    "\050\053\001\002\000\146\005\uff9a\006\uff9a\007\uff9a\010" +
    "\uff9a\011\uff9a\012\uff9a\016\uff9a\017\uff9a\020\uff9a\022\uff9a" +
    "\024\uff9a\025\uff9a\026\uff9a\027\uff9a\031\uff9a\037\uff9a\040" +
    "\uff9a\050\uff9a\052\uff9a\055\uff9a\061\uff9a\062\uff9a\074\uff9a" +
    "\076\uff9a\107\uff9a\112\uff9a\114\uff9a\126\uff9a\127\uff9a\131" +
    "\uff9a\153\uff9a\160\uff9a\161\uff9a\175\uff9a\200\uff9a\211\uff9a" +
    "\214\uff9a\241\uff9a\244\uff9a\267\uff9a\311\uff9a\326\uff9a\370" +
    "\uff9a\377\uff9a\u0103\uff9a\u012c\uff9a\u0131\uff9a\u013c\uff9a\u013d\uff9a" +
    "\u015f\uff9a\001\002\000\012\010\172\012\052\016\173\050" +
    "\053\001\002\000\146\005\uff9b\006\uff9b\007\uff9b\010\uff9b" +
    "\011\uff9b\012\uff9b\016\uff9b\017\uff9b\020\uff9b\022\uff9b\024" +
    "\uff9b\025\uff9b\026\uff9b\027\uff9b\031\uff9b\037\uff9b\040\uff9b" +
    "\050\uff9b\052\uff9b\055\uff9b\061\uff9b\062\uff9b\074\uff9b\076" +
    "\uff9b\107\uff9b\112\uff9b\114\uff9b\126\uff9b\127\uff9b\131\uff9b" +
    "\153\uff9b\160\uff9b\161\uff9b\175\uff9b\200\uff9b\211\uff9b\214" +
    "\uff9b\241\uff9b\244\uff9b\267\uff9b\311\uff9b\326\uff9b\370\uff9b" +
    "\377\uff9b\u0103\uff9b\u012c\uff9b\u0131\uff9b\u013c\uff9b\u013d\uff9b\u015f" +
    "\uff9b\001\002\000\036\012\uff93\016\uff93\017\uff93\020\uff93" +
    "\022\uff93\050\uff93\052\uff93\241\144\244\uff93\377\uff93\u012c" +
    "\uff93\u0131\uff93\u013c\uff93\u013d\uff93\001\002\000\036\012\uff93" +
    "\016\uff93\017\uff93\020\uff93\022\uff93\050\uff93\052\uff93\241" +
    "\144\244\uff93\377\uff93\u012c\uff93\u0131\uff93\u013c\uff93\u013d\uff93" +
    "\001\002\000\040\037\uff8c\040\uff8c\055\uff8c\074\uff8c\112" +
    "\uff8c\126\uff8c\127\uff8c\131\uff8c\161\uff8c\200\uff8c\211\uff8c" +
    "\311\uff8c\326\uff8c\u0103\uff8c\u015f\uff8c\001\002\000\040\037" +
    "\uff8a\040\uff8a\055\uff8a\074\uff8a\112\uff8a\126\uff8a\127\uff8a" +
    "\131\uff8a\161\uff8a\200\uff8a\211\uff8a\311\uff8a\326\uff8a\u0103" +
    "\uff8a\u015f\uff8a\001\002\000\040\037\uff8b\040\uff8b\055\uff8b" +
    "\074\uff8b\112\uff8b\126\uff8b\127\uff8b\131\uff8b\161\uff8b\200" +
    "\uff8b\211\uff8b\311\uff8b\326\uff8b\u0103\uff8b\u015f\uff8b\001\002" +
    "\000\146\005\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\022\uffe2\024\uffe2\025\uffe2" +
    "\026\uffe2\027\uffe2\031\uffe2\037\uffe2\040\uffe2\050\uffe2\052" +
    "\uffe2\055\uffe2\061\uffe2\062\uffe2\074\uffe2\076\uffe2\107\uffe2" +
    "\112\uffe2\114\uffe2\126\uffe2\127\uffe2\131\uffe2\153\uffe2\160" +
    "\uffe2\161\uffe2\175\uffe2\200\uffe2\211\uffe2\214\uffe2\241\uffe2" +
    "\244\uffe2\267\uffe2\311\uffe2\326\uffe2\370\uffe2\377\uffe2\u0103" +
    "\uffe2\u012c\uffe2\u0131\uffe2\u013c\uffe2\u013d\uffe2\u015f\uffe2\001\002" +
    "\000\006\012\052\050\053\001\002\000\146\005\uffe1\006" +
    "\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\016\uffe1\017\uffe1" +
    "\020\uffe1\022\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\031" +
    "\uffe1\037\uffe1\040\uffe1\050\uffe1\052\uffe1\055\uffe1\061\uffe1" +
    "\062\uffe1\074\uffe1\076\uffe1\107\uffe1\112\uffe1\114\uffe1\126" +
    "\uffe1\127\uffe1\131\uffe1\153\uffe1\160\uffe1\161\uffe1\175\uffe1" +
    "\200\uffe1\211\uffe1\214\uffe1\241\uffe1\244\uffe1\267\uffe1\311" +
    "\uffe1\326\uffe1\370\uffe1\377\uffe1\u0103\uffe1\u012c\uffe1\u0131\uffe1" +
    "\u013c\uffe1\u013d\uffe1\u015f\uffe1\001\002\000\034\012\052\016" +
    "\152\017\160\020\165\022\146\050\053\052\162\244\163" +
    "\377\156\u012c\145\u0131\164\u013c\161\u013d\157\001\002\000" +
    "\034\012\052\016\152\017\160\020\165\022\146\050\053" +
    "\052\162\244\163\377\156\u012c\145\u0131\164\u013c\161\u013d" +
    "\157\001\002\000\136\005\uffac\012\uffac\016\uffac\017\uffac" +
    "\020\uffac\022\uffac\024\uffac\025\uffac\026\uffac\027\uffac\031" +
    "\uffac\037\uffac\040\uffac\050\uffac\052\uffac\055\uffac\061\uffac" +
    "\062\uffac\074\uffac\076\uffac\107\uffac\112\uffac\114\uffac\126" +
    "\uffac\127\uffac\131\uffac\153\uffac\160\uffac\161\uffac\175\uffac" +
    "\200\uffac\211\uffac\214\uffac\241\uffac\244\uffac\267\uffac\311" +
    "\uffac\326\uffac\370\uffac\377\uffac\u0103\uffac\u012c\uffac\u0131\uffac" +
    "\u013c\uffac\u013d\uffac\u015f\uffac\001\002\000\142\005\uffa9\006" +
    "\237\007\236\012\uffa9\016\uffa9\017\uffa9\020\uffa9\022\uffa9" +
    "\024\uffa9\025\uffa9\026\uffa9\027\uffa9\031\uffa9\037\uffa9\040" +
    "\uffa9\050\uffa9\052\uffa9\055\uffa9\061\uffa9\062\uffa9\074\uffa9" +
    "\076\uffa9\107\uffa9\112\uffa9\114\uffa9\126\uffa9\127\uffa9\131" +
    "\uffa9\153\uffa9\160\uffa9\161\uffa9\175\uffa9\200\uffa9\211\uffa9" +
    "\214\uffa9\241\uffa9\244\uffa9\267\uffa9\311\uffa9\326\uffa9\370" +
    "\uffa9\377\uffa9\u0103\uffa9\u012c\uffa9\u0131\uffa9\u013c\uffa9\u013d\uffa9" +
    "\u015f\uffa9\001\002\000\136\005\uffab\012\uffab\016\uffab\017" +
    "\uffab\020\uffab\022\uffab\024\uffab\025\uffab\026\uffab\027\uffab" +
    "\031\uffab\037\uffab\040\uffab\050\uffab\052\uffab\055\uffab\061" +
    "\uffab\062\uffab\074\uffab\076\uffab\107\uffab\112\uffab\114\uffab" +
    "\126\uffab\127\uffab\131\uffab\153\uffab\160\uffab\161\uffab\175" +
    "\uffab\200\uffab\211\uffab\214\uffab\241\uffab\244\uffab\267\uffab" +
    "\311\uffab\326\uffab\370\uffab\377\uffab\u0103\uffab\u012c\uffab\u0131" +
    "\uffab\u013c\uffab\u013d\uffab\u015f\uffab\001\002\000\142\005\uffa9" +
    "\006\237\007\236\012\uffa9\016\uffa9\017\uffa9\020\uffa9\022" +
    "\uffa9\024\uffa9\025\uffa9\026\uffa9\027\uffa9\031\uffa9\037\uffa9" +
    "\040\uffa9\050\uffa9\052\uffa9\055\uffa9\061\uffa9\062\uffa9\074" +
    "\uffa9\076\uffa9\107\uffa9\112\uffa9\114\uffa9\126\uffa9\127\uffa9" +
    "\131\uffa9\153\uffa9\160\uffa9\161\uffa9\175\uffa9\200\uffa9\211" +
    "\uffa9\214\uffa9\241\uffa9\244\uffa9\267\uffa9\311\uffa9\326\uffa9" +
    "\370\uffa9\377\uffa9\u0103\uffa9\u012c\uffa9\u0131\uffa9\u013c\uffa9\u013d" +
    "\uffa9\u015f\uffa9\001\002\000\136\005\uffaa\012\uffaa\016\uffaa" +
    "\017\uffaa\020\uffaa\022\uffaa\024\uffaa\025\uffaa\026\uffaa\027" +
    "\uffaa\031\uffaa\037\uffaa\040\uffaa\050\uffaa\052\uffaa\055\uffaa" +
    "\061\uffaa\062\uffaa\074\uffaa\076\uffaa\107\uffaa\112\uffaa\114" +
    "\uffaa\126\uffaa\127\uffaa\131\uffaa\153\uffaa\160\uffaa\161\uffaa" +
    "\175\uffaa\200\uffaa\211\uffaa\214\uffaa\241\uffaa\244\uffaa\267" +
    "\uffaa\311\uffaa\326\uffaa\370\uffaa\377\uffaa\u0103\uffaa\u012c\uffaa" +
    "\u0131\uffaa\u013c\uffaa\u013d\uffaa\u015f\uffaa\001\002\000\034\012" +
    "\uff84\016\uff84\017\uff84\020\uff84\022\uff84\050\uff84\052\uff84" +
    "\244\uff84\377\uff84\u012c\uff84\u0131\uff84\u013c\uff84\u013d\uff84\001" +
    "\002\000\010\114\202\153\201\214\200\001\002\000\034" +
    "\012\uff85\016\uff85\017\uff85\020\uff85\022\uff85\050\uff85\052" +
    "\uff85\244\uff85\377\uff85\u012c\uff85\u0131\uff85\u013c\uff85\u013d\uff85" +
    "\001\002\000\034\012\uff86\016\uff86\017\uff86\020\uff86\022" +
    "\uff86\050\uff86\052\uff86\244\uff86\377\uff86\u012c\uff86\u0131\uff86" +
    "\u013c\uff86\u013d\uff86\001\002\000\034\012\052\016\152\017" +
    "\160\020\165\022\146\050\053\052\162\244\163\377\156" +
    "\u012c\145\u0131\164\u013c\161\u013d\157\001\002\000\034\012" +
    "\uff82\016\uff82\017\uff82\020\uff82\022\uff82\050\uff82\052\uff82" +
    "\244\uff82\377\uff82\u012c\uff82\u0131\uff82\u013c\uff82\u013d\uff82\001" +
    "\002\000\034\012\uff87\016\uff87\017\uff87\020\uff87\022\uff87" +
    "\050\uff87\052\uff87\244\uff87\377\uff87\u012c\uff87\u0131\uff87\u013c" +
    "\uff87\u013d\uff87\001\002\000\034\012\uff83\016\uff83\017\uff83" +
    "\020\uff83\022\uff83\050\uff83\052\uff83\244\uff83\377\uff83\u012c" +
    "\uff83\u0131\uff83\u013c\uff83\u013d\uff83\001\002\000\044\037\uff88" +
    "\040\uff88\055\uff88\061\uff88\062\uff88\074\uff88\112\uff88\126" +
    "\uff88\127\uff88\131\uff88\161\uff88\200\uff88\211\uff88\311\uff88" +
    "\326\uff88\u0103\uff88\u015f\uff88\001\002\000\006\241\144\244" +
    "\uff93\001\002\000\004\244\260\001\002\000\044\037\uff80" +
    "\040\uff80\055\uff80\061\uff80\062\uff80\074\uff80\112\uff80\126" +
    "\uff80\127\uff80\131\uff80\161\uff80\200\uff80\211\uff80\311\uff80" +
    "\326\uff80\u0103\uff80\u015f\uff80\001\002\000\044\037\uff81\040" +
    "\uff81\055\uff81\061\uff81\062\uff81\074\uff81\112\uff81\126\uff81" +
    "\127\uff81\131\uff81\161\uff81\200\uff81\211\uff81\311\uff81\326" +
    "\uff81\u0103\uff81\u015f\uff81\001\002\000\044\037\uff7f\040\uff7f" +
    "\055\uff7f\061\uff7f\062\uff7f\074\uff7f\112\uff7f\126\uff7f\127" +
    "\uff7f\131\uff7f\161\uff7f\200\uff7f\211\uff7f\311\uff7f\326\uff7f" +
    "\u0103\uff7f\u015f\uff7f\001\002\000\034\012\052\016\152\017" +
    "\160\020\165\022\146\050\053\052\162\244\163\377\156" +
    "\u012c\145\u0131\164\u013c\161\u013d\157\001\002\000\142\005" +
    "\uffa8\006\uffa8\007\uffa8\012\uffa8\016\uffa8\017\uffa8\020\uffa8" +
    "\022\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\031\uffa8\037" +
    "\uffa8\040\uffa8\050\uffa8\052\uffa8\055\uffa8\061\uffa8\062\uffa8" +
    "\074\uffa8\076\uffa8\107\uffa8\112\uffa8\114\uffa8\126\uffa8\127" +
    "\uffa8\131\uffa8\153\uffa8\160\uffa8\161\uffa8\175\uffa8\200\uffa8" +
    "\211\uffa8\214\uffa8\241\uffa8\244\uffa8\267\uffa8\311\uffa8\326" +
    "\uffa8\370\uffa8\377\uffa8\u0103\uffa8\u012c\uffa8\u0131\uffa8\u013c\uffa8" +
    "\u013d\uffa8\u015f\uffa8\001\002\000\034\012\052\016\152\017" +
    "\160\020\165\022\146\050\053\052\162\244\163\377\156" +
    "\u012c\145\u0131\164\u013c\161\u013d\157\001\002\000\146\005" +
    "\uffa5\006\uffa5\007\uffa5\010\265\011\263\012\uffa5\016\uffa5" +
    "\017\uffa5\020\uffa5\022\uffa5\024\uffa5\025\uffa5\026\uffa5\027" +
    "\uffa5\031\uffa5\037\uffa5\040\uffa5\050\uffa5\052\uffa5\055\uffa5" +
    "\061\uffa5\062\uffa5\074\uffa5\076\uffa5\107\uffa5\112\uffa5\114" +
    "\uffa5\126\uffa5\127\uffa5\131\uffa5\153\uffa5\160\uffa5\161\uffa5" +
    "\175\uffa5\200\uffa5\211\uffa5\214\uffa5\241\uffa5\244\uffa5\267" +
    "\uffa5\311\uffa5\326\uffa5\370\uffa5\377\uffa5\u0103\uffa5\u012c\uffa5" +
    "\u0131\uffa5\u013c\uffa5\u013d\uffa5\u015f\uffa5\001\002\000\142\005" +
    "\uffa7\006\uffa7\007\uffa7\012\uffa7\016\uffa7\017\uffa7\020\uffa7" +
    "\022\uffa7\024\uffa7\025\uffa7\026\uffa7\027\uffa7\031\uffa7\037" +
    "\uffa7\040\uffa7\050\uffa7\052\uffa7\055\uffa7\061\uffa7\062\uffa7" +
    "\074\uffa7\076\uffa7\107\uffa7\112\uffa7\114\uffa7\126\uffa7\127" +
    "\uffa7\131\uffa7\153\uffa7\160\uffa7\161\uffa7\175\uffa7\200\uffa7" +
    "\211\uffa7\214\uffa7\241\uffa7\244\uffa7\267\uffa7\311\uffa7\326" +
    "\uffa7\370\uffa7\377\uffa7\u0103\uffa7\u012c\uffa7\u0131\uffa7\u013c\uffa7" +
    "\u013d\uffa7\u015f\uffa7\001\002\000\146\005\uffa5\006\uffa5\007" +
    "\uffa5\010\265\011\263\012\uffa5\016\uffa5\017\uffa5\020\uffa5" +
    "\022\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5\031\uffa5\037" +
    "\uffa5\040\uffa5\050\uffa5\052\uffa5\055\uffa5\061\uffa5\062\uffa5" +
    "\074\uffa5\076\uffa5\107\uffa5\112\uffa5\114\uffa5\126\uffa5\127" +
    "\uffa5\131\uffa5\153\uffa5\160\uffa5\161\uffa5\175\uffa5\200\uffa5" +
    "\211\uffa5\214\uffa5\241\uffa5\244\uffa5\267\uffa5\311\uffa5\326" +
    "\uffa5\370\uffa5\377\uffa5\u0103\uffa5\u012c\uffa5\u0131\uffa5\u013c\uffa5" +
    "\u013d\uffa5\u015f\uffa5\001\002\000\142\005\uffa6\006\uffa6\007" +
    "\uffa6\012\uffa6\016\uffa6\017\uffa6\020\uffa6\022\uffa6\024\uffa6" +
    "\025\uffa6\026\uffa6\027\uffa6\031\uffa6\037\uffa6\040\uffa6\050" +
    "\uffa6\052\uffa6\055\uffa6\061\uffa6\062\uffa6\074\uffa6\076\uffa6" +
    "\107\uffa6\112\uffa6\114\uffa6\126\uffa6\127\uffa6\131\uffa6\153" +
    "\uffa6\160\uffa6\161\uffa6\175\uffa6\200\uffa6\211\uffa6\214\uffa6" +
    "\241\uffa6\244\uffa6\267\uffa6\311\uffa6\326\uffa6\370\uffa6\377" +
    "\uffa6\u0103\uffa6\u012c\uffa6\u0131\uffa6\u013c\uffa6\u013d\uffa6\u015f\uffa6" +
    "\001\002\000\012\010\172\012\052\016\173\050\053\001" +
    "\002\000\146\005\uff9c\006\uff9c\007\uff9c\010\uff9c\011\uff9c" +
    "\012\uff9c\016\uff9c\017\uff9c\020\uff9c\022\uff9c\024\uff9c\025" +
    "\uff9c\026\uff9c\027\uff9c\031\uff9c\037\uff9c\040\uff9c\050\uff9c" +
    "\052\uff9c\055\uff9c\061\uff9c\062\uff9c\074\uff9c\076\uff9c\107" +
    "\uff9c\112\uff9c\114\uff9c\126\uff9c\127\uff9c\131\uff9c\153\uff9c" +
    "\160\uff9c\161\uff9c\175\uff9c\200\uff9c\211\uff9c\214\uff9c\241" +
    "\uff9c\244\uff9c\267\uff9c\311\uff9c\326\uff9c\370\uff9c\377\uff9c" +
    "\u0103\uff9c\u012c\uff9c\u0131\uff9c\u013c\uff9c\u013d\uff9c\u015f\uff9c\001" +
    "\002\000\036\012\052\016\152\017\160\020\165\022\146" +
    "\050\053\052\162\244\163\257\277\377\156\u012c\145\u0131" +
    "\164\u013c\161\u013d\157\001\002\000\014\037\uff3f\040\300" +
    "\107\uff3f\326\uff3f\u0103\uff3f\001\002\000\014\037\uff41\040" +
    "\uff41\107\uff41\326\uff41\u0103\uff41\001\002\000\014\037\uff42" +
    "\040\uff42\107\uff42\326\uff42\u0103\uff42\001\002\000\006\012" +
    "\052\050\053\001\002\000\012\037\uff43\107\uff43\326\uff43" +
    "\u0103\uff43\001\002\000\012\037\uff40\107\uff40\326\uff40\u0103" +
    "\uff40\001\002\000\162\005\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\016\uffe5\017\uffe5\020\uffe5\022\uffe5\024" +
    "\uffe5\025\uffe5\026\uffe5\027\uffe5\031\uffe5\037\uffe5\040\uffe5" +
    "\050\uffe5\052\uffe5\055\uffe5\060\uffe5\061\uffe5\062\uffe5\066" +
    "\uffe5\074\uffe5\076\uffe5\107\uffe5\112\uffe5\114\uffe5\126\uffe5" +
    "\127\uffe5\131\uffe5\153\uffe5\160\uffe5\161\uffe5\175\uffe5\176" +
    "\uffe5\200\uffe5\211\uffe5\214\uffe5\241\uffe5\244\uffe5\257\uffe5" +
    "\267\uffe5\306\uffe5\307\uffe5\311\uffe5\326\uffe5\370\uffe5\377" +
    "\uffe5\u0103\uffe5\u012c\uffe5\u0131\uffe5\u013c\uffe5\u013d\uffe5\u015f\uffe5" +
    "\001\002\000\006\012\052\050\053\001\002\000\204\005" +
    "\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6\012\uffe6\016\uffe6" +
    "\017\uffe6\020\uffe6\022\uffe6\024\uffe6\025\uffe6\026\uffe6\027" +
    "\uffe6\031\uffe6\037\uffe6\040\uffe6\041\310\042\uffe6\050\uffe6" +
    "\052\uffe6\055\uffe6\060\uffe6\061\uffe6\062\uffe6\066\uffe6\074" +
    "\uffe6\076\uffe6\077\uffe6\102\uffe6\107\uffe6\112\uffe6\114\uffe6" +
    "\126\uffe6\127\uffe6\131\uffe6\141\uffe6\153\uffe6\160\uffe6\161" +
    "\uffe6\174\uffe6\175\uffe6\176\uffe6\200\uffe6\211\uffe6\214\uffe6" +
    "\241\uffe6\244\uffe6\257\uffe6\266\uffe6\267\uffe6\306\uffe6\307" +
    "\uffe6\311\uffe6\326\uffe6\334\uffe6\336\uffe6\370\uffe6\377\uffe6" +
    "\u0103\uffe6\u012c\uffe6\u0131\uffe6\u013c\uffe6\u013d\uffe6\u015f\uffe6\001" +
    "\002\000\162\005\uffe4\006\uffe4\007\uffe4\010\uffe4\011\uffe4" +
    "\012\uffe4\016\uffe4\017\uffe4\020\uffe4\022\uffe4\024\uffe4\025" +
    "\uffe4\026\uffe4\027\uffe4\031\uffe4\037\uffe4\040\uffe4\050\uffe4" +
    "\052\uffe4\055\uffe4\060\uffe4\061\uffe4\062\uffe4\066\uffe4\074" +
    "\uffe4\076\uffe4\107\uffe4\112\uffe4\114\uffe4\126\uffe4\127\uffe4" +
    "\131\uffe4\153\uffe4\160\uffe4\161\uffe4\175\uffe4\176\uffe4\200" +
    "\uffe4\211\uffe4\214\uffe4\241\uffe4\244\uffe4\257\uffe4\267\uffe4" +
    "\306\uffe4\307\uffe4\311\uffe4\326\uffe4\370\uffe4\377\uffe4\u0103" +
    "\uffe4\u012c\uffe4\u0131\uffe4\u013c\uffe4\u013d\uffe4\u015f\uffe4\001\002" +
    "\000\202\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012" +
    "\uffe8\016\uffe8\017\uffe8\020\uffe8\022\uffe8\024\uffe8\025\uffe8" +
    "\026\uffe8\027\uffe8\031\uffe8\037\uffe8\040\uffe8\042\uffe8\050" +
    "\uffe8\052\uffe8\055\uffe8\060\uffe8\061\uffe8\062\uffe8\066\uffe8" +
    "\074\uffe8\076\uffe8\077\uffe8\102\uffe8\107\uffe8\112\uffe8\114" +
    "\uffe8\126\uffe8\127\uffe8\131\uffe8\141\uffe8\153\uffe8\160\uffe8" +
    "\161\uffe8\174\uffe8\175\uffe8\176\uffe8\200\uffe8\211\uffe8\214" +
    "\uffe8\241\uffe8\244\uffe8\257\uffe8\266\uffe8\267\uffe8\306\uffe8" +
    "\307\uffe8\311\uffe8\326\uffe8\334\uffe8\336\uffe8\370\uffe8\377" +
    "\uffe8\u0103\uffe8\u012c\uffe8\u0131\uffe8\u013c\uffe8\u013d\uffe8\u015f\uffe8" +
    "\001\002\000\006\012\052\050\053\001\002\000\202\005" +
    "\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7\016\uffe7" +
    "\017\uffe7\020\uffe7\022\uffe7\024\uffe7\025\uffe7\026\uffe7\027" +
    "\uffe7\031\uffe7\037\uffe7\040\uffe7\042\uffe7\050\uffe7\052\uffe7" +
    "\055\uffe7\060\uffe7\061\uffe7\062\uffe7\066\uffe7\074\uffe7\076" +
    "\uffe7\077\uffe7\102\uffe7\107\uffe7\112\uffe7\114\uffe7\126\uffe7" +
    "\127\uffe7\131\uffe7\141\uffe7\153\uffe7\160\uffe7\161\uffe7\174" +
    "\uffe7\175\uffe7\176\uffe7\200\uffe7\211\uffe7\214\uffe7\241\uffe7" +
    "\244\uffe7\257\uffe7\266\uffe7\267\uffe7\306\uffe7\307\uffe7\311" +
    "\uffe7\326\uffe7\334\uffe7\336\uffe7\370\uffe7\377\uffe7\u0103\uffe7" +
    "\u012c\uffe7\u0131\uffe7\u013c\uffe7\u013d\uffe7\u015f\uffe7\001\002\000" +
    "\012\012\uff4b\050\uff4b\107\313\273\uff4b\001\002\000\010" +
    "\012\uff4c\050\uff4c\273\uff4c\001\002\000\010\012\052\050" +
    "\053\273\317\001\002\000\006\037\uff4d\u0103\uff4d\001\002" +
    "\000\004\107\326\001\002\000\004\052\320\001\002\000" +
    "\006\012\052\050\053\001\002\000\006\037\uff4a\u0103\uff4a" +
    "\001\002\000\004\040\323\001\002\000\004\016\324\001" +
    "\002\000\004\055\325\001\002\000\006\037\uff45\u0103\uff45" +
    "\001\002\000\006\012\052\050\053\001\002\000\010\037" +
    "\uff7a\326\140\u0103\uff7a\001\002\000\006\037\uff49\u0103\uff49" +
    "\001\002\000\012\037\uff46\040\134\326\uff46\u0103\uff46\001" +
    "\002\000\010\037\uff48\326\uff48\u0103\uff48\001\002\000\040" +
    "\002\ufffe\003\035\066\032\111\024\132\022\146\011\157" +
    "\010\164\027\166\023\213\025\253\012\254\042\262\037" +
    "\274\040\306\034\001\002\000\004\002\uffff\001\002\000" +
    "\006\037\uffc5\u0103\uffc5\001\002\000\006\037\uffc3\u0103\uffc3" +
    "\001\002\000\010\012\uffde\050\uffde\150\350\001\002\000" +
    "\010\012\uffde\050\uffde\150\350\001\002\000\010\012\uffde" +
    "\050\uffde\150\350\001\002\000\006\037\uffc4\u0103\uffc4\001" +
    "\002\000\010\012\uffde\050\uffde\150\350\001\002\000\010" +
    "\012\uffde\050\uffde\150\350\001\002\000\006\037\uffc6\u0103" +
    "\uffc6\001\002\000\006\037\uffc1\u0103\uffc1\001\002\000\006" +
    "\037\uffc2\u0103\uffc2\001\002\000\004\340\357\001\002\000" +
    "\006\012\052\050\053\001\002\000\010\037\uffbe\040\353" +
    "\u0103\uffbe\001\002\000\006\012\052\050\053\001\002\000" +
    "\006\037\uffc0\u0103\uffc0\001\002\000\010\037\uffbe\040\353" +
    "\u0103\uffbe\001\002\000\006\037\uffbf\u0103\uffbf\001\002\000" +
    "\006\012\uffdf\050\uffdf\001\002\000\006\012\052\050\053" +
    "\001\002\000\010\037\uffb7\040\362\u0103\uffb7\001\002\000" +
    "\006\012\052\050\053\001\002\000\006\037\uffb9\u0103\uffb9" +
    "\001\002\000\010\037\uffb7\040\362\u0103\uffb7\001\002\000" +
    "\006\037\uffb8\u0103\uffb8\001\002\000\006\012\052\050\053" +
    "\001\002\000\006\037\uffbd\u0103\uffbd\001\002\000\006\012" +
    "\052\050\053\001\002\000\004\u015f\377\001\002\000\010" +
    "\037\uffb3\040\374\u0103\uffb3\001\002\000\006\037\uffb6\u0103" +
    "\uffb6\001\002\000\006\012\052\050\053\001\002\000\010" +
    "\037\uffb3\040\374\u0103\uffb3\001\002\000\006\037\uffb4\u0103" +
    "\uffb4\001\002\000\006\012\052\050\053\001\002\000\010" +
    "\037\uffb5\040\uffb5\u0103\uffb5\001\002\000\006\012\052\050" +
    "\053\001\002\000\010\037\uffba\040\u0103\u0103\uffba\001\002" +
    "\000\006\012\052\050\053\001\002\000\006\037\uffbc\u0103" +
    "\uffbc\001\002\000\010\037\uffba\040\u0103\u0103\uffba\001\002" +
    "\000\006\037\uffbb\u0103\uffbb\001\002\000\006\037\ufead\u0103" +
    "\ufead\001\002\000\006\037\ufea8\u0103\ufea8\001\002\000\006" +
    "\344\u01fb\372\u01f9\001\002\000\006\037\ufea9\u0103\ufea9\001" +
    "\002\000\010\012\052\050\053\221\u01f1\001\002\000\006" +
    "\012\052\050\053\001\002\000\006\037\ufeac\u0103\ufeac\001" +
    "\002\000\006\037\ufeab\u0103\ufeab\001\002\000\006\037\ufeae" +
    "\u0103\ufeae\001\002\000\006\012\052\050\053\001\002\000" +
    "\006\012\052\050\053\001\002\000\006\037\ufeaa\u0103\ufeaa" +
    "\001\002\000\006\052\u0115\076\ufe9f\001\002\000\004\076" +
    "\ufea0\001\002\000\006\012\052\050\053\001\002\000\004" +
    "\076\u0117\001\002\000\004\157\010\001\002\000\006\037" +
    "\ufea1\u0103\ufea1\001\002\000\004\055\u011a\001\002\000\020" +
    "\037\uff75\076\uff75\257\uff75\307\uff75\326\uff75\u0103\uff75\u015f" +
    "\uff75\001\002\000\010\060\u011e\066\u011d\306\u0121\001\002" +
    "\000\006\037\ufe9e\u0103\ufe9e\001\002\000\004\163\u01e0\001" +
    "\002\000\022\012\052\050\053\077\ufece\141\ufece\156\u012e" +
    "\174\u0132\266\ufece\336\ufece\001\002\000\006\037\ufe9b\u0103" +
    "\ufe9b\001\002\000\006\037\ufe9d\u0103\ufe9d\001\002\000\014" +
    "\012\ufe8e\050\ufe8e\150\ufe8e\163\u0123\174\u0124\001\002\000" +
    "\010\037\ufe8c\040\u012a\u0103\ufe8c\001\002\000\010\012\uffde" +
    "\050\uffde\150\350\001\002\000\010\012\ufe8f\050\ufe8f\150" +
    "\ufe8f\001\002\000\010\012\uffde\050\uffde\150\350\001\002" +
    "\000\006\012\052\050\053\001\002\000\010\037\ufe91\040" +
    "\ufe91\u0103\ufe91\001\002\000\006\012\052\050\053\001\002" +
    "\000\010\037\ufe90\040\ufe90\u0103\ufe90\001\002\000\014\012" +
    "\ufe8e\050\ufe8e\150\ufe8e\163\u0123\174\u0124\001\002\000\006" +
    "\037\ufe92\u0103\ufe92\001\002\000\010\037\ufe8c\040\u012a\u0103" +
    "\ufe8c\001\002\000\006\037\ufe8d\u0103\ufe8d\001\002\000\006" +
    "\012\052\050\053\001\002\000\012\037\ufef4\040\ufef4\055" +
    "\ufef4\u0103\ufef4\001\002\000\012\037\ufef5\040\ufef5\055\ufef5" +
    "\u0103\ufef5\001\002\000\010\037\ufef1\040\u01d9\u0103\ufef1\001" +
    "\002\000\006\012\052\050\053\001\002\000\042\050\u017d" +
    "\240\u017b\303\u0189\364\u0180\376\u0187\u0104\u0181\u0111\u0178\u011a" +
    "\u0182\u011d\u0177\u0120\u0184\u0133\u0183\u013f\u017a\u0149\u0179\u014c\u017c" +
    "\u0159\u0186\u015a\u017f\001\002\000\012\077\u0136\141\u0137\266" +
    "\u013a\336\u0138\001\002\000\012\037\ufef3\040\ufef3\055\ufef3" +
    "\u0103\ufef3\001\002\000\004\203\u015a\001\002\000\006\052" +
    "\ufefa\241\u014d\001\002\000\004\203\u014a\001\002\000\012" +
    "\037\ufeba\040\ufeba\055\ufeba\u0103\ufeba\001\002\000\010\052" +
    "\ufec7\152\u013b\236\u013c\001\002\000\032\037\ufec9\040\ufec9" +
    "\052\ufec9\055\ufec9\077\ufec9\102\ufec9\141\ufec9\156\ufec9\174" +
    "\ufec9\266\ufec9\336\ufec9\u0103\ufec9\001\002\000\032\037\ufec8" +
    "\040\ufec8\052\ufec8\055\ufec8\077\ufec8\102\ufec8\141\ufec8\156" +
    "\ufec8\174\ufec8\266\ufec8\336\ufec8\u0103\ufec8\001\002\000\004" +
    "\052\u013e\001\002\000\006\012\052\050\053\001\002\000" +
    "\012\037\ufeb8\040\ufeb8\055\ufeb8\u0103\ufeb8\001\002\000\012" +
    "\040\uff65\055\uff65\267\u0142\370\u0141\001\002\000\046\012" +
    "\uff67\016\uff67\017\uff67\020\uff67\022\uff67\037\uff67\040\uff67" +
    "\050\uff67\052\uff67\055\uff67\074\uff67\244\uff67\377\uff67\u0103" +
    "\uff67\u012c\uff67\u0131\uff67\u013c\uff67\u013d\uff67\001\002\000\046" +
    "\012\uff66\016\uff66\017\uff66\020\uff66\022\uff66\037\uff66\040" +
    "\uff66\050\uff66\052\uff66\055\uff66\074\uff66\244\uff66\377\uff66" +
    "\u0103\uff66\u012c\uff66\u0131\uff66\u013c\uff66\u013d\uff66\001\002\000" +
    "\006\040\u0145\055\ufeb3\001\002\000\004\055\u0149\001\002" +
    "\000\006\012\052\050\053\001\002\000\012\040\uff65\055" +
    "\uff65\267\u0142\370\u0141\001\002\000\006\040\u0145\055\ufeb3" +
    "\001\002\000\004\055\ufeb4\001\002\000\012\037\ufeb5\040" +
    "\ufeb5\055\ufeb5\u0103\ufeb5\001\002\000\010\052\ufec7\152\u013b" +
    "\236\u013c\001\002\000\004\052\u013e\001\002\000\012\037" +
    "\ufeb9\040\ufeb9\055\ufeb9\u0103\ufeb9\001\002\000\006\074\u0152" +
    "\244\u0154\001\002\000\004\052\u014f\001\002\000\036\012" +
    "\uff93\016\uff93\017\uff93\020\uff93\022\uff93\050\uff93\052\uff93" +
    "\241\144\244\uff93\377\uff93\u012c\uff93\u0131\uff93\u013c\uff93\u013d" +
    "\uff93\001\002\000\004\055\u0151\001\002\000\012\037\ufeb6" +
    "\040\ufeb6\055\ufeb6\u0103\ufeb6\001\002\000\004\105\u0155\001" +
    "\002\000\032\037\ufefb\040\ufefb\052\ufefb\055\ufefb\077\ufefb" +
    "\102\ufefb\140\ufefb\141\ufefb\174\ufefb\266\ufefb\336\ufefb\u0103" +
    "\ufefb\001\002\000\032\037\ufef8\040\ufef8\052\ufef8\055\ufef8" +
    "\077\ufef8\102\ufef8\140\ufef8\141\ufef8\174\ufef8\266\ufef8\336" +
    "\ufef8\u0103\ufef8\001\002\000\034\037\ufef6\040\ufef6\052\ufef6" +
    "\055\ufef6\077\ufef6\102\ufef6\140\ufef6\141\ufef6\174\ufef6\241" +
    "\u0156\266\ufef6\336\ufef6\u0103\ufef6\001\002\000\034\037\ufed4" +
    "\040\ufed4\052\ufed4\055\ufed4\077\ufed4\102\ufed4\140\ufed4\141" +
    "\ufed4\174\ufed4\244\u0159\266\ufed4\336\ufed4\u0103\ufed4\001\002" +
    "\000\032\037\ufef9\040\ufef9\052\ufef9\055\ufef9\077\ufef9\102" +
    "\ufef9\140\ufef9\141\ufef9\174\ufef9\266\ufef9\336\ufef9\u0103\ufef9" +
    "\001\002\000\032\037\ufef7\040\ufef7\052\ufef7\055\ufef7\077" +
    "\ufef7\102\ufef7\140\ufef7\141\ufef7\174\ufef7\266\ufef7\336\ufef7" +
    "\u0103\ufef7\001\002\000\032\037\ufed5\040\ufed5\052\ufed5\055" +
    "\ufed5\077\ufed5\102\ufed5\140\ufed5\141\ufed5\174\ufed5\266\ufed5" +
    "\336\ufed5\u0103\ufed5\001\002\000\004\052\u015b\001\002\000" +
    "\006\012\052\050\053\001\002\000\004\102\u015d\001\002" +
    "\000\006\012\052\050\053\001\002\000\020\037\ufec3\040" +
    "\ufec3\052\u015f\055\ufec3\241\ufec3\u0103\ufec3\u015f\ufec3\001\002" +
    "\000\006\012\052\050\053\001\002\000\016\037\ufec1\040" +
    "\ufec1\055\ufec1\241\ufec1\u0103\ufec1\u015f\u0161\001\002\000\006" +
    "\262\u0165\274\u0166\001\002\000\014\037\ufefa\040\ufefa\055" +
    "\ufefa\241\u014d\u0103\ufefa\001\002\000\012\037\ufeb7\040\ufeb7" +
    "\055\ufeb7\u0103\ufeb7\001\002\000\032\037\ufec1\040\ufec1\055" +
    "\ufec1\077\ufec1\102\ufec1\141\ufec1\174\ufec1\241\ufec1\266\ufec1" +
    "\336\ufec1\u0103\ufec1\u015f\u0161\001\002\000\006\133\u0169\176" +
    "\u0168\001\002\000\006\133\u0169\176\u0168\001\002\000\032" +
    "\037\ufebf\040\ufebf\055\ufebf\077\ufebf\102\ufebf\141\ufebf\174" +
    "\ufebf\241\ufebf\266\ufebf\336\ufebf\u0103\ufebf\u015f\ufebf\001\002" +
    "\000\006\244\u016c\257\u016a\001\002\000\032\037\ufebc\040" +
    "\ufebc\055\ufebc\077\ufebc\102\ufebc\141\ufebc\174\ufebc\241\ufebc" +
    "\266\ufebc\336\ufebc\u0103\ufebc\u015f\ufebc\001\002\000\032\037" +
    "\ufebd\040\ufebd\055\ufebd\077\ufebd\102\ufebd\141\ufebd\174\ufebd" +
    "\241\ufebd\266\ufebd\336\ufebd\u0103\ufebd\u015f\ufebd\001\002\000" +
    "\032\037\ufebb\040\ufebb\055\ufebb\077\ufebb\102\ufebb\141\ufebb" +
    "\174\ufebb\241\ufebb\266\ufebb\336\ufebb\u0103\ufebb\u015f\ufebb\001" +
    "\002\000\032\037\ufebe\040\ufebe\055\ufebe\077\ufebe\102\ufebe" +
    "\141\ufebe\174\ufebe\241\ufebe\266\ufebe\336\ufebe\u0103\ufebe\u015f" +
    "\ufebe\001\002\000\032\037\ufec0\040\ufec0\055\ufec0\077\ufec0" +
    "\102\ufec0\141\ufec0\174\ufec0\241\ufec0\266\ufec0\336\ufec0\u0103" +
    "\ufec0\u015f\ufec0\001\002\000\030\037\ufec2\040\ufec2\055\ufec2" +
    "\077\ufec2\102\ufec2\141\ufec2\174\ufec2\241\ufec2\266\ufec2\336" +
    "\ufec2\u0103\ufec2\001\002\000\004\055\u0170\001\002\000\032" +
    "\037\ufec4\040\ufec4\055\ufec4\077\ufec4\102\ufec4\141\ufec4\174" +
    "\ufec4\241\ufec4\266\ufec4\336\ufec4\u0103\ufec4\u015f\ufec4\001\002" +
    "\000\006\040\u0173\055\ufeb0\001\002\000\004\055\u0176\001" +
    "\002\000\006\012\052\050\053\001\002\000\006\040\u0173" +
    "\055\ufeb0\001\002\000\004\055\ufeb1\001\002\000\004\102" +
    "\ufeb2\001\002\000\062\005\uffce\037\uffce\040\uffce\052\uffce" +
    "\053\uffce\055\uffce\074\uffce\076\uffce\077\uffce\102\uffce\137" +
    "\uffce\140\uffce\141\uffce\160\uffce\174\uffce\241\uffce\244\uffce" +
    "\257\uffce\266\uffce\334\uffce\336\uffce\u0103\uffce\u0166\uffce\u0169" +
    "\uffce\001\002\000\062\005\uffd3\037\uffd3\040\uffd3\052\uffd3" +
    "\053\uffd3\055\uffd3\074\uffd3\076\uffd3\077\uffd3\102\uffd3\137" +
    "\uffd3\140\uffd3\141\uffd3\160\uffd3\174\uffd3\241\uffd3\244\uffd3" +
    "\257\uffd3\266\uffd3\334\uffd3\336\uffd3\u0103\uffd3\u0166\uffd3\u0169" +
    "\uffd3\001\002\000\062\005\uffcd\037\uffcd\040\uffcd\052\uffcd" +
    "\053\uffcd\055\uffcd\074\uffcd\076\uffcd\077\uffcd\102\uffcd\137" +
    "\uffcd\140\uffcd\141\uffcd\160\uffcd\174\uffcd\241\uffcd\244\uffcd" +
    "\257\uffcd\266\uffcd\334\uffcd\336\uffcd\u0103\uffcd\u0166\uffcd\u0169" +
    "\uffcd\001\002\000\062\005\uffd6\037\uffd6\040\uffd6\052\uffd6" +
    "\053\uffd6\055\uffd6\074\uffd6\076\uffd6\077\uffd6\102\uffd6\137" +
    "\uffd6\140\uffd6\141\uffd6\160\uffd6\174\uffd6\241\uffd6\244\uffd6" +
    "\257\uffd6\266\uffd6\334\uffd6\336\uffd6\u0103\uffd6\u0166\uffd6\u0169" +
    "\uffd6\001\002\000\050\037\uffd2\040\uffd2\052\uffd2\053\uffd2" +
    "\055\uffd2\074\uffd2\077\uffd2\102\uffd2\137\uffd2\140\uffd2\141" +
    "\uffd2\160\uffd2\174\uffd2\241\uffd2\244\uffd2\257\uffd2\266\uffd2" +
    "\336\uffd2\u0103\uffd2\001\002\000\062\005\uffd1\037\uffd1\040" +
    "\uffd1\052\uffd1\053\uffd1\055\uffd1\074\uffd1\076\uffd1\077\uffd1" +
    "\102\uffd1\137\uffd1\140\uffd1\141\uffd1\160\uffd1\174\uffd1\241" +
    "\uffd1\244\uffd1\257\uffd1\266\uffd1\334\uffd1\336\uffd1\u0103\uffd1" +
    "\u0166\uffd1\u0169\uffd1\001\002\000\040\240\u017b\303\u0189\364" +
    "\u0180\376\u0187\u0104\u0181\u0111\u0178\u011a\u0182\u011d\u0177\u0120\u0184" +
    "\u0133\u0183\u013f\u017a\u0149\u0179\u014c\u017c\u0159\u0186\u015a\u017f\001" +
    "\002\000\044\037\ufedf\040\ufedf\055\ufedf\074\ufedf\077\ufedf" +
    "\102\ufedf\137\ufedf\140\ufedf\141\ufedf\160\u0191\174\ufedf\241" +
    "\ufedf\244\ufedf\257\ufedf\266\ufedf\336\ufedf\u0103\ufedf\001\002" +
    "\000\062\005\uffd9\037\uffd9\040\uffd9\052\uffd9\053\uffd9\055" +
    "\uffd9\074\uffd9\076\uffd9\077\uffd9\102\uffd9\137\uffd9\140\uffd9" +
    "\141\uffd9\160\uffd9\174\uffd9\241\uffd9\244\uffd9\257\uffd9\266" +
    "\uffd9\334\uffd9\336\uffd9\u0103\uffd9\u0166\uffd9\u0169\uffd9\001\002" +
    "\000\062\005\uffd7\037\uffd7\040\uffd7\052\uffd7\053\uffd7\055" +
    "\uffd7\074\uffd7\076\uffd7\077\uffd7\102\uffd7\137\uffd7\140\uffd7" +
    "\141\uffd7\160\uffd7\174\uffd7\241\uffd7\244\uffd7\257\uffd7\266" +
    "\uffd7\334\uffd7\336\uffd7\u0103\uffd7\u0166\uffd7\u0169\uffd7\001\002" +
    "\000\062\005\uffd5\037\uffd5\040\uffd5\052\uffd5\053\uffd5\055" +
    "\uffd5\074\uffd5\076\uffd5\077\uffd5\102\uffd5\137\uffd5\140\uffd5" +
    "\141\uffd5\160\uffd5\174\uffd5\241\uffd5\244\uffd5\257\uffd5\266" +
    "\uffd5\334\uffd5\336\uffd5\u0103\uffd5\u0166\uffd5\u0169\uffd5\001\002" +
    "\000\062\005\uffcc\037\uffcc\040\uffcc\052\uffcc\053\uffcc\055" +
    "\uffcc\074\uffcc\076\uffcc\077\uffcc\102\uffcc\137\uffcc\140\uffcc" +
    "\141\uffcc\160\uffcc\174\uffcc\241\uffcc\244\uffcc\257\uffcc\266" +
    "\uffcc\334\uffcc\336\uffcc\u0103\uffcc\u0166\uffcc\u0169\uffcc\001\002" +
    "\000\062\005\uffcf\037\uffcf\040\uffcf\052\uffcf\053\uffcf\055" +
    "\uffcf\074\uffcf\076\uffcf\077\uffcf\102\uffcf\137\uffcf\140\uffcf" +
    "\141\uffcf\160\uffcf\174\uffcf\241\uffcf\244\uffcf\257\uffcf\266" +
    "\uffcf\334\uffcf\336\uffcf\u0103\uffcf\u0166\uffcf\u0169\uffcf\001\002" +
    "\000\062\005\uffd8\037\uffd8\040\uffd8\052\uffd8\053\uffd8\055" +
    "\uffd8\074\uffd8\076\uffd8\077\uffd8\102\uffd8\137\uffd8\140\uffd8" +
    "\141\uffd8\160\uffd8\174\uffd8\241\uffd8\244\uffd8\257\uffd8\266" +
    "\uffd8\334\uffd8\336\uffd8\u0103\uffd8\u0166\uffd8\u0169\uffd8\001\002" +
    "\000\046\037\uffc9\040\uffc9\052\u018a\055\uffc9\074\uffc9\077" +
    "\uffc9\102\uffc9\137\uffc9\140\uffc9\141\uffc9\160\uffc9\174\uffc9" +
    "\241\uffc9\244\uffc9\257\uffc9\266\uffc9\336\uffc9\u0103\uffc9\001" +
    "\002\000\062\005\uffcb\037\uffcb\040\uffcb\052\uffcb\053\uffcb" +
    "\055\uffcb\074\uffcb\076\uffcb\077\uffcb\102\uffcb\137\uffcb\140" +
    "\uffcb\141\uffcb\160\uffcb\174\uffcb\241\uffcb\244\uffcb\257\uffcb" +
    "\266\uffcb\334\uffcb\336\uffcb\u0103\uffcb\u0166\uffcb\u0169\uffcb\001" +
    "\002\000\062\005\uffd0\037\uffd0\040\uffd0\052\uffd0\053\uffd0" +
    "\055\uffd0\074\uffd0\076\uffd0\077\uffd0\102\uffd0\137\uffd0\140" +
    "\uffd0\141\uffd0\160\uffd0\174\uffd0\241\uffd0\244\uffd0\257\uffd0" +
    "\266\uffd0\334\uffd0\336\uffd0\u0103\uffd0\u0166\uffd0\u0169\uffd0\001" +
    "\002\000\046\037\uffdb\040\uffdb\052\uffdb\055\uffdb\074\uffdb" +
    "\077\uffdb\102\uffdb\137\uffdb\140\uffdb\141\uffdb\160\uffdb\174" +
    "\uffdb\241\uffdb\244\uffdb\257\uffdb\266\uffdb\336\uffdb\u0103\uffdb" +
    "\001\002\000\062\005\uffd4\037\uffd4\040\uffd4\052\uffd4\053" +
    "\uffd4\055\uffd4\074\uffd4\076\uffd4\077\uffd4\102\uffd4\137\uffd4" +
    "\140\uffd4\141\uffd4\160\uffd4\174\uffd4\241\uffd4\244\uffd4\257" +
    "\uffd4\266\uffd4\334\uffd4\336\uffd4\u0103\uffd4\u0166\uffd4\u0169\uffd4" +
    "\001\002\000\004\016\u018c\001\002\000\044\037\uffdc\040" +
    "\uffdc\055\uffdc\074\uffdc\077\uffdc\102\uffdc\137\uffdc\140\uffdc" +
    "\141\uffdc\160\uffdc\174\uffdc\241\uffdc\244\uffdc\257\uffdc\266" +
    "\uffdc\336\uffdc\u0103\uffdc\001\002\000\006\040\u018d\055\uffc7" +
    "\001\002\000\004\016\u0190\001\002\000\004\055\u018f\001" +
    "\002\000\044\037\uffca\040\uffca\055\uffca\074\uffca\077\uffca" +
    "\102\uffca\137\uffca\140\uffca\141\uffca\160\uffca\174\uffca\241" +
    "\uffca\244\uffca\257\uffca\266\uffca\336\uffca\u0103\uffca\001\002" +
    "\000\004\055\uffc8\001\002\000\006\012\052\050\053\001" +
    "\002\000\042\037\ufeed\040\ufeed\055\ufeed\074\ufee6\077\u01a0" +
    "\102\ufec5\137\u0193\140\u019a\141\u019e\174\u0199\241\u019d\244" +
    "\ufee6\257\u0198\266\u0197\336\u019f\u0103\ufeed\001\002\000\034" +
    "\037\ufed6\040\ufed6\052\u01c0\055\ufed6\077\ufed6\102\ufed6\140" +
    "\ufed6\141\ufed6\174\ufed6\241\ufed6\266\ufed6\336\ufed6\u0103\ufed6" +
    "\001\002\000\012\037\ufef0\040\ufef0\055\ufef0\u0103\ufef0\001" +
    "\002\000\012\037\ufeee\040\ufeee\055\ufeee\u0103\ufeee\001\002" +
    "\000\006\074\u01c7\244\u01c8\001\002\000\032\037\ufec7\040" +
    "\ufec7\055\ufec7\077\ufec7\102\ufec7\141\ufec7\152\u013b\174\ufec7" +
    "\236\u013c\266\ufec7\336\ufec7\u0103\ufec7\001\002\000\014\016" +
    "\u01b9\017\u01b6\020\u01b4\022\u01b5\244\u01b7\001\002\000\006" +
    "\012\052\050\053\001\002\000\026\037\ufed0\040\ufed0\055" +
    "\ufed0\077\ufece\102\ufece\141\ufece\174\u0132\266\ufece\336\ufece" +
    "\u0103\ufed0\001\002\000\004\102\u01ac\001\002\000\026\037" +
    "\ufed0\040\ufed0\055\ufed0\077\ufece\102\ufece\141\ufece\174\u0132" +
    "\266\ufece\336\ufece\u0103\ufed0\001\002\000\006\074\ufee7\244" +
    "\ufee7\001\002\000\006\052\ufefa\241\u014d\001\002\000\004" +
    "\203\u01a2\001\002\000\004\203\u01a1\001\002\000\004\102" +
    "\ufec6\001\002\000\032\037\ufec7\040\ufec7\055\ufec7\077\ufec7" +
    "\102\ufec7\141\ufec7\152\u013b\174\ufec7\236\u013c\266\ufec7\336" +
    "\ufec7\u0103\ufec7\001\002\000\026\037\ufecd\040\ufecd\055\ufecd" +
    "\077\ufecd\102\ufecd\141\ufecd\174\ufecd\266\ufecd\336\ufecd\u0103" +
    "\ufecd\001\002\000\004\052\u01a5\001\002\000\036\012\uff93" +
    "\016\uff93\017\uff93\020\uff93\022\uff93\050\uff93\052\uff93\241" +
    "\144\244\uff93\377\uff93\u012c\uff93\u0131\uff93\u013c\uff93\u013d\uff93" +
    "\001\002\000\004\055\u01a7\001\002\000\026\037\ufeca\040" +
    "\ufeca\055\ufeca\077\ufeca\102\ufeca\141\ufeca\174\ufeca\266\ufeca" +
    "\336\ufeca\u0103\ufeca\001\002\000\012\037\ufee8\040\ufee8\055" +
    "\ufee8\u0103\ufee8\001\002\000\014\077\u01a0\102\ufec5\141\u019e" +
    "\266\u0197\336\u019f\001\002\000\026\037\ufed0\040\ufed0\055" +
    "\ufed0\077\ufece\102\ufece\141\ufece\174\u0132\266\ufece\336\ufece" +
    "\u0103\ufed0\001\002\000\012\037\ufed1\040\ufed1\055\ufed1\u0103" +
    "\ufed1\001\002\000\006\012\052\050\053\001\002\000\034" +
    "\037\ufec3\040\ufec3\052\u015f\055\ufec3\077\ufec3\102\ufec3\141" +
    "\ufec3\174\ufec3\241\ufec3\266\ufec3\336\ufec3\u0103\ufec3\u015f\ufec3" +
    "\001\002\000\032\037\ufec1\040\ufec1\055\ufec1\077\ufec1\102" +
    "\ufec1\141\ufec1\174\ufec1\241\ufec1\266\ufec1\336\ufec1\u0103\ufec1" +
    "\u015f\u0161\001\002\000\030\037\ufefa\040\ufefa\055\ufefa\077" +
    "\ufefa\102\ufefa\141\ufefa\174\ufefa\241\u014d\266\ufefa\336\ufefa" +
    "\u0103\ufefa\001\002\000\026\037\ufecb\040\ufecb\055\ufecb\077" +
    "\ufecb\102\ufecb\141\ufecb\174\ufecb\266\ufecb\336\ufecb\u0103\ufecb" +
    "\001\002\000\012\037\ufee9\040\ufee9\055\ufee9\u0103\ufee9\001" +
    "\002\000\030\074\ufee6\077\u01a0\102\ufec5\137\u0193\140\u019a" +
    "\141\u019e\241\u019d\244\ufee6\257\u0198\266\u0197\336\u019f\001" +
    "\002\000\012\037\ufeef\040\ufeef\055\ufeef\u0103\ufeef\001\002" +
    "\000\034\037\ufedc\040\ufedc\055\ufedc\077\ufedc\102\ufedc\137" +
    "\ufedc\140\ufedc\141\ufedc\174\ufedc\241\ufedc\266\ufedc\336\ufedc" +
    "\u0103\ufedc\001\002\000\034\037\ufedd\040\ufedd\055\ufedd\077" +
    "\ufedd\102\ufedd\137\ufedd\140\ufedd\141\ufedd\174\ufedd\241\ufedd" +
    "\266\ufedd\336\ufedd\u0103\ufedd\001\002\000\034\037\ufedb\040" +
    "\ufedb\055\ufedb\077\ufedb\102\ufedb\137\ufedb\140\ufedb\141\ufedb" +
    "\174\ufedb\241\ufedb\266\ufedb\336\ufedb\u0103\ufedb\001\002\000" +
    "\034\037\ufeda\040\ufeda\055\ufeda\077\ufeda\102\ufeda\137\ufeda" +
    "\140\ufeda\141\ufeda\174\ufeda\241\ufeda\266\ufeda\336\ufeda\u0103" +
    "\ufeda\001\002\000\034\037\ufed8\040\ufed8\055\ufed8\077\ufed8" +
    "\102\ufed8\137\u01ba\140\ufed8\141\ufed8\174\ufed8\241\ufed8\266" +
    "\ufed8\336\ufed8\u0103\ufed8\001\002\000\034\037\ufede\040\ufede" +
    "\055\ufede\077\ufede\102\ufede\137\ufede\140\ufede\141\ufede\174" +
    "\ufede\241\ufede\266\ufede\336\ufede\u0103\ufede\001\002\000\034" +
    "\037\ufed6\040\ufed6\052\u01c0\055\ufed6\077\ufed6\102\ufed6\140" +
    "\ufed6\141\ufed6\174\ufed6\241\ufed6\266\ufed6\336\ufed6\u0103\ufed6" +
    "\001\002\000\032\037\ufefa\040\ufefa\055\ufefa\077\ufefa\102" +
    "\ufefa\140\ufefa\141\ufefa\174\ufefa\241\u014d\266\ufefa\336\ufefa" +
    "\u0103\ufefa\001\002\000\030\037\ufed2\040\ufed2\055\ufed2\077" +
    "\ufed2\102\ufed2\140\u01bd\141\ufed2\174\ufed2\266\ufed2\336\ufed2" +
    "\u0103\ufed2\001\002\000\026\037\ufed3\040\ufed3\055\ufed3\077" +
    "\ufed3\102\ufed3\141\ufed3\174\ufed3\266\ufed3\336\ufed3\u0103\ufed3" +
    "\001\002\000\026\037\ufed0\040\ufed0\055\ufed0\077\ufece\102" +
    "\ufece\141\ufece\174\u0132\266\ufece\336\ufece\u0103\ufed0\001\002" +
    "\000\012\037\ufeec\040\ufeec\055\ufeec\u0103\ufeec\001\002\000" +
    "\004\016\u01c2\001\002\000\032\037\ufed9\040\ufed9\055\ufed9" +
    "\077\ufed9\102\ufed9\140\ufed9\141\ufed9\174\ufed9\241\ufed9\266" +
    "\ufed9\336\ufed9\u0103\ufed9\001\002\000\004\040\u01c3\001\002" +
    "\000\004\016\u01c4\001\002\000\004\055\u01c5\001\002\000" +
    "\032\037\ufed7\040\ufed7\055\ufed7\077\ufed7\102\ufed7\140\ufed7" +
    "\141\ufed7\174\ufed7\241\ufed7\266\ufed7\336\ufed7\u0103\ufed7\001" +
    "\002\000\026\037\ufecc\040\ufecc\055\ufecc\077\ufecc\102\ufecc" +
    "\141\ufecc\174\ufecc\266\ufecc\336\ufecc\u0103\ufecc\001\002\000" +
    "\004\105\u01cc\001\002\000\030\037\ufee5\040\ufee5\055\ufee5" +
    "\077\ufee5\102\ufee5\140\ufee5\141\ufee5\174\ufee5\266\ufee5\336" +
    "\ufee5\u0103\ufee5\001\002\000\030\037\ufed2\040\ufed2\055\ufed2" +
    "\077\ufed2\102\ufed2\140\u01bd\141\ufed2\174\ufed2\266\ufed2\336" +
    "\ufed2\u0103\ufed2\001\002\000\026\037\ufed0\040\ufed0\055\ufed0" +
    "\077\ufece\102\ufece\141\ufece\174\u0132\266\ufece\336\ufece\u0103" +
    "\ufed0\001\002\000\012\037\ufeea\040\ufeea\055\ufeea\u0103\ufeea" +
    "\001\002\000\034\037\ufee1\040\ufee1\055\ufee1\077\ufee1\102" +
    "\ufee1\140\ufee1\141\ufee1\174\ufee1\241\u01ce\244\u01cf\266\ufee1" +
    "\336\ufee1\u0103\ufee1\001\002\000\030\037\ufee4\040\ufee4\055" +
    "\ufee4\077\ufee4\102\ufee4\140\ufee4\141\ufee4\174\ufee4\266\ufee4" +
    "\336\ufee4\u0103\ufee4\001\002\000\004\244\u01d0\001\002\000" +
    "\030\037\ufee2\040\ufee2\055\ufee2\077\ufee2\102\ufee2\140\ufee2" +
    "\141\ufee2\174\ufee2\266\ufee2\336\ufee2\u0103\ufee2\001\002\000" +
    "\030\037\ufee3\040\ufee3\055\ufee3\077\ufee3\102\ufee3\140\ufee3" +
    "\141\ufee3\174\ufee3\266\ufee3\336\ufee3\u0103\ufee3\001\002\000" +
    "\032\037\ufefa\040\ufefa\055\ufefa\077\ufefa\102\ufefa\140\ufefa" +
    "\141\ufefa\174\ufefa\241\u014d\266\ufefa\336\ufefa\u0103\ufefa\001" +
    "\002\000\030\037\ufed2\040\ufed2\055\ufed2\077\ufed2\102\ufed2" +
    "\140\u01bd\141\ufed2\174\ufed2\266\ufed2\336\ufed2\u0103\ufed2\001" +
    "\002\000\026\037\ufed0\040\ufed0\055\ufed0\077\ufece\102\ufece" +
    "\141\ufece\174\u0132\266\ufece\336\ufece\u0103\ufed0\001\002\000" +
    "\012\037\ufeeb\040\ufeeb\055\ufeeb\u0103\ufeeb\001\002\000\042" +
    "\037\ufee0\040\ufee0\055\ufee0\074\ufee0\077\ufee0\102\ufee0\137" +
    "\ufee0\140\ufee0\141\ufee0\174\ufee0\241\ufee0\244\ufee0\257\ufee0" +
    "\266\ufee0\336\ufee0\u0103\ufee0\001\002\000\004\053\u01d7\001" +
    "\002\000\046\037\uffda\040\uffda\052\uffda\055\uffda\074\uffda" +
    "\077\uffda\102\uffda\137\uffda\140\uffda\141\uffda\160\uffda\174" +
    "\uffda\241\uffda\244\uffda\257\uffda\266\uffda\336\uffda\u0103\uffda" +
    "\001\002\000\014\077\ufecf\102\ufecf\141\ufecf\266\ufecf\336" +
    "\ufecf\001\002\000\022\012\052\050\053\077\ufece\141\ufece" +
    "\156\u012e\174\u0132\266\ufece\336\ufece\001\002\000\006\037" +
    "\ufe9c\u0103\ufe9c\001\002\000\012\037\ufef1\040\u01d9\055\ufef1" +
    "\u0103\ufef1\001\002\000\010\037\ufef2\055\ufef2\u0103\ufef2\001" +
    "\002\000\010\052\ufec7\152\u013b\236\u013c\001\002\000\004" +
    "\052\u013e\001\002\000\012\037\ufeaf\040\ufeaf\055\ufeaf\u0103" +
    "\ufeaf\001\002\000\006\012\052\050\053\001\002\000\046" +
    "\050\u017d\060\u01e3\240\u017b\303\u0189\306\u01e4\364\u0180\376" +
    "\u0187\u0104\u0181\u0111\u0178\u011a\u0182\u011d\u0177\u0120\u0184\u0133\u0183" +
    "\u013f\u017a\u0149\u0179\u014c\u017c\u0159\u0186\u015a\u017f\001\002\000" +
    "\012\037\ufedf\160\u0191\244\ufedf\u0103\ufedf\001\002\000\006" +
    "\140\ufe96\241\ufe96\001\002\000\006\140\ufe95\241\ufe95\001" +
    "\002\000\006\140\u01e8\241\u01e9\001\002\000\006\037\ufe9a" +
    "\u0103\ufe9a\001\002\000\006\037\ufe99\u0103\ufe99\001\002\000" +
    "\006\037\ufe94\u0103\ufe94\001\002\000\004\074\u01eb\001\002" +
    "\000\006\037\ufe98\u0103\ufe98\001\002\000\004\105\u01ec\001" +
    "\002\000\006\037\ufe93\u0103\ufe93\001\002\000\010\037\ufed4" +
    "\244\u0159\u0103\ufed4\001\002\000\006\037\ufe97\u0103\ufe97\001" +
    "\002\000\006\037\ufea2\u0103\ufea2\001\002\000\006\160\ufea6" +
    "\176\ufea6\001\002\000\006\160\ufea5\176\ufea5\001\002\000" +
    "\006\160\u01f3\176\u01f5\001\002\000\006\012\052\050\053" +
    "\001\002\000\006\037\ufea7\u0103\ufea7\001\002\000\004\132" +
    "\u01f6\001\002\000\004\u010b\u01f7\001\002\000\006\037\ufea3" +
    "\u0103\ufea3\001\002\000\006\037\ufea4\u0103\ufea4\001\002\000" +
    "\006\012\ufe74\050\ufe74\001\002\000\006\012\052\050\053" +
    "\001\002\000\006\012\ufe75\050\ufe75\001\002\000\014\037" +
    "\u01fd\042\ufe72\074\ufe72\076\ufe72\334\ufe72\001\002\000\004" +
    "\016\u0238\001\002\000\012\042\u0202\074\ufe70\076\ufe70\334" +
    "\ufe70\001\002\000\010\074\ufe62\076\ufe62\334\u0215\001\002" +
    "\000\044\012\052\050\053\240\u0204\303\u0189\364\u0180\376" +
    "\u0187\u0104\u0181\u0111\u0178\u011a\u0182\u011d\u0177\u0120\u0184\u0133\u0183" +
    "\u013f\u017a\u0149\u0179\u014c\u017c\u0159\u0186\u015a\u017f\001\002\000" +
    "\010\074\ufe71\076\ufe71\334\ufe71\001\002\000\004\012\u0203" +
    "\001\002\000\052\012\uffdd\037\uffdd\050\uffdd\240\uffdd\303" +
    "\uffdd\334\uffdd\364\uffdd\376\uffdd\u0103\uffdd\u0104\uffdd\u0111\uffdd" +
    "\u011a\uffdd\u011d\uffdd\u0120\uffdd\u0133\uffdd\u013f\uffdd\u0149\uffdd\u014c" +
    "\uffdd\u0159\uffdd\u015a\uffdd\001\002\000\022\005\uffd2\040\uffd2" +
    "\074\uffd2\076\uffd2\334\uffd2\u015d\u0213\u0166\uffd2\u0169\uffd2\001" +
    "\002\000\004\u016a\u0212\001\002\000\012\040\u0210\074\ufe6d" +
    "\076\ufe6d\334\ufe6d\001\002\000\020\005\u0209\040\ufe68\074" +
    "\ufe68\076\ufe68\334\ufe68\u0166\ufe68\u0169\ufe68\001\002\000\016" +
    "\040\ufe66\074\ufe66\076\ufe66\334\ufe66\u0166\u020d\u0169\u020c\001" +
    "\002\000\004\257\u020a\001\002\000\016\040\ufe69\074\ufe69" +
    "\076\ufe69\334\ufe69\u0166\ufe69\u0169\ufe69\001\002\000\012\040" +
    "\ufe6c\074\ufe6c\076\ufe6c\334\ufe6c\001\002\000\012\040\ufe65" +
    "\074\ufe65\076\ufe65\334\ufe65\001\002\000\012\040\ufe64\074" +
    "\ufe64\076\ufe64\334\ufe64\001\002\000\012\040\ufe67\074\ufe67" +
    "\076\ufe67\334\ufe67\001\002\000\010\074\ufe6f\076\ufe6f\334" +
    "\ufe6f\001\002\000\004\042\u0202\001\002\000\010\074\ufe6e" +
    "\076\ufe6e\334\ufe6e\001\002\000\012\040\ufe6a\074\ufe6a\076" +
    "\ufe6a\334\ufe6a\001\002\000\006\u0166\u020d\u0169\u020c\001\002" +
    "\000\012\040\ufe6b\074\ufe6b\076\ufe6b\334\ufe6b\001\002\000" +
    "\012\332\u022c\335\u0228\u016b\u022b\u0173\u022e\001\002\000\006" +
    "\074\u0218\076\ufe54\001\002\000\004\076\u021a\001\002\000" +
    "\004\105\u0219\001\002\000\004\076\ufe55\001\002\000\014" +
    "\111\u021e\157\010\164\027\262\037\274\040\001\002\000" +
    "\006\037\ufe76\u0103\ufe76\001\002\000\006\037\046\u0103\047" +
    "\001\002\000\006\037\ufe52\u0103\ufe52\001\002\000\012\157" +
    "\010\164\027\262\037\274\040\001\002\000\004\316\u0220" +
    "\001\002\000\006\037\ufe53\u0103\ufe53\001\002\000\020\037" +
    "\ufe4f\157\010\164\027\262\037\274\040\316\ufe4f\u0103\ufe4f" +
    "\001\002\000\006\037\046\u0103\047\001\002\000\010\037" +
    "\ufe51\316\ufe51\u0103\ufe51\001\002\000\020\037\ufe4d\157\010" +
    "\164\027\262\037\274\040\316\ufe4d\u0103\ufe4d\001\002\000" +
    "\006\037\046\u0103\047\001\002\000\010\037\ufe50\316\ufe50" +
    "\u0103\ufe50\001\002\000\010\037\ufe4e\316\ufe4e\u0103\ufe4e\001" +
    "\002\000\004\076\ufe5d\001\002\000\010\040\u0236\074\ufe5a" +
    "\076\ufe5a\001\002\000\006\074\ufe63\076\ufe63\001\002\000" +
    "\010\040\ufe60\074\ufe60\076\ufe60\001\002\000\004\076\ufe5c" +
    "\001\002\000\004\076\u022f\001\002\000\010\040\ufe5f\074" +
    "\ufe5f\076\ufe5f\001\002\000\014\012\052\050\053\u0170\u0230" +
    "\u0171\u0234\u0172\u0232\001\002\000\010\040\ufe59\074\ufe59\076" +
    "\ufe59\001\002\000\010\040\ufe56\074\ufe56\076\ufe56\001\002" +
    "\000\010\040\ufe57\074\ufe57\076\ufe57\001\002\000\010\040" +
    "\ufe5e\074\ufe5e\076\ufe5e\001\002\000\010\040\ufe58\074\ufe58" +
    "\076\ufe58\001\002\000\006\074\ufe61\076\ufe61\001\002\000" +
    "\012\332\u022c\335\u0228\u016b\u022b\u0173\u022e\001\002\000\006" +
    "\074\ufe5b\076\ufe5b\001\002\000\012\042\ufe73\074\ufe73\076" +
    "\ufe73\334\ufe73\001\002\000\010\012\uff5c\050\uff5c\172\u023b" +
    "\001\002\000\006\012\052\050\053\001\002\000\006\012" +
    "\uff5d\050\uff5d\001\002\000\010\052\u0115\257\uff5a\307\uff5a" +
    "\001\002\000\006\257\uff5b\307\uff5b\001\002\000\006\257" +
    "\u023f\307\u0240\001\002\000\004\307\u0255\001\002\000\004" +
    "\052\u0242\001\002\000\006\037\uff5e\u0103\uff5e\001\002\000" +
    "\014\016\u0249\017\u0247\020\u0244\022\u0245\257\u0243\001\002" +
    "\000\006\040\uff58\055\uff58\001\002\000\006\040\uff55\055" +
    "\uff55\001\002\000\006\040\uff56\055\uff56\001\002\000\004" +
    "\055\u024e\001\002\000\006\040\uff54\055\uff54\001\002\000" +
    "\006\040\u024a\055\uff52\001\002\000\006\040\uff57\055\uff57" +
    "\001\002\000\014\016\u0249\017\u0247\020\u0244\022\u0245\257" +
    "\u0243\001\002\000\004\055\uff59\001\002\000\006\040\u024a" +
    "\055\uff52\001\002\000\004\055\uff53\001\002\000\010\037" +
    "\uff4e\040\u0250\u0103\uff4e\001\002\000\006\037\uff51\u0103\uff51" +
    "\001\002\000\004\052\u0251\001\002\000\014\016\u0249\017" +
    "\u0247\020\u0244\022\u0245\257\u0243\001\002\000\004\055\u0253" +
    "\001\002\000\010\037\uff4e\040\u0250\u0103\uff4e\001\002\000" +
    "\006\037\uff4f\u0103\uff4f\001\002\000\006\037\uff50\u0103\uff50" +
    "\001\002\000\006\037\uff28\u0103\uff28\001\002\000\006\037" +
    "\uff2e\u0103\uff2e\001\002\000\006\037\uff2a\u0103\uff2a\001\002" +
    "\000\006\037\uff29\u0103\uff29\001\002\000\006\012\052\050" +
    "\053\001\002\000\004\012\u0289\001\002\000\010\152\uff08" +
    "\156\uff08\236\uff08\001\002\000\006\037\uff2d\u0103\uff2d\001" +
    "\002\000\006\037\uff2f\u0103\uff2f\001\002\000\006\012\052" +
    "\050\053\001\002\000\006\012\052\050\053\001\002\000" +
    "\006\037\uff2c\u0103\uff2c\001\002\000\006\037\uff2b\u0103\uff2b" +
    "\001\002\000\010\152\u013b\156\ufec7\236\u013c\001\002\000" +
    "\004\156\u0265\001\002\000\006\012\052\050\053\001\002" +
    "\000\004\u015f\u0267\001\002\000\006\012\052\050\053\001" +
    "\002\000\004\052\u0269\001\002\000\006\012\052\050\053" +
    "\001\002\000\014\037\uff01\326\uff01\u0103\uff01\u0110\u026b\u015f" +
    "\uff01\001\002\000\004\052\u0115\001\002\000\012\037\uff7a" +
    "\326\140\u0103\uff7a\u015f\uff7a\001\002\000\010\037\ufeff\u0103" +
    "\ufeff\u015f\u026e\001\002\000\006\012\052\050\053\001\002" +
    "\000\006\037\uff09\u0103\uff09\001\002\000\004\052\u0271\001" +
    "\002\000\006\012\052\050\053\001\002\000\004\055\u0273" +
    "\001\002\000\006\037\uff00\u0103\uff00\001\002\000\012\037" +
    "\uff02\326\uff02\u0103\uff02\u015f\uff02\001\002\000\012\040\uff65" +
    "\055\uff65\267\u0142\370\u0141\001\002\000\004\055\u0277\001" +
    "\002\000\014\037\uff06\326\uff06\u0103\uff06\u0110\uff06\u015f\uff06" +
    "\001\002\000\006\040\u027a\055\uff03\001\002\000\004\055" +
    "\uff05\001\002\000\006\012\052\050\053\001\002\000\012" +
    "\040\uff65\055\uff65\267\u0142\370\u0141\001\002\000\006\040" +
    "\u027a\055\uff03\001\002\000\004\055\uff04\001\002\000\004" +
    "\076\u027f\001\002\000\004\157\010\001\002\000\006\037" +
    "\uff0a\u0103\uff0a\001\002\000\004\052\u0282\001\002\000\022" +
    "\012\052\050\053\077\ufece\141\ufece\156\u012e\174\u0132\266" +
    "\ufece\336\ufece\001\002\000\006\040\u01d9\055\ufef1\001\002" +
    "\000\004\055\u0285\001\002\000\010\037\ufefc\u0103\ufefc\u015f" +
    "\u0287\001\002\000\006\037\ufefe\u0103\ufefe\001\002\000\004" +
    "\336\u0288\001\002\000\006\037\ufefd\u0103\ufefd\001\002\000" +
    "\006\037\uff27\u0103\uff27\001\002\000\012\037\uff23\160\uff23" +
    "\u0103\uff23\u015f\u028c\001\002\000\010\037\uff1c\160\u02b8\u0103" +
    "\uff1c\001\002\000\006\052\uff21\336\u028e\001\002\000\006" +
    "\037\uff26\u0103\uff26\001\002\000\004\052\uff22\001\002\000" +
    "\004\052\u0290\001\002\000\004\u017e\u0295\001\002\000\010" +
    "\037\uff24\160\uff24\u0103\uff24\001\002\000\012\037\uff1f\040" +
    "\u0293\160\uff1f\u0103\uff1f\001\002\000\004\052\u0290\001\002" +
    "\000\010\037\uff20\160\uff20\u0103\uff20\001\002\000\004\005" +
    "\u0296\001\002\000\004\020\u0297\001\002\000\004\040\u0298" +
    "\001\002\000\004\u017f\u0299\001\002\000\004\005\u029a\001" +
    "\002\000\004\020\u029b\001\002\000\006\040\u029d\055\uff1a" +
    "\001\002\000\004\055\u02b7\001\002\000\010\u0118\u02a4\u0184" +
    "\u02a3\u0186\u02a2\001\002\000\006\040\uff17\055\uff17\001\002" +
    "\000\006\040\uff18\055\uff18\001\002\000\006\040\uff19\055" +
    "\uff19\001\002\000\006\040\u029d\055\uff1a\001\002\000\004" +
    "\005\u02b1\001\002\000\004\005\u02ac\001\002\000\004\005" +
    "\u02a5\001\002\000\004\016\u02a6\001\002\000\012\u0180\u02a9" +
    "\u0181\u02aa\u0182\u02a8\u0183\u02ab\001\002\000\006\040\uff16\055" +
    "\uff16\001\002\000\006\040\uff12\055\uff12\001\002\000\006" +
    "\040\uff15\055\uff15\001\002\000\006\040\uff13\055\uff13\001" +
    "\002\000\006\040\uff14\055\uff14\001\002\000\006\016\u02ae" +
    "\u0185\u02af\001\002\000\006\040\uff11\055\uff11\001\002\000" +
    "\012\u0180\u02a9\u0181\u02aa\u0182\u02a8\u0183\u02ab\001\002\000\006" +
    "\040\uff0f\055\uff0f\001\002\000\006\040\uff10\055\uff10\001" +
    "\002\000\004\016\u02b2\001\002\000\020\040\uff0b\055\uff0b" +
    "\u0180\u02a9\u0181\u02aa\u0182\u02a8\u0183\u02ab\u0187\u02b3\001\002\000" +
    "\006\040\uff0c\055\uff0c\001\002\000\006\040\uff0d\055\uff0d" +
    "\001\002\000\006\040\uff0e\055\uff0e\001\002\000\004\055" +
    "\uff1b\001\002\000\012\037\uff1e\040\uff1e\160\uff1e\u0103\uff1e" +
    "\001\002\000\006\012\052\050\053\001\002\000\006\037" +
    "\uff25\u0103\uff25\001\002\000\006\037\uff1d\u0103\uff1d\001\002" +
    "\000\014\012\ufe7d\037\ufe7d\042\ufe7d\050\ufe7d\u0103\ufe7d\001" +
    "\002\000\014\012\052\037\ufe89\042\u0202\050\053\u0103\ufe89" +
    "\001\002\000\014\012\ufe7e\037\ufe7e\042\ufe7e\050\ufe7e\u0103" +
    "\ufe7e\001\002\000\010\037\ufe87\334\u02c2\u0103\ufe87\001\002" +
    "\000\010\037\ufe83\334\ufe83\u0103\ufe83\001\002\000\010\037" +
    "\ufe82\334\ufe82\u0103\ufe82\001\002\000\006\037\ufe8b\u0103\ufe8b" +
    "\001\002\000\004\u0174\u02c4\001\002\000\006\037\ufe8a\u0103" +
    "\ufe8a\001\002\000\010\020\u02c5\037\ufe85\u0103\ufe85\001\002" +
    "\000\006\037\ufe86\u0103\ufe86\001\002\000\006\037\ufe88\u0103" +
    "\ufe88\001\002\000\006\037\ufe7c\u0103\ufe7c\001\002\000\014" +
    "\012\052\037\ufe7f\042\u0202\050\053\u0103\ufe7f\001\002\000" +
    "\006\037\ufe81\u0103\ufe81\001\002\000\006\037\ufe80\u0103\ufe80" +
    "\001\002\000\006\037\ufe7b\u0103\ufe7b\001\002\000\006\037" +
    "\ufe79\u0103\ufe79\001\002\000\014\012\052\037\ufe7f\042\u0202" +
    "\050\053\u0103\ufe7f\001\002\000\006\037\ufe78\u0103\ufe78\001" +
    "\002\000\006\012\052\050\053\001\002\000\006\037\uffb2" +
    "\u0103\uffb2\001\002\000\010\012\052\042\u0202\050\053\001" +
    "\002\000\006\037\ufe84\u0103\ufe84\001\002\000\040\010\uff6f" +
    "\012\uff6f\016\uff6f\017\uff6f\020\uff6f\022\uff6f\050\uff6f\052" +
    "\uff6f\237\uff6f\244\uff6f\377\uff6f\u012c\uff6f\u0131\uff6f\u013c\uff6f" +
    "\u013d\uff6f\001\002\000\040\010\uff70\012\uff70\016\uff70\017" +
    "\uff70\020\uff70\022\uff70\050\uff70\052\uff70\237\uff70\244\uff70" +
    "\377\uff70\u012c\uff70\u0131\uff70\u013c\uff70\u013d\uff70\001\002\000" +
    "\040\010\uff91\012\uff91\016\uff91\017\uff91\020\uff91\022\uff91" +
    "\050\uff91\052\uff91\237\116\244\uff91\377\uff91\u012c\uff91\u0131" +
    "\uff91\u013c\uff91\u013d\uff91\001\002\000\036\010\u02d9\012\052" +
    "\016\152\017\160\020\165\022\146\050\053\052\162\244" +
    "\163\377\156\u012c\145\u0131\164\u013c\161\u013d\157\001\002" +
    "\000\034\012\052\020\u02e0\037\uffaf\040\uffaf\050\053\074" +
    "\uffaf\076\u02df\107\uffaf\126\uffaf\131\uffaf\311\uffaf\326\uffaf" +
    "\u0103\uffaf\001\002\000\022\037\uff3b\074\uff3b\107\u02e5\126" +
    "\uff3b\131\uff3b\311\uff3b\326\uff3b\u0103\uff3b\001\002\000\024" +
    "\037\uff76\040\u02da\074\uff76\107\uff76\126\uff76\131\uff76\311" +
    "\uff76\326\uff76\u0103\uff76\001\002\000\034\012\052\016\152" +
    "\017\160\020\165\022\146\050\053\052\162\244\163\377" +
    "\156\u012c\145\u0131\164\u013c\161\u013d\157\001\002\000\022" +
    "\037\uff78\074\uff78\107\uff78\126\uff78\131\uff78\311\uff78\326" +
    "\uff78\u0103\uff78\001\002\000\034\012\052\020\u02e0\037\uffaf" +
    "\040\uffaf\050\053\074\uffaf\076\u02df\107\uffaf\126\uffaf\131" +
    "\uffaf\311\uffaf\326\uffaf\u0103\uffaf\001\002\000\040\037\uffae" +
    "\040\uffae\074\uffae\107\uffae\112\uffae\126\uffae\127\uffae\131" +
    "\uffae\161\uffae\200\uffae\211\uffae\311\uffae\326\uffae\u0103\uffae" +
    "\u015f\uffae\001\002\000\040\037\uffb0\040\uffb0\074\uffb0\107" +
    "\uffb0\112\uffb0\126\uffb0\127\uffb0\131\uffb0\161\uffb0\200\uffb0" +
    "\211\uffb0\311\uffb0\326\uffb0\u0103\uffb0\u015f\uffb0\001\002\000" +
    "\010\012\052\020\u02e0\050\053\001\002\000\040\037\uffad" +
    "\040\uffad\074\uffad\107\uffad\112\uffad\126\uffad\127\uffad\131" +
    "\uffad\161\uffad\200\uffad\211\uffad\311\uffad\326\uffad\u0103\uffad" +
    "\u015f\uffad\001\002\000\024\037\uff76\040\u02da\074\uff76\107" +
    "\uff76\126\uff76\131\uff76\311\uff76\326\uff76\u0103\uff76\001\002" +
    "\000\022\037\uff77\074\uff77\107\uff77\126\uff77\131\uff77\311" +
    "\uff77\326\uff77\u0103\uff77\001\002\000\040\037\uffb1\040\uffb1" +
    "\074\uffb1\107\uffb1\112\uffb1\126\uffb1\127\uffb1\131\uffb1\161" +
    "\uffb1\200\uffb1\211\uffb1\311\uffb1\326\uffb1\u0103\uffb1\u015f\uffb1" +
    "\001\002\000\020\037\uff7a\074\uff7a\126\uff7a\131\uff7a\311" +
    "\uff7a\326\140\u0103\uff7a\001\002\000\006\012\052\050\053" +
    "\001\002\000\044\012\052\020\u02e0\037\uffaf\040\uffaf\050" +
    "\053\074\uffaf\076\u02df\112\uffaf\126\uffaf\127\uffaf\131\uffaf" +
    "\161\uffaf\200\uffaf\211\uffaf\311\uffaf\326\uffaf\u0103\uffaf\001" +
    "\002\000\034\037\uff37\040\uff37\074\uff37\112\u02ed\126\uff37" +
    "\127\u02eb\131\uff37\161\u02ea\200\uff32\211\u02e9\311\uff37\326" +
    "\uff37\u0103\uff37\001\002\000\004\200\u02f7\001\002\000\006" +
    "\200\uff30\314\u02ee\001\002\000\004\200\uff36\001\002\000" +
    "\006\200\uff30\314\u02ee\001\002\000\022\037\uff39\040\u02f0" +
    "\074\uff39\126\uff39\131\uff39\311\uff39\326\uff39\u0103\uff39\001" +
    "\002\000\006\200\uff30\314\u02ee\001\002\000\004\200\uff31" +
    "\001\002\000\004\200\uff33\001\002\000\006\012\052\050" +
    "\053\001\002\000\020\037\uff3c\074\uff3c\126\uff3c\131\uff3c" +
    "\311\uff3c\326\uff3c\u0103\uff3c\001\002\000\042\012\052\020" +
    "\u02e0\037\uffaf\050\053\074\uffaf\076\u02df\112\uffaf\126\uffaf" +
    "\127\uffaf\131\uffaf\161\uffaf\200\uffaf\211\uffaf\311\uffaf\326" +
    "\uffaf\u0103\uffaf\001\002\000\032\037\uff37\074\uff37\112\u02ed" +
    "\126\uff37\127\u02eb\131\uff37\161\u02ea\200\uff32\211\u02e9\311" +
    "\uff37\326\uff37\u0103\uff37\001\002\000\020\037\uff3a\074\uff3a" +
    "\126\uff3a\131\uff3a\311\uff3a\326\uff3a\u0103\uff3a\001\002\000" +
    "\004\200\uff35\001\002\000\004\200\uff34\001\002\000\006" +
    "\012\052\050\053\001\002\000\014\012\052\020\u02e0\050" +
    "\053\076\u02df\u015f\uffaf\001\002\000\004\u015f\u02fa\001\002" +
    "\000\036\012\uff93\016\uff93\017\uff93\020\uff93\022\uff93\050" +
    "\uff93\052\uff93\241\144\244\uff93\377\uff93\u012c\uff93\u0131\uff93" +
    "\u013c\uff93\u013d\uff93\001\002\000\034\037\uff37\040\uff37\074" +
    "\uff37\112\u02ed\126\uff37\127\u02eb\131\uff37\161\u02ea\200\uff32" +
    "\211\u02e9\311\uff37\326\uff37\u0103\uff37\001\002\000\022\037" +
    "\uff38\040\uff38\074\uff38\126\uff38\131\uff38\311\uff38\326\uff38" +
    "\u0103\uff38\001\002\000\016\037\uff61\074\uff61\126\u02ff\131" +
    "\uff61\311\uff61\u0103\uff61\001\002\000\014\037\uff6c\074\uff6c" +
    "\131\u0306\311\uff6c\u0103\uff6c\001\002\000\004\130\u0300\001" +
    "\002\000\034\012\052\016\152\017\160\020\165\022\146" +
    "\050\053\052\162\244\163\377\156\u012c\145\u0131\164\u013c" +
    "\161\u013d\157\001\002\000\016\037\uff5f\040\u0303\074\uff5f" +
    "\131\uff5f\311\uff5f\u0103\uff5f\001\002\000\014\037\uff62\074" +
    "\uff62\131\uff62\311\uff62\u0103\uff62\001\002\000\034\012\052" +
    "\016\152\017\160\020\165\022\146\050\053\052\162\244" +
    "\163\377\156\u012c\145\u0131\164\u013c\161\u013d\157\001\002" +
    "\000\016\037\uff5f\040\u0303\074\uff5f\131\uff5f\311\uff5f\u0103" +
    "\uff5f\001\002\000\014\037\uff60\074\uff60\131\uff60\311\uff60" +
    "\u0103\uff60\001\002\000\036\012\uff93\016\uff93\017\uff93\020" +
    "\uff93\022\uff93\050\uff93\052\uff93\241\144\244\uff93\377\uff93" +
    "\u012c\uff93\u0131\uff93\u013c\uff93\u013d\uff93\001\002\000\012\037" +
    "\uff6a\074\uff6a\311\u0308\u0103\uff6a\001\002\000\004\130\u030a" +
    "\001\002\000\010\037\uff71\074\uff71\u0103\uff71\001\002\000" +
    "\034\012\052\016\152\017\160\020\165\022\146\050\053" +
    "\052\162\244\163\377\156\u012c\145\u0131\164\u013c\161\u013d" +
    "\157\001\002\000\050\012\uff68\016\uff68\017\uff68\020\uff68" +
    "\022\uff68\037\uff68\050\uff68\052\uff68\074\uff68\160\u030c\244" +
    "\uff68\267\uff68\370\uff68\377\uff68\u0103\uff68\u012c\uff68\u0131\uff68" +
    "\u013c\uff68\u013d\uff68\001\002\000\006\012\052\050\053\001" +
    "\002\000\046\012\uff65\016\uff65\017\uff65\020\uff65\022\uff65" +
    "\037\uff65\050\uff65\052\uff65\074\uff65\244\uff65\267\u0142\370" +
    "\u0141\377\uff65\u0103\uff65\u012c\uff65\u0131\uff65\u013c\uff65\u013d\uff65" +
    "\001\002\000\042\012\052\016\152\017\160\020\165\022" +
    "\146\037\uff63\050\053\052\162\074\uff63\244\163\377\156" +
    "\u0103\uff63\u012c\145\u0131\164\u013c\161\u013d\157\001\002\000" +
    "\010\037\uff6b\074\uff6b\u0103\uff6b\001\002\000\016\037\uff68" +
    "\074\uff68\160\u030c\267\uff68\370\uff68\u0103\uff68\001\002\000" +
    "\014\037\uff65\074\uff65\267\u0142\370\u0141\u0103\uff65\001\002" +
    "\000\010\037\uff64\074\uff64\u0103\uff64\001\002\000\046\012" +
    "\uff69\016\uff69\017\uff69\020\uff69\022\uff69\037\uff69\050\uff69" +
    "\052\uff69\074\uff69\244\uff69\267\uff69\370\uff69\377\uff69\u0103" +
    "\uff69\u012c\uff69\u0131\uff69\u013c\uff69\u013d\uff69\001\002\000\012" +
    "\037\uff6d\074\uff6d\311\uff6d\u0103\uff6d\001\002\000\024\037" +
    "\uff76\040\u02da\074\uff76\107\uff76\126\uff76\131\uff76\311\uff76" +
    "\326\uff76\u0103\uff76\001\002\000\022\037\uff79\074\uff79\107" +
    "\uff79\126\uff79\131\uff79\311\uff79\326\uff79\u0103\uff79\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0315\000\050\003\006\004\042\005\013\006\012\007" +
    "\032\010\020\030\030\044\005\075\027\106\043\116\014" +
    "\124\015\136\040\227\016\253\025\257\003\263\035\265" +
    "\017\340\004\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\076\u02d4\001" +
    "\001\000\004\262\u02d0\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\262\u02cc\266\u02cb\001\001\000\006\262\u02c7\264" +
    "\u02c6\001\001\000\004\262\u02bb\001\001\000\026\137\u025d" +
    "\140\u0261\141\u025c\162\u0257\163\u0260\164\u0262\172\u0256\267" +
    "\u0258\314\u0255\316\u0108\001\001\000\002\001\001\000\004" +
    "\057\u0238\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\230\u010e\231\u010d\234\u010c\235\u0111\237\u0106\267\u0109" +
    "\314\u0107\316\u0108\001\001\000\002\001\001\000\016\031" +
    "\344\032\334\034\341\035\335\037\346\041\345\001\001" +
    "\000\004\011\332\001\001\000\002\001\001\000\004\057" +
    "\311\001\001\000\004\057\114\001\001\000\002\001\001" +
    "\000\004\012\050\001\001\000\004\011\044\001\001\000" +
    "\002\001\001\000\050\003\047\004\042\005\013\006\012" +
    "\007\032\010\020\030\030\044\005\075\027\106\043\116" +
    "\014\124\015\136\040\227\016\253\025\257\003\263\035" +
    "\265\017\340\004\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\341\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\342\062\001\001\000\002\001\001\000\004\343" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\344\071\001\001\000" +
    "\002\001\001\000\004\345\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\075\100\001\001\000\004\346\101" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\347" +
    "\104\001\001\000\002\001\001\000\006\012\106\073\107" +
    "\001\001\000\004\074\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\112\001\001\000\004\074\113" +
    "\001\001\000\002\001\001\000\006\012\123\015\124\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\060\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\302\001\001\000\002\001\001\000\006" +
    "\012\126\125\127\001\001\000\002\001\001\000\004\130" +
    "\130\001\001\000\004\067\140\001\001\000\006\012\123" +
    "\015\132\001\001\000\004\122\134\001\001\000\006\012" +
    "\123\015\135\001\001\000\002\001\001\000\004\122\136" +
    "\001\001\000\002\001\001\000\006\056\141\062\142\001" +
    "\001\000\002\001\001\000\020\012\153\017\165\047\150" +
    "\051\152\053\147\054\146\064\154\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\052\263\001\001\000\010\002" +
    "\250\056\245\065\254\001\001\000\002\001\001\000\004" +
    "\050\237\001\001\000\004\020\232\001\001\000\004\063" +
    "\227\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\012\153\017\165\047" +
    "\176\051\152\053\147\054\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\153\017\167\055\170\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\066\202\001\001\000\016\012\153\017\165\047\216\051" +
    "\152\053\147\054\146\001\001\000\002\001\001\000\016" +
    "\012\153\017\165\047\204\051\152\053\147\054\146\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\012\153\017\165\047\206\051\152\053\147\054" +
    "\146\001\001\000\002\001\001\000\016\012\153\017\165" +
    "\047\210\051\152\053\147\054\146\001\001\000\004\061" +
    "\212\001\001\000\016\012\153\017\165\047\214\051\152" +
    "\053\147\054\146\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\061\215\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\153\017\167\055\220\001\001\000" +
    "\002\001\001\000\010\012\153\017\167\055\222\001\001" +
    "\000\002\001\001\000\010\012\153\017\167\055\224\001" +
    "\001\000\002\001\001\000\006\056\141\062\231\001\001" +
    "\000\006\056\141\062\230\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\123\015\234\001\001\000\002\001\001\000\014\012" +
    "\153\017\165\051\242\053\147\054\146\001\001\000\014" +
    "\012\153\017\165\051\240\053\147\054\146\001\001\000" +
    "\002\001\001\000\004\050\241\001\001\000\002\001\001" +
    "\000\004\050\243\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\066\261\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\012\153\017\165\047\260\051\152\053" +
    "\147\054\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\056\256\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\012\153\017\165\053\267\054" +
    "\146\001\001\000\002\001\001\000\012\012\153\017\165" +
    "\053\265\054\146\001\001\000\004\052\266\001\001\000" +
    "\002\001\001\000\004\052\270\001\001\000\002\001\001" +
    "\000\010\012\153\017\167\055\272\001\001\000\002\001" +
    "\001\000\020\012\153\017\165\047\275\051\152\053\147" +
    "\054\146\126\274\001\001\000\004\127\300\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\126\125\301" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\304\013\305\001\001\000\004\014\306" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\310\001\001\000\002\001\001\000\004\117\313\001\001" +
    "\000\002\001\001\000\010\012\123\015\315\120\314\001" +
    "\001\000\002\001\001\000\004\121\326\001\001\000\004" +
    "\123\320\001\001\000\004\012\321\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\123\015\330\001\001\000" +
    "\004\067\327\001\001\000\002\001\001\000\004\122\331" +
    "\001\001\000\002\001\001\000\050\003\333\004\042\005" +
    "\013\006\012\007\032\010\020\030\030\044\005\075\027" +
    "\106\043\116\014\124\015\136\040\227\016\253\025\257" +
    "\003\263\035\265\017\340\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\021\u0100\001" +
    "\001\000\004\021\367\001\001\000\004\021\365\001\001" +
    "\000\002\001\001\000\004\021\357\001\001\000\004\021" +
    "\350\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\123\015\351\001" +
    "\001\000\004\033\353\001\001\000\006\012\123\015\354" +
    "\001\001\000\002\001\001\000\004\033\355\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\304\013\360" +
    "\001\001\000\004\040\362\001\001\000\006\012\304\013" +
    "\363\001\001\000\002\001\001\000\004\040\364\001\001" +
    "\000\002\001\001\000\004\012\366\001\001\000\002\001" +
    "\001\000\006\012\370\042\371\001\001\000\002\001\001" +
    "\000\004\043\372\001\001\000\002\001\001\000\006\012" +
    "\370\042\374\001\001\000\004\043\375\001\001\000\002" +
    "\001\001\000\006\012\123\015\377\001\001\000\002\001" +
    "\001\000\004\012\u0101\001\001\000\004\036\u0103\001\001" +
    "\000\004\012\u0104\001\001\000\002\001\001\000\004\036" +
    "\u0105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\270\u01f9\001\001\000\002\001\001\000" +
    "\006\012\u01ef\232\u01f1\001\001\000\004\012\u01ee\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\123\015\u011a\001\001\000\006\012\304\013\u0112" +
    "\001\001\000\002\001\001\000\006\072\u0113\236\u0115\001" +
    "\001\000\002\001\001\000\006\012\106\073\u0118\001\001" +
    "\000\002\001\001\000\004\075\u0117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\240\u011b" +
    "\241\u011f\246\u011e\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\012\u0132\175\u0130\177\u012f\207\u0133\220\u012e" +
    "\226\u0134\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\247\u0121\250\u0124\001\001\000\004\251\u012a\001\001" +
    "\000\004\021\u0127\001\001\000\002\001\001\000\004\021" +
    "\u0125\001\001\000\004\012\u0126\001\001\000\002\001\001" +
    "\000\004\012\u0128\001\001\000\002\001\001\000\006\247" +
    "\u012b\250\u0124\001\001\000\002\001\001\000\004\251\u012c" +
    "\001\001\000\002\001\001\000\004\012\u01dc\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\176\u01d9\001\001" +
    "\000\004\012\u01d7\001\001\000\010\023\u017d\024\u0184\025" +
    "\u0187\001\001\000\004\221\u0138\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\174\u014d\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\211\u013c\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\222\u013e\001\001\000" +
    "\004\012\u013f\001\001\000\002\001\001\000\004\102\u0142" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\223" +
    "\u0143\001\001\000\002\001\001\000\004\012\u0145\001\001" +
    "\000\004\102\u0146\001\001\000\004\223\u0147\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\211\u014a\001\001" +
    "\000\004\222\u014b\001\001\000\002\001\001\000\004\351" +
    "\u0152\001\001\000\002\001\001\000\006\056\141\062\u014f" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\352\u0156" +
    "\001\001\000\004\204\u0157\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\224\u015b\001\001" +
    "\000\004\012\u0170\001\001\000\002\001\001\000\006\012" +
    "\304\013\u015d\001\001\000\004\213\u015f\001\001\000\004" +
    "\012\u016e\001\001\000\004\214\u0161\001\001\000\004\215" +
    "\u0163\001\001\000\004\174\u0162\001\001\000\002\001\001" +
    "\000\004\214\u016d\001\001\000\004\217\u016c\001\001\000" +
    "\004\217\u0166\001\001\000\002\001\001\000\004\216\u016a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\225\u0171\001" +
    "\001\000\002\001\001\000\004\012\u0173\001\001\000\004" +
    "\225\u0174\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\025" +
    "\u01d5\001\001\000\004\200\u0191\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\u018a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\027\u018d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\u01d4\001\001" +
    "\000\014\210\u019b\212\u019a\354\u0195\356\u0193\357\u0194\001" +
    "\001\000\004\203\u01d0\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\355\u01c8\001\001\000\004\211\u01c5\001" +
    "\001\000\004\201\u01b7\001\001\000\004\012\u01b1\001\001" +
    "\000\006\206\u01b0\207\u01a8\001\001\000\002\001\001\000" +
    "\006\206\u01a7\207\u01a8\001\001\000\002\001\001\000\004" +
    "\174\u01a3\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\211\u01a2\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\056\141\062\u01a5\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\210\u01a9\212\u019a\001\001\000\006\206\u01aa\207\u01a8\001" +
    "\001\000\002\001\001\000\006\012\304\013\u01ac\001\001" +
    "\000\004\213\u01ad\001\001\000\004\214\u01ae\001\001\000" +
    "\004\174\u01af\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\210\u019b\212\u019a\354\u0195\357\u01b2\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\202\u01ba\001\001\000" +
    "\002\001\001\000\004\203\u01c0\001\001\000\004\174\u01bb" +
    "\001\001\000\004\205\u01bd\001\001\000\002\001\001\000" +
    "\006\206\u01be\207\u01a8\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\205\u01c9\001" +
    "\001\000\006\206\u01ca\207\u01a8\001\001\000\002\001\001" +
    "\000\004\353\u01cc\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\174\u01d1" +
    "\001\001\000\004\205\u01d2\001\001\000\006\206\u01d3\207" +
    "\u01a8\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\012" +
    "\u0132\175\u01da\177\u012f\207\u0133\220\u012e\226\u0134\001\001" +
    "\000\002\001\001\000\004\176\u01db\001\001\000\002\001" +
    "\001\000\004\211\u01dd\001\001\000\004\222\u01de\001\001" +
    "\000\002\001\001\000\004\012\u01e0\001\001\000\016\023" +
    "\u01e1\024\u0184\025\u0187\242\u01e5\243\u01e6\244\u01e4\001\001" +
    "\000\004\200\u01ec\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\245\u01e9\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\204\u01ed" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\233\u01f3\001\001\000\004" +
    "\012\u01f7\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\304\013\u01fb\001\001\000\002\001" +
    "\001\000\004\271\u01fd\001\001\000\002\001\001\000\010" +
    "\022\u01ff\272\u01fe\273\u0200\001\001\000\004\301\u0215\001" +
    "\001\000\010\012\u0204\025\u0206\275\u0205\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\274\u020e\001\001\000\004" +
    "\276\u0207\001\001\000\006\277\u020a\300\u020d\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\022\u01ff\273\u0210\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\300\u0213\001\001\000\002\001" +
    "\001\000\010\302\u0229\303\u0228\304\u022c\001\001\000\004" +
    "\307\u0216\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\005\u021b\075\027\106\043\116\014" +
    "\124\015\310\u021a\311\u021c\001\001\000\002\001\001\000" +
    "\004\011\u0220\001\001\000\002\001\001\000\016\005\u021b" +
    "\075\027\106\043\116\014\124\015\311\u021e\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\u0221\075\027" +
    "\106\043\116\014\124\015\312\u0222\001\001\000\004\011" +
    "\u0223\001\001\000\002\001\001\000\016\005\u0224\075\027" +
    "\106\043\116\014\124\015\313\u0225\001\001\000\004\011" +
    "\u0226\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\305\u0234\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\u0230\306\u0232\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\302\u0236\303" +
    "\u0228\304\u022c\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\107\u0239\001\001\000\006\012\123\015\u023b\001" +
    "\001\000\002\001\001\000\006\072\u023c\110\u023d\001\001" +
    "\000\002\001\001\000\004\114\u0240\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\111\u0245" +
    "\112\u0247\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\113\u024a\001\001\000\002\001\001\000\004\112\u024b\001" +
    "\001\000\002\001\001\000\004\113\u024c\001\001\000\002" +
    "\001\001\000\004\115\u024e\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\111\u0251\112\u0247\001\001\000\002" +
    "\001\001\000\004\115\u0253\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u0289\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\123\015\u0280\001\001\000\006\012" +
    "\304\013\u027d\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\211\u0263\001\001\000\002\001\001\000\004\012" +
    "\u0265\001\001\000\002\001\001\000\006\012\123\015\u0267" +
    "\001\001\000\004\165\u0269\001\001\000\006\012\u0274\166" +
    "\u0275\001\001\000\004\170\u026b\001\001\000\004\072\u0273" +
    "\001\001\000\004\067\u026c\001\001\000\004\171\u026e\001" +
    "\001\000\004\012\u026f\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\u0271\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\102\u0277\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\167\u0278\001" +
    "\001\000\002\001\001\000\004\012\u027a\001\001\000\004" +
    "\102\u027b\001\001\000\004\167\u027c\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\075\u027f\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\012\u0132\175\u0282\177" +
    "\u012f\207\u0133\220\u012e\226\u0134\001\001\000\004\176\u0283" +
    "\001\001\000\002\001\001\000\004\173\u0285\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\142\u028c\143\u028a\001\001\000\004\147" +
    "\u02b8\001\001\000\004\144\u028e\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\145\u0290\146\u0291\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\145\u0293\146\u0291\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\151\u029b\001" +
    "\001\000\002\001\001\000\012\153\u02a0\154\u029f\156\u029e" +
    "\160\u029d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\151\u02b5\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\155\u02a6\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\157\u02ac\001\001\000\002\001\001\000\004\155\u02af" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\155\u02b3\161\u02b4\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\u02b9\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\012\u02be\022" +
    "\u02bf\254\u02c0\260\u02bd\001\001\000\002\001\001\000\004" +
    "\255\u02c2\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\256\u02c5\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\u02c8\022\u02c9\261\u02ca\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\012\u02c8\022\u02c9\261\u02cd\001\001" +
    "\000\002\001\001\000\006\012\123\015\u02cf\001\001\000" +
    "\002\001\001\000\010\012\u02be\022\u02bf\260\u02d1\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\057\u02d5\001\001\000\020\012\153\017\165\047\u02d6" +
    "\051\152\053\147\054\146\070\u02d7\001\001\000\010\012" +
    "\u02dc\045\u0314\046\u02dd\001\001\000\004\131\u02e3\001\001" +
    "\000\004\071\u02da\001\001\000\016\012\153\017\165\047" +
    "\u02db\051\152\053\147\054\146\001\001\000\002\001\001" +
    "\000\010\012\u02dc\045\u02e0\046\u02dd\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\u02dc\046\u02e2\001\001" +
    "\000\002\001\001\000\004\071\u02e1\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\067\u02fc\001\001\000\006" +
    "\012\123\015\u02e5\001\001\000\010\012\u02dc\045\u02e6\046" +
    "\u02dd\001\001\000\006\133\u02eb\134\u02e7\001\001\000\002" +
    "\001\001\000\004\135\u02f5\001\001\000\002\001\001\000" +
    "\004\135\u02f4\001\001\000\004\132\u02f0\001\001\000\004" +
    "\135\u02ee\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\123\015\u02f1\001\001\000\002\001\001\000\010" +
    "\012\u02dc\045\u02f2\046\u02dd\001\001\000\006\133\u02f3\134" +
    "\u02e7\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\123\015\u02f7\001\001\000\010\012" +
    "\u02dc\045\u02f8\046\u02dd\001\001\000\002\001\001\000\006" +
    "\056\141\062\u02fa\001\001\000\006\133\u02fb\134\u02e7\001" +
    "\001\000\002\001\001\000\004\104\u02fd\001\001\000\004" +
    "\077\u0306\001\001\000\002\001\001\000\016\012\153\017" +
    "\165\047\u0300\051\152\053\147\054\146\001\001\000\004" +
    "\105\u0301\001\001\000\002\001\001\000\016\012\153\017" +
    "\165\047\u0303\051\152\053\147\054\146\001\001\000\004" +
    "\105\u0304\001\001\000\002\001\001\000\006\056\141\062" +
    "\u0313\001\001\000\004\100\u0308\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\012\153\017\165\047\u030a\051" +
    "\152\053\147\054\146\001\001\000\004\101\u030c\001\001" +
    "\000\004\012\u0312\001\001\000\004\102\u030d\001\001\000" +
    "\020\012\153\017\165\047\u030f\051\152\053\147\054\146" +
    "\103\u030e\001\001\000\002\001\001\000\004\101\u0310\001" +
    "\001\000\004\102\u0311\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\071\u0315\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


 

    public LinkedList<String> SyntacticErrors = new LinkedList<String>();
    private Symbol s;

    public final Class getSymbolContainer() {
    return sym.class;
    }


    public void syntax_error(Symbol cur_token){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        List<Integer> ids = expected_token_ids();
        LinkedList<String> list = new LinkedList<String>();
	  for (Integer expected : ids) {
		  list.add(symbl_name_from_id(expected));
                  list.add("    ");
        }
        SyntacticErrors.add("* Error Sintactico. Columna: " + (s.left+1) + " Linea: " + (s.right+1) + ". Simbolo: \'" + s.value + "\' * Mensaje Error: Se esperaba: " + list);
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) cur_token);
        List<Integer> ids = expected_token_ids();
        LinkedList<String> list = new LinkedList<String>();
	  for (Integer expected : ids) {
		  list.add(symbl_name_from_id(expected));
                  list.add("    ");
        }
        SyntacticErrors.add("* Error Sintactico. Columna: " + (s.left+1) + " Linea: " + (s.right+1) + ". Simbolo: \'" + s.value + "\' * Mensaje Error: Se esperaba: " + list);
    }


    public String symbl_name_from_id(int id) {
	  Field[] fields = getSymbolContainer().getFields();
	  for(Field f : fields){
		  try {
			if (f.getInt(null)==id)
			  return f.getName();
		} catch (IllegalArgumentException e) {
			//e.printStackTrace();
		} catch (IllegalAccessException e) {
			//e.printStackTrace();
		}
	  }
	  return "Simbolo Invalido id";
    }
   

     public List<Integer> expected_token_ids() {
        List<Integer> ret = new LinkedList<Integer>();
	  int parse_state = ((Symbol)stack.peek()).parse_state ;
	  short[] row = action_tab[parse_state];
	  for (int i = 0; i<row.length; i+=2){
		  if (row[i]==-1) continue;
		  if (!validate_expected_symbol(row[i])) continue;
		  ret.add(new Integer(row[i]));
	  }
	  return ret;

    }

    protected static final int _error_sync_size(){
    return 1;
    }

    private boolean validate_expected_symbol(int id){
	  short lhs,rhs_size;
	  int act;
	  try {
		  virtual_parse_stack vstack = new virtual_parse_stack(stack);
		  for (;;)
		  {
			  act = get_action(vstack.top(), id);

			  if (act == 0) return false;

			  if (act > 0)
			  {
				  vstack.push(act-1);

				  if (!advance_lookahead()) return true;
			  }
			  else
			  {
				  if ((-act)-1 == start_production())  return true;

				  lhs = production_tab[(-act)-1][0];
				  rhs_size = production_tab[(-act)-1][1];
				  for (int i = 0; i < rhs_size; i++) vstack.pop();

				  vstack.push(get_reduce(vstack.top(), lhs));
			  }
		  }

	  } catch (Exception e) {
		  e.printStackTrace();
	  }
	  return true;
  }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // CursorDeclareg ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareg",229, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // CursorDeclareg ::= OF ColumnListA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareg",229, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // CursorDeclaref ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaref",228, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // CursorDeclaref ::= FOR UPDATE CursorDeclareg 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaref",228, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // CursorDeclaree ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaree",227, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // CursorDeclaree ::= TYPE_WARNING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclaree",227, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // CursorDeclared ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // CursorDeclared ::= OPTIMISTIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // CursorDeclared ::= SCROLL_LOCKS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // CursorDeclared ::= READ_ONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclared",226, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // CursorDeclarec ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // CursorDeclarec ::= FAST_FORWARD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // CursorDeclarec ::= DYNAMIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // CursorDeclarec ::= KEYSET 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // CursorDeclarec ::= STATIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarec",225, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // CursorDeclareb ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // CursorDeclareb ::= FORWARD_ONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // CursorDeclareb ::= SCROLL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclareb",224, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // CursorDeclarea ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // CursorDeclarea ::= GLOBAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // CursorDeclarea ::= LOCAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclarea",223, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // CursorDeclare ::= DECLARE ID CURSOR CursorDeclarea CursorDeclareb CursorDeclarec CursorDeclared CursorDeclaree FOR Select CursorDeclaref 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CursorDeclare",222, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // StmtSP2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP2",201, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // StmtSP2 ::= DML Final 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP2",201, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // StmtSP1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP1",200, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // StmtSP1 ::= DML Final StmtSP2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP1",200, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // StmtSP ::= DML Final StmtSP1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StmtSP",199, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // StartSP ::= StmtSP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StartSP",198, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // StartSP ::= BEGIN StmtSP END 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("StartSP",198, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // ReplicationSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReplicationSP",197, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // ReplicationSP ::= FOR REPLICATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ReplicationSP",197, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // Clause ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // Clause ::= OWNER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // Clause ::= SELF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // Clause ::= CALLER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Clause",196, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // ProcOptionRec ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOptionRec",195, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // ProcOptionRec ::= Coma ProcOption1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOptionRec",195, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // ClauseExec ::= EXEC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ClauseExec",194, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // ClauseExec ::= EXECUTE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ClauseExec",194, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // ProcOption2 ::= ClauseExec AS Clause 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // ProcOption2 ::= RECOMPILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // ProcOption2 ::= ENCRYPTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption2",193, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // ProcOption1 ::= ProcOption2 ProcOptionRec 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption1",192, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // ProcOption ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption",191, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // ProcOption ::= WITH ProcOption1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ProcOption",191, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // TipoD_SP3 ::= OUTPUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP3",190, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // TipoD_SP3 ::= OUT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP3",190, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // TipoD_SP2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP2",189, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // TipoD_SP2 ::= TipoD_SP3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP2",189, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // TipoD_SP1 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP1",188, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // TipoD_SP1 ::= Igual DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP1",188, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // TipoD_SP ::= ID READONLY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // TipoD_SP ::= CURSOR VARYING TipoD_SP3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // TipoD_SP ::= Tipo_datoA TipoD_SP1 TipoD_SP2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TipoD_SP",187, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // ParamsB_SP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsB_SP",186, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // ParamsB_SP ::= Coma ParamsA_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsB_SP",186, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // ParamsA_SP ::= Variable TipoD_SP ParamsB_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsA_SP",185, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // ParamsSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsSP",184, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // ParamsSP ::= ParamsA_SP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ParamsSP",184, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // NumSP ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NumSP",183, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // NumSP ::= Punto_y_coma Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NumSP",183, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // SP_Reservada ::= PROCEDURE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SP_Reservada",182, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // SP_Reservada ::= PROC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SP_Reservada",182, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // Procedure ::= OrAlter SP_Reservada Object2 NumSP ParamsSP ProcOption ReplicationSP AS StartSP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Procedure",181, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // RollbackA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RollbackA",180, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // RollbackA ::= TranName NameA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RollbackA",180, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // Rollback ::= ROLLBACK RollbackA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Rollback",179, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // CommitA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CommitA",178, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // CommitA ::= TranName NameA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CommitA",178, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // Commit ::= COMMIT CommitA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Commit",177, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // TranName ::= TRANSACTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TranName",176, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // TranName ::= TRAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TranName",176, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // NameA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // NameA ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // NameA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NameA",175, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // Name ::= Variable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Name",174, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // Name ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Name",174, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // SavePoint ::= SAVE TranName Name 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SavePoint",173, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // BeginTranC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranC",172, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // BeginTranC ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranC",172, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // BeginTranB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranB",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // BeginTranB ::= WITH MARK BeginTranC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranB",171, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // BeginTranA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranA",170, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // BeginTranA ::= Name BeginTranB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTranA",170, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // BeginTran ::= BEGIN TranName BeginTranA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BeginTran",169, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // AlterTableDropC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropC",167, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // AlterTableDropC ::= Coma AlterTableDropA AlterTableDropC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropC",167, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // AlterTableDropB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropB",166, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // AlterTableDropB ::= CONSTRAINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropB",166, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // AlterTableDropA ::= COLUMN IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropA",165, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // AlterTableDropA ::= AlterTableDropB IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDropA",165, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // AlterTableDrop ::= DROP AlterTableDropA AlterTableDropC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableDrop",164, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // AlterColumnE ::= NOT FOR REPLICATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnE",163, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // AlterColumnE ::= ROWGUIDCOL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnE",163, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // AlterColumnD ::= DROP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnD",162, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // AlterColumnD ::= ADD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnD",162, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // AlterColumnA ::= Tipo_dato ColumnDefA ColumnDefG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnA",161, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // AlterColumnC ::= AlterColumnD AlterColumnE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnC",160, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // AlterColumnC ::= AlterColumnA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumnC",160, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // AlterColumn ::= ALTER COLUMN ID AlterColumnC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterColumn",159, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // AlterTableA ::= AlterTableDrop 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // AlterTableA ::= ADD CNC CNCA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // AlterTableA ::= AlterColumn 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTableA",158, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // AlterTable ::= TABLE Object3 AlterTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterTable",157, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // AlterViewA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterViewA",156, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // AlterViewA ::= ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterViewA",156, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // AlterView ::= VIEW Object2 AlterViewA AS Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterView",155, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // AlterUser ::= USER ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterUser",154, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // AlterDBB ::= SET ROLLBACK IMMEDIATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBB",153, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // AlterDBB ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBB",153, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // AlterDBA ::= CURRENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBA",152, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // AlterDBA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDBA",152, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // AlterDatabase ::= DATABASE AlterDBA AlterDBB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterDatabase",151, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // AlterA ::= Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // AlterA ::= Procedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // AlterA ::= AlterView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // AlterA ::= AlterDatabase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // AlterA ::= AlterUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // AlterA ::= AlterTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AlterA",150, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // Alter ::= ALTER AlterA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alter",149, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // TableIndex ::= INDEX ID ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableIndex",148, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // TableConstrE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrE",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // TableConstrE ::= Coma ID TableConstrE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrE",147, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // TableConstrD ::= Apertura_de_paréntesis ID TableConstrE Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrD",146, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // TableConstrC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrC",145, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // TableConstrC ::= Coma ID OrderB TableConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrC",145, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // TableConstrB ::= Apertura_de_paréntesis ID OrderB TableConstrC Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrB",144, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // TableConstrA ::= CHECK NFR Apertura_de_paréntesis SearchCondition Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // TableConstrA ::= FOREIGN KEY TableConstrD REFERENCES Object2 ColumnConstrE ColumnConstrF NFR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // TableConstrA ::= UNIQUE ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // TableConstrA ::= PRIMARY KEY ColumnConstrC TableConstrB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstrA",143, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // TableConstr ::= ColumnConstrA TableConstrA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TableConstr",142, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // ColumnConstrI ::= SET ColumnConstrH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrI",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // ColumnConstrI ::= CASCADE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrI",141, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // ColumnConstrH ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrH",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // ColumnConstrH ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrH",140, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // ColumnConstrG ::= UPDATE ColumnConstrI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrG",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // ColumnConstrG ::= DELETE ColumnConstrI 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrG",139, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // ColumnConstrF ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrF",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // ColumnConstrF ::= ON ColumnConstrG ColumnConstrF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrF",138, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // ColumnConstrE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrE",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // ColumnConstrE ::= Apertura_de_paréntesis ID Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrE",137, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // ColumnConstrD ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrD",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // ColumnConstrD ::= FOREIGN KEY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrD",136, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // ColumnConstrC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // ColumnConstrC ::= NONCLUSTERED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // ColumnConstrC ::= CLUSTERED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrC",135, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // ColumnConstrB ::= CHECK NFR Apertura_de_paréntesis SearchCondition Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // ColumnConstrB ::= ColumnConstrD REFERENCES Object2 ColumnConstrE ColumnConstrF NFR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // ColumnConstrB ::= UNIQUE ColumnConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // ColumnConstrB ::= PRIMARY KEY ColumnConstrC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrB",134, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // ColumnConstrA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrA",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // ColumnConstrA ::= CONSTRAINT ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstrA",133, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // ColumnConstr ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstr",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // ColumnConstr ::= ColumnConstrA ColumnConstrB ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnConstr",132, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // ColumnDefH ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefH",131, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // ColumnDefH ::= ROWGUIDCOL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefH",131, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // ColumnDefG ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefG",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // ColumnDefG ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefG",130, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // ColumnDefF ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefF",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // ColumnDefF ::= Apertura_de_paréntesis Int Coma Int Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefF",129, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // ColumnDefE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefE",128, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // ColumnDefE ::= IDENTITY ColumnDefF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefE",128, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // ColumnDefD ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // ColumnDefD ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // ColumnDefD ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // ColumnDefD ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // ColumnDefD ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefD",127, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // ColumnDefA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefA",126, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // ColumnDefA ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefA",126, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // ColumnDefV ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // ColumnDefV ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // ColumnDefV ::= NOT NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefV",233, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // ColumnDefW ::= FOR REPLICATION ColumnDefV 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefW",235, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // ColumnDefW ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefW",235, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // ColumnDefX ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefX",234, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // ColumnDefX ::= NOT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefX",234, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // ColumnDefY ::= ColumnConstrB ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // ColumnDefY ::= ROWGUIDCOL ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // ColumnDefY ::= ColumnDefX ColumnDefW ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // ColumnDefY ::= IDENTITY ColumnDefF NFR ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // ColumnDefY ::= DEFAULT ColumnDefD ColumnDefE NFR ColumnDefH ColumnConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefY",237, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // ColumnDefZ ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // ColumnDefZ ::= ColumnDefY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // ColumnDefZ ::= CONSTRAINT ID ColumnDefY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDefZ",236, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // ColumnDef ::= ID Tipo_dato ColumnDefA ColumnDefZ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnDef",125, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // CNCA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNCA",124, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // CNCA ::= Coma CNC CNCA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNCA",124, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // CNC ::= TableIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // CNC ::= TableConstr 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // CNC ::= ColumnDef 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CNC",123, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // NFR2 ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR2",232, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // NFR2 ::= NOT ColumnDefG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR2",232, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // NFR1 ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR1",231, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // NFR1 ::= FOR REPLICATION NFR2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR1",231, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // NFR ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // NFR ::= NOT NFR1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NFR",122, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // FileGroup ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileGroup",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // FileGroup ::= ON PRIMARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileGroup",121, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // CreateTable ::= TABLE Object3 Apertura_de_paréntesis CNC CNCA Cierre_de_paréntesis FileGroup 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateTable",120, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // OptionalOn ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OptionalOn",119, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // OptionalOn ::= ON ID Apertura_de_paréntesis ID Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OptionalOn",119, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // IncludeIndex ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IncludeIndex",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // IncludeIndex ::= INCLUDE ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IncludeIndex",118, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // ColumnIndexB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexB",117, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // ColumnIndexB ::= Coma ID OrderB ColumnIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexB",117, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // ColumnIndexA ::= ID OrderB ColumnIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndexA",116, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // ColumnIndex ::= Apertura_de_paréntesis ColumnIndexA Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnIndex",115, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // CreateIndexA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndexA",114, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // CreateIndexA ::= UNIQUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndexA",114, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // CreateIndex ::= CreateIndexA ColumnConstrC INDEX ID ON Object3 ColumnIndex IncludeIndex Where OptionalOn 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateIndex",113, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // CreateView ::= VIEW Object2 AS Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateView",112, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // Filegrowth_A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // Filegrowth_A ::= MODULAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // Filegrowth_A ::= Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth_A",111, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // Filegrowth ::= FILEGROWTH Igual Int Filegrowth_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Filegrowth",110, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // Maxsize_A ::= UNLIMITED 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize_A",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // Maxsize_A ::= Int Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize_A",109, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // Maxsize ::= MAXSIZE Igual Maxsize_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Maxsize",108, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // Size_A ::= TB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // Size_A ::= GB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // Size_A ::= MB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // Size_A ::= KB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size_A",107, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // Size ::= SIZE Igual Int Size_A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Size",106, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // Optional ::= Filegrowth 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // Optional ::= Maxsize 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // Optional ::= Size 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optional",105, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // Optionals ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optionals",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // Optionals ::= Coma Optional Optionals 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Optionals",103, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // COLLATEDB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLLATEDB",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // COLLATEDB ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("COLLATEDB",101, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // FileSpec ::= Apertura_de_paréntesis NAME Igual String Coma FILENAME Igual String Optionals Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpec",100, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // FileSpecs ::= FileSpec 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpecs",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // FileSpecs ::= FileSpec Coma FileSpecs 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FileSpecs",99, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // Primary ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Primary",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // Primary ::= PRIMARY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Primary",98, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // CreateDBB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBB",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // CreateDBB ::= ON Primary FileSpecs 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBB",97, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // CreateDBA ::= CreateDBB COLLATEDB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDBA",96, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // CreateDB ::= DATABASE ID CreateDBA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateDB",95, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // CreateUser ::= USER Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateUser",94, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // CreateA ::= Function 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // CreateA ::= Procedure 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // CreateA ::= CreateView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // CreateA ::= CreateUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // CreateA ::= CreateIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // CreateA ::= CreateDB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // CreateA ::= CreateTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CreateA",93, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // Create ::= CREATE CreateA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Create",92, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // Outer ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Outer",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // Outer ::= OUTER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Outer",91, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // Type ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // Type ::= FULL Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // Type ::= LEFT Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // Type ::= RIGHT Outer 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // Type ::= INNER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Type",90, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // Join ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Join",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // Join ::= Type JOIN Object3 Alias ON SearchCondition Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Join",89, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // FromSelectA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelectA",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // FromSelectA ::= Coma Object3 Alias Join 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelectA",88, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // FromSelect ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelect",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // FromSelect ::= FROM Object3 Alias Join FromSelectA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromSelect",87, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // FromUpdate ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromUpdate",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // FromUpdate ::= FROM Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromUpdate",86, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // UpdateC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateC",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // UpdateC ::= Coma UpdateA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateC",85, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // UpdateB ::= Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateB",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // UpdateB ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateB",84, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // UpdateA ::= ID Igual UpdateB UpdateC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("UpdateA",83, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // Update ::= UPDATE Top Object3 SET UpdateA FromUpdate Where 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Update",82, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // Server ::= Apertura_de_paréntesis ID Coma Int Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Server",81, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // DeleteC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteC",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // DeleteC ::= Coma Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteC",80, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // DeleteB ::= FROM Object3 DeleteC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteB",79, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // DeleteA ::= Object3 DeleteB Where 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteA",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // DeleteA ::= OPENQUERY Server 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DeleteA",78, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // FromDelete ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromDelete",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // FromDelete ::= FROM 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FromDelete",77, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // Delete ::= DELETE Top FromDelete DeleteA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Delete",76, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // InsertValoresA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValoresA",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // InsertValoresA ::= Coma Apertura_de_paréntesis InsertExpresion Cierre_de_paréntesis InsertValoresA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValoresA",75, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // InsertValores ::= DEFAULT VALUES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValores",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // InsertValores ::= VALUES Apertura_de_paréntesis InsertExpresion Cierre_de_paréntesis InsertValoresA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertValores",74, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // InsertExpresionB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionB",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // InsertExpresionB ::= Coma InsertExpresionA InsertExpresionB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionB",73, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // InsertExpresionA ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // InsertExpresionA ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // InsertExpresionA ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // InsertExpresionA ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // InsertExpresionA ::= DEFAULT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresionA",72, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // InsertExpresion ::= InsertExpresionA InsertExpresionB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertExpresion",71, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // InsertColumnList ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertColumnList",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // InsertColumnList ::= ColumnList 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertColumnList",70, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // InsertInto ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertInto",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // InsertInto ::= INTO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InsertInto",69, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Insert ::= INSERT Top InsertInto Object3 InsertColumnList InsertValores 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Insert",68, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // GroupA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GroupA",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // GroupA ::= Coma Expresion GroupA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("GroupA",67, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Group ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Group",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Group ::= GROUP BY Expresion GroupA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Group",66, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // OrderC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderC",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // OrderC ::= Expresion OrderA OrderB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderC",65, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // OrderB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // OrderB ::= DESC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // OrderB ::= ASC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderB",64, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // OrderA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderA",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // OrderA ::= COLLATE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OrderA",63, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Order ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Order",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Order ::= ORDER BY Expresion OrderA OrderB OrderC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Order",62, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Having ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Having",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Having ::= HAVING SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Having",61, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // SelectA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // SelectA ::= DISTINCT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // SelectA ::= ALL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectA",60, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Select ::= SELECT SelectA Top SelectColumns FromSelect Where Group Having Order 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Select",59, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ColumnListB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListB",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ColumnListB ::= Coma ID ColumnListB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListB",58, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ColumnListA ::= ID ColumnListB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnListA",57, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ColumnList ::= Apertura_de_paréntesis ColumnListA Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ColumnList",56, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // SelectColumnsA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumnsA",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // SelectColumnsA ::= Coma Expresion Alias SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumnsA",55, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // SelectColumns ::= Multiplicacion SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumns",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // SelectColumns ::= Expresion Alias SelectColumnsA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SelectColumns",54, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Where ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Where",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Where ::= WHERE SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Where",53, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // PredicadoC ::= LIKE Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // PredicadoC ::= BETWEEN Expresion AND Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // PredicadoC ::= IN Apertura_de_paréntesis Expresion Expresiones Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoC",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // PredicadoA ::= Not PredicadoC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // PredicadoA ::= IS Not NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // PredicadoA ::= OperadoresBooleanos Expresion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PredicadoA",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // OperadoresBooleanos ::= Menor_o_igual_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // OperadoresBooleanos ::= Menor_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // OperadoresBooleanos ::= Mayor_o_igual_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // OperadoresBooleanos ::= Mayor_que 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // OperadoresBooleanos ::= Operador_no_igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // OperadoresBooleanos ::= Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OperadoresBooleanos",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Predicado ::= Expresion PredicadoA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Predicado",50, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // SearchConditionA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // SearchConditionA ::= OR SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // SearchConditionA ::= AND SearchCondition 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchConditionA",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // SearchCondition ::= Not Predicado SearchConditionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SearchCondition",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Expresiones ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresiones",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Expresiones ::= Coma Expresion Expresiones 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresiones",47, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // TopA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TopA",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // TopA ::= PERCENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TopA",46, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Top ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Top",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Top ::= TOP Apertura_de_paréntesis Int Cierre_de_paréntesis TopA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Top",45, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Not ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Not",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Not ::= NOT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Not",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ExpresionF ::= Multiplicacion Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ExpresionF ::= Int Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ExpresionF ::= Object4 Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionF",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ExpresionE ::= COUNT Apertura_de_paréntesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ExpresionE ::= MAX Apertura_de_paréntesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ExpresionE ::= MIN Apertura_de_paréntesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ExpresionE ::= AVG Apertura_de_paréntesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ExpresionE ::= SUM Apertura_de_paréntesis ExpresionF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ExpresionE ::= NULL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ExpresionE ::= Bit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ExpresionE ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ExpresionE ::= Float 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ExpresionE ::= Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ExpresionE ::= Object4 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionE",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ExpresionD ::= ExpresionE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ExpresionD ::= Apertura_de_paréntesis Expresion PredicadoC Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionD",41, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ExpresionC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ExpresionC ::= Division ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ExpresionC ::= Multiplicacion ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionC",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ExpresionB ::= ExpresionD ExpresionC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionB",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ExpresionA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ExpresionA ::= Resta ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ExpresionA ::= Suma ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ExpresionA",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expresion ::= ExpresionB ExpresionA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Expresion",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // AliasA ::= String 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AliasA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // AliasA ::= ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("AliasA",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Alias ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Alias ::= AliasA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Alias ::= AS AliasA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Alias",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Truncate ::= TRUNCATE TABLE Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Truncate",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DropIndexB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexB",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DropIndexB ::= Coma DropIndexA DropIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexB",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DropIndexA ::= ID ON Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndexA",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DropIndex ::= INDEX IFE DropIndexA DropIndexB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropIndex",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DropViewA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropViewA",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DropViewA ::= Coma Object2 DropViewA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropViewA",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DropView ::= VIEW IFE Object2 DropViewA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropView",29, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DropDatabaseA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabaseA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DropDatabaseA ::= Coma ID DropDatabaseA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabaseA",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DropDatabase ::= DATABASE IFE ID DropDatabaseA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropDatabase",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DropUser ::= USER IFE ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropUser",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DropTableA ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTableA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DropTableA ::= Coma Object3 DropTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTableA",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DropTable ::= TABLE IFE Object3 DropTableA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropTable",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DropA ::= DropIndex 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DropA ::= DropView 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DropA ::= DropDatabase 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DropA ::= DropUser 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DropA ::= DropTable 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DropA",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Drop ::= DROP DropA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Drop",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Tipo_datoC ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoC",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Tipo_datoC ::= Coma Int 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoC",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Tipo_datoB ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoB",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Tipo_datoB ::= Apertura_de_paréntesis Int Tipo_datoC Cierre_de_paréntesis 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoB",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Tipo_datoA ::= NUMERIC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Tipo_datoA ::= SMALLINT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Tipo_datoA ::= DECIMAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Tipo_datoA ::= INT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Tipo_datoA ::= TIME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Tipo_datoA ::= REAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Tipo_datoA ::= NCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Tipo_datoA ::= CURSOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Tipo_datoA ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Tipo_datoA ::= DOUBLE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Tipo_datoA ::= BIT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Tipo_datoA ::= DATE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Tipo_datoA ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Tipo_datoA ::= INTEGER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Tipo_datoA ::= VARCHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoA",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Tipo_datoD ::= Apertura_de_corchetes Tipo_datoA Cierre_de_corchetes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Tipo_datoD ::= Tipo_datoA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_datoD",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Tipo_dato ::= Tipo_datoD Tipo_datoB 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Tipo_dato",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Variable ::= Arroba Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Variable",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // IFE ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IFE ::= IF EXISTS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IFE",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Object4A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4A",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Object4A ::= Punto Object3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4A",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Object4 ::= ID Object4A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object4",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Object3A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3A",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Object3A ::= Punto Object2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3A",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Object3 ::= ID Object3A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object3",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Object2A ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2A",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Object2A ::= Punto ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2A",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Object2 ::= ID Object2A 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Object2",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ID ::= Apertura_de_corchetes Identificador Cierre_de_corchetes 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ID ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ID",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Final ::= GO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Final",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Final ::= Punto_y_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Final",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TSQL ::= CursorDeclare 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TSQL",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TCL ::= SavePoint 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TCL ::= Commit 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TCL ::= Rollback 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TCL ::= BeginTran 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TCL",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DDL ::= Truncate 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DDL ::= Drop 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DDL ::= Alter 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DDL ::= Create 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DDL",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DML ::= Update 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // DML ::= Delete 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // DML ::= Insert 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // DML ::= Select 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DML",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // InicialA ::= TSQL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // InicialA ::= TCL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // InicialA ::= DDL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // InicialA ::= DML 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("InicialA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Inicial ::= 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicial",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Inicial ::= error Final Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicial",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Inicial ::= InicialA Final Inicial 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("Inicial",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Inicial EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

