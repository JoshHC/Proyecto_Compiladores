/* The following code was generated by JFlex 1.4.3 on 29/09/19 10:58 AM */

package Analizador;
import static Analizador.Tokens.*;

/* Secci√≥n de declaraciones de JFlex */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 29/09/19 10:58 AM from the specification file
 * <tt>C:/Users/josue/Documents/NetBeansProjects/Proyecto_Compiladores/Proyecto_Compiladores/src/Analizador/Alexico.flex</tt>
 */
class Alexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\65\2\0\1\66\22\0\1\4\1\15\1\0\1\32"+
    "\1\0\1\11\1\16\1\67\1\25\1\26\1\7\1\5\1\21\1\6"+
    "\1\22\1\10\1\2\1\2\10\2\1\0\1\20\1\12\1\13\1\14"+
    "\1\71\1\31\1\33\1\51\1\45\1\34\1\35\1\47\1\55\1\50"+
    "\1\52\1\63\1\57\1\42\1\60\1\41\1\44\1\43\1\64\1\40"+
    "\1\53\1\37\1\46\1\62\1\61\1\36\1\54\1\56\1\23\1\0"+
    "\1\24\1\0\1\3\1\0\4\1\1\70\25\1\1\27\1\17\1\30"+
    "\101\0\1\72\uff40\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\2\1"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\30\2\1\1\1\32\1\33\1\34"+
    "\1\3\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\2\1\51\6\2"+
    "\1\51\20\2\1\51\12\2\1\51\15\2\2\51\3\2"+
    "\1\51\32\2\2\51\21\2\1\51\17\2\1\52\1\53"+
    "\2\34\1\36\2\0\1\2\1\51\7\2\1\51\15\2"+
    "\1\51\57\2\1\51\24\2\1\51\5\2\1\51\16\2"+
    "\1\51\2\2\1\51\6\2\1\51\14\2\1\51\4\2"+
    "\1\51\7\2\2\0\14\2\1\51\10\2\1\0\4\2"+
    "\1\51\3\2\1\51\2\2\1\51\20\2\1\51\7\2"+
    "\1\51\3\2\1\51\2\2\1\51\17\2\1\51\44\2"+
    "\2\51\1\2\2\35\15\2\1\0\1\51\52\2\1\51"+
    "\31\2\1\51\5\2\1\51\1\0\46\2\1\0\11\2"+
    "\1\51\4\2\1\51\6\2\1\51\5\2\1\51\6\2"+
    "\1\51\3\2\1\51\34\2\1\51\23\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[684];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\73\0\354\0\u0127\0\u0162"+
    "\0\73\0\u019d\0\73\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4"+
    "\0\u02ff\0\73\0\73\0\73\0\u033a\0\73\0\u0375\0\73"+
    "\0\u03b0\0\73\0\73\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7"+
    "\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af"+
    "\0\u06ea\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c\0\u0887"+
    "\0\u08c2\0\u08fd\0\u0938\0\u0973\0\u09ae\0\73\0\73\0\u09e9"+
    "\0\u0127\0\u0a24\0\u0a5f\0\73\0\73\0\73\0\73\0\73"+
    "\0\73\0\73\0\73\0\73\0\73\0\u0a9a\0\166\0\u0ad5"+
    "\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37\0\u0c72\0\u0cad"+
    "\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85"+
    "\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d"+
    "\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235"+
    "\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d"+
    "\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5"+
    "\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd"+
    "\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995"+
    "\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d"+
    "\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45"+
    "\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2\0\u1f1d"+
    "\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u207f\0\u20ba\0\u20f5"+
    "\0\u2130\0\u216b\0\u21a6\0\u21e1\0\u221c\0\u2257\0\u2292\0\u22cd"+
    "\0\u2308\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5"+
    "\0\u24e0\0\u251b\0\u09ae\0\73\0\u2556\0\u2591\0\u25cc\0\u2607"+
    "\0\u2642\0\u267d\0\u26b8\0\u26f3\0\u272e\0\u2769\0\u27a4\0\u27df"+
    "\0\u281a\0\u2855\0\u2890\0\u28cb\0\u2906\0\u1022\0\u2941\0\u297c"+
    "\0\u29b7\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade\0\u2b19\0\u2b54"+
    "\0\u2b8f\0\u2bca\0\u2c05\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c"+
    "\0\u2d67\0\u2da2\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04"+
    "\0\u2f3f\0\u2f7a\0\u2fb5\0\u2ff0\0\u302b\0\u3066\0\u30a1\0\u30dc"+
    "\0\u3117\0\u3152\0\u318d\0\u31c8\0\u3203\0\u323e\0\u3279\0\u32b4"+
    "\0\u32ef\0\u332a\0\u3365\0\u33a0\0\u33db\0\u3416\0\u3451\0\u348c"+
    "\0\u34c7\0\u3502\0\u353d\0\u3578\0\u35b3\0\u35ee\0\u3629\0\u3664"+
    "\0\u369f\0\u36da\0\u3715\0\u3750\0\u378b\0\u37c6\0\u3801\0\u383c"+
    "\0\u3877\0\u38b2\0\u38ed\0\u3928\0\u3963\0\u399e\0\u39d9\0\u3a14"+
    "\0\u3a4f\0\u3a8a\0\u3ac5\0\u3b00\0\u3b3b\0\u3b76\0\u3bb1\0\u3bec"+
    "\0\u3c27\0\u3c62\0\u3c9d\0\u3cd8\0\u3d13\0\u3d4e\0\u3d89\0\u3dc4"+
    "\0\u3dff\0\u3e3a\0\u3e75\0\u3b76\0\u3eb0\0\u3eeb\0\u3f26\0\u3f61"+
    "\0\u3f9c\0\u3fd7\0\u4012\0\u404d\0\u4088\0\u40c3\0\u40fe\0\u4139"+
    "\0\u4174\0\u41af\0\u41ea\0\u4225\0\u4260\0\u429b\0\u42d6\0\u4311"+
    "\0\u434c\0\u4387\0\u43c2\0\u43fd\0\u4438\0\u4473\0\u44ae\0\u44e9"+
    "\0\u4524\0\u455f\0\u459a\0\u45d5\0\u4610\0\u464b\0\u4686\0\u46c1"+
    "\0\u46fc\0\u4737\0\u4772\0\u47ad\0\u47e8\0\u4823\0\u485e\0\u4899"+
    "\0\u48d4\0\u490f\0\u494a\0\u4985\0\u49c0\0\u49fb\0\u4a36\0\u4a71"+
    "\0\u4aac\0\u4ae7\0\u4b22\0\u4b5d\0\u4b98\0\u4bd3\0\u4c0e\0\u4c49"+
    "\0\u4c84\0\u4cbf\0\u4cfa\0\u4d35\0\u4d70\0\u4dab\0\u4de6\0\u4e21"+
    "\0\u4e5c\0\u4e97\0\u4ed2\0\u4f0d\0\u4f48\0\u4f83\0\u4fbe\0\u4ff9"+
    "\0\u5034\0\u506f\0\u50aa\0\u50e5\0\u5120\0\u515b\0\u5196\0\u51d1"+
    "\0\u520c\0\u5247\0\u5282\0\u52bd\0\u52f8\0\u5333\0\u536e\0\u53a9"+
    "\0\u53e4\0\u541f\0\u545a\0\u5495\0\u54d0\0\u550b\0\u5546\0\u5581"+
    "\0\u55bc\0\u55f7\0\u5632\0\u566d\0\u56a8\0\u56e3\0\u571e\0\u5759"+
    "\0\u5794\0\u57cf\0\u580a\0\u5845\0\u5880\0\u58bb\0\u58f6\0\u5931"+
    "\0\u596c\0\u59a7\0\u59e2\0\u5a1d\0\u5a58\0\u4686\0\u5a93\0\u5ace"+
    "\0\u5b09\0\u5b44\0\u5b7f\0\u5bba\0\u5bf5\0\u5c30\0\u5c6b\0\u5ca6"+
    "\0\u5ce1\0\u5d1c\0\u5d57\0\u5d92\0\u5dcd\0\u5e08\0\u5e43\0\u5e7e"+
    "\0\u5eb9\0\u5ef4\0\u5f2f\0\u5f6a\0\u5fa5\0\u5fe0\0\u601b\0\u6056"+
    "\0\u6091\0\u60cc\0\u6107\0\u6142\0\u617d\0\u61b8\0\u61f3\0\u622e"+
    "\0\u6269\0\u62a4\0\u62df\0\u631a\0\u6355\0\u6390\0\u63cb\0\u6406"+
    "\0\u6441\0\73\0\u2642\0\u647c\0\u64b7\0\u26b8\0\u64f2\0\u652d"+
    "\0\u6568\0\u65a3\0\u65de\0\u6619\0\u6654\0\u668f\0\u66ca\0\u6705"+
    "\0\u6740\0\u677b\0\u67b6\0\u67f1\0\u682c\0\u6867\0\u68a2\0\u68dd"+
    "\0\u6918\0\u6953\0\u698e\0\u69c9\0\u6a04\0\u6a3f\0\u6a7a\0\u6ab5"+
    "\0\u6af0\0\u6b2b\0\u6b66\0\u6ba1\0\u6bdc\0\u6c17\0\u6c52\0\u6c8d"+
    "\0\u6cc8\0\u6d03\0\u6d3e\0\u6d79\0\u6db4\0\u6def\0\u4012\0\u6e2a"+
    "\0\u6e65\0\u6ea0\0\u6edb\0\u6f16\0\u6f51\0\u6f8c\0\u6fc7\0\u7002"+
    "\0\u703d\0\u7078\0\u70b3\0\u70ee\0\u7129\0\u7164\0\u719f\0\u71da"+
    "\0\u7215\0\u7250\0\u728b\0\u72c6\0\u7301\0\u733c\0\u7377\0\u73b2"+
    "\0\u73ed\0\u7428\0\u7463\0\u749e\0\u74d9\0\u7514\0\u754f\0\u758a"+
    "\0\u75c5\0\u7600\0\u763b\0\u7676\0\u76b1\0\u76ec\0\u53a9\0\u7727"+
    "\0\u7762\0\u779d\0\u77d8\0\u7813\0\u26f3\0\u784e\0\u7889\0\u78c4"+
    "\0\u78ff\0\u793a\0\u7975\0\u79b0\0\u79eb\0\u7a26\0\u7a61\0\u7a9c"+
    "\0\u7ad7\0\u7b12\0\u7b4d\0\u7b88\0\u7bc3\0\u7bfe\0\u7c39\0\u7c74"+
    "\0\u7caf\0\u7cea\0\u7d25\0\u7d60\0\u7d9b\0\u7dd6\0\u7e11\0\u7e4c"+
    "\0\u7e87\0\u7ec2\0\u7efd\0\u7f38\0\u7f73\0\u7fae\0\u7fe9\0\u8024"+
    "\0\u805f\0\u809a\0\u80d5\0\u8110\0\u814b\0\u8186\0\u81c1\0\u81fc"+
    "\0\u8237\0\u8272\0\u82ad\0\u82e8\0\u8323\0\u835e\0\u332a\0\u8399"+
    "\0\u83d4\0\u840f\0\u844a\0\u8485\0\u84c0\0\u84fb\0\u8536\0\u8571"+
    "\0\u1620\0\u85ac\0\u8024\0\u85e7\0\u8622\0\u4260\0\u865d\0\u8698"+
    "\0\73\0\u86d3\0\u870e\0\u8749\0\u8784\0\u87bf\0\u87fa\0\u8835"+
    "\0\u8870\0\u88ab\0\u88e6\0\u8921\0\u895c\0\u8997\0\u89d2\0\u8a0d"+
    "\0\u8a48\0\u8a83\0\u8abe\0\u8af9\0\u8b34\0\u8b6f\0\u8baa\0\u8be5"+
    "\0\u8c20\0\u8c5b\0\u8c96\0\u8cd1\0\u8d0c\0\u8d47\0\u8d82\0\u8dbd"+
    "\0\u8df8\0\u8e33\0\u8e6e\0\u8ea9\0\u8ee4\0\u8f1f\0\u8f5a\0\u8f95"+
    "\0\u8fd0\0\u900b\0\u9046\0\u9081\0\u90bc\0\u90f7\0\u9132\0\u916d"+
    "\0\u91a8\0\u91e3\0\u921e\0\u9259\0\u8835\0\u9294\0\u92cf\0\u930a"+
    "\0\u9345\0\u9380\0\u93bb\0\u93f6";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[684];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\3\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\3\2\6\1\65\1\3"+
    "\1\66\1\67\74\0\3\3\27\0\32\3\3\0\1\3"+
    "\4\0\1\4\17\0\1\70\54\0\1\6\60\0\2\6"+
    "\6\0\1\71\72\0\1\71\3\0\1\72\73\0\1\73"+
    "\76\0\1\74\72\0\1\75\72\0\1\76\72\0\1\77"+
    "\75\0\1\100\73\0\1\101\77\0\1\102\74\0\1\103"+
    "\74\0\1\104\74\0\1\105\41\0\3\3\27\0\1\3"+
    "\1\106\2\3\1\107\1\110\1\111\1\112\2\3\1\113"+
    "\1\114\2\3\1\115\1\3\1\116\6\3\1\117\2\3"+
    "\3\0\1\3\3\0\3\3\27\0\1\120\1\3\1\121"+
    "\2\3\1\122\3\3\1\123\1\3\1\124\2\3\1\125"+
    "\1\126\12\3\3\0\1\3\3\0\3\3\27\0\3\3"+
    "\1\127\1\3\1\130\1\131\1\132\10\3\1\133\11\3"+
    "\3\0\1\3\3\0\3\3\27\0\1\134\1\3\1\135"+
    "\2\3\1\136\3\3\1\137\3\3\1\140\1\3\1\141"+
    "\1\142\11\3\3\0\1\3\3\0\3\3\27\0\1\143"+
    "\1\3\1\144\6\3\1\145\1\3\1\146\3\3\1\147"+
    "\12\3\3\0\1\3\3\0\3\3\27\0\1\150\1\3"+
    "\1\151\6\3\1\152\1\153\1\154\16\3\3\0\1\3"+
    "\3\0\3\3\27\0\1\155\1\3\1\156\6\3\1\157"+
    "\5\3\1\160\12\3\3\0\1\3\3\0\3\3\27\0"+
    "\1\161\1\3\1\162\2\3\1\163\1\3\1\164\1\3"+
    "\1\165\1\3\1\166\3\3\1\167\12\3\3\0\1\3"+
    "\3\0\3\3\27\0\5\3\1\170\1\171\1\3\1\172"+
    "\1\3\1\173\1\174\1\175\12\3\1\176\2\3\3\0"+
    "\1\3\3\0\3\3\27\0\1\177\4\3\1\200\1\3"+
    "\1\201\1\3\1\202\1\3\1\203\1\3\1\204\14\3"+
    "\3\0\1\3\3\0\3\3\27\0\6\3\1\205\1\3"+
    "\1\206\7\3\1\207\11\3\3\0\1\3\3\0\3\3"+
    "\27\0\1\210\1\3\1\211\2\3\1\212\1\3\1\213"+
    "\1\3\1\214\1\3\1\215\3\3\1\216\12\3\3\0"+
    "\1\3\3\0\3\3\27\0\1\217\10\3\1\220\20\3"+
    "\3\0\1\3\3\0\3\3\27\0\1\221\1\3\1\222"+
    "\2\3\1\223\3\3\1\224\1\3\1\225\3\3\1\226"+
    "\1\3\1\107\10\3\3\0\1\3\3\0\3\3\27\0"+
    "\1\3\1\227\4\3\1\230\5\3\1\107\3\3\1\231"+
    "\4\3\1\232\4\3\3\0\1\3\3\0\3\3\27\0"+
    "\1\233\1\3\1\234\1\3\1\235\3\3\1\236\1\237"+
    "\1\240\1\241\1\3\1\242\1\3\1\243\1\3\1\244"+
    "\3\3\1\245\3\3\1\246\3\0\1\3\3\0\3\3"+
    "\27\0\2\3\1\247\27\3\3\0\1\3\3\0\3\3"+
    "\27\0\2\3\1\250\2\3\1\251\1\3\1\252\1\3"+
    "\1\253\20\3\3\0\1\3\3\0\3\3\27\0\11\3"+
    "\1\254\20\3\3\0\1\3\3\0\3\3\27\0\2\3"+
    "\1\255\14\3\1\256\12\3\3\0\1\3\3\0\3\3"+
    "\27\0\1\257\1\3\1\260\6\3\1\261\5\3\1\262"+
    "\12\3\3\0\1\3\3\0\3\3\27\0\1\263\4\3"+
    "\1\264\3\3\1\265\3\3\1\266\1\3\1\267\12\3"+
    "\3\0\1\3\3\0\3\3\27\0\1\270\16\3\1\271"+
    "\12\3\3\0\1\3\3\0\3\3\27\0\11\3\1\272"+
    "\20\3\3\0\1\3\2\0\65\273\2\0\1\274\3\273"+
    "\2\0\1\70\2\0\2\275\26\0\1\276\32\0\1\276"+
    "\2\0\65\72\1\0\5\72\7\277\1\300\12\277\1\300"+
    "\42\277\2\301\4\277\1\0\3\3\27\0\2\107\30\3"+
    "\3\0\1\3\3\0\3\3\27\0\2\3\1\107\27\3"+
    "\3\0\1\3\3\0\3\3\27\0\1\3\1\107\17\3"+
    "\1\107\10\3\3\0\1\3\3\0\3\3\27\0\4\3"+
    "\1\302\2\3\1\303\22\3\3\0\1\3\3\0\3\3"+
    "\27\0\4\3\1\304\25\3\3\0\1\3\3\0\3\3"+
    "\27\0\4\3\1\305\25\3\3\0\1\3\3\0\3\3"+
    "\27\0\20\3\1\306\11\3\3\0\1\3\3\0\3\3"+
    "\27\0\12\3\1\107\5\3\1\307\11\3\3\0\1\3"+
    "\3\0\3\3\27\0\22\3\1\107\7\3\3\0\1\3"+
    "\3\0\3\3\27\0\4\3\1\310\14\3\1\107\10\3"+
    "\3\0\1\3\3\0\3\3\27\0\1\311\5\3\1\255"+
    "\1\312\2\3\1\313\1\3\1\314\3\3\1\315\11\3"+
    "\3\0\1\3\3\0\3\3\27\0\11\3\1\316\20\3"+
    "\3\0\1\3\3\0\3\3\27\0\13\3\1\317\11\3"+
    "\1\320\4\3\3\0\1\3\3\0\3\3\27\0\25\3"+
    "\1\316\4\3\3\0\1\3\3\0\3\3\27\0\12\3"+
    "\1\321\17\3\3\0\1\3\3\0\3\3\27\0\1\322"+
    "\17\3\1\323\11\3\3\0\1\3\3\0\3\3\27\0"+
    "\2\3\1\324\1\3\1\325\5\3\1\326\4\3\1\327"+
    "\12\3\3\0\1\3\3\0\3\3\27\0\5\3\1\330"+
    "\24\3\3\0\1\3\3\0\3\3\27\0\1\3\1\331"+
    "\30\3\3\0\1\3\3\0\3\3\27\0\20\3\1\110"+
    "\11\3\3\0\1\3\3\0\3\3\27\0\12\3\1\332"+
    "\17\3\3\0\1\3\3\0\3\3\27\0\16\3\1\333"+
    "\13\3\3\0\1\3\3\0\3\3\27\0\3\3\1\334"+
    "\21\3\1\335\4\3\3\0\1\3\3\0\3\3\27\0"+
    "\1\336\12\3\1\337\3\3\1\340\1\3\1\341\10\3"+
    "\3\0\1\3\3\0\3\3\27\0\10\3\1\107\21\3"+
    "\3\0\1\3\3\0\3\3\27\0\2\3\1\342\27\3"+
    "\3\0\1\3\3\0\3\3\27\0\25\3\1\343\4\3"+
    "\3\0\1\3\3\0\3\3\27\0\2\3\1\344\27\3"+
    "\3\0\1\3\3\0\3\3\27\0\17\3\1\345\12\3"+
    "\3\0\1\3\3\0\3\3\27\0\1\346\3\3\1\347"+
    "\2\3\1\350\1\351\1\3\1\352\1\3\1\353\3\3"+
    "\1\354\6\3\1\355\2\3\3\0\1\3\3\0\3\3"+
    "\27\0\7\3\1\356\16\3\1\357\3\3\3\0\1\3"+
    "\3\0\3\3\27\0\7\3\1\110\22\3\3\0\1\3"+
    "\3\0\3\3\27\0\22\3\1\360\7\3\3\0\1\3"+
    "\3\0\3\3\27\0\4\3\1\361\20\3\1\362\4\3"+
    "\3\0\1\3\3\0\3\3\27\0\3\3\1\250\26\3"+
    "\3\0\1\3\3\0\3\3\27\0\4\3\1\107\1\3"+
    "\1\363\3\3\1\364\17\3\3\0\1\3\3\0\3\3"+
    "\27\0\15\3\1\247\14\3\3\0\1\3\3\0\3\3"+
    "\27\0\7\3\1\365\15\3\1\366\4\3\3\0\1\3"+
    "\3\0\3\3\27\0\6\3\1\367\11\3\1\250\11\3"+
    "\3\0\1\3\3\0\3\3\27\0\1\370\13\3\1\250"+
    "\12\3\1\371\2\3\3\0\1\3\3\0\3\3\27\0"+
    "\1\372\11\3\1\373\13\3\1\302\3\3\3\0\1\3"+
    "\3\0\3\3\27\0\6\3\1\374\15\3\1\110\5\3"+
    "\3\0\1\3\3\0\3\3\27\0\1\3\1\107\3\3"+
    "\1\375\12\3\1\376\11\3\3\0\1\3\3\0\3\3"+
    "\27\0\5\3\1\377\24\3\3\0\1\3\3\0\3\3"+
    "\27\0\2\3\1\u0100\6\3\1\u0101\5\3\1\u0102\12\3"+
    "\3\0\1\3\3\0\3\3\27\0\1\342\31\3\3\0"+
    "\1\3\3\0\3\3\27\0\20\3\1\u0103\11\3\3\0"+
    "\1\3\3\0\3\3\27\0\16\3\1\u0104\13\3\3\0"+
    "\1\3\3\0\3\3\27\0\27\3\1\u0105\2\3\3\0"+
    "\1\3\3\0\3\3\27\0\1\3\1\302\30\3\3\0"+
    "\1\3\3\0\3\3\27\0\7\3\1\255\22\3\3\0"+
    "\1\3\3\0\3\3\27\0\2\3\1\u0106\1\3\1\304"+
    "\25\3\3\0\1\3\3\0\3\3\27\0\4\3\1\u0107"+
    "\25\3\3\0\1\3\3\0\3\3\27\0\4\3\1\u0108"+
    "\25\3\3\0\1\3\3\0\3\3\27\0\14\3\1\u0109"+
    "\15\3\3\0\1\3\3\0\3\3\27\0\2\3\1\u010a"+
    "\27\3\3\0\1\3\3\0\3\3\27\0\4\3\1\u010b"+
    "\13\3\1\u010c\11\3\3\0\1\3\3\0\3\3\27\0"+
    "\2\3\1\u010d\6\3\1\u010e\20\3\3\0\1\3\3\0"+
    "\3\3\27\0\11\3\1\132\1\3\1\u010f\16\3\3\0"+
    "\1\3\3\0\3\3\27\0\1\u0110\4\3\1\u0111\1\u0112"+
    "\1\u0113\3\3\1\u0114\11\3\1\u0115\4\3\3\0\1\3"+
    "\3\0\3\3\27\0\5\3\1\u0116\24\3\3\0\1\3"+
    "\3\0\3\3\27\0\1\u0117\1\3\1\u0118\27\3\3\0"+
    "\1\3\3\0\3\3\27\0\10\3\1\u0119\6\3\1\u011a"+
    "\4\3\1\u011b\5\3\3\0\1\3\3\0\3\3\27\0"+
    "\1\3\1\u011c\6\3\1\302\21\3\3\0\1\3\3\0"+
    "\3\3\27\0\1\u011d\1\3\1\u011e\14\3\1\u011f\12\3"+
    "\3\0\1\3\3\0\3\3\27\0\7\3\1\132\22\3"+
    "\3\0\1\3\3\0\3\3\27\0\4\3\1\u0120\25\3"+
    "\3\0\1\3\3\0\3\3\27\0\2\3\1\u0121\6\3"+
    "\1\u0122\20\3\3\0\1\3\3\0\3\3\27\0\11\3"+
    "\1\u0123\20\3\3\0\1\3\3\0\3\3\27\0\5\3"+
    "\1\u0124\5\3\1\u0125\16\3\3\0\1\3\3\0\3\3"+
    "\27\0\6\3\1\u0126\1\u0127\22\3\3\0\1\3\3\0"+
    "\3\3\27\0\5\3\1\u0128\1\3\1\u0129\22\3\3\0"+
    "\1\3\3\0\3\3\27\0\27\3\1\u012a\2\3\3\0"+
    "\1\3\3\0\3\3\27\0\7\3\1\u012b\3\3\1\u012c"+
    "\16\3\3\0\1\3\3\0\3\3\27\0\12\3\1\u012d"+
    "\17\3\3\0\1\3\3\0\3\3\27\0\4\3\1\u012e"+
    "\15\3\1\272\7\3\3\0\1\3\3\0\3\3\27\0"+
    "\2\3\1\u012f\6\3\1\u0130\20\3\3\0\1\3\3\0"+
    "\3\3\27\0\4\3\1\u0131\25\3\3\0\1\3\3\0"+
    "\3\3\27\0\7\3\1\u0132\22\3\3\0\1\3\3\0"+
    "\3\3\27\0\4\3\1\u0133\25\3\3\0\1\3\3\0"+
    "\3\3\27\0\2\3\1\u0134\27\3\3\0\1\3\3\0"+
    "\3\3\27\0\1\3\1\u0135\2\3\1\u0136\1\3\1\302"+
    "\1\3\1\u0137\1\3\1\u0138\4\3\1\u0139\1\u013a\11\3"+
    "\3\0\1\3\3\0\3\3\27\0\11\3\1\u013b\20\3"+
    "\3\0\1\3\3\0\3\3\27\0\25\3\1\u013c\4\3"+
    "\3\0\1\3\3\0\3\3\27\0\27\3\1\110\2\3"+
    "\3\0\1\3\3\0\3\3\27\0\4\3\1\u013d\2\3"+
    "\1\u013e\2\3\1\u013f\5\3\1\u0140\4\3\1\u0141\4\3"+
    "\3\0\1\3\3\0\3\3\27\0\1\u0142\31\3\3\0"+
    "\1\3\3\0\3\3\27\0\1\u0143\31\3\3\0\1\3"+
    "\3\0\3\3\27\0\25\3\1\110\4\3\3\0\1\3"+
    "\3\0\3\3\27\0\5\3\1\u0144\7\3\1\u0145\14\3"+
    "\3\0\1\3\3\0\3\3\27\0\16\3\1\u0146\6\3"+
    "\1\107\4\3\3\0\1\3\3\0\3\3\27\0\13\3"+
    "\1\u0147\16\3\3\0\1\3\3\0\3\3\27\0\23\3"+
    "\1\110\6\3\3\0\1\3\3\0\3\3\27\0\20\3"+
    "\1\u0148\11\3\3\0\1\3\3\0\3\3\27\0\1\u0149"+
    "\31\3\3\0\1\3\3\0\3\3\27\0\7\3\1\u014a"+
    "\22\3\3\0\1\3\3\0\3\3\27\0\1\u012c\31\3"+
    "\3\0\1\3\3\0\3\3\27\0\4\3\1\107\25\3"+
    "\3\0\1\3\3\0\3\3\27\0\1\u0114\10\3\1\u014b"+
    "\20\3\3\0\1\3\3\0\3\3\27\0\11\3\1\u014c"+
    "\20\3\3\0\1\3\3\0\3\3\27\0\4\3\1\u014d"+
    "\25\3\3\0\1\3\3\0\3\3\27\0\6\3\1\110"+
    "\23\3\3\0\1\3\3\0\3\3\27\0\21\3\1\107"+
    "\10\3\3\0\1\3\3\0\3\3\27\0\7\3\1\u0127"+
    "\22\3\3\0\1\3\3\0\3\3\27\0\3\3\1\107"+
    "\1\u0120\25\3\3\0\1\3\3\0\3\3\27\0\5\3"+
    "\1\u011d\24\3\3\0\1\3\3\0\3\3\27\0\1\3"+
    "\1\u014e\4\3\1\224\23\3\3\0\1\3\3\0\3\3"+
    "\27\0\6\3\1\u014f\23\3\3\0\1\3\3\0\3\3"+
    "\27\0\17\3\1\u0150\12\3\3\0\1\3\3\0\3\3"+
    "\27\0\17\3\1\u0151\12\3\3\0\1\3\3\0\3\3"+
    "\27\0\5\3\1\u0132\24\3\3\0\1\3\3\0\3\3"+
    "\27\0\2\3\1\u0152\14\3\1\146\12\3\3\0\1\3"+
    "\3\0\3\3\27\0\4\3\1\u0153\25\3\3\0\1\3"+
    "\3\0\3\3\27\0\5\3\1\u0154\1\3\1\u0155\22\3"+
    "\3\0\1\3\3\0\3\3\27\0\2\3\1\u0156\27\3"+
    "\3\0\1\3\3\0\3\3\27\0\17\3\1\342\12\3"+
    "\3\0\1\3\4\0\1\275\72\0\1\275\2\0\2\275"+
    "\64\0\7\277\1\u0157\12\277\1\301\42\277\2\301\4\277"+
    "\7\301\1\u0158\12\301\1\300\57\301\1\u0157\63\301\1\0"+
    "\3\3\27\0\2\3\1\u012c\27\3\3\0\1\3\3\0"+
    "\3\3\27\0\11\3\1\u0159\20\3\3\0\1\3\3\0"+
    "\3\3\27\0\17\3\1\u015a\12\3\3\0\1\3\3\0"+
    "\3\3\27\0\15\3\1\u015b\14\3\3\0\1\3\3\0"+
    "\3\3\27\0\11\3\1\u015c\20\3\3\0\1\3\3\0"+
    "\3\3\27\0\2\3\1\u015d\27\3\3\0\1\3\3\0"+
    "\3\3\27\0\1\u015e\1\3\1\107\27\3\3\0\1\3"+
    "\3\0\3\3\27\0\7\3\1\u015f\22\3\3\0\1\3"+
    "\3\0\3\3\27\0\2\3\1\u0160\27\3\3\0\1\3"+
    "\3\0\3\3\27\0\7\3\1\u0161\7\3\1\u0162\12\3"+
    "\3\0\1\3\3\0\3\3\27\0\1\u0163\1\3\1\u0164"+
    "\27\3\3\0\1\3\3\0\3\3\27\0\12\3\1\u0165"+
    "\17\3\3\0\1\3\3\0\3\3\27\0\16\3\1\146"+
    "\13\3\3\0\1\3\3\0\3\3\27\0\1\272\31\3"+
    "\3\0\1\3\3\0\3\3\27\0\12\3\1\107\17\3"+
    "\3\0\1\3\3\0\3\3\27\0\22\3\1\u0166\7\3"+
    "\3\0\1\3\3\0\3\3\27\0\4\3\1\u0167\5\3"+
    "\1\u0168\11\3\1\107\5\3\3\0\1\3\3\0\3\3"+
    "\27\0\12\3\1\u014f\17\3\3\0\1\3\3\0\3\3"+
    "\27\0\2\3\1\u0169\2\3\1\u016a\24\3\3\0\1\3"+
    "\3\0\3\3\27\0\2\3\1\u016b\27\3\3\0\1\3"+
    "\3\0\3\3\27\0\4\3\1\107\13\3\1\u016c\11\3"+
    "\3\0\1\3\3\0\3\3\27\0\7\3\1\u016d\22\3"+
    "\3\0\1\3\3\0\3\3\2\0\1\u016e\24\0\32\3"+
    "\3\0\1\3\3\0\3\3\27\0\1\u016f\31\3\3\0"+
    "\1\3\3\0\3\3\27\0\7\3\1\u0170\22\3\3\0"+
    "\1\3\3\0\3\3\27\0\4\3\1\u0171\25\3\3\0"+
    "\1\3\3\0\3\3\27\0\10\3\1\u0172\21\3\3\0"+
    "\1\3\3\0\3\3\27\0\6\3\1\u0173\10\3\1\u0174"+
    "\12\3\3\0\1\3\3\0\3\3\27\0\2\3\1\107"+
    "\3\3\1\u0159\23\3\3\0\1\3\3\0\3\3\27\0"+
    "\22\3\1\u0175\2\3\1\107\4\3\3\0\1\3\3\0"+
    "\2\3\1\u0176\27\0\32\3\3\0\1\3\3\0\3\3"+
    "\27\0\6\3\1\107\23\3\3\0\1\3\3\0\3\3"+
    "\27\0\2\3\1\u0177\27\3\3\0\1\3\3\0\3\3"+
    "\27\0\31\3\1\u0178\3\0\1\3\3\0\3\3\27\0"+
    "\20\3\1\u0179\11\3\3\0\1\3\3\0\3\3\27\0"+
    "\1\3\1\u017a\5\3\1\107\22\3\3\0\1\3\3\0"+
    "\3\3\27\0\13\3\1\u017b\16\3\3\0\1\3\3\0"+
    "\3\3\27\0\1\u017c\31\3\3\0\1\3\3\0\3\3"+
    "\27\0\7\3\1\u017d\22\3\3\0\1\3\3\0\3\3"+
    "\27\0\11\3\1\u017e\20\3\3\0\1\3\3\0\3\3"+
    "\27\0\2\3\1\u017f\27\3\3\0\1\3\3\0\3\3"+
    "\27\0\4\3\1\u0180\25\3\3\0\1\3\3\0\3\3"+
    "\27\0\2\3\1\u0181\6\3\1\u0182\20\3\3\0\1\3"+
    "\3\0\3\3\27\0\7\3\1\u0183\22\3\3\0\1\3"+
    "\3\0\3\3\27\0\12\3\1\u0184\5\3\1\107\1\3"+
    "\1\u0185\7\3\3\0\1\3\3\0\3\3\27\0\15\3"+
    "\1\250\14\3\3\0\1\3\3\0\3\3\27\0\13\3"+
    "\1\u0186\3\3\1\u0187\12\3\3\0\1\3\3\0\3\3"+
    "\27\0\2\3\1\u0188\27\3\3\0\1\3\3\0\3\3"+
    "\27\0\2\3\1\107\7\3\1\u0189\17\3\3\0\1\3"+
    "\3\0\3\3\27\0\15\3\1\u018a\14\3\3\0\1\3"+
    "\3\0\3\3\27\0\7\3\1\u018b\22\3\3\0\1\3"+
    "\3\0\3\3\27\0\2\3\1\u018c\27\3\3\0\1\3"+
    "\3\0\3\3\27\0\22\3\1\u018d\7\3\3\0\1\3"+
    "\3\0\3\3\27\0\1\3\1\u012a\30\3\3\0\1\3"+
    "\3\0\3\3\27\0\2\3\1\u0127\27\3\3\0\1\3"+
    "\3\0\3\3\27\0\1\3\1\107\30\3\3\0\1\3"+
    "\3\0\3\3\27\0\1\u0127\31\3\3\0\1\3\3\0"+
    "\3\3\27\0\2\3\1\u018e\27\3\3\0\1\3\3\0"+
    "\3\3\27\0\4\3\1\u018f\25\3\3\0\1\3\3\0"+
    "\3\3\27\0\12\3\1\373\17\3\3\0\1\3\3\0"+
    "\3\3\27\0\12\3\1\u0190\17\3\3\0\1\3\3\0"+
    "\3\3\27\0\10\3\1\u0161\1\3\1\u0191\5\3\1\u0192"+
    "\11\3\3\0\1\3\3\0\3\3\27\0\12\3\1\u0193"+
    "\17\3\3\0\1\3\3\0\3\3\27\0\6\3\1\250"+
    "\2\3\1\u012c\13\3\1\u0194\1\3\1\u0195\2\3\3\0"+
    "\1\3\3\0\3\3\27\0\17\3\1\113\12\3\3\0"+
    "\1\3\3\0\3\3\27\0\7\3\1\u0196\22\3\3\0"+
    "\1\3\3\0\3\3\27\0\11\3\1\250\20\3\3\0"+
    "\1\3\3\0\3\3\27\0\6\3\1\u0197\23\3\3\0"+
    "\1\3\3\0\3\3\27\0\2\3\1\u0198\27\3\3\0"+
    "\1\3\3\0\3\3\27\0\2\3\1\u012c\5\3\1\u0137"+
    "\21\3\3\0\1\3\3\0\3\3\27\0\20\3\1\u0199"+
    "\11\3\3\0\1\3\3\0\3\3\27\0\5\3\1\u019a"+
    "\24\3\3\0\1\3\3\0\3\3\27\0\1\u019b\31\3"+
    "\3\0\1\3\3\0\3\3\27\0\2\3\1\107\1\3"+
    "\1\107\5\3\1\u019c\17\3\3\0\1\3\3\0\3\3"+
    "\27\0\1\u0160\31\3\3\0\1\3\3\0\3\3\27\0"+
    "\20\3\1\u0188\11\3\3\0\1\3\3\0\3\3\27\0"+
    "\20\3\1\u019d\11\3\3\0\1\3\3\0\3\3\27\0"+
    "\7\3\1\u019e\22\3\3\0\1\3\3\0\3\3\27\0"+
    "\5\3\1\u019f\24\3\3\0\1\3\3\0\3\3\27\0"+
    "\4\3\1\u01a0\1\3\1\u01a1\11\3\1\u01a2\6\3\1\u01a3"+
    "\2\3\3\0\1\3\3\0\3\3\27\0\7\3\1\u01a4"+
    "\3\3\1\u01a5\16\3\3\0\1\3\3\0\3\3\27\0"+
    "\6\3\1\250\23\3\3\0\1\3\3\0\3\3\27\0"+
    "\10\3\1\u01a6\14\3\1\u01a7\4\3\3\0\1\3\3\0"+
    "\3\3\27\0\5\3\1\u01a8\12\3\1\u01a9\11\3\3\0"+
    "\1\3\3\0\3\3\27\0\5\3\1\u01aa\24\3\3\0"+
    "\1\3\3\0\3\3\27\0\12\3\1\u01ab\17\3\3\0"+
    "\1\3\3\0\3\3\27\0\17\3\1\167\12\3\3\0"+
    "\1\3\3\0\3\3\27\0\11\3\1\342\17\3\1\u01ac"+
    "\3\0\1\3\3\0\3\3\27\0\6\3\1\u01ad\23\3"+
    "\3\0\1\3\3\0\3\3\27\0\1\u0151\31\3\3\0"+
    "\1\3\3\0\3\3\27\0\22\3\1\110\7\3\3\0"+
    "\1\3\3\0\3\3\27\0\5\3\1\107\24\3\3\0"+
    "\1\3\3\0\3\3\27\0\6\3\1\117\23\3\3\0"+
    "\1\3\3\0\3\3\27\0\12\3\1\u0131\17\3\3\0"+
    "\1\3\3\0\3\3\27\0\2\3\1\u01ae\27\3\3\0"+
    "\1\3\3\0\3\3\27\0\25\3\1\107\4\3\3\0"+
    "\1\3\3\0\3\3\27\0\1\250\31\3\3\0\1\3"+
    "\3\0\3\3\27\0\2\3\1\u01af\1\3\1\u01b0\25\3"+
    "\3\0\1\3\3\0\3\3\27\0\6\3\1\372\23\3"+
    "\3\0\1\3\3\0\3\3\27\0\12\3\1\113\17\3"+
    "\3\0\1\3\3\0\3\3\27\0\7\3\1\107\22\3"+
    "\3\0\1\3\3\0\3\3\27\0\20\3\1\250\11\3"+
    "\3\0\1\3\3\0\3\3\27\0\2\3\1\107\4\3"+
    "\1\u01b1\22\3\3\0\1\3\3\0\3\3\27\0\17\3"+
    "\1\u011f\12\3\3\0\1\3\3\0\3\3\27\0\1\3"+
    "\1\u01b2\30\3\3\0\1\3\3\0\3\3\27\0\24\3"+
    "\1\u014b\5\3\3\0\1\3\3\0\3\3\27\0\26\3"+
    "\1\u01b3\3\3\3\0\1\3\3\0\3\3\27\0\1\u0132"+
    "\31\3\3\0\1\3\3\0\3\3\27\0\26\3\1\132"+
    "\3\3\3\0\1\3\3\0\3\3\27\0\15\3\1\107"+
    "\14\3\3\0\1\3\3\0\3\3\27\0\24\3\1\107"+
    "\5\3\3\0\1\3\3\0\2\3\1\u01b4\27\0\32\3"+
    "\3\0\1\3\3\0\3\3\27\0\6\3\1\u01b5\23\3"+
    "\3\0\1\3\3\0\3\3\27\0\2\3\1\u01b6\14\3"+
    "\1\u01b7\12\3\3\0\1\3\3\0\3\3\27\0\2\3"+
    "\1\u01b8\6\3\1\107\20\3\3\0\1\3\3\0\3\3"+
    "\27\0\13\3\1\250\16\3\3\0\1\3\3\0\3\3"+
    "\27\0\7\3\1\u01b9\22\3\3\0\1\3\3\0\3\3"+
    "\27\0\4\3\1\u01ba\25\3\3\0\1\3\3\0\3\3"+
    "\27\0\2\3\1\u01bb\27\3\3\0\1\3\3\0\3\3"+
    "\27\0\7\3\1\u01bc\22\3\3\0\1\3\3\0\3\3"+
    "\27\0\2\3\1\u01bd\27\3\3\0\1\3\3\0\3\3"+
    "\27\0\13\3\1\u01be\16\3\3\0\1\3\3\0\3\3"+
    "\27\0\2\3\1\u01bf\27\3\3\0\1\3\3\0\3\3"+
    "\27\0\4\3\1\304\4\3\1\u0125\1\3\1\u01c0\16\3"+
    "\3\0\1\3\3\0\3\3\27\0\20\3\1\u01c1\11\3"+
    "\3\0\1\3\3\0\3\3\27\0\1\u01c2\31\3\3\0"+
    "\1\3\3\0\3\3\27\0\4\3\1\u01c3\25\3\3\0"+
    "\1\3\3\0\3\3\27\0\12\3\1\110\17\3\3\0"+
    "\1\3\3\0\3\3\27\0\11\3\1\256\20\3\3\0"+
    "\1\3\3\0\3\3\27\0\2\3\1\u01c4\27\3\3\0"+
    "\1\3\3\0\3\3\27\0\20\3\1\u01c5\11\3\3\0"+
    "\1\3\3\0\3\3\27\0\4\3\1\u01c6\25\3\3\0"+
    "\1\3\3\0\3\3\27\0\4\3\1\u01c7\25\3\3\0"+
    "\1\3\3\0\3\3\27\0\7\3\1\u01c8\22\3\3\0"+
    "\1\3\3\0\3\3\27\0\2\3\1\u01c9\7\3\1\u01ca"+
    "\5\3\1\u01cb\5\3\1\u01cc\3\3\3\0\1\3\3\0"+
    "\3\3\27\0\13\3\1\316\16\3\3\0\1\3\3\0"+
    "\3\3\27\0\16\3\1\373\13\3\3\0\1\3\3\0"+
    "\3\3\27\0\11\3\1\107\20\3\3\0\1\3\3\0"+
    "\3\3\27\0\13\3\1\146\16\3\3\0\1\3\3\0"+
    "\3\3\27\0\13\3\1\u0160\16\3\3\0\1\3\3\0"+
    "\3\3\27\0\4\3\1\u01cd\25\3\3\0\1\3\3\0"+
    "\3\3\27\0\4\3\1\u01ce\25\3\3\0\1\3\3\0"+
    "\3\3\27\0\5\3\1\110\1\u01cf\23\3\3\0\1\3"+
    "\3\0\3\3\27\0\15\3\1\u01d0\14\3\3\0\1\3"+
    "\3\0\3\3\27\0\12\3\1\153\6\3\1\u012a\10\3"+
    "\3\0\1\3\3\0\3\3\27\0\13\3\1\u01d1\16\3"+
    "\3\0\1\3\3\0\3\3\27\0\26\3\1\107\3\3"+
    "\3\0\1\3\2\0\7\301\1\u0157\1\u01d2\71\301\1\u0158"+
    "\1\u01d3\11\301\1\300\50\301\1\0\3\3\27\0\12\3"+
    "\1\u010d\17\3\3\0\1\3\3\0\3\3\27\0\11\3"+
    "\1\342\20\3\3\0\1\3\3\0\3\3\27\0\11\3"+
    "\1\u01d4\20\3\3\0\1\3\3\0\3\3\27\0\7\3"+
    "\1\u01a6\22\3\3\0\1\3\3\0\3\3\27\0\5\3"+
    "\1\113\24\3\3\0\1\3\3\0\3\3\27\0\16\3"+
    "\1\u01d5\13\3\3\0\1\3\3\0\3\3\27\0\7\3"+
    "\1\u01d6\22\3\3\0\1\3\3\0\3\3\27\0\4\3"+
    "\1\110\25\3\3\0\1\3\3\0\3\3\27\0\1\u01d7"+
    "\31\3\3\0\1\3\3\0\3\3\27\0\25\3\1\373"+
    "\4\3\3\0\1\3\3\0\3\3\27\0\13\3\1\u01d8"+
    "\16\3\3\0\1\3\3\0\3\3\27\0\5\3\1\u01d9"+
    "\24\3\3\0\1\3\3\0\3\3\27\0\5\3\1\u01da"+
    "\24\3\3\0\1\3\3\0\3\3\27\0\6\3\1\u01db"+
    "\23\3\3\0\1\3\3\0\3\3\27\0\5\3\1\u01dc"+
    "\11\3\1\u01dd\12\3\3\0\1\3\3\0\3\3\27\0"+
    "\11\3\1\u01de\20\3\3\0\1\3\3\0\3\3\27\0"+
    "\5\3\1\u01df\24\3\3\0\1\3\3\0\3\3\27\0"+
    "\1\u01bf\31\3\3\0\1\3\3\0\3\3\27\0\10\3"+
    "\1\u01e0\21\3\3\0\1\3\3\0\3\3\27\0\4\3"+
    "\1\u0188\25\3\3\0\1\3\3\0\3\3\27\0\27\3"+
    "\1\u0127\2\3\3\0\1\3\37\0\1\u01e1\36\0\3\3"+
    "\27\0\10\3\1\110\21\3\3\0\1\3\3\0\3\3"+
    "\27\0\2\3\1\u01e2\27\3\3\0\1\3\3\0\3\3"+
    "\27\0\20\3\1\u01e3\11\3\3\0\1\3\3\0\3\3"+
    "\27\0\11\3\1\u01e4\20\3\3\0\1\3\3\0\3\3"+
    "\27\0\20\3\1\u01e5\11\3\3\0\1\3\3\0\3\3"+
    "\27\0\7\3\1\u012a\22\3\3\0\1\3\3\0\3\3"+
    "\27\0\22\3\1\302\7\3\3\0\1\3\3\0\3\3"+
    "\27\0\12\3\1\u01e6\17\3\3\0\1\3\3\0\3\3"+
    "\27\0\20\3\1\u01e7\2\3\1\u01e8\6\3\3\0\1\3"+
    "\3\0\3\3\27\0\13\3\1\373\16\3\3\0\1\3"+
    "\3\0\3\3\27\0\2\3\1\u01c9\27\3\3\0\1\3"+
    "\3\0\3\3\27\0\4\3\1\u01e9\25\3\3\0\1\3"+
    "\3\0\3\3\27\0\5\3\1\342\24\3\3\0\1\3"+
    "\3\0\3\3\27\0\4\3\1\u01ea\25\3\3\0\1\3"+
    "\3\0\3\3\27\0\17\3\1\u01eb\12\3\3\0\1\3"+
    "\3\0\3\3\27\0\6\3\1\u01ec\23\3\3\0\1\3"+
    "\3\0\3\3\27\0\5\3\1\u01ed\24\3\3\0\1\3"+
    "\3\0\3\3\27\0\5\3\1\u01ee\3\3\1\u01d7\20\3"+
    "\3\0\1\3\3\0\3\3\27\0\5\3\1\250\24\3"+
    "\3\0\1\3\3\0\3\3\27\0\24\3\1\110\5\3"+
    "\3\0\1\3\3\0\3\3\27\0\16\3\1\u01ef\13\3"+
    "\3\0\1\3\3\0\3\3\27\0\11\3\1\u01f0\20\3"+
    "\3\0\1\3\3\0\3\3\27\0\13\3\1\u01f1\16\3"+
    "\3\0\1\3\3\0\3\3\27\0\5\3\1\373\24\3"+
    "\3\0\1\3\3\0\3\3\27\0\11\3\1\u01df\20\3"+
    "\3\0\1\3\3\0\3\3\27\0\20\3\1\107\11\3"+
    "\3\0\1\3\3\0\3\3\27\0\7\3\1\u01f2\22\3"+
    "\3\0\1\3\3\0\3\3\27\0\2\3\1\u01f3\27\3"+
    "\3\0\1\3\3\0\3\3\27\0\17\3\1\u01f4\12\3"+
    "\3\0\1\3\3\0\3\3\27\0\5\3\1\u0196\24\3"+
    "\3\0\1\3\3\0\3\3\27\0\13\3\1\u01f5\16\3"+
    "\3\0\1\3\3\0\3\3\27\0\6\3\1\u014d\23\3"+
    "\3\0\1\3\3\0\3\3\27\0\17\3\1\373\12\3"+
    "\3\0\1\3\3\0\3\3\27\0\2\3\1\u0114\27\3"+
    "\3\0\1\3\3\0\3\3\27\0\17\3\1\u01f6\12\3"+
    "\3\0\1\3\3\0\3\3\27\0\2\3\1\u01f7\27\3"+
    "\3\0\1\3\3\0\3\3\27\0\2\3\1\u01f8\27\3"+
    "\3\0\1\3\3\0\3\3\27\0\1\u01f9\31\3\3\0"+
    "\1\3\3\0\3\3\27\0\17\3\1\u01fa\12\3\3\0"+
    "\1\3\3\0\3\3\27\0\17\3\1\321\12\3\3\0"+
    "\1\3\3\0\3\3\27\0\1\3\1\u01fb\1\3\1\u01fc"+
    "\1\3\1\u01fd\23\3\1\u01fe\3\0\1\3\3\0\3\3"+
    "\27\0\4\3\1\u01ff\25\3\3\0\1\3\3\0\3\3"+
    "\27\0\2\3\1\u016c\27\3\3\0\1\3\3\0\3\3"+
    "\27\0\7\3\1\u0200\22\3\3\0\1\3\3\0\3\3"+
    "\27\0\7\3\1\u0201\22\3\3\0\1\3\3\0\3\3"+
    "\27\0\1\u0202\31\3\3\0\1\3\3\0\3\3\27\0"+
    "\4\3\1\u0203\25\3\3\0\1\3\3\0\3\3\27\0"+
    "\2\3\1\u0204\27\3\3\0\1\3\3\0\3\3\27\0"+
    "\2\3\1\u0205\27\3\3\0\1\3\3\0\3\3\27\0"+
    "\1\u0206\16\3\1\u0207\12\3\3\0\1\3\3\0\3\3"+
    "\27\0\2\3\1\u0208\27\3\3\0\1\3\3\0\3\3"+
    "\27\0\4\3\1\u0209\25\3\3\0\1\3\3\0\3\3"+
    "\27\0\2\3\1\u0181\27\3\3\0\1\3\3\0\3\3"+
    "\27\0\1\u020a\31\3\3\0\1\3\3\0\3\3\27\0"+
    "\25\3\1\342\4\3\3\0\1\3\3\0\3\3\27\0"+
    "\17\3\1\250\12\3\3\0\1\3\3\0\3\3\27\0"+
    "\2\3\1\u020b\27\3\3\0\1\3\3\0\3\3\27\0"+
    "\11\3\1\u012c\20\3\3\0\1\3\3\0\2\3\1\u01b4"+
    "\27\0\1\u020c\31\3\3\0\1\3\3\0\3\3\27\0"+
    "\24\3\1\u020d\5\3\3\0\1\3\3\0\3\3\27\0"+
    "\13\3\1\110\16\3\3\0\1\3\3\0\3\3\27\0"+
    "\11\3\1\u020e\20\3\3\0\1\3\3\0\3\3\27\0"+
    "\4\3\1\u020f\25\3\3\0\1\3\3\0\3\3\27\0"+
    "\17\3\1\u0210\12\3\3\0\1\3\3\0\3\3\27\0"+
    "\5\3\1\164\24\3\3\0\1\3\3\0\3\3\27\0"+
    "\14\3\1\u0211\15\3\3\0\1\3\3\0\3\3\27\0"+
    "\7\3\1\u0212\22\3\3\0\1\3\3\0\3\3\27\0"+
    "\2\3\1\140\27\3\3\0\1\3\3\0\3\3\27\0"+
    "\7\3\1\u0213\22\3\3\0\1\3\3\0\3\3\27\0"+
    "\4\3\1\u0214\25\3\3\0\1\3\3\0\3\3\27\0"+
    "\3\3\1\107\26\3\3\0\1\3\3\0\3\3\27\0"+
    "\12\3\1\u0215\17\3\3\0\1\3\3\0\3\3\27\0"+
    "\5\3\1\u0216\14\3\1\302\7\3\3\0\1\3\3\0"+
    "\3\3\27\0\13\3\1\u0217\16\3\3\0\1\3\3\0"+
    "\3\3\27\0\17\3\1\u0218\12\3\3\0\1\3\3\0"+
    "\3\3\27\0\5\3\1\250\1\u0219\23\3\3\0\1\3"+
    "\3\0\3\3\27\0\1\113\31\3\3\0\1\3\3\0"+
    "\3\3\27\0\1\3\1\u021a\30\3\3\0\1\3\3\0"+
    "\3\3\27\0\20\3\1\302\11\3\3\0\1\3\3\0"+
    "\3\3\27\0\12\3\1\250\17\3\3\0\1\3\3\0"+
    "\3\3\27\0\5\3\1\u021b\24\3\3\0\1\3\3\0"+
    "\3\3\27\0\17\3\1\u021c\12\3\3\0\1\3\3\0"+
    "\3\3\27\0\6\3\1\u021d\23\3\3\0\1\3\3\0"+
    "\3\3\27\0\17\3\1\u021e\12\3\3\0\1\3\3\0"+
    "\3\3\27\0\25\3\1\u021f\4\3\3\0\1\3\3\0"+
    "\3\3\27\0\4\3\1\u0220\25\3\3\0\1\3\3\0"+
    "\3\3\27\0\1\3\1\u01ad\30\3\3\0\1\3\3\0"+
    "\3\3\27\0\2\3\1\u0221\27\3\3\0\1\3\3\0"+
    "\3\3\27\0\7\3\1\u0222\22\3\3\0\1\3\3\0"+
    "\3\3\27\0\5\3\1\u0223\24\3\3\0\1\3\3\0"+
    "\3\3\27\0\1\107\10\3\1\u0217\20\3\3\0\1\3"+
    "\3\0\3\3\27\0\4\3\1\u010d\25\3\3\0\1\3"+
    "\3\0\3\3\27\0\1\u0224\31\3\3\0\1\3\3\0"+
    "\3\3\27\0\14\3\1\u01a9\15\3\3\0\1\3\3\0"+
    "\3\3\27\0\2\3\1\u017a\27\3\3\0\1\3\3\0"+
    "\3\3\27\0\2\3\1\u0225\27\3\3\0\1\3\3\0"+
    "\3\3\27\0\17\3\1\u0226\12\3\3\0\1\3\3\0"+
    "\3\3\27\0\2\3\1\u0227\27\3\3\0\1\3\3\0"+
    "\3\3\27\0\5\3\1\u0228\24\3\3\0\1\3\3\0"+
    "\3\3\27\0\1\132\31\3\3\0\1\3\3\0\3\3"+
    "\27\0\5\3\1\110\24\3\3\0\1\3\3\0\3\3"+
    "\27\0\7\3\1\250\22\3\3\0\1\3\3\0\3\3"+
    "\27\0\5\3\1\u0229\24\3\3\0\1\3\3\0\3\3"+
    "\27\0\17\3\1\u022a\12\3\3\0\1\3\3\0\3\3"+
    "\27\0\11\3\1\u021e\20\3\3\0\1\3\3\0\3\3"+
    "\27\0\17\3\1\u022b\12\3\3\0\1\3\3\0\3\3"+
    "\27\0\6\3\1\u01bf\23\3\3\0\1\3\3\0\3\3"+
    "\27\0\6\3\1\u022c\23\3\3\0\1\3\3\0\3\3"+
    "\27\0\6\3\1\373\23\3\3\0\1\3\3\0\3\3"+
    "\27\0\4\3\1\u022d\25\3\3\0\1\3\40\0\1\u022e"+
    "\35\0\3\3\27\0\20\3\1\u022f\11\3\3\0\1\3"+
    "\3\0\3\3\27\0\17\3\1\243\12\3\3\0\1\3"+
    "\3\0\3\3\27\0\5\3\1\u0194\24\3\3\0\1\3"+
    "\3\0\3\3\27\0\1\u0126\6\3\1\u01a4\22\3\3\0"+
    "\1\3\3\0\3\3\27\0\11\3\1\u0230\20\3\3\0"+
    "\1\3\3\0\3\3\27\0\4\3\1\u0231\25\3\3\0"+
    "\1\3\3\0\3\3\27\0\11\3\1\u0232\20\3\3\0"+
    "\1\3\3\0\3\3\27\0\2\3\1\151\27\3\3\0"+
    "\1\3\3\0\3\3\27\0\17\3\1\233\12\3\3\0"+
    "\1\3\3\0\3\3\27\0\12\3\1\u01bc\17\3\3\0"+
    "\1\3\3\0\3\3\27\0\14\3\1\u0233\15\3\3\0"+
    "\1\3\3\0\3\3\27\0\2\3\1\u0234\27\3\3\0"+
    "\1\3\3\0\3\3\27\0\17\3\1\u01bf\12\3\3\0"+
    "\1\3\3\0\3\3\27\0\1\u01f3\31\3\3\0\1\3"+
    "\3\0\3\3\27\0\13\3\1\u0114\16\3\3\0\1\3"+
    "\3\0\3\3\27\0\17\3\1\u0235\12\3\3\0\1\3"+
    "\3\0\3\3\27\0\13\3\1\u010f\16\3\3\0\1\3"+
    "\3\0\3\3\27\0\12\3\1\u0132\17\3\3\0\1\3"+
    "\3\0\3\3\27\0\14\3\1\107\15\3\3\0\1\3"+
    "\3\0\3\3\27\0\1\u011d\31\3\3\0\1\3\3\0"+
    "\3\3\27\0\20\3\1\304\11\3\3\0\1\3\3\0"+
    "\3\3\27\0\5\3\1\233\24\3\3\0\1\3\3\0"+
    "\3\3\27\0\1\3\1\u0236\30\3\3\0\1\3\3\0"+
    "\3\3\27\0\5\3\1\255\24\3\3\0\1\3\3\0"+
    "\3\3\27\0\7\3\1\u0237\22\3\3\0\1\3\3\0"+
    "\3\3\27\0\1\u0238\31\3\3\0\1\3\3\0\3\3"+
    "\27\0\25\3\1\u0127\4\3\3\0\1\3\3\0\3\3"+
    "\27\0\11\3\1\u0239\20\3\3\0\1\3\3\0\3\3"+
    "\27\0\13\3\1\u023a\16\3\3\0\1\3\3\0\3\3"+
    "\27\0\1\u023b\31\3\3\0\1\3\3\0\3\3\27\0"+
    "\11\3\1\117\20\3\3\0\1\3\3\0\3\3\27\0"+
    "\1\3\1\u023c\30\3\3\0\1\3\3\0\3\3\27\0"+
    "\2\3\1\u023d\27\3\3\0\1\3\3\0\3\3\27\0"+
    "\20\3\1\u0143\11\3\3\0\1\3\3\0\3\3\27\0"+
    "\20\3\1\u023e\11\3\3\0\1\3\3\0\3\3\27\0"+
    "\17\3\1\u023f\12\3\3\0\1\3\3\0\3\3\27\0"+
    "\6\3\1\u01ac\23\3\3\0\1\3\3\0\3\3\27\0"+
    "\12\3\1\u01e0\17\3\3\0\1\3\3\0\3\3\27\0"+
    "\5\3\1\u0240\24\3\3\0\1\3\3\0\3\3\27\0"+
    "\4\3\1\u0241\25\3\3\0\1\3\3\0\3\3\27\0"+
    "\6\3\1\u0242\23\3\3\0\1\3\3\0\3\3\27\0"+
    "\12\3\1\u0243\17\3\3\0\1\3\3\0\3\3\27\0"+
    "\10\3\1\u0244\21\3\3\0\1\3\3\0\3\3\27\0"+
    "\26\3\1\342\3\3\3\0\1\3\3\0\3\3\27\0"+
    "\2\3\1\u0245\27\3\3\0\1\3\3\0\3\3\27\0"+
    "\22\3\1\342\7\3\3\0\1\3\3\0\3\3\27\0"+
    "\1\u0246\31\3\3\0\1\3\3\0\3\3\27\0\11\3"+
    "\1\u01f3\20\3\3\0\1\3\3\0\3\3\27\0\2\3"+
    "\1\u0247\27\3\3\0\1\3\3\0\3\3\27\0\17\3"+
    "\1\u0248\12\3\3\0\1\3\3\0\3\3\27\0\1\u0249"+
    "\31\3\3\0\1\3\3\0\3\3\27\0\20\3\1\u013e"+
    "\6\3\1\373\2\3\3\0\1\3\3\0\3\3\27\0"+
    "\1\3\1\110\30\3\3\0\1\3\3\0\3\3\27\0"+
    "\1\u024a\31\3\3\0\1\3\3\0\3\3\27\0\20\3"+
    "\1\u024b\11\3\3\0\1\3\3\0\3\3\27\0\17\3"+
    "\1\u010d\12\3\3\0\1\3\3\0\3\3\27\0\17\3"+
    "\1\u024c\12\3\3\0\1\3\3\0\3\3\27\0\11\3"+
    "\1\u024d\20\3\3\0\1\3\3\0\3\3\27\0\4\3"+
    "\1\u024e\25\3\3\0\1\3\3\0\3\3\27\0\20\3"+
    "\1\u024f\11\3\3\0\1\3\3\0\3\3\27\0\1\107"+
    "\31\3\3\0\1\3\3\0\3\3\27\0\5\3\1\u012a"+
    "\24\3\3\0\1\3\3\0\3\3\27\0\25\3\1\u0250"+
    "\4\3\3\0\1\3\3\0\3\3\27\0\17\3\1\u0114"+
    "\12\3\3\0\1\3\3\0\3\3\27\0\5\3\1\u01a9"+
    "\24\3\3\0\1\3\3\0\3\3\27\0\5\3\1\u0251"+
    "\24\3\3\0\1\3\3\0\3\3\27\0\27\3\1\302"+
    "\2\3\3\0\1\3\3\0\3\3\27\0\6\3\1\u0252"+
    "\23\3\3\0\1\3\3\0\3\3\27\0\17\3\1\u0253"+
    "\12\3\3\0\1\3\3\0\3\3\27\0\1\317\1\3"+
    "\1\372\27\3\3\0\1\3\3\0\3\3\27\0\10\3"+
    "\1\u0249\5\3\1\110\13\3\3\0\1\3\3\0\3\3"+
    "\27\0\16\3\1\u0254\13\3\3\0\1\3\3\0\3\3"+
    "\27\0\6\3\1\u013e\23\3\3\0\1\3\37\0\1\u0255"+
    "\36\0\3\3\27\0\1\u0256\31\3\3\0\1\3\3\0"+
    "\3\3\27\0\6\3\1\u0257\23\3\3\0\1\3\3\0"+
    "\3\3\27\0\1\124\31\3\3\0\1\3\3\0\3\3"+
    "\27\0\6\3\1\u0258\23\3\3\0\1\3\3\0\3\3"+
    "\27\0\17\3\1\u0259\12\3\3\0\1\3\3\0\3\3"+
    "\27\0\6\3\1\u025a\23\3\3\0\1\3\3\0\3\3"+
    "\27\0\1\3\1\u025b\30\3\3\0\1\3\3\0\3\3"+
    "\27\0\13\3\1\u01d7\16\3\3\0\1\3\3\0\3\3"+
    "\27\0\2\3\1\u025c\27\3\3\0\1\3\3\0\3\3"+
    "\27\0\4\3\1\u025d\25\3\3\0\1\3\3\0\3\3"+
    "\27\0\26\3\1\u025e\3\3\3\0\1\3\3\0\3\3"+
    "\27\0\2\3\1\u01f9\27\3\3\0\1\3\3\0\3\3"+
    "\27\0\10\3\1\u0188\21\3\3\0\1\3\3\0\3\3"+
    "\27\0\2\3\1\u025f\27\3\3\0\1\3\3\0\3\3"+
    "\27\0\5\3\1\u0260\24\3\3\0\1\3\3\0\3\3"+
    "\27\0\10\3\1\u0261\21\3\3\0\1\3\3\0\3\3"+
    "\27\0\6\3\1\u0262\23\3\3\0\1\3\3\0\3\3"+
    "\27\0\1\u0263\31\3\3\0\1\3\3\0\3\3\27\0"+
    "\2\3\1\107\14\3\1\u015a\12\3\3\0\1\3\3\0"+
    "\3\3\27\0\4\3\1\u0264\25\3\3\0\1\3\3\0"+
    "\3\3\27\0\4\3\1\u0265\25\3\3\0\1\3\3\0"+
    "\3\3\27\0\11\3\1\u0222\20\3\3\0\1\3\3\0"+
    "\3\3\27\0\3\3\1\u0266\26\3\3\0\1\3\3\0"+
    "\3\3\27\0\12\3\1\u0249\17\3\3\0\1\3\3\0"+
    "\3\3\27\0\6\3\1\u0267\23\3\3\0\1\3\3\0"+
    "\3\3\27\0\4\3\1\u0268\25\3\3\0\1\3\3\0"+
    "\3\3\27\0\4\3\1\u01a9\25\3\3\0\1\3\3\0"+
    "\3\3\27\0\7\3\1\u0269\22\3\3\0\1\3\3\0"+
    "\3\3\27\0\17\3\1\u017c\12\3\3\0\1\3\3\0"+
    "\3\3\27\0\4\3\1\u026a\25\3\3\0\1\3\3\0"+
    "\3\3\27\0\6\3\1\u026b\23\3\3\0\1\3\3\0"+
    "\3\3\27\0\17\3\1\u026c\12\3\3\0\1\3\3\0"+
    "\3\3\27\0\4\3\1\u026d\25\3\3\0\1\3\3\0"+
    "\2\3\1\u026e\27\0\32\3\3\0\1\3\3\0\3\3"+
    "\27\0\6\3\1\u012a\23\3\3\0\1\3\3\0\3\3"+
    "\27\0\22\3\1\u026f\7\3\3\0\1\3\3\0\3\3"+
    "\27\0\23\3\1\u01bc\6\3\3\0\1\3\3\0\3\3"+
    "\27\0\13\3\1\u0270\16\3\3\0\1\3\47\0\1\u0271"+
    "\26\0\3\3\27\0\25\3\1\u0272\4\3\3\0\1\3"+
    "\3\0\3\3\27\0\27\3\1\u01a3\2\3\3\0\1\3"+
    "\3\0\3\3\27\0\2\3\1\u0273\27\3\3\0\1\3"+
    "\3\0\3\3\27\0\22\3\1\u0236\7\3\3\0\1\3"+
    "\3\0\3\3\27\0\12\3\1\362\17\3\3\0\1\3"+
    "\3\0\3\3\27\0\12\3\1\u0274\17\3\3\0\1\3"+
    "\3\0\3\3\27\0\22\3\1\362\7\3\3\0\1\3"+
    "\3\0\3\3\27\0\1\u0275\31\3\3\0\1\3\3\0"+
    "\3\3\27\0\20\3\1\u0276\11\3\3\0\1\3\3\0"+
    "\3\3\27\0\2\3\1\372\27\3\3\0\1\3\3\0"+
    "\3\3\27\0\11\3\1\u0277\20\3\3\0\1\3\3\0"+
    "\3\3\27\0\20\3\1\u0278\11\3\3\0\1\3\3\0"+
    "\3\3\27\0\17\3\1\u0279\12\3\3\0\1\3\3\0"+
    "\2\3\1\u027a\27\0\32\3\3\0\1\3\3\0\3\3"+
    "\27\0\2\3\1\u027b\27\3\3\0\1\3\3\0\3\3"+
    "\27\0\4\3\1\u0278\25\3\3\0\1\3\3\0\3\3"+
    "\27\0\22\3\1\224\7\3\3\0\1\3\3\0\3\3"+
    "\27\0\21\3\1\u027c\10\3\3\0\1\3\3\0\3\3"+
    "\27\0\21\3\1\u027d\10\3\3\0\1\3\3\0\3\3"+
    "\27\0\12\3\1\u027e\17\3\3\0\1\3\3\0\3\3"+
    "\27\0\17\3\1\u027f\12\3\3\0\1\3\3\0\3\3"+
    "\27\0\5\3\1\u0280\24\3\3\0\1\3\3\0\3\3"+
    "\27\0\4\3\1\u0260\25\3\3\0\1\3\3\0\3\3"+
    "\27\0\10\3\1\146\21\3\3\0\1\3\3\0\2\3"+
    "\1\u0281\27\0\32\3\3\0\1\3\3\0\3\3\27\0"+
    "\11\3\1\u0127\20\3\3\0\1\3\3\0\3\3\27\0"+
    "\20\3\1\u0282\11\3\3\0\1\3\3\0\3\3\27\0"+
    "\2\3\1\250\27\3\3\0\1\3\3\0\3\3\27\0"+
    "\6\3\1\370\23\3\3\0\1\3\3\0\3\3\27\0"+
    "\4\3\1\u0283\25\3\3\0\1\3\3\0\3\3\27\0"+
    "\6\3\1\u0284\23\3\3\0\1\3\3\0\3\3\27\0"+
    "\1\3\1\u010d\2\3\1\u0285\6\3\1\u01be\16\3\3\0"+
    "\1\3\3\0\3\3\27\0\5\3\1\u0133\24\3\3\0"+
    "\1\3\3\0\2\3\1\u0286\27\0\12\3\1\u0274\17\3"+
    "\3\0\1\3\3\0\3\3\27\0\1\u0287\31\3\3\0"+
    "\1\3\3\0\3\3\27\0\20\3\1\u0288\3\3\1\u0289"+
    "\5\3\3\0\1\3\3\0\3\3\27\0\12\3\1\u0188"+
    "\17\3\3\0\1\3\3\0\3\3\27\0\11\3\1\u014b"+
    "\20\3\3\0\1\3\3\0\3\3\27\0\15\3\1\u028a"+
    "\7\3\1\u028b\4\3\3\0\1\3\3\0\3\3\27\0"+
    "\11\3\1\u028c\20\3\3\0\1\3\3\0\3\3\27\0"+
    "\1\317\31\3\3\0\1\3\3\0\3\3\27\0\4\3"+
    "\1\u0227\25\3\3\0\1\3\3\0\3\3\27\0\17\3"+
    "\1\u028d\12\3\3\0\1\3\3\0\3\3\27\0\17\3"+
    "\1\u028e\12\3\3\0\1\3\3\0\3\3\27\0\13\3"+
    "\1\u028f\16\3\3\0\1\3\3\0\3\3\27\0\17\3"+
    "\1\u0290\12\3\3\0\1\3\3\0\3\3\27\0\2\3"+
    "\1\u0291\27\3\3\0\1\3\3\0\3\3\27\0\11\3"+
    "\1\u0292\20\3\3\0\1\3\3\0\3\3\27\0\17\3"+
    "\1\u0293\12\3\3\0\1\3\3\0\3\3\27\0\13\3"+
    "\1\u0294\16\3\3\0\1\3\3\0\3\3\27\0\25\3"+
    "\1\u0295\4\3\3\0\1\3\3\0\3\3\27\0\6\3"+
    "\1\u0296\23\3\3\0\1\3\3\0\3\3\27\0\1\3"+
    "\1\u01a7\30\3\3\0\1\3\3\0\3\3\27\0\25\3"+
    "\1\u0297\4\3\3\0\1\3\3\0\3\3\27\0\21\3"+
    "\1\u0298\10\3\3\0\1\3\3\0\3\3\27\0\13\3"+
    "\1\u012c\16\3\3\0\1\3\3\0\3\3\27\0\6\3"+
    "\1\u01a6\23\3\3\0\1\3\3\0\3\3\27\0\5\3"+
    "\1\u0143\24\3\3\0\1\3\3\0\3\3\27\0\2\3"+
    "\1\u0299\27\3\3\0\1\3\3\0\3\3\27\0\20\3"+
    "\1\u01a3\11\3\3\0\1\3\3\0\3\3\27\0\17\3"+
    "\1\u029a\12\3\3\0\1\3\3\0\3\3\27\0\10\3"+
    "\1\u029b\21\3\3\0\1\3\3\0\3\3\27\0\20\3"+
    "\1\u01e7\11\3\3\0\1\3\3\0\3\3\27\0\7\3"+
    "\1\u029c\22\3\3\0\1\3\3\0\3\3\27\0\15\3"+
    "\1\u029d\14\3\3\0\1\3\3\0\3\3\27\0\1\u029e"+
    "\31\3\3\0\1\3\3\0\3\3\27\0\5\3\1\u029f"+
    "\24\3\3\0\1\3\3\0\3\3\27\0\5\3\1\u02a0"+
    "\24\3\3\0\1\3\3\0\3\3\27\0\1\u02a1\31\3"+
    "\3\0\1\3\3\0\3\3\27\0\17\3\1\u02a2\12\3"+
    "\3\0\1\3\3\0\3\3\27\0\20\3\1\u02a3\11\3"+
    "\3\0\1\3\3\0\3\3\27\0\4\3\1\u02a4\25\3"+
    "\3\0\1\3\3\0\3\3\27\0\2\3\1\u02a5\27\3"+
    "\3\0\1\3\3\0\3\3\27\0\21\3\1\u02a6\10\3"+
    "\3\0\1\3\3\0\3\3\27\0\1\3\1\u02a7\2\3"+
    "\1\u0283\25\3\3\0\1\3\3\0\3\3\27\0\2\3"+
    "\1\u02a8\27\3\3\0\1\3\3\0\3\3\27\0\4\3"+
    "\1\u02a9\25\3\3\0\1\3\3\0\3\3\27\0\1\u02aa"+
    "\31\3\3\0\1\3\3\0\3\3\27\0\17\3\1\u02ab"+
    "\12\3\3\0\1\3\3\0\3\3\27\0\7\3\1\u02ac"+
    "\22\3\3\0\1\3\3\0\3\3\27\0\20\3\1\u02a5"+
    "\11\3\3\0\1\3\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[37937];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\3\1\1\11\1\1\1\11"+
    "\6\1\3\11\1\1\1\11\1\1\1\11\1\1\2\11"+
    "\32\1\2\11\4\1\12\11\166\1\1\11\3\1\2\0"+
    "\225\1\2\0\25\1\1\0\143\1\1\11\16\1\1\0"+
    "\114\1\1\0\46\1\1\0\33\1\1\11\73\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[684];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    public int line;
    public int initialcolumn;
    public int finalcolumn;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Alexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Alexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 146) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 29: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Comentario;
          }
        case 44: break;
        case 37: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Corchetes;
          }
        case 45: break;
        case 33: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Mayor_o_igual_que;
          }
        case 46: break;
        case 24: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Arroba;
          }
        case 47: break;
        case 34: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Operador_no_igual;
          }
        case 48: break;
        case 26: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Cierre_signo_de_Interrogacion;
          }
        case 49: break;
        case 14: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Signo_de_Exclamaci√≥n;
          }
        case 50: break;
        case 25: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Numeral;
          }
        case 51: break;
        case 4: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Gui√≥n_bajo;
          }
        case 52: break;
        case 3: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Int;
          }
        case 53: break;
        case 40: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Doble_Numeral;
          }
        case 54: break;
        case 15: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Punto_y_coma;
          }
        case 55: break;
        case 38: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Par√©ntesis;
          }
        case 56: break;
        case 39: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Llaves;
          }
        case 57: break;
        case 43: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return String;
          }
        case 58: break;
        case 17: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Punto;
          }
        case 59: break;
        case 30: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return ComentarioE;
          }
        case 60: break;
        case 7: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Resta;
          }
        case 61: break;
        case 42: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return StringE;
          }
        case 62: break;
        case 8: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Multiplicacion;
          }
        case 63: break;
        case 27: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Apertura_signo_de_Interrogacion;
          }
        case 64: break;
        case 1: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return ERROR;
          }
        case 65: break;
        case 21: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Cierre_de_par√©ntesis;
          }
        case 66: break;
        case 10: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Porcentaje;
          }
        case 67: break;
        case 2: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Identificador;
          }
        case 68: break;
        case 32: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Operador_de_Igualdad;
          }
        case 69: break;
        case 19: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Cierre_de_corchetes;
          }
        case 70: break;
        case 12: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Igual;
          }
        case 71: break;
        case 36: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Operador_OR;
          }
        case 72: break;
        case 28: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Float;
          }
        case 73: break;
        case 31: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Menor_o_igual_que;
          }
        case 74: break;
        case 41: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Reservadas;
          }
        case 75: break;
        case 9: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Division;
          }
        case 76: break;
        case 23: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Cierre_de_llaves;
          }
        case 77: break;
        case 22: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Apertura_de_llaves;
          }
        case 78: break;
        case 20: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Apertura_de_par√©ntesis;
          }
        case 79: break;
        case 18: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Apertura_de_corchetes;
          }
        case 80: break;
        case 16: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Coma;
          }
        case 81: break;
        case 11: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Menor_que;
          }
        case 82: break;
        case 6: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Suma;
          }
        case 83: break;
        case 5: 
          { /*Ignore*/
          }
        case 84: break;
        case 35: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Operador_AND;
          }
        case 85: break;
        case 13: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Mayor_que;
          }
        case 86: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
