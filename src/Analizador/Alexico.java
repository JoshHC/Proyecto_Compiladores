/* The following code was generated by JFlex 1.4.3 on 28/10/19 02:29 PM */

package Analizador;
import static Analizador.Tokens.*;

/* Secci√≥n de declaraciones de JFlex */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 28/10/19 02:29 PM from the specification file
 * <tt>C:/Users/josue/Documents/NetBeansProjects/Proyecto_Compiladores/Proyecto_Compiladores/src/Analizador/Alexico.flex</tt>
 */
class Alexico {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\34\2\0\1\33\22\0\1\67\1\15\1\0\1\32"+
    "\1\0\1\11\1\16\1\71\1\25\1\26\1\7\1\5\1\21\1\6"+
    "\1\22\1\10\1\70\1\70\10\2\1\0\1\20\1\12\1\13\1\14"+
    "\1\73\1\31\1\35\1\52\1\46\1\36\1\37\1\45\1\57\1\47"+
    "\1\53\1\65\1\61\1\44\1\62\1\43\1\55\1\50\1\66\1\42"+
    "\1\54\1\41\1\51\1\64\1\63\1\40\1\56\1\60\1\23\1\0"+
    "\1\24\1\0\1\3\1\0\4\1\1\72\25\1\1\27\1\17\1\30"+
    "\101\0\1\74\uff40\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\2\1"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\30\2\1\32\1\1\1\33\1\34"+
    "\1\35\1\3\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\2\0\1\46\1\47\1\50\1\51\1\2"+
    "\1\52\6\2\1\53\22\2\1\54\2\2\1\55\12\2"+
    "\1\56\43\2\1\57\1\2\1\60\1\61\1\62\15\2"+
    "\1\63\1\64\1\65\11\2\1\66\1\67\2\2\1\70"+
    "\3\2\1\71\12\2\1\72\1\73\2\35\1\37\2\0"+
    "\1\74\1\75\1\76\1\77\1\2\1\100\1\101\1\2"+
    "\1\102\3\2\1\103\1\2\1\104\1\2\1\105\4\2"+
    "\1\106\16\2\1\107\15\2\1\110\24\2\1\111\26\2"+
    "\1\112\24\2\1\113\21\2\1\114\7\2\1\115\3\2"+
    "\1\116\11\2\1\117\12\2\1\120\4\2\1\121\2\2"+
    "\1\122\3\2\1\123\3\2\1\124\5\2\1\125\1\2"+
    "\1\126\3\2\1\127\14\2\2\0\10\2\1\130\1\2"+
    "\1\131\5\2\1\132\1\133\1\134\1\135\3\2\1\136"+
    "\3\2\1\137\3\2\1\140\2\2\1\0\1\2\1\141"+
    "\4\2\1\142\1\2\1\143\2\2\1\144\1\2\1\145"+
    "\1\146\3\2\1\147\1\150\10\2\1\151\3\2\1\152"+
    "\3\2\1\153\1\154\1\2\1\155\1\2\1\156\3\2"+
    "\1\157\1\2\1\160\2\2\1\161\1\162\6\2\1\163"+
    "\2\2\1\164\1\2\1\165\7\2\1\166\1\167\5\2"+
    "\1\170\20\2\1\171\12\2\1\172\1\173\13\2\1\174"+
    "\6\2\1\175\1\2\1\176\4\2\1\177\10\2\1\200"+
    "\2\2\1\201\13\2\1\202\1\203\7\2\1\204\2\2"+
    "\1\205\4\2\1\206\1\207\3\2\1\210\1\211\1\2"+
    "\1\212\2\2\1\213\7\2\1\214\1\2\1\215\1\216"+
    "\3\2\1\217\1\220\2\36\1\2\1\221\32\2\1\0"+
    "\2\2\1\222\31\2\1\223\5\2\1\224\1\225\6\2"+
    "\1\226\1\2\1\227\1\230\1\231\1\2\1\232\1\2"+
    "\1\233\1\2\1\234\6\2\1\235\4\2\1\236\1\2"+
    "\1\237\2\2\1\240\13\2\1\241\12\2\1\242\1\243"+
    "\4\2\1\244\3\2\1\245\3\2\1\246\1\247\1\250"+
    "\2\2\1\251\1\252\3\2\1\253\3\2\1\254\2\2"+
    "\1\255\20\2\1\256\4\2\1\257\3\2\1\260\10\2"+
    "\1\261\1\2\1\262\1\2\1\263\1\264\3\2\1\265"+
    "\1\266\2\2\1\267\1\2\1\270\1\271\1\2\1\272"+
    "\3\2\1\273\1\274\1\2\1\275\5\2\1\276\11\2"+
    "\1\277\1\300\4\2\1\301\1\302\1\303\1\0\1\2"+
    "\1\304\21\2\1\305\7\2\1\306\1\307\5\2\1\310"+
    "\5\2\1\311\12\2\1\312\1\313\1\2\1\314\5\2"+
    "\1\315\10\2\1\316\1\2\1\317\1\320\2\2\1\321"+
    "\7\2\1\322\3\2\1\323\1\2\1\324\1\325\1\2"+
    "\1\326\6\2\1\327\2\2\1\330\4\2\1\331\2\2"+
    "\1\332\2\2\1\333\1\2\1\334\1\335\16\2\1\336"+
    "\1\2\1\337\1\2\1\340\1\341\1\2\1\342\1\2"+
    "\1\343\6\2\1\344\6\2\1\345\2\2\1\346\1\347"+
    "\6\2\1\350\1\351\1\2\1\352\1\2\1\0\10\2"+
    "\1\353\3\2\1\354\5\2\1\355\6\2\1\356\3\2"+
    "\1\357\1\2\1\360\1\2\1\361\1\2\1\362\6\2"+
    "\1\363\1\364\1\2\1\365\1\366\4\2\1\367\4\2"+
    "\1\370\1\2\1\371\1\372\1\2\1\373\1\2\1\374"+
    "\1\375\1\2\1\376\1\2\1\377\4\2\1\u0100\1\u0101"+
    "\1\2\1\u0102\5\2\1\u0103\1\u0104\4\2\1\u0105\1\u0106"+
    "\1\2\1\u0107\11\2\1\u0108\2\2\1\u0109\2\2\1\u010a"+
    "\4\2\1\u010b\1\u010c\1\u010d\2\2\1\0\1\u010e\1\u010f"+
    "\1\u0110\1\2\1\u0111\1\2\1\u0112\2\2\1\u0113\1\2"+
    "\1\u0114\2\2\1\u0115\2\2\1\u0116\1\2\1\u0117\2\2"+
    "\1\u0118\3\2\1\u0119\1\u011a\6\2\1\u011b\1\u011c\1\u011d"+
    "\4\2\1\u011e\1\u011f\1\u0120\1\2\1\u0121\1\2\1\u0122"+
    "\1\2\1\u0123\1\u0124\1\u0125\3\2\1\u0126\5\2\1\u0127"+
    "\1\2\1\u0128\1\u0129\3\2\1\u012a\1\2\1\u012b\2\2"+
    "\1\u012c\3\2\1\u012d\2\2\1\u012e\12\2\1\u012f\2\2"+
    "\1\u0130\1\u0131\1\u0132\6\2\1\u0133\1\2\1\u0134\1\0"+
    "\1\2\1\u0135\7\2\1\u0136\2\2\1\u0137\1\2\1\u0138"+
    "\2\2\1\u0139\2\2\1\u013a\1\u013b\2\2\1\u013c\10\2"+
    "\1\u013d\1\2\1\u013e\10\2\1\u013f\1\u0140\1\2\1\u0141"+
    "\1\u0142\4\2\1\u0143\1\u0144\1\u0145\1\2\1\u0146\1\u0147"+
    "\7\2\1\u0148\5\2\1\u0149\1\2\1\u014a\1\0\1\2"+
    "\1\u014b\1\u014c\1\u014d\2\2\1\u014e\1\2\1\u014f\7\2"+
    "\1\u0150\2\2\1\u0151\3\2\1\u0152\1\u0153\3\2\1\u0154"+
    "\5\2\1\u0155\1\u0156\1\u0157\1\u0158\1\u0159\7\2\1\u015a"+
    "\3\2\1\u015b\2\2\1\u015c\1\u015d\1\0\1\2\1\u015e"+
    "\1\u015f\1\2\1\u0160\1\u0161\1\u0162\1\u0163\3\2\1\u0164"+
    "\1\u0165\4\2\1\u0166\6\2\1\u0167\1\2\1\u0168\1\u0169"+
    "\6\2\1\u016a\2\2\1\0\4\2\1\u016b\1\u016c\1\u016d"+
    "\1\2\1\u016e\1\2\1\u016f\1\u0170\1\u0171\4\2\1\u0172"+
    "\2\2\1\u0173\1\2\1\u0174\1\2\1\u0175\1\u0176\1\2"+
    "\1\u0177\1\2\1\u0178\2\2\1\u0179\1\u017a\1\2\1\u017b"+
    "\2\2\1\u017c\10\2\1\u017d\1\2\1\u017e\2\2\1\u017f"+
    "\3\2\1\u0180\3\2\1\u0181\1\u0182\17\2\1\u0183\1\2"+
    "\1\u0184\6\2\1\u0185";

  private static int [] zzUnpackAction() {
    int [] result = new int[1544];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\75\0\364\0\u0131\0\u016e"+
    "\0\75\0\u01ab\0\75\0\u01e8\0\u0225\0\u0262\0\u029f\0\u02dc"+
    "\0\u0319\0\u0356\0\75\0\75\0\u0393\0\75\0\u03d0\0\75"+
    "\0\u040d\0\75\0\75\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e"+
    "\0\u057b\0\u05b8\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u0726"+
    "\0\u0763\0\u07a0\0\u07dd\0\u081a\0\u0857\0\u0894\0\u08d1\0\u090e"+
    "\0\u094b\0\u0988\0\u09c5\0\u0a02\0\267\0\u0a3f\0\75\0\75"+
    "\0\u0a7c\0\u0131\0\u0ab9\0\u0af6\0\75\0\75\0\75\0\75"+
    "\0\75\0\75\0\u0356\0\u0b33\0\75\0\75\0\75\0\75"+
    "\0\u0b70\0\172\0\u0bad\0\u0bea\0\u0c27\0\u0c64\0\u0ca1\0\u0cde"+
    "\0\u0d1b\0\u0d58\0\u0d95\0\u0dd2\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6"+
    "\0\u0f03\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u1034\0\u1071\0\u10ae"+
    "\0\u10eb\0\u1128\0\u1165\0\172\0\u11a2\0\u11df\0\u121c\0\u1259"+
    "\0\u1296\0\u12d3\0\u1310\0\u134d\0\u138a\0\u13c7\0\u1404\0\u1441"+
    "\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u15af\0\u15ec\0\u1629"+
    "\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u175a\0\u1797\0\u17d4\0\u1811"+
    "\0\u184e\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f\0\u19bc\0\u19f9"+
    "\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u1b2a\0\u1b67\0\u1ba4\0\u1be1"+
    "\0\u1c1e\0\u1c5b\0\u1c98\0\u1cd5\0\u1d12\0\172\0\u1d4f\0\u1d8c"+
    "\0\172\0\u1dc9\0\u1e06\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37"+
    "\0\u1f74\0\u1fb1\0\u1fee\0\u202b\0\u2068\0\u20a5\0\u20e2\0\u211f"+
    "\0\u215c\0\u2199\0\u21d6\0\u2213\0\u2250\0\u228d\0\u22ca\0\u2307"+
    "\0\u2344\0\u2381\0\u23be\0\172\0\u23fb\0\u2438\0\u2475\0\172"+
    "\0\u24b2\0\u24ef\0\u252c\0\172\0\u2569\0\u25a6\0\u25e3\0\u2620"+
    "\0\u265d\0\u269a\0\u26d7\0\u2714\0\u2751\0\u278e\0\u0a3f\0\75"+
    "\0\u27cb\0\u2808\0\u2845\0\u2882\0\u28bf\0\75\0\172\0\172"+
    "\0\172\0\u28fc\0\172\0\172\0\u2939\0\u2976\0\u29b3\0\u29f0"+
    "\0\u2a2d\0\172\0\u2a6a\0\172\0\u2aa7\0\172\0\u2ae4\0\u2b21"+
    "\0\u2b5e\0\u2b9b\0\u2bd8\0\u2c15\0\u2c52\0\u2c8f\0\u2ccc\0\u2d09"+
    "\0\u2d46\0\u2d83\0\u2dc0\0\u2dfd\0\u2e3a\0\u2e77\0\u2eb4\0\u2ef1"+
    "\0\u2f2e\0\u2f6b\0\u2fa8\0\u2fe5\0\u3022\0\u305f\0\u309c\0\u30d9"+
    "\0\u3116\0\u3153\0\u3190\0\u31cd\0\u320a\0\u3247\0\u3284\0\172"+
    "\0\u32c1\0\u32fe\0\u333b\0\u3378\0\u33b5\0\u33f2\0\u342f\0\u346c"+
    "\0\u34a9\0\u34e6\0\u3523\0\u3560\0\u359d\0\u35da\0\u3617\0\u3654"+
    "\0\u3691\0\u36ce\0\u370b\0\u3748\0\172\0\u3785\0\u37c2\0\u37ff"+
    "\0\u383c\0\u3879\0\u38b6\0\u38f3\0\u3930\0\u396d\0\u39aa\0\u39e7"+
    "\0\u3a24\0\u3a61\0\u3a9e\0\u3adb\0\u3b18\0\u3b55\0\u3b92\0\u3bcf"+
    "\0\u3c0c\0\u3c49\0\u3c86\0\u3cc3\0\u3d00\0\u3d3d\0\u3d7a\0\u3db7"+
    "\0\u3df4\0\u3e31\0\u3e6e\0\u3eab\0\u3ee8\0\u3f25\0\u3f62\0\u3f9f"+
    "\0\u3fdc\0\u4019\0\u4056\0\u4093\0\u40d0\0\u410d\0\u414a\0\u4187"+
    "\0\172\0\u41c4\0\u4201\0\u423e\0\u427b\0\u42b8\0\u42f5\0\u4332"+
    "\0\u436f\0\u43ac\0\u43e9\0\u4426\0\u4463\0\u44a0\0\u44dd\0\u451a"+
    "\0\u4557\0\u4594\0\u45d1\0\u460e\0\u464b\0\u4688\0\u46c5\0\u4702"+
    "\0\u473f\0\u477c\0\u47b9\0\u47f6\0\u4833\0\u4870\0\u48ad\0\u48ea"+
    "\0\u4927\0\u4964\0\u49a1\0\u49de\0\u4a1b\0\u4a58\0\u4a95\0\u4ad2"+
    "\0\u4b0f\0\u4b4c\0\u4b89\0\u4bc6\0\u4c03\0\u4c40\0\u4c7d\0\u4cba"+
    "\0\u4cf7\0\u4d34\0\u4d71\0\172\0\u4dae\0\u4deb\0\u4e28\0\u4e65"+
    "\0\u4ea2\0\u4edf\0\u4f1c\0\u4f59\0\u4f96\0\u4fd3\0\u5010\0\u504d"+
    "\0\u508a\0\u50c7\0\u5104\0\172\0\u5141\0\u517e\0\u51bb\0\u51f8"+
    "\0\u5235\0\u5272\0\u52af\0\u52ec\0\u5329\0\u5366\0\u53a3\0\u53e0"+
    "\0\u541d\0\u545a\0\u5497\0\u54d4\0\u5511\0\u554e\0\u558b\0\u55c8"+
    "\0\u5605\0\u5642\0\u567f\0\u56bc\0\u56f9\0\u5736\0\u5773\0\u57b0"+
    "\0\u57ed\0\u582a\0\u5867\0\u58a4\0\u58e1\0\u591e\0\172\0\u595b"+
    "\0\172\0\u5998\0\u59d5\0\u5a12\0\u5a4f\0\u5a8c\0\u5ac9\0\172"+
    "\0\172\0\172\0\u5b06\0\u5b43\0\u5b80\0\172\0\u5bbd\0\u5bfa"+
    "\0\u5c37\0\u5c74\0\u5cb1\0\u5cee\0\u5d2b\0\172\0\u5d68\0\u5da5"+
    "\0\u5de2\0\u5e1f\0\172\0\u5e5c\0\u5e99\0\u5ed6\0\u5f13\0\u5f50"+
    "\0\u5f8d\0\172\0\u5fca\0\u6007\0\172\0\u6044\0\172\0\u6081"+
    "\0\u60be\0\u60fb\0\u6138\0\u6175\0\172\0\u61b2\0\u61ef\0\u622c"+
    "\0\u6269\0\u62a6\0\u62e3\0\u6320\0\u635d\0\172\0\u639a\0\u63d7"+
    "\0\u6414\0\172\0\u6451\0\u648e\0\u64cb\0\u6508\0\172\0\u6545"+
    "\0\u6582\0\u65bf\0\172\0\u65fc\0\u6639\0\u6676\0\172\0\u66b3"+
    "\0\172\0\u66f0\0\u672d\0\172\0\172\0\u676a\0\u67a7\0\u67e4"+
    "\0\u6821\0\u685e\0\u689b\0\172\0\u68d8\0\u6915\0\172\0\u6952"+
    "\0\u698f\0\u69cc\0\u6a09\0\u6a46\0\u6a83\0\u6ac0\0\u6afd\0\u6b3a"+
    "\0\172\0\172\0\u6b77\0\u6bb4\0\u6bf1\0\u6c2e\0\u6c6b\0\u6ca8"+
    "\0\u6ce5\0\u6d22\0\u6d5f\0\u6d9c\0\u6dd9\0\u6e16\0\u6e53\0\u6e90"+
    "\0\u6ecd\0\u6f0a\0\u6f47\0\u6f84\0\u6fc1\0\u6ffe\0\u703b\0\u7078"+
    "\0\172\0\u70b5\0\u70f2\0\u712f\0\u716c\0\u71a9\0\u71e6\0\u7223"+
    "\0\u7260\0\u729d\0\u72da\0\u7317\0\172\0\u7354\0\u7391\0\u73ce"+
    "\0\u740b\0\u7448\0\u7485\0\u74c2\0\u74ff\0\u753c\0\u7579\0\u75b6"+
    "\0\172\0\u75f3\0\u7630\0\u766d\0\u76aa\0\u76e7\0\u7724\0\172"+
    "\0\u7761\0\172\0\u779e\0\u77db\0\u7818\0\u7855\0\172\0\u7892"+
    "\0\u78cf\0\u790c\0\u7949\0\u7986\0\u79c3\0\u7a00\0\u7a3d\0\172"+
    "\0\u7a7a\0\u7ab7\0\172\0\u7af4\0\u7b31\0\u7b6e\0\u7bab\0\u7be8"+
    "\0\u7c25\0\u7c62\0\u7c9f\0\u7cdc\0\u7d19\0\u7d56\0\172\0\172"+
    "\0\u7d93\0\u7dd0\0\u7e0d\0\u7e4a\0\u7e87\0\u7ec4\0\u7f01\0\172"+
    "\0\u7f3e\0\u7f7b\0\u7fb8\0\u7ff5\0\u8032\0\u806f\0\u80ac\0\u80e9"+
    "\0\172\0\u8126\0\u8163\0\u81a0\0\172\0\172\0\u81dd\0\172"+
    "\0\u821a\0\u8257\0\172\0\u8294\0\u82d1\0\u830e\0\u834b\0\u8388"+
    "\0\u83c5\0\u8402\0\u843f\0\u847c\0\u84b9\0\172\0\u84f6\0\u8533"+
    "\0\u8570\0\172\0\172\0\75\0\u28bf\0\u85ad\0\172\0\u85ea"+
    "\0\u8627\0\u8664\0\u86a1\0\u86de\0\u871b\0\u8758\0\u8795\0\u87d2"+
    "\0\u880f\0\u884c\0\u8889\0\u88c6\0\u8903\0\u8940\0\u897d\0\u89ba"+
    "\0\u89f7\0\u8a34\0\u8a71\0\u8aae\0\u8aeb\0\u8b28\0\u8b65\0\u8ba2"+
    "\0\u8bdf\0\u8c1c\0\u8c59\0\u8c96\0\u8cd3\0\u8d10\0\u8d4d\0\u8d8a"+
    "\0\u8dc7\0\u8e04\0\u8e41\0\u8e7e\0\u8ebb\0\u8ef8\0\u8f35\0\u8f72"+
    "\0\u8faf\0\u8fec\0\u9029\0\u9066\0\u90a3\0\u90e0\0\u911d\0\u915a"+
    "\0\u9197\0\u91d4\0\u9211\0\u924e\0\u928b\0\u92c8\0\172\0\u9305"+
    "\0\u9342\0\u937f\0\u93bc\0\u93f9\0\172\0\172\0\u9436\0\u9473"+
    "\0\u94b0\0\u94ed\0\u952a\0\u9567\0\172\0\u95a4\0\172\0\172"+
    "\0\172\0\u95e1\0\172\0\u961e\0\172\0\u965b\0\172\0\u9698"+
    "\0\u96d5\0\u9712\0\u974f\0\u978c\0\u97c9\0\172\0\u9806\0\u9843"+
    "\0\u9880\0\u98bd\0\172\0\u98fa\0\172\0\u9937\0\u9974\0\u99b1"+
    "\0\u99ee\0\u9a2b\0\u9a68\0\u9aa5\0\u9ae2\0\u9b1f\0\u9b5c\0\u9b99"+
    "\0\u9bd6\0\u9c13\0\u9c50\0\172\0\u9c8d\0\u9cca\0\u9d07\0\u9d44"+
    "\0\u9d81\0\u9dbe\0\u9dfb\0\u9e38\0\u9e75\0\u9eb2\0\172\0\172"+
    "\0\u9eef\0\u9f2c\0\u9f69\0\u9fa6\0\172\0\u9fe3\0\ua020\0\ua05d"+
    "\0\172\0\ua09a\0\ua0d7\0\ua114\0\172\0\172\0\172\0\ua151"+
    "\0\ua18e\0\172\0\172\0\ua1cb\0\ua208\0\ua245\0\172\0\ua282"+
    "\0\ua2bf\0\ua2fc\0\172\0\ua339\0\ua376\0\172\0\ua3b3\0\ua3f0"+
    "\0\ua42d\0\ua46a\0\ua4a7\0\ua4e4\0\ua521\0\ua55e\0\ua59b\0\ua5d8"+
    "\0\ua615\0\ua652\0\ua68f\0\ua6cc\0\ua709\0\ua746\0\172\0\ua783"+
    "\0\ua7c0\0\ua7fd\0\ua83a\0\172\0\ua877\0\ua8b4\0\ua8f1\0\172"+
    "\0\ua92e\0\ua96b\0\ua9a8\0\ua9e5\0\uaa22\0\uaa5f\0\uaa9c\0\uaad9"+
    "\0\172\0\uab16\0\172\0\uab53\0\172\0\172\0\uab90\0\uabcd"+
    "\0\uac0a\0\172\0\172\0\uac47\0\uac84\0\172\0\uacc1\0\uacfe"+
    "\0\172\0\uad3b\0\172\0\uad78\0\uadb5\0\uadf2\0\uae2f\0\172"+
    "\0\uae6c\0\172\0\uaea9\0\uaee6\0\uaf23\0\uaf60\0\uaf9d\0\172"+
    "\0\uafda\0\ub017\0\ub054\0\ub091\0\ub0ce\0\ub10b\0\ub148\0\ub185"+
    "\0\ub1c2\0\172\0\172\0\ub1ff\0\ub23c\0\ub279\0\ub2b6\0\ub2f3"+
    "\0\172\0\172\0\ub330\0\ub36d\0\172\0\ub3aa\0\ub3e7\0\ub424"+
    "\0\ub461\0\ub49e\0\ub4db\0\ub518\0\ub555\0\ub592\0\ub5cf\0\ub60c"+
    "\0\ub649\0\ub686\0\ub6c3\0\ub700\0\ub73d\0\ub77a\0\ub7b7\0\ub7f4"+
    "\0\ub831\0\ub86e\0\ub8ab\0\ub8e8\0\ub925\0\ub962\0\172\0\172"+
    "\0\ub99f\0\ub9dc\0\uba19\0\uba56\0\uba93\0\172\0\ubad0\0\ubb0d"+
    "\0\ubb4a\0\ubb87\0\ubbc4\0\172\0\ubc01\0\ubc3e\0\ubc7b\0\ubcb8"+
    "\0\ubcf5\0\ubd32\0\ubd6f\0\ubdac\0\ubde9\0\ube26\0\172\0\172"+
    "\0\ube63\0\172\0\ubea0\0\ubedd\0\ubf1a\0\ubf57\0\ubf94\0\172"+
    "\0\ubfd1\0\uc00e\0\uc04b\0\uc088\0\uc0c5\0\uc102\0\uc13f\0\uc17c"+
    "\0\172\0\uc1b9\0\172\0\172\0\uc1f6\0\uc233\0\172\0\uc270"+
    "\0\uc2ad\0\uc2ea\0\uc327\0\uc364\0\uc3a1\0\uc3de\0\172\0\uc41b"+
    "\0\uc458\0\uc495\0\172\0\uc4d2\0\uc50f\0\172\0\uc54c\0\172"+
    "\0\uc589\0\uc5c6\0\uc603\0\uc640\0\uc67d\0\uc6ba\0\172\0\uc6f7"+
    "\0\uc734\0\172\0\uc771\0\uc7ae\0\uc7eb\0\uc828\0\172\0\uc865"+
    "\0\uc8a2\0\172\0\uc8df\0\uc91c\0\172\0\uc959\0\uc996\0\uc9d3"+
    "\0\uca10\0\uca4d\0\uca8a\0\ucac7\0\ucb04\0\ucb41\0\ucb7e\0\ucbbb"+
    "\0\ucbf8\0\ucc35\0\ucc72\0\uccaf\0\uccec\0\ucd29\0\172\0\ucd66"+
    "\0\172\0\ucda3\0\172\0\172\0\ucde0\0\172\0\uce1d\0\172"+
    "\0\uce5a\0\uce97\0\uced4\0\ucf11\0\ucf4e\0\ucf8b\0\172\0\ucfc8"+
    "\0\ud005\0\ud042\0\ud07f\0\ud0bc\0\ud0f9\0\172\0\ud136\0\ud173"+
    "\0\172\0\172\0\ud1b0\0\ud1ed\0\ud22a\0\ud267\0\ud2a4\0\ud2e1"+
    "\0\172\0\ud31e\0\ud35b\0\172\0\ud398\0\ud3d5\0\ud412\0\ud44f"+
    "\0\ud48c\0\ud4c9\0\ud506\0\ud543\0\ud580\0\ud5bd\0\172\0\ud5fa"+
    "\0\ud637\0\ud674\0\172\0\ud6b1\0\ud6ee\0\ud72b\0\ud768\0\ud7a5"+
    "\0\172\0\ud7e2\0\ud81f\0\ud85c\0\ud899\0\ud8d6\0\ud913\0\172"+
    "\0\ud950\0\ud98d\0\ud9ca\0\172\0\uda07\0\172\0\uda44\0\172"+
    "\0\uda81\0\172\0\udabe\0\udafb\0\udb38\0\udb75\0\udbb2\0\udbef"+
    "\0\172\0\172\0\udc2c\0\172\0\udc69\0\udca6\0\udce3\0\udd20"+
    "\0\udd5d\0\udd9a\0\uddd7\0\ude14\0\ude51\0\ude8e\0\udecb\0\udf08"+
    "\0\172\0\172\0\udf45\0\172\0\udf82\0\172\0\172\0\udfbf"+
    "\0\172\0\udffc\0\172\0\ue039\0\ue076\0\ue0b3\0\ue0f0\0\172"+
    "\0\172\0\ue12d\0\172\0\ue16a\0\ue1a7\0\ue1e4\0\ue221\0\ue25e"+
    "\0\172\0\172\0\ue29b\0\ue2d8\0\ue315\0\ue352\0\172\0\172"+
    "\0\ue38f\0\ue3cc\0\ue409\0\ue446\0\ue483\0\ue4c0\0\ue4fd\0\ue53a"+
    "\0\ue577\0\ue5b4\0\ue5f1\0\172\0\ue62e\0\ue66b\0\172\0\ue6a8"+
    "\0\ue6e5\0\172\0\ue722\0\ue75f\0\ue79c\0\ue7d9\0\172\0\172"+
    "\0\172\0\ue816\0\ue853\0\ue890\0\172\0\172\0\172\0\ue8cd"+
    "\0\172\0\ue90a\0\172\0\ue947\0\ue984\0\172\0\ue9c1\0\172"+
    "\0\ue9fe\0\uea3b\0\172\0\uea78\0\ueab5\0\172\0\ueaf2\0\75"+
    "\0\ueb2f\0\ueb6c\0\172\0\ueba9\0\uebe6\0\uec23\0\172\0\172"+
    "\0\uec60\0\uec9d\0\uecda\0\ued17\0\ued54\0\ued91\0\172\0\172"+
    "\0\172\0\uedce\0\uee0b\0\uee48\0\uee85\0\172\0\172\0\172"+
    "\0\ueec2\0\172\0\ueeff\0\172\0\uef3c\0\uef79\0\172\0\172"+
    "\0\uefb6\0\ueff3\0\uf030\0\172\0\uf06d\0\uf0aa\0\uf0e7\0\uf124"+
    "\0\uf161\0\172\0\uf19e\0\uf1db\0\172\0\uf218\0\uf255\0\uf292"+
    "\0\172\0\uf2cf\0\172\0\uf30c\0\uf349\0\172\0\uf386\0\uf3c3"+
    "\0\uf400\0\uf43d\0\uf47a\0\uf4b7\0\172\0\uf4f4\0\uf531\0\uf56e"+
    "\0\uf5ab\0\uf5e8\0\uf625\0\uf662\0\uf69f\0\uf6dc\0\uf719\0\172"+
    "\0\uf756\0\uf793\0\172\0\172\0\172\0\uf7d0\0\uf80d\0\uf84a"+
    "\0\uf887\0\uf8c4\0\uf901\0\172\0\uf93e\0\172\0\uf97b\0\uf9b8"+
    "\0\172\0\uf9f5\0\ufa32\0\ufa6f\0\ufaac\0\ufae9\0\ufb26\0\ufb63"+
    "\0\172\0\ufba0\0\ufbdd\0\172\0\ufc1a\0\172\0\ufc57\0\ufc94"+
    "\0\172\0\ufcd1\0\ufd0e\0\172\0\172\0\ufd4b\0\ufd88\0\172"+
    "\0\ufdc5\0\ufe02\0\ufe3f\0\ufe7c\0\ufeb9\0\ufef6\0\uff33\0\uff70"+
    "\0\172\0\uffad\0\uffea\1\47\1\144\1\241\1\336\1\u011b"+
    "\1\u0158\1\u0195\1\u01d2\0\172\0\172\1\u020f\0\172\0\172"+
    "\1\u024c\1\u0289\1\u02c6\1\u0303\0\172\0\172\0\172\1\u0340"+
    "\0\172\0\172\1\u037d\1\u03ba\1\u03f7\1\u0434\1\u0471\1\u04ae"+
    "\1\u04eb\0\172\1\u0528\1\u0565\1\u05a2\1\u05df\1\u061c\0\172"+
    "\1\u0659\0\172\1\u0696\1\u06d3\0\172\0\172\0\172\1\u0710"+
    "\1\u074d\0\172\1\u078a\0\172\1\u07c7\1\u0804\1\u0841\1\u087e"+
    "\1\u08bb\1\u08f8\1\u0935\0\172\1\u0972\1\u09af\0\172\1\u09ec"+
    "\1\u0a29\1\u0a66\0\172\0\172\1\u0aa3\1\u0ae0\1\u0b1d\0\172"+
    "\1\u0b5a\1\u0b97\1\u0bd4\1\u0c11\1\u0c4e\0\172\1\u0c8b\0\172"+
    "\0\172\0\172\1\u0cc8\1\u0d05\1\u0d42\1\u0d7f\1\u0dbc\1\u0df9"+
    "\1\u0e36\0\172\1\u0e73\1\u0eb0\1\u0eed\0\172\1\u0f2a\1\u0f67"+
    "\0\172\0\172\1\u0fa4\1\u0fe1\0\172\0\172\1\u101e\0\172"+
    "\0\172\0\172\0\172\1\u105b\1\u1098\1\u10d5\0\172\0\172"+
    "\1\u1112\1\u114f\1\u118c\1\u11c9\0\172\1\u1206\1\u1243\1\u1280"+
    "\1\u12bd\1\u12fa\1\u1337\0\172\1\u1374\0\172\0\172\1\u13b1"+
    "\1\u13ee\1\u142b\1\u1468\1\u14a5\1\u14e2\0\172\1\u151f\1\u155c"+
    "\1\u1599\1\u15d6\1\u1613\1\u1650\1\u168d\0\172\0\172\0\172"+
    "\1\u16ca\0\172\1\u1707\0\172\1\u1744\0\172\1\u1781\1\u17be"+
    "\1\u17fb\1\u1838\0\172\1\u1875\1\u18b2\0\172\1\u18ef\0\172"+
    "\1\u192c\0\75\0\172\1\u1969\0\172\1\u19a6\0\172\1\u19e3"+
    "\1\u1a20\0\172\0\172\1\u1a5d\0\172\1\u1a9a\1\u1ad7\0\172"+
    "\1\u1b14\1\u1b51\1\u1b8e\1\u1bcb\1\u1c08\1\u1c45\1\u1c82\1\u1cbf"+
    "\0\172\1\u1cfc\0\172\1\u1d39\1\u1d76\0\172\1\u1db3\1\u1df0"+
    "\1\u1e2d\0\172\1\u1e6a\1\u1ea7\1\u1ee4\0\172\0\172\1\u1f21"+
    "\1\u1f5e\1\u1f9b\1\u1fd8\1\u2015\1\u2052\1\u208f\1\u20cc\1\u2109"+
    "\1\u2146\1\u2183\1\u21c0\1\u21fd\1\u223a\1\u2277\0\172\1\u22b4"+
    "\0\172\1\u22f1\1\u232e\1\u236b\1\u23a8\1\u23e5\1\u2422\0\172";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1544];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\2\6\1\35\1\36\1\37\1\3"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\3\1\6\1\65"+
    "\1\66\1\3\1\67\1\70\76\0\3\3\31\0\32\3"+
    "\1\0\1\3\1\0\1\3\4\0\1\4\17\0\1\71"+
    "\45\0\1\4\10\0\1\6\26\0\2\6\32\0\1\6"+
    "\7\0\1\72\65\0\1\72\6\0\1\72\3\0\1\73"+
    "\61\0\1\72\13\0\1\74\100\0\1\75\74\0\1\76"+
    "\74\0\1\77\74\0\1\100\77\0\1\101\75\0\1\102"+
    "\61\0\1\103\26\0\2\103\22\0\1\104\7\0\1\103"+
    "\31\0\1\105\76\0\1\106\76\0\1\107\76\0\1\110"+
    "\43\0\3\3\31\0\1\3\1\111\2\3\1\112\1\113"+
    "\1\114\1\115\1\3\1\116\2\3\1\117\1\120\1\3"+
    "\1\121\7\3\1\122\2\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\1\123\1\3\1\124\2\3\1\125"+
    "\6\3\1\126\1\127\1\130\1\3\1\131\1\132\10\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\3\3"+
    "\1\133\1\3\1\134\1\135\1\136\7\3\1\137\12\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\1\140"+
    "\1\3\1\141\2\3\1\142\4\3\1\143\2\3\1\144"+
    "\1\145\1\146\1\147\1\150\10\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\1\151\1\3\1\152\11\3"+
    "\1\153\1\3\1\154\1\3\1\155\11\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\1\156\1\3\1\157"+
    "\6\3\1\160\2\3\1\161\3\3\1\162\11\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\1\163\1\3"+
    "\1\164\13\3\1\165\1\3\1\166\11\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\1\167\1\3\1\170"+
    "\2\3\1\171\1\3\1\172\4\3\1\173\1\3\1\174"+
    "\1\3\1\175\11\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\1\176\4\3\1\177\1\3\1\200\2\3"+
    "\1\201\1\3\1\202\3\3\1\203\11\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\1\204\17\3\1\205"+
    "\11\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\1\206\1\3\1\207\2\3\1\210\1\3\1\211\4\3"+
    "\1\212\1\3\1\213\1\3\1\214\11\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\6\3\1\215\4\3"+
    "\1\216\3\3\1\217\12\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\1\220\1\3\1\221\2\3\1\222"+
    "\6\3\1\223\1\3\1\224\1\3\1\225\1\226\10\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\1\3"+
    "\1\227\4\3\1\230\1\3\1\231\6\3\1\232\5\3"+
    "\1\233\4\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\1\234\1\3\1\235\1\3\1\236\4\3\1\237"+
    "\1\240\1\241\1\242\1\3\1\243\1\3\1\244\1\245"+
    "\3\3\1\246\3\3\1\247\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\5\3\1\250\1\251\1\3\1\252"+
    "\1\253\1\3\1\254\1\255\11\3\1\256\1\257\2\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\260\27\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\261\2\3\1\262\1\3\1\263\5\3"+
    "\1\264\2\3\1\265\11\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\20\3\1\266\11\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\2\3\1\267\12\3"+
    "\1\270\1\271\13\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\1\272\1\3\1\273\12\3\1\274\1\275"+
    "\1\3\1\276\11\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\1\277\4\3\1\300\4\3\1\301\3\3"+
    "\1\302\1\3\1\303\11\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\1\304\15\3\1\305\13\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\20\3\1\306"+
    "\11\3\1\0\1\3\1\0\1\3\2\0\33\307\2\0"+
    "\34\307\1\310\3\307\2\0\1\71\2\0\2\311\30\0"+
    "\1\312\30\0\1\71\1\0\1\312\2\0\34\73\1\0"+
    "\40\73\7\313\1\314\12\313\1\314\10\313\2\315\40\313"+
    "\55\0\1\316\20\0\3\3\31\0\1\317\1\320\30\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\321\16\3\1\322\10\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\1\3\1\323\17\3\1\324\10\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\325\2\3\1\326\22\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\4\3\1\327\25\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\4\3\1\330\25\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\17\3"+
    "\1\331\12\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\11\3\1\332\5\3\1\333\12\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\22\3\1\334\7\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\335\14\3\1\336\10\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\1\337\5\3\1\340\1\341\1\342"+
    "\1\343\5\3\1\344\12\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\20\3\1\345\11\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\25\3\1\346\4\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\11\3"+
    "\1\347\20\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\1\350\16\3\1\351\12\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\14\3\1\352\10\3\1\353"+
    "\4\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\6\3\1\354\23\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\355\1\3\1\356\4\3\1\357"+
    "\4\3\1\360\13\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\5\3\1\361\24\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\1\3\1\362\7\3\1\363"+
    "\20\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\17\3\1\364\12\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\11\3\1\365\20\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\15\3\1\366\14\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\3\3\1\367"+
    "\21\3\1\370\4\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\1\371\13\3\1\372\1\3\1\373\2\3"+
    "\1\374\10\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\375\27\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\25\3\1\376\4\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\2\3\1\377\27\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\13\3"+
    "\1\u0100\16\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\13\3\1\u0101\16\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\16\3\1\u0102\13\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\1\u0103\3\3\1\u0104"+
    "\2\3\1\u0105\1\u0106\1\u0107\1\3\1\u0108\3\3\1\u0109"+
    "\7\3\1\u010a\2\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\7\3\1\u010b\22\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\22\3\1\u010c\7\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\7\3\1\u010d"+
    "\16\3\1\u010e\3\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\u010f\20\3\1\u0110\4\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\3\3\1\u0111"+
    "\26\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\12\3\1\u0112\17\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\7\3\1\u0113\15\3\1\u0114\4\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\4\3\1\u0115"+
    "\1\3\1\u0116\2\3\1\u0117\20\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\6\3\1\u0118\10\3\1\u0119"+
    "\12\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\1\u011a\7\3\1\u011b\16\3\1\u011c\2\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\6\3\1\u011d\15\3"+
    "\1\u011e\5\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\1\u011f\10\3\1\u0120\14\3\1\u0121\3\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\7\3\1\u0122"+
    "\7\3\1\u0123\12\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\u0124\25\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u0125\15\3\1\u0126"+
    "\11\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\20\3\1\u0127\11\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\6\3\1\u0128\1\u0129\22\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\5\3\1\u012a\1\3"+
    "\1\u012b\22\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\5\3\1\u012c\6\3\1\u012d\15\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\4\3\1\u012e\2\3"+
    "\1\u012f\7\3\1\u0130\12\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u0131\15\3\1\u0132\11\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\14\3"+
    "\1\u0133\3\3\1\u0134\11\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\1\u0135\1\3\1\u0136\27\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\5\3\1\u0137"+
    "\24\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\1\u0138\4\3\1\u0139\1\u013a\1\u013b\4\3\1\u013c\10\3"+
    "\1\u013d\4\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\27\3\1\u013e\2\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\7\3\1\u013f\4\3\1\u0140\15\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\1\3"+
    "\1\u0141\3\3\1\u0142\11\3\1\u0143\12\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\5\3\1\u0144\24\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u0145\13\3\1\u0146\1\3\1\u0147\11\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\1\u0148\31\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\15\3\1\u0149"+
    "\14\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\27\3\1\u014a\2\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\17\3\1\u014b\12\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\7\3\1\u014c\3\3\1\u014d"+
    "\2\3\1\u014e\5\3\1\u014f\5\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\1\3\1\u0150\11\3\1\u0151"+
    "\16\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\1\u0152\1\3\1\u0153\13\3\1\u0154\13\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\11\3\1\u0155\20\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u0156\15\3\1\u0157\7\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u0158\15\3\1\u0159\11\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\7\3"+
    "\1\u015a\22\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\4\3\1\u015b\25\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\4\3\1\u015c\25\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\2\3\1\u015d\27\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\1\3"+
    "\1\u015e\2\3\1\u015f\1\3\1\u0160\1\u0161\1\3\1\u0162"+
    "\1\3\1\u0163\2\3\1\u0164\1\u0165\12\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\20\3\1\u0166\11\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\25\3"+
    "\1\u0167\4\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\27\3\1\u0168\2\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\4\3\1\u0169\2\3\1\u016a\1\3"+
    "\1\u016b\5\3\1\u016c\5\3\1\u016d\4\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\1\u016e\31\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\5\3\1\u016f"+
    "\4\3\1\u0170\17\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\14\3\1\u0171\15\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\1\u0172\31\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\15\3\1\u0173\7\3"+
    "\1\u0174\4\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\23\3\1\u0175\6\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\25\3\1\u0176\4\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\17\3\1\u0177\12\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\1\u0178"+
    "\31\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\7\3\1\u0179\22\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\1\3\1\u017a\30\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\7\3\1\u017b\22\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\10\3\1\u017c"+
    "\21\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\4\3\1\u017d\25\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u017e\1\3\1\u017f\25\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\4\3\1\u0180"+
    "\25\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\6\3\1\u0181\23\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u0182\27\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\1\u0183\31\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\4\3\1\u0184\25\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\1\u0185"+
    "\17\3\1\u0186\11\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\20\3\1\u0187\11\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u0188\25\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\6\3\1\u0189"+
    "\23\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\21\3\1\u018a\10\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\7\3\1\u018b\22\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\3\3\1\u018c\1\u018d\1\u018e"+
    "\24\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\5\3\1\u018f\24\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\6\3\1\u0190\23\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\1\3\1\u0191\4\3\1\u0192"+
    "\23\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\16\3\1\u0193\13\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\16\3\1\u0194\13\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u0195\13\3\1\u0196"+
    "\13\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\4\3\1\u0197\25\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\5\3\1\u0198\24\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\5\3\1\u0199\1\3\1\u019a"+
    "\22\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\u019b\27\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\16\3\1\u019c\13\3\1\0\1\3\1\0"+
    "\1\3\4\0\1\311\65\0\1\311\6\0\1\311\2\0"+
    "\2\311\61\0\1\311\4\0\7\313\1\u019d\12\313\1\315"+
    "\10\313\2\315\40\313\7\315\1\u019e\12\315\1\314\61\315"+
    "\1\u019d\65\315\1\0\3\3\31\0\16\3\1\u019f\13\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u01a0\27\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\20\3\1\u01a1\11\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\16\3\1\u01a2\13\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\12\3\1\u01a3\17\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\20\3"+
    "\1\u01a4\11\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u01a5\27\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\1\u01a6\1\3\1\u01a7\27\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\7\3\1\u01a8"+
    "\22\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\21\3\1\u01a9\10\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u01aa\27\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\1\u01ab\1\3\1\u01ac\27\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\7\3"+
    "\1\u01ad\6\3\1\u01ae\13\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\11\3\1\u01af\20\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\13\3\1\u01b0\16\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\13\3"+
    "\1\u01b1\16\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\11\3\1\u01b2\20\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\22\3\1\u01b3\7\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\4\3\1\u01b4\4\3"+
    "\1\u01b5\12\3\1\u01b6\5\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\15\3\1\u01b7\14\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\1\u01b8\31\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\1\u01b9\31\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\11\3"+
    "\1\u01ba\20\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u01bb\2\3\1\u01bc\24\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\2\3\1\u01bd\27\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u01be\12\3\1\u01bf\12\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\7\3\1\u01c0\22\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\2\0\1\u01c1\26\0\32\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\5\3"+
    "\1\u01c2\24\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u01c3\27\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\1\u01c4\31\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\7\3\1\u01c5\22\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\4\3\1\u01c6"+
    "\25\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\13\3\1\u01c7\16\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\6\3\1\u01c8\7\3\1\u01c9\13\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\2\3\1\u01ca"+
    "\3\3\1\u01cb\23\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\22\3\1\u01cc\2\3\1\u01cd\4\3\1\0"+
    "\1\3\1\0\1\3\3\0\2\3\1\u01ce\31\0\32\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\6\3"+
    "\1\u01cf\23\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u01d0\27\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\31\3\1\u01d1\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u01d2\27\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\17\3\1\u01d3"+
    "\12\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\1\3\1\u01d4\5\3\1\u01d5\22\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\14\3\1\u01d6\15\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\1\u01d7\31\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u01d8\27\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\20\3\1\u01d9\11\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\7\3\1\u01da\22\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\4\3\1\u01db\25\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u01dc\15\3\1\u01dd\11\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u01de\27\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\12\3\1\u01df\17\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\7\3"+
    "\1\u01e0\22\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\11\3\1\u01e1\5\3\1\u01e2\2\3\1\u01e3\7\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\14\3"+
    "\1\u01e4\1\3\1\u01e5\13\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u01e6\27\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\4\3\1\u01e7\25\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\1\u01e8"+
    "\31\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\7\3\1\u01e9\22\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u01ea\27\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u01eb\6\3\1\u01ec"+
    "\20\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\12\3\1\u01ed\17\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\22\3\1\u01ee\7\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u01ef\25\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\1\3\1\u01f0"+
    "\30\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\4\3\1\u01f1\25\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u01f2\27\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u01f3\27\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\2\3\1\u01f4"+
    "\27\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\1\3\1\u01f5\30\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\1\u01f6\31\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u01f7\27\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\17\3\1\u01f8\12\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u01f9\25\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\11\3\1\u01fa\20\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u01fb\27\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\25\3\1\u01fc\4\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\1\u01fd"+
    "\31\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\11\3\1\u01fe\20\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\7\3\1\u01ff\22\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\17\3\1\u0200\12\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\2\3\1\u0201"+
    "\4\3\1\u0202\22\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u0203\1\3\1\u0204\21\3\1\u0205"+
    "\3\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\6\3\1\u0206\23\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\1\u0207\31\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\7\3\1\u0208\22\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\2\3\1\u0209\1\3"+
    "\1\u020a\4\3\1\u020b\20\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\1\u020c\31\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\17\3\1\u020d\12\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\17\3\1\u020e"+
    "\12\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\17\3\1\u020f\12\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\5\3\1\u0210\24\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\11\3\1\u0211\20\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\5\3\1\u0212"+
    "\11\3\1\u0213\12\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\7\3\1\u0214\22\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\5\3\1\u0215\24\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\4\3\1\u0216"+
    "\1\3\1\u0217\10\3\1\u0218\7\3\1\u0219\2\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\7\3\1\u021a"+
    "\4\3\1\u021b\15\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\6\3\1\u021c\23\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\13\3\1\u021d\11\3\1\u021e"+
    "\4\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\16\3\1\u021f\13\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\1\3\1\u0220\30\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\5\3\1\u0221\24\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\4\3\1\u0222"+
    "\25\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\11\3\1\u0223\20\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\11\3\1\u0224\20\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\11\3\1\u0225\1\3\1\u0226"+
    "\3\3\1\u0227\12\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\6\3\1\u0228\11\3\1\u0229\4\3\1\u022a"+
    "\1\3\1\u022b\2\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\11\3\1\u022c\20\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\6\3\1\u022d\23\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\7\3\1\u022e"+
    "\22\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\20\3\1\u022f\11\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\16\3\1\u0230\13\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\16\3\1\u0231\13\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\16\3\1\u0232"+
    "\13\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\20\3\1\u0233\10\3\1\u0234\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\6\3\1\u0235\23\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\1\u0236\31\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\2\3\1\u0237"+
    "\27\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\22\3\1\u0238\7\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\5\3\1\u0239\24\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\6\3\1\u023a\23\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\24\3\1\u023b"+
    "\5\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\26\3\1\u023c\3\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\16\3\1\u023d\13\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\1\u023e\31\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\26\3\1\u023f\3\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\24\3"+
    "\1\u0240\5\3\1\0\1\3\1\0\1\3\3\0\2\3"+
    "\1\u0241\31\0\32\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\12\3\1\u0242\17\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\6\3\1\u0243\23\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\2\3\1\u0244"+
    "\13\3\1\u0245\13\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u0246\15\3\1\u0247\11\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\2\3\1\u0248"+
    "\27\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\16\3\1\u0249\13\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\7\3\1\u024a\22\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\14\3\1\u024b\15\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\4\3\1\u024c"+
    "\25\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\u024d\27\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\7\3\1\u024e\22\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u024f\27\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\2\3\1\u0250"+
    "\27\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\14\3\1\u0251\15\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u0252\5\3\1\u0253\21\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\4\3\1\u0254"+
    "\7\3\1\u0255\3\3\1\u0256\11\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\17\3\1\u0257\12\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\1\u0258\31\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u0259\25\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\20\3\1\u025a\11\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u025b\27\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\4\3\1\u025c\25\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\11\3"+
    "\1\u025d\20\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\17\3\1\u025e\12\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u025f\27\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\2\3\1\u0260\27\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u0261\25\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\7\3\1\u0262\22\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u0263\6\3\1\u0264\5\3"+
    "\1\u0265\6\3\1\u0266\3\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u0267\27\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\21\3\1\u0268\10\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\17\3"+
    "\1\u0269\12\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u026a\27\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\6\3\1\u026b\23\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\16\3\1\u026c\13\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u026d\10\3\1\u026e\16\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u026f\27\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\5\3\1\u0270\24\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\5\3"+
    "\1\u0271\24\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\6\3\1\u0272\23\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\14\3\1\u0273\15\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\15\3\1\u0274\14\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\20\3"+
    "\1\u0275\11\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u0276\27\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\17\3\1\u0277\12\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\7\3\1\u0278\22\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\17\3"+
    "\1\u0279\12\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\11\3\1\u027a\20\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\24\3\1\u027b\5\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\22\3\1\u027c\7\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\14\3"+
    "\1\u027d\15\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\14\3\1\u027e\15\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\4\3\1\u027f\25\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\4\3\1\u0280\25\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u0281\25\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\5\3\1\u0282\1\u0283\23\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\7\3\1\u0284\22\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\12\3\1\u0285"+
    "\17\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\24\3\1\u0286\5\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\11\3\1\u0287\7\3\1\u0288\10\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\14\3\1\u0289"+
    "\15\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\26\3\1\u028a\3\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\6\3\1\u028b\23\3\1\0\1\3\1\0"+
    "\1\3\2\0\7\315\1\u019d\1\u028c\73\315\1\u019e\1\u028d"+
    "\11\315\1\314\52\315\1\0\3\3\31\0\6\3\1\u028e"+
    "\23\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\5\3\1\u028f\24\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\11\3\1\u0290\20\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\20\3\1\u0291\11\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\20\3\1\u0292"+
    "\11\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\7\3\1\u0293\22\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\5\3\1\u0294\24\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\15\3\1\u0295\14\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\7\3\1\u0296"+
    "\22\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\4\3\1\u0297\25\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\14\3\1\u0298\15\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\5\3\1\u0299\24\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\1\u029a\31\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\25\3"+
    "\1\u029b\4\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\5\3\1\u029c\24\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\6\3\1\u029d\23\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\5\3\1\u029e\10\3"+
    "\1\u029f\13\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\20\3\1\u02a0\11\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\7\3\1\u02a1\22\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\16\3\1\u02a2\13\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\25\3"+
    "\1\u02a3\4\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\14\3\1\u02a4\15\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\5\3\1\u02a5\24\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\1\u02a6\31\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\13\3\1\u02a7"+
    "\16\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\4\3\1\u02a8\25\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\27\3\1\u02a9\2\3\1\0\1\3\1\0"+
    "\1\3\41\0\1\u02aa\36\0\3\3\31\0\21\3\1\u02ab"+
    "\10\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\13\3\1\u02ac\16\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u02ad\27\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\17\3\1\u02ae\12\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\20\3\1\u02af"+
    "\11\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\17\3\1\u02b0\12\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\7\3\1\u02b1\22\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\11\3\1\u02b2\20\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\22\3\1\u02b3"+
    "\7\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\11\3\1\u02b4\20\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\17\3\1\u02b5\3\3\1\u02b6\6\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\14\3\1\u02b7"+
    "\15\3\1\0\1\3\1\0\1\3\3\0\2\3\1\u02b8"+
    "\31\0\32\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u02b9\27\3\1\0\1\3\1\0\1\3"+
    "\3\0\2\3\1\u02ba\31\0\4\3\1\u02bb\13\3\1\u02bc"+
    "\11\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\5\3\1\u02bd\24\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\u02be\25\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\5\3\1\u02bf\24\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\6\3\1\u02c0"+
    "\16\3\1\u02c1\4\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\16\3\1\u02c2\13\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\5\3\1\u02c3\12\3\1\u02c4"+
    "\11\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\5\3\1\u02c5\24\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\24\3\1\u02c6\5\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u02c7\25\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\15\3\1\u02c8"+
    "\14\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\20\3\1\u02c9\11\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\14\3\1\u02ca\15\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\5\3\1\u02cb\24\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\20\3\1\u02cc"+
    "\11\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\17\3\1\u02cd\12\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\5\3\1\u02ce\24\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\16\3\1\u02cf\13\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\5\3\1\u02d0"+
    "\24\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\7\3\1\u02d1\22\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u02d2\27\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\14\3\1\u02d3\15\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\16\3\1\u02d4"+
    "\13\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\7\3\1\u02d5\22\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\6\3\1\u02d6\23\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\7\3\1\u02d7\22\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\5\3\1\u02d8"+
    "\24\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\u02d9\27\3\1\0\1\3\1\0\1\3\3\0"+
    "\2\3\1\u02da\31\0\32\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\12\3\1\u02db\17\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\4\3\1\u02dc\25\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u02dd\25\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\4\3\1\u02de\25\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\4\3\1\u02df\25\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\6\3\1\u02e0\13\3"+
    "\1\u02e1\7\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\10\3\1\u02e2\21\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\16\3\1\u02e3\13\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\5\3\1\u02e4\24\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\1\u02e5"+
    "\31\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\1\3\1\u02e6\30\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\7\3\1\u02e7\22\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u02e8\27\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\1\u02e9\31\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u02ea\25\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\17\3\1\u02eb\12\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\4\3\1\u02ec\25\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\2\3\1\u02ed\27\3"+
    "\1\0\1\3\1\0\1\3\3\0\2\3\1\u02ee\31\0"+
    "\1\u02ef\31\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\24\3\1\u02f0\5\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u02f1\27\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\20\3\1\u02f2\11\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u02f3\27\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u02f4\27\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\1\u02f5\15\3\1\u02f6\13\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\2\3\1\u02f7"+
    "\27\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\4\3\1\u02f8\25\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u02f9\27\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\1\u02fa\31\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\25\3\1\u02fb\4\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u02fc\25\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\14\3\1\u02fd\15\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\16\3\1\u02fe\13\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\6\3\1\u02ff\23\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\7\3"+
    "\1\u0300\22\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\16\3\1\u0301\13\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\1\u0302\31\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u0303\27\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\16\3\1\u0304"+
    "\13\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\1\u0305\31\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u0306\27\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\4\3\1\u0307\25\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\5\3\1\u0308\24\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\1\u0309"+
    "\31\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\16\3\1\u030a\13\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u030b\27\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\16\3\1\u030c\13\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\4\3\1\u030d"+
    "\25\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\4\3\1\u030e\25\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\25\3\1\u030f\4\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\27\3\1\u0310\2\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\6\3\1\u0311"+
    "\23\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\14\3\1\u0312\15\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\20\3\1\u0313\11\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u0314\25\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\5\3\1\u0315"+
    "\24\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\u0316\27\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\22\3\1\u0317\7\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\14\3\1\u0318\15\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\2\3\1\u0319"+
    "\27\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\6\3\1\u031a\23\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\24\3\1\u031b\5\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\17\3\1\u031c\12\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\7\3\1\u031d"+
    "\22\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\4\3\1\u031e\25\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\3\3\1\u031f\26\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\11\3\1\u0320\20\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\5\3\1\u0321"+
    "\14\3\1\u0322\7\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\5\3\1\u0323\24\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\6\3\1\u0324\23\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\14\3\1\u0325"+
    "\15\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\4\3\1\u0326\25\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\16\3\1\u0327\13\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\5\3\1\u0328\1\u0329\23\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\1\u032a"+
    "\31\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\1\3\1\u032b\30\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\17\3\1\u032c\12\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\11\3\1\u032d\20\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\16\3\1\u032e"+
    "\13\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\5\3\1\u032f\24\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\6\3\1\u0330\23\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\16\3\1\u0331\13\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\6\3\1\u0332"+
    "\23\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\16\3\1\u0333\13\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\7\3\1\u0334\22\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\25\3\1\u0335\4\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\1\3\1\u0336"+
    "\30\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\u0337\27\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\u0338\25\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u0339\27\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\7\3\1\u033a"+
    "\22\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\5\3\1\u033b\24\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\1\u033c\17\3\1\u033d\11\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\4\3\1\u033e\25\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\1\u033f"+
    "\31\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\5\3\1\u0340\24\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u0341\27\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u0342\25\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\1\3\1\u0343"+
    "\1\3\1\u0344\1\3\1\u0345\23\3\1\u0346\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\20\3\1\u0347\4\3"+
    "\1\u0348\4\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\5\3\1\u0349\24\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\14\3\1\u034a\15\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\5\3\1\u034b\24\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\7\3"+
    "\1\u034c\22\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\4\3\1\u034d\25\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\13\3\1\u034e\16\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\1\u034f\31\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\2\3\1\u0350"+
    "\27\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\16\3\1\u0351\13\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\12\3\1\u0352\17\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u0353\27\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\4\3\1\u0354"+
    "\25\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\7\3\1\u0355\22\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\12\3\1\u0356\17\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\10\3\1\u0357\21\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\2\3\1\u0358"+
    "\27\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\u0359\27\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u035a\27\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u035b\27\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\16\3\1\u035c"+
    "\13\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\12\3\1\u035d\17\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\16\3\1\u035e\13\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u035f\27\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\22\3\1\u0360"+
    "\7\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\1\u0361\31\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\6\3\1\u0362\23\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\5\3\1\u0363\24\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\14\3\1\u0364\15\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u0365\25\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\1\u0366\31\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\20\3\1\u0367\11\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u0368\27\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\7\3\1\u0369"+
    "\22\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\5\3\1\u036a\24\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\5\3\1\u036b\24\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\1\u036c\31\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\16\3\1\u036d\13\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\20\3"+
    "\1\u036e\11\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\16\3\1\u036f\13\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\6\3\1\u0370\23\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\6\3\1\u0371\23\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u0372\27\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\6\3\1\u0373\23\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\16\3\1\u0374\13\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\4\3\1\u0375\25\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\6\3"+
    "\1\u0376\23\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\11\3\1\u0377\20\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\4\3\1\u0378\25\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\17\3\1\u0379\12\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\7\3"+
    "\1\u037a\22\3\1\0\1\3\1\0\1\3\42\0\1\u037b"+
    "\35\0\3\3\31\0\13\3\1\u037c\16\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\2\3\1\u037d\27\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\17\3"+
    "\1\u037e\12\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\16\3\1\u037f\13\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\5\3\1\u0380\24\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\1\u0381\6\3\1\u0382"+
    "\22\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\16\3\1\u0383\13\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\1\u0384\31\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u0385\27\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\20\3\1\u0386\11\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u0387\25\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\20\3\1\u0388\11\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\1\u0389\31\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\26\3\1\u038a\3\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\5\3\1\u038b"+
    "\24\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\20\3\1\u038c\11\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u038d\27\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\6\3\1\u038e\23\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\6\3\1\u038f"+
    "\23\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\16\3\1\u0390\13\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u0391\27\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\10\3\1\u0392\21\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\13\3\1\u0393"+
    "\16\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\11\3\1\u0394\20\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\16\3\1\u0395\13\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\5\3\1\u0396\24\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\4\3\1\u0397"+
    "\25\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\u0398\27\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\1\u0399\31\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\14\3\1\u039a\15\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\16\3\1\u039b\13\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\1\u039c"+
    "\31\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\6\3\1\u039d\23\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\10\3\1\u039e\21\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\16\3\1\u039f\13\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\14\3\1\u03a0"+
    "\15\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\11\3\1\u03a1\20\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\1\u03a2\31\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\6\3\1\u03a3\23\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\20\3\1\u03a4\11\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\10\3"+
    "\1\u03a5\21\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u03a6\27\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\16\3\1\u03a7\13\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\1\u03a8\31\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\5\3\1\u03a9"+
    "\24\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\1\u03aa\31\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\22\3\1\u03ab\7\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\1\u03ac\31\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\5\3\1\u03ad\24\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\20\3\1\u03ae"+
    "\11\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\1\3\1\u03af\3\3\1\u03b0\24\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\1\3\1\u03b1\30\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\2\3\1\u03b2"+
    "\27\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\u03b3\27\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\7\3\1\u03b4\22\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\11\3\1\u03b5\20\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\13\3\1\u03b6"+
    "\16\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\6\3\1\u03b7\23\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\5\3\1\u03b8\24\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\17\3\1\u03b9\12\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\17\3\1\u03ba"+
    "\12\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\16\3\1\u03bb\13\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\6\3\1\u03bc\23\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\11\3\1\u03bd\20\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\5\3\1\u03be"+
    "\24\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\5\3\1\u03bf\24\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\u03c0\25\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\6\3\1\u03c1\23\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\4\3\1\u03c2"+
    "\25\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\4\3\1\u03c3\25\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\22\3\1\u03c4\7\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\20\3\1\u03c5\11\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\1\u03c6\31\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\7\3"+
    "\1\u03c7\22\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\6\3\1\u03c8\23\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\17\3\1\u03c9\12\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\5\3\1\u03ca\24\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\5\3"+
    "\1\u03cb\24\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\5\3\1\u03cc\24\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\7\3\1\u03cd\22\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\1\3\1\u03ce\30\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\11\3"+
    "\1\u03cf\20\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\16\3\1\u03d0\13\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\16\3\1\u03d1\13\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\20\3\1\u03d2\11\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u03d3\27\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\26\3\1\u03d4\3\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u03d5\27\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\13\3\1\u03d6\16\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u03d7\27\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u03d8\27\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u03d9\27\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\16\3\1\u03da\13\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\1\u03db"+
    "\31\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\17\3\1\u03dc\7\3\1\u03dd\2\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u03de\27\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\2\3\1\u03df"+
    "\27\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\1\3\1\u03e0\30\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\1\u03e1\31\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\4\3\1\u03e2\25\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\17\3\1\u03e3\12\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u03e4\25\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\16\3\1\u03e5\13\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u03e6\27\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\4\3\1\u03e7\25\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\20\3"+
    "\1\u03e8\11\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\16\3\1\u03e9\13\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\1\3\1\u03ea\30\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\20\3\1\u03eb\11\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u03ec\25\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\11\3\1\u03ed\5\3\1\u03ee\12\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\7\3\1\u03ef\22\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\1\u03f0"+
    "\31\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\20\3\1\u03f1\11\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\5\3\1\u03f2\24\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\25\3\1\u03f3\4\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\16\3\1\u03f4"+
    "\13\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\5\3\1\u03f5\24\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\1\3\1\u03f6\30\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\1\u03f7\31\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\5\3\1\u03f8\24\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u03f9\25\3\1\0\1\3\1\0\1\3\3\0\2\3"+
    "\1\u03fa\31\0\32\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\1\u03fb\31\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\25\3\1\u03fc\4\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\20\3\1\u03fd\11\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\14\3"+
    "\1\u03fe\15\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\6\3\1\u03ff\23\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\16\3\1\u0400\13\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\4\3\1\u0401\25\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\1\u0402"+
    "\31\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\7\3\1\u0403\22\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\u0404\25\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\23\3\1\u0405\6\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\2\3\1\u0406"+
    "\27\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\1\u0407\1\3\1\u0408\27\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\20\3\1\u0409\11\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\4\3\1\u040a\25\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\27\3"+
    "\1\u040b\2\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\6\3\1\u040c\23\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\1\u040d\31\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\6\3\1\u040e\23\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\17\3\1\u040f"+
    "\12\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\4\3\1\u0410\25\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\16\3\1\u0411\13\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u0412\25\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\16\3\1\u0413"+
    "\13\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\17\3\1\u0414\12\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\11\3\1\u0415\20\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u0416\25\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\1\u0417\1\3"+
    "\1\u0418\27\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u0419\27\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\7\3\1\u041a\22\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\13\3\1\u041b\1\3"+
    "\1\u041c\14\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\17\3\1\u041d\12\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\15\3\1\u041e\14\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\11\3\1\u041f\20\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\6\3"+
    "\1\u0420\23\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\11\3\1\u0421\20\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u0422\27\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\1\u0423\31\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\4\3\1\u0424"+
    "\25\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\16\3\1\u0425\13\3\1\0\1\3\1\0\1\3\41\0"+
    "\1\u0426\36\0\3\3\31\0\4\3\1\u0427\25\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\1\u0428\31\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\23\3"+
    "\1\u0429\6\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\1\u042a\31\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\11\3\1\u042b\20\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\1\u042c\31\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\6\3\1\u042d\23\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u042e\25\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\5\3\1\u042f\24\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\6\3\1\u0430\23\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\1\u0431\31\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\6\3\1\u0432"+
    "\23\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\7\3\1\u0433\22\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\1\u0434\31\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\5\3\1\u0435\24\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\6\3\1\u0436\23\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\3\3"+
    "\1\u0437\26\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\7\3\1\u0438\22\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\17\3\1\u0439\12\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\27\3\1\u043a\2\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\6\3"+
    "\1\u043b\23\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\16\3\1\u043c\13\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\16\3\1\u043d\13\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\1\u043e\31\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\11\3\1\u043f"+
    "\20\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\u0440\27\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\11\3\1\u0441\20\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\6\3\1\u0442\23\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\1\3\1\u0443"+
    "\30\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\7\3\1\u0444\22\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\1\u0445\31\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\11\3\1\u0446\20\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\17\3\1\u0447\12\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\24\3"+
    "\1\u0448\5\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\22\3\1\u0449\7\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\22\3\1\u044a\7\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\20\3\1\u044b\11\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\3\3"+
    "\1\u044c\26\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\20\3\1\u044d\11\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\25\3\1\u044e\4\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\20\3\1\u044f\11\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\11\3"+
    "\1\u0450\20\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\6\3\1\u0451\23\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\6\3\1\u0452\23\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\1\3\1\u0453\30\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\22\3"+
    "\1\u0454\7\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u0455\27\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\5\3\1\u0456\24\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\2\3\1\u0457\27\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u0458\25\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\20\3\1\u0459\11\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\4\3\1\u045a\25\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\11\3\1\u045b\20\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\13\3"+
    "\1\u045c\16\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\6\3\1\u045d\23\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\14\3\1\u045e\15\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\4\3\1\u045f\25\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\1\u0460"+
    "\31\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\4\3\1\u0461\25\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u0462\13\3\1\u0463\13\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\2\3\1\u0464"+
    "\27\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\11\3\1\u0465\20\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\7\3\1\u0466\22\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u0467\25\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\16\3\1\u0468"+
    "\13\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\u0469\27\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\27\3\1\u046a\2\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\21\3\1\u046b\10\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\2\3\1\u046c"+
    "\27\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\14\3\1\u046d\15\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\20\3\1\u046e\11\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u046f\25\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\4\3\1\u0470"+
    "\25\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\6\3\1\u0471\23\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\u0472\25\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\6\3\1\u0473\23\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\6\3\1\u0474"+
    "\23\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\4\3\1\u0475\25\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\u0476\25\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u0477\27\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\1\u0478\31\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\5\3"+
    "\1\u0479\24\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u047a\27\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\7\3\1\u047b\22\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\16\3\1\u047c\13\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\16\3"+
    "\1\u047d\13\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\1\u047e\31\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\5\3\1\u047f\24\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\6\3\1\u0480\23\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\4\3\1\u0481"+
    "\25\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\6\3\1\u0482\23\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\16\3\1\u0483\13\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u0484\25\3\1\0"+
    "\1\3\1\0\1\3\3\0\2\3\1\u0485\31\0\32\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\15\3"+
    "\1\u0486\14\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\26\3\1\u0487\3\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\16\3\1\u0488\13\3\1\0\1\3"+
    "\1\0\1\3\3\0\2\3\1\u0489\31\0\32\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\6\3\1\u048a"+
    "\23\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\20\3\1\u048b\11\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u048c\27\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u048d\25\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\6\3\1\u048e"+
    "\23\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\17\3\1\u048f\12\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\7\3\1\u0490\22\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u0491\25\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\7\3\1\u0492"+
    "\22\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\26\3\1\u0493\3\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u0494\27\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\17\3\1\u0495\12\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\13\3\1\u0496"+
    "\16\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\u0497\27\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\5\3\1\u0498\24\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\5\3\1\u0499\24\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\2\3\1\u049a"+
    "\27\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\u049b\27\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\32\3\1\u049c\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\5\3\1\u049d\24\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\22\3\1\u049e\7\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\2\3\1\u049f"+
    "\27\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\23\3\1\u04a0\6\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u04a1\27\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\20\3\1\u04a2\11\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\2\3\1\u04a3"+
    "\27\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\1\u04a4\31\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\15\3\1\u04a5\14\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\1\3\1\u04a6\30\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\4\3\1\u04a7\25\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u04a8\27\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\4\3\1\u04a9\25\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\14\3\1\u04aa\15\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\4\3\1\u04ab\25\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u04ac\27\3\1\0\1\3\1\0\1\3\3\0\2\3"+
    "\1\u04ad\31\0\32\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\7\3\1\u04ae\22\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\20\3\1\u04af\11\3\1\0"+
    "\1\3\1\0\1\3\50\0\1\u04b0\27\0\3\3\31\0"+
    "\16\3\1\u04b1\13\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\25\3\1\u04b2\4\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u04b3\27\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\5\3\1\u04b4"+
    "\24\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\4\3\1\u04b5\25\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\u04b6\25\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\22\3\1\u04b7\7\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\2\3\1\u04b8"+
    "\27\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\27\3\1\u04b9\2\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\25\3\1\u04ba\4\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u04bb\27\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\5\3\1\u04bc"+
    "\24\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\20\3\1\u04bd\11\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\7\3\1\u04be\22\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u04bf\25\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\21\3\1\u04c0"+
    "\10\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\u04c1\27\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\11\3\1\u04c2\20\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\22\3\1\u04c3\7\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\7\3\1\u04c4"+
    "\22\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\4\3\1\u04c5\25\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\u04c6\25\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\24\3\1\u04c7\5\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\4\3\1\u04c8"+
    "\25\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\11\3\1\u04c9\20\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\7\3\1\u04ca\22\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u04cb\25\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\2\3\1\u04cc"+
    "\27\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\5\3\1\u04cd\24\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\u04ce\25\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\6\3\1\u04cf\23\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\2\3\1\u04d0"+
    "\27\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\26\3\1\u04d1\3\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\u04d2\25\3\1\0\1\3\1\0"+
    "\1\3\3\0\2\3\1\u04d3\31\0\32\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\1\3\1\u04d4\30\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u04d5\27\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\6\3\1\u04d6\23\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u04d7\27\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\16\3\1\u04d8\13\3"+
    "\1\0\1\3\1\0\1\3\3\0\2\3\1\u04d9\31\0"+
    "\32\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\u04da\27\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\20\3\1\u04db\11\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\17\3\1\u04dc\12\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\2\3\1\u04dd"+
    "\27\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\16\3\1\u04de\13\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\16\3\1\u04df\13\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\20\3\1\u04e0\11\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\24\3\1\u04e1"+
    "\5\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\20\3\1\u04e2\11\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u04e3\27\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\22\3\1\u04e4\7\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\5\3\1\u04e5"+
    "\24\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\6\3\1\u04e6\23\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u04e7\27\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u04e8\27\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\22\3\1\u04e9"+
    "\7\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\21\3\1\u04ea\10\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\20\3\1\u04eb\11\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\11\3\1\u04ec\20\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\7\3\1\u04ed"+
    "\22\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\7\3\1\u04ee\22\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\u04ef\25\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\20\3\1\u04f0\11\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\4\3\1\u04f1"+
    "\25\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\21\3\1\u04f2\10\3\1\0\1\3\1\0\1\3\3\0"+
    "\2\3\1\u04f3\31\0\32\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\11\3\1\u04f4\20\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\16\3\1\u04f5\13\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\7\3"+
    "\1\u04f6\22\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\16\3\1\u04f7\13\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\6\3\1\u04f8\23\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\6\3\1\u04f9\23\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\14\3"+
    "\1\u04fa\15\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\4\3\1\u04fb\25\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\5\3\1\u04fc\24\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\2\3\1\u04fd\27\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\16\3"+
    "\1\u04fe\13\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u04ff\27\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\1\u0500\31\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\17\3\1\u0501\12\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\5\3\1\u0502"+
    "\24\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\4\3\1\u0503\25\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\17\3\1\u0504\12\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\3\3\1\u0505\26\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\5\3\1\u0506"+
    "\24\3\1\0\1\3\1\0\1\3\61\0\1\u0507\16\0"+
    "\3\3\31\0\1\u0508\31\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\6\3\1\u0509\23\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\4\3\1\u050a\25\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\7\3"+
    "\1\u050b\22\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\20\3\1\u050c\11\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\16\3\1\u050d\13\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\4\3\1\u050e\25\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\11\3"+
    "\1\u050f\20\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\1\u0510\31\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\6\3\1\u0511\23\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\20\3\1\u0512\11\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\13\3\1\u0513"+
    "\16\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\21\3\1\u0514\10\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\16\3\1\u0515\13\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\2\3\1\u0516\13\3\1\u0517"+
    "\13\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\u0518\27\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\13\3\1\u0519\16\3\1\0\1\3\1\0"+
    "\1\3\3\0\2\3\1\u051a\31\0\32\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\6\3\1\u051b\23\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\5\3"+
    "\1\u051c\24\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\21\3\1\u051d\10\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u051e\27\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\14\3\1\u051f\15\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u0520\27\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\16\3\1\u0521\13\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\20\3\1\u0522\11\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\2\3\1\u0523\27\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\26\3"+
    "\1\u0524\3\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\4\3\1\u0525\25\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\4\3\1\u0526\25\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\20\3\1\u0527\11\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\20\3"+
    "\1\u0528\11\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\1\3\1\u0529\30\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\22\3\1\u052a\7\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\5\3\1\u052b\24\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\6\3"+
    "\1\u052c\23\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\1\3\1\u052d\2\3\1\u052e\7\3\1\u052f\15\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\6\3"+
    "\1\u0530\23\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\4\3\1\u0531\25\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\20\3\1\u0532\11\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\6\3\1\u0533\23\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\6\3"+
    "\1\u0534\23\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\6\3\1\u0535\23\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u0536\27\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\2\3\1\u0537\27\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\1\3"+
    "\1\u0538\30\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\3\3\1\u0539\26\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\4\3\1\u053a\25\3\1\0\1\3"+
    "\1\0\1\3\3\0\2\3\1\u053b\31\0\11\3\1\u053c"+
    "\20\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\5\3\1\u053d\24\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\u053e\25\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\21\3\1\u053f\10\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\16\3\1\u0540"+
    "\13\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\6\3\1\u0541\23\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u0542\27\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\1\u0543\31\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\14\3\1\u0544\15\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\17\3"+
    "\1\u0545\4\3\1\u0546\5\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\11\3\1\u0547\20\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\20\3\1\u0548\11\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\6\3"+
    "\1\u0549\23\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\22\3\1\u054a\7\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\17\3\1\u054b\12\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\6\3\1\u054c\23\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\6\3"+
    "\1\u054d\23\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\17\3\1\u054e\12\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u054f\27\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\21\3\1\u0550\10\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\16\3"+
    "\1\u0551\13\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\4\3\1\u0552\25\3\1\0\1\3\1\0\1\3"+
    "\44\0\1\u0553\33\0\3\3\31\0\4\3\1\u0554\25\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u0555\27\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u0556\27\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\5\3\1\u0557\24\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\11\3\1\u0558\20\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u0559\27\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\4\3\1\u055a\25\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\17\3\1\u055b\12\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\6\3\1\u055c\23\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\7\3"+
    "\1\u055d\22\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\20\3\1\u055e\11\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\20\3\1\u055f\11\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\5\3\1\u0560\24\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\12\3"+
    "\1\u0561\12\3\1\u0562\4\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\16\3\1\u0563\13\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\17\3\1\u0564\12\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\5\3"+
    "\1\u0565\24\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\20\3\1\u0566\11\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\7\3\1\u0567\22\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\5\3\1\u0568\24\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\1\u0569"+
    "\31\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\1\u056a\31\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\12\3\1\u056b\17\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\5\3\1\u056c\24\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\6\3\1\u056d\23\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\4\3"+
    "\1\u056e\25\3\1\0\1\3\1\0\1\3\3\0\2\3"+
    "\1\u056f\31\0\32\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\u0570\25\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\1\u0571\31\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\16\3\1\u0572\13\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\17\3"+
    "\1\u0573\12\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\1\3\1\u0574\30\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\1\u0575\31\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\6\3\1\u0576\23\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\4\3\1\u0577"+
    "\25\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\17\3\1\u0578\12\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\u0579\25\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\12\3\1\u057a\17\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\16\3\1\u057b"+
    "\13\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\20\3\1\u057c\11\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\27\3\1\u057d\2\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\14\3\1\u057e\15\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\17\3\1\u057f"+
    "\12\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\16\3\1\u0580\13\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u0581\27\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\17\3\1\u0582\12\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\11\3\1\u0583"+
    "\20\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\1\3\1\u0584\30\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u0585\27\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\22\3\1\u0586\7\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\22\3\1\u0587"+
    "\7\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\20\3\1\u0588\11\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\4\3\1\u0589\25\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\11\3\1\u058a\20\3\1\0"+
    "\1\3\1\0\1\3\57\0\1\u058b\20\0\3\3\31\0"+
    "\16\3\1\u058c\13\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\17\3\1\u058d\12\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\1\3\1\u058e\30\3\1\0"+
    "\1\3\1\0\1\3\3\0\2\3\1\u058f\31\0\32\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u0590\27\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\6\3\1\u0591\23\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\6\3\1\u0592\23\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\4\3\1\u0593\25\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\20\3"+
    "\1\u0594\11\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\16\3\1\u0595\13\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\6\3\1\u0596\23\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\2\3\1\u0597\27\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\6\3"+
    "\1\u0598\23\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u0599\27\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\5\3\1\u059a\24\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\15\3\1\u059b\14\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\7\3"+
    "\1\u059c\22\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\12\3\1\u059d\17\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\7\3\1\u059e\22\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\4\3\1\u059f\25\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\25\3"+
    "\1\u05a0\4\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u05a1\27\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\16\3\1\u05a2\13\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\15\3\1\u05a3\14\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\17\3"+
    "\1\u05a4\12\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\6\3\1\u05a5\23\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\7\3\1\u05a6\22\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\2\3\1\u05a7\27\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\1\3"+
    "\1\u05a8\30\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u05a9\27\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\25\3\1\u05aa\4\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\21\3\1\u05ab\10\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\24\3"+
    "\1\u05ac\5\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\16\3\1\u05ad\13\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\5\3\1\u05ae\24\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\4\3\1\u05af\25\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\14\3"+
    "\1\u05b0\15\3\1\0\1\3\1\0\1\3\53\0\1\u05b1"+
    "\24\0\3\3\31\0\20\3\1\u05b2\11\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\11\3\1\u05b3\20\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\14\3"+
    "\1\u05b4\15\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\6\3\1\u05b5\23\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\22\3\1\u05b6\7\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\1\3\1\u05b7\30\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\1\3"+
    "\1\u05b8\30\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\7\3\1\u05b9\22\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\21\3\1\u05ba\10\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\2\3\1\u05bb\27\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u05bc\27\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\2\3\1\u05bd\27\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\5\3\1\u05be\24\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\6\3\1\u05bf\23\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\7\3"+
    "\1\u05c0\22\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\17\3\1\u05c1\12\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\16\3\1\u05c2\13\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\5\3\1\u05c3\24\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\16\3"+
    "\1\u05c4\13\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\13\3\1\u05c5\16\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\17\3\1\u05c6\12\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\6\3\1\u05c7\23\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\12\3"+
    "\1\u05c8\17\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\5\3\1\u05c9\24\3\1\0\1\3\1\0\1\3"+
    "\52\0\1\u05ca\25\0\3\3\31\0\6\3\1\u05cb\23\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\7\3"+
    "\1\u05cc\22\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\5\3\1\u05cd\24\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\14\3\1\u05ce\15\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\2\3\1\u05cf\27\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\6\3"+
    "\1\u05d0\23\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\17\3\1\u05d1\12\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\22\3\1\u05d2\7\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\2\3\1\u05d3\27\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u05d4\27\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\4\3\1\u05d5\25\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\7\3\1\u05d6\22\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\12\3\1\u05d7\17\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\22\3"+
    "\1\u05d8\7\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\11\3\1\u05d9\20\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\1\u05da\31\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\4\3\1\u05db\25\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\22\3\1\u05dc"+
    "\7\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\4\3\1\u05dd\25\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\5\3\1\u05de\24\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\1\u05df\31\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\5\3\1\u05e0\24\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u05e1\27\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\14\3\1\u05e2\15\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\2\3\1\u05e3\27\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\4\3\1\u05e4\25\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\1\u05e5"+
    "\31\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\4\3\1\u05e6\25\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\5\3\1\u05e7\24\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\1\u05e8\31\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\17\3\1\u05e9\12\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\12\3"+
    "\1\u05ea\17\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\25\3\1\u05eb\4\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\16\3\1\u05ec\13\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\17\3\1\u05ed\12\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u05ee\27\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\13\3\1\u05ef\16\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\4\3\1\u05f0\25\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\2\3\1\u05f1\27\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\21\3"+
    "\1\u05f2\10\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\4\3\1\u05f3\25\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\1\3\1\u05f4\2\3\1\u05f5\25\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\1\u05f6"+
    "\31\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\2\3\1\u05f7\27\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\1\u05f8\31\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\15\3\1\u05f9\14\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\4\3\1\u05fa\25\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\15\3"+
    "\1\u05fb\14\3\1\0\1\3\1\0\1\3\3\0\3\3"+
    "\31\0\7\3\1\u05fc\22\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\1\u05fd\31\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\7\3\1\u05fe\22\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\2\3\1\u05ff"+
    "\27\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\16\3\1\u0600\13\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\2\3\1\u0601\27\3\1\0\1\3\1\0"+
    "\1\3\3\0\3\3\31\0\7\3\1\u0602\22\3\1\0"+
    "\1\3\1\0\1\3\3\0\3\3\31\0\17\3\1\u0603"+
    "\12\3\1\0\1\3\1\0\1\3\3\0\3\3\31\0"+
    "\4\3\1\u0604\25\3\1\0\1\3\1\0\1\3\3\0"+
    "\3\3\31\0\1\u0605\31\3\1\0\1\3\1\0\1\3"+
    "\3\0\3\3\31\0\15\3\1\u0606\14\3\1\0\1\3"+
    "\1\0\1\3\3\0\3\3\31\0\7\3\1\u0607\22\3"+
    "\1\0\1\3\1\0\1\3\3\0\3\3\31\0\2\3"+
    "\1\u0608\27\3\1\0\1\3\1\0\1\3\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[74847];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\3\1\1\11\1\1\1\11"+
    "\7\1\2\11\1\1\1\11\1\1\1\11\1\1\2\11"+
    "\33\1\2\11\4\1\6\11\2\0\4\11\177\1\1\11"+
    "\3\1\2\0\1\11\316\1\2\0\42\1\1\0\312\1"+
    "\1\11\35\1\1\0\320\1\1\0\252\1\1\0\165\1"+
    "\1\0\23\1\1\11\126\1\1\0\113\1\1\0\67\1"+
    "\1\0\45\1\1\0\30\1\1\11\76\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1544];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    public int line;
    public int initialcolumn;
    public int finalcolumn;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Alexico(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Alexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 146) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 330: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return WRITETEXT;
          }
        case 390: break;
        case 160: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return CHECK;
          }
        case 391: break;
        case 4: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Gui√≥n_bajo;
          }
        case 392: break;
        case 256: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return UNPIVOT;
          }
        case 393: break;
        case 17: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Punto;
          }
        case 394: break;
        case 12: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Igual;
          }
        case 395: break;
        case 13: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Mayor_que;
          }
        case 396: break;
        case 211: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return UNIQUE;
          }
        case 397: break;
        case 291: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return FREETEXT;
          }
        case 398: break;
        case 27: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Cierre_signo_de_Interrogacion;
          }
        case 399: break;
        case 169: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return BEGIN;
          }
        case 400: break;
        case 94: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return DISK;
          }
        case 401: break;
        case 155: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return FLOAT;
          }
        case 402: break;
        case 34: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Mayor_o_igual_que;
          }
        case 403: break;
        case 351: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return DISTRIBUTED;
          }
        case 404: break;
        case 316: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return RECOMPILE;
          }
        case 405: break;
        case 345: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return BIT_LENGTH;
          }
        case 406: break;
        case 331: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return DEALLOCATE;
          }
        case 407: break;
        case 325: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return INITIALLY;
          }
        case 408: break;
        case 314: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return RAISERROR;
          }
        case 409: break;
        case 51: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return OR;
          }
        case 410: break;
        case 186: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return WHILE;
          }
        case 411: break;
        case 127: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return INTO;
          }
        case 412: break;
        case 49: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return IF;
          }
        case 413: break;
        case 245: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return CATALOG;
          }
        case 414: break;
        case 1: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return ERROR;
          }
        case 415: break;
        case 47: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return BY;
          }
        case 416: break;
        case 118: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return CASE;
          }
        case 417: break;
        case 312: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return TRANSLATE;
          }
        case 418: break;
        case 315: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return READ_ONLY;
          }
        case 419: break;
        case 108: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return NEXT;
          }
        case 420: break;
        case 79: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return SET;
          }
        case 421: break;
        case 337: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return ROWGUIDCOL;
          }
        case 422: break;
        case 357: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return REPLICATION;
          }
        case 423: break;
        case 182: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return MERGE;
          }
        case 424: break;
        case 150: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return LEVEL;
          }
        case 425: break;
        case 99: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return TRUE;
          }
        case 426: break;
        case 89: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return DENY;
          }
        case 427: break;
        case 267: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return MAXSIZE;
          }
        case 428: break;
        case 21: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Cierre_de_par√©ntesis;
          }
        case 429: break;
        case 247: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return CURRENT;
          }
        case 430: break;
        case 20: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Apertura_de_par√©ntesis;
          }
        case 431: break;
        case 10: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Porcentaje;
          }
        case 432: break;
        case 251: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return COMPUTE;
          }
        case 433: break;
        case 123: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return PLAN;
          }
        case 434: break;
        case 240: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return NUMERIC;
          }
        case 435: break;
        case 232: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return DYNAMIC;
          }
        case 436: break;
        case 62: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return ADD;
          }
        case 437: break;
        case 308: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return WHENEVER;
          }
        case 438: break;
        case 288: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return ROWCOUNT;
          }
        case 439: break;
        case 196: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return ESCAPE;
          }
        case 440: break;
        case 8: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Multiplicacion;
          }
        case 441: break;
        case 260: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return INCLUDE;
          }
        case 442: break;
        case 387: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return SEMANTICKEYPHRASETABLE;
          }
        case 443: break;
        case 157: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return FOUND;
          }
        case 444: break;
        case 276: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return DESCRIBE;
          }
        case 445: break;
        case 309: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return ASSERTION;
          }
        case 446: break;
        case 224: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return GLOBAL;
          }
        case 447: break;
        case 220: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return SCROLL;
          }
        case 448: break;
        case 271: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return VARYING;
          }
        case 449: break;
        case 208: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return HAVING;
          }
        case 450: break;
        case 209: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return PASCAL;
          }
        case 451: break;
        case 206: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return COLUMN;
          }
        case 452: break;
        case 273: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return ABSOLUTE;
          }
        case 453: break;
        case 35: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Operador_no_igual;
          }
        case 454: break;
        case 156: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return FIRST;
          }
        case 455: break;
        case 213: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return BACKUP;
          }
        case 456: break;
        case 84: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return GET;
          }
        case 457: break;
        case 363: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return TYPE_WARNING;
          }
        case 458: break;
        case 300: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return POSITION;
          }
        case 459: break;
        case 244: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return FORTRAN;
          }
        case 460: break;
        case 246: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return CASCADE;
          }
        case 461: break;
        case 101: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return THEN;
          }
        case 462: break;
        case 368: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return CURRENT_TIME;
          }
        case 463: break;
        case 350: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return DIAGNOSTICS;
          }
        case 464: break;
        case 362: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return SYSTEM_USER;
          }
        case 465: break;
        case 7: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Resta;
          }
        case 466: break;
        case 339: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return FILLFACTOR;
          }
        case 467: break;
        case 259: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return INTEGER;
          }
        case 468: break;
        case 341: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return CONNECTION;
          }
        case 469: break;
        case 128: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return SAVE;
          }
        case 470: break;
        case 369: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return CURRENT_USER;
          }
        case 471: break;
        case 55: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return GO;
          }
        case 472: break;
        case 238: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return RESTORE;
          }
        case 473: break;
        case 78: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return INT;
          }
        case 474: break;
        case 120: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return CHAR;
          }
        case 475: break;
        case 95: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return EXEC;
          }
        case 476: break;
        case 190: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return DELETE;
          }
        case 477: break;
        case 135: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return YEAR;
          }
        case 478: break;
        case 281: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return TRAILING;
          }
        case 479: break;
        case 57: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return MB;
          }
        case 480: break;
        case 71: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return END;
          }
        case 481: break;
        case 383: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return IDENTITY_INSERT;
          }
        case 482: break;
        case 52: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return ON;
          }
        case 483: break;
        case 338: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return FILEGROWTH;
          }
        case 484: break;
        case 294: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return CASCADED;
          }
        case 485: break;
        case 61: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return ADA;
          }
        case 486: break;
        case 5: 
          { /*Ignore*/
          }
        case 487: break;
        case 6: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Suma;
          }
        case 488: break;
        case 15: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Punto_y_coma;
          }
        case 489: break;
        case 377: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return CORRESPONDING;
          }
        case 490: break;
        case 379: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return SECURITYAUDIT;
          }
        case 491: break;
        case 373: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return WITHIN_GROUP;
          }
        case 492: break;
        case 327: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return IMMEDIATE;
          }
        case 493: break;
        case 367: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return CURRENT_DATE;
          }
        case 494: break;
        case 210: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return PUBLIC;
          }
        case 495: break;
        case 248: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return CONNECT;
          }
        case 496: break;
        case 115: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return FROM;
          }
        case 497: break;
        case 92: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return DUMP;
          }
        case 498: break;
        case 75: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return PAD;
          }
        case 499: break;
        case 243: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return FOREIGN;
          }
        case 500: break;
        case 103: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return READ;
          }
        case 501: break;
        case 203: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return CALLER;
          }
        case 502: break;
        case 36: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Operador_AND;
          }
        case 503: break;
        case 114: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return LOAD;
          }
        case 504: break;
        case 132: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return ONLY;
          }
        case 505: break;
        case 376: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return FREETEXTTABLE;
          }
        case 506: break;
        case 91: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return DROP;
          }
        case 507: break;
        case 167: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return USAGE;
          }
        case 508: break;
        case 138: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return KILL;
          }
        case 509: break;
        case 194: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return EXISTS;
          }
        case 510: break;
        case 360: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return IDENTITYCOL;
          }
        case 511: break;
        case 201: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return LINENO;
          }
        case 512: break;
        case 301: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return IDENTITY;
          }
        case 513: break;
        case 93: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return DBCC;
          }
        case 514: break;
        case 154: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return FETCH;
          }
        case 515: break;
        case 293: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return FILENAME;
          }
        case 516: break;
        case 37: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Operador_OR;
          }
        case 517: break;
        case 258: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return BETWEEN;
          }
        case 518: break;
        case 320: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return PRECISION;
          }
        case 519: break;
        case 152: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return LOWER;
          }
        case 520: break;
        case 80: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return SUM;
          }
        case 521: break;
        case 380: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return SCHEMABINDING;
          }
        case 522: break;
        case 275: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return DEFERRED;
          }
        case 523: break;
        case 359: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return CONSTRAINTS;
          }
        case 524: break;
        case 223: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return OUTPUT;
          }
        case 525: break;
        case 30: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Comentario;
          }
        case 526: break;
        case 129: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return SELF;
          }
        case 527: break;
        case 31: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return ComentarioE;
          }
        case 528: break;
        case 304: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return SMALLINT;
          }
        case 529: break;
        case 230: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return DECLARE;
          }
        case 530: break;
        case 33: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Operador_de_Igualdad;
          }
        case 531: break;
        case 284: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return READONLY;
          }
        case 532: break;
        case 250: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return COLLATE;
          }
        case 533: break;
        case 183: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return MONTH;
          }
        case 534: break;
        case 184: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return WRITE;
          }
        case 535: break;
        case 22: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Apertura_de_llaves;
          }
        case 536: break;
        case 270: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return VARCHAR;
          }
        case 537: break;
        case 87: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return MIN;
          }
        case 538: break;
        case 67: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return ASC;
          }
        case 539: break;
        case 77: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return BIT;
          }
        case 540: break;
        case 239: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return NATURAL;
          }
        case 541: break;
        case 136: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return GOTO;
          }
        case 542: break;
        case 81: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return SQL;
          }
        case 543: break;
        case 148: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return NAMES;
          }
        case 544: break;
        case 153: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return FALSE;
          }
        case 545: break;
        case 349: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return OPTIMISTIC;
          }
        case 546: break;
        case 318: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return CHARACTER;
          }
        case 547: break;
        case 305: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return SQLERROR;
          }
        case 548: break;
        case 322: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return UNLIMITED;
          }
        case 549: break;
        case 228: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return VALUES;
          }
        case 550: break;
        case 172: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return INNER;
          }
        case 551: break;
        case 70: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return DEC;
          }
        case 552: break;
        case 151: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return LOCAL;
          }
        case 553: break;
        case 164: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return PIVOT;
          }
        case 554: break;
        case 139: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return MARK;
          }
        case 555: break;
        case 16: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Coma;
          }
        case 556: break;
        case 83: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return OUT;
          }
        case 557: break;
        case 307: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return OVERLAPS;
          }
        case 558: break;
        case 189: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return ACTION;
          }
        case 559: break;
        case 279: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return END_EXEC;
          }
        case 560: break;
        case 365: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return FAST_FORWARD;
          }
        case 561: break;
        case 233: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return EXECUTE;
          }
        case 562: break;
        case 355: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return TRY_CONVERT;
          }
        case 563: break;
        case 193: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return EXCEPT;
          }
        case 564: break;
        case 221: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return SCHEMA;
          }
        case 565: break;
        case 46: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return NO;
          }
        case 566: break;
        case 68: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return AVG;
          }
        case 567: break;
        case 358: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return CHAR_LENGTH;
          }
        case 568: break;
        case 44: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return TB;
          }
        case 569: break;
        case 389: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return SEMANTICSIMILARITYDETAILSTABLE;
          }
        case 570: break;
        case 321: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return PROCEDURE;
          }
        case 571: break;
        case 356: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return RECONFIGURE;
          }
        case 572: break;
        case 353: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return TRANSACTION;
          }
        case 573: break;
        case 323: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return INDICATOR;
          }
        case 574: break;
        case 188: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return ARYING;
          }
        case 575: break;
        case 261: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return SETUSER;
          }
        case 576: break;
        case 366: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return FORWARD_ONLY;
          }
        case 577: break;
        case 76: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return USE;
          }
        case 578: break;
        case 119: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return CAST;
          }
        case 579: break;
        case 130: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return SIZE;
          }
        case 580: break;
        case 352: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return TABLESAMPLE;
          }
        case 581: break;
        case 303: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return SHUTDOWN;
          }
        case 582: break;
        case 28: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Apertura_signo_de_Interrogacion;
          }
        case 583: break;
        case 231: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return DECIMAL;
          }
        case 584: break;
        case 227: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return MODULE;
          }
        case 585: break;
        case 257: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return UNKNOWN;
          }
        case 586: break;
        case 344: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return UPDATETEXT;
          }
        case 587: break;
        case 149: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return NCHAR;
          }
        case 588: break;
        case 388: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return SEMANTICSIMILARITYTABLE;
          }
        case 589: break;
        case 197: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return RETURN;
          }
        case 590: break;
        case 60: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return PYCGO;
          }
        case 591: break;
        case 147: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return RIGHT;
          }
        case 592: break;
        case 374: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return AUTHORIZATION;
          }
        case 593: break;
        case 69: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return DAY;
          }
        case 594: break;
        case 192: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return DOMAIN;
          }
        case 595: break;
        case 165: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return UNION;
          }
        case 596: break;
        case 159: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return CLOSE;
          }
        case 597: break;
        case 386: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return CURRENT_TIMESTAMP;
          }
        case 598: break;
        case 96: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return EXIT;
          }
        case 599: break;
        case 289: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return NATIONAL;
          }
        case 600: break;
        case 381: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return OPENDATASOURCE;
          }
        case 601: break;
        case 42: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return AT;
          }
        case 602: break;
        case 361: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return INSENSITIVE;
          }
        case 603: break;
        case 199: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return REVOKE;
          }
        case 604: break;
        case 158: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return CROSS;
          }
        case 605: break;
        case 63: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return ARE;
          }
        case 606: break;
        case 116: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return FULL;
          }
        case 607: break;
        case 38: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Corchetes;
          }
        case 608: break;
        case 329: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return OPENQUERY;
          }
        case 609: break;
        case 319: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return COLLATION;
          }
        case 610: break;
        case 50: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return IS;
          }
        case 611: break;
        case 171: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return INDEX;
          }
        case 612: break;
        case 272: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return ALLOCATE;
          }
        case 613: break;
        case 53: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return OF;
          }
        case 614: break;
        case 24: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Arroba;
          }
        case 615: break;
        case 324: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return INTERSECT;
          }
        case 616: break;
        case 146: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return TABLE;
          }
        case 617: break;
        case 198: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return REVERT;
          }
        case 618: break;
        case 74: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return FOR;
          }
        case 619: break;
        case 43: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return AS;
          }
        case 620: break;
        case 173: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return INPUT;
          }
        case 621: break;
        case 181: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return MATCH;
          }
        case 622: break;
        case 348: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return OPENROWSET;
          }
        case 623: break;
        case 207: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return COMMIT;
          }
        case 624: break;
        case 180: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return GROUP;
          }
        case 625: break;
        case 64: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return AND;
          }
        case 626: break;
        case 14: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Signo_de_Exclamaci√≥n;
          }
        case 627: break;
        case 141: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return WITH;
          }
        case 628: break;
        case 187: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return VALUE;
          }
        case 629: break;
        case 255: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return PRIMARY;
          }
        case 630: break;
        case 134: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return OVER;
          }
        case 631: break;
        case 85: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return KEY;
          }
        case 632: break;
        case 332: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return DEFERRABLE;
          }
        case 633: break;
        case 145: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return ALTER;
          }
        case 634: break;
        case 226: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return MINUTE;
          }
        case 635: break;
        case 278: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return EXTERNAL;
          }
        case 636: break;
        case 253: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return PERCENT;
          }
        case 637: break;
        case 204: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return CREATE;
          }
        case 638: break;
        case 296: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return CONTAINS;
          }
        case 639: break;
        case 11: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Menor_que;
          }
        case 640: break;
        case 175: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return SQLCA;
          }
        case 641: break;
        case 264: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return SQLCODE;
          }
        case 642: break;
        case 342: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return CONSTRAINT;
          }
        case 643: break;
        case 217: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return SELECT;
          }
        case 644: break;
        case 3: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Int;
          }
        case 645: break;
        case 23: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Cierre_de_llaves;
          }
        case 646: break;
        case 2: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Identificador;
          }
        case 647: break;
        case 335: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return ENCRYPTION;
          }
        case 648: break;
        case 297: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return CONTINUE;
          }
        case 649: break;
        case 176: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return ORDER;
          }
        case 650: break;
        case 215: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return INLINE;
          }
        case 651: break;
        case 286: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return RESTRICT;
          }
        case 652: break;
        case 242: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return LEADING;
          }
        case 653: break;
        case 347: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return SQLWARNING;
          }
        case 654: break;
        case 97: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return ELSE;
          }
        case 655: break;
        case 235: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return TRIGGER;
          }
        case 656: break;
        case 106: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return ROWS;
          }
        case 657: break;
        case 102: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return TIME;
          }
        case 658: break;
        case 222: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return OPTION;
          }
        case 659: break;
        case 266: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return OPENXML;
          }
        case 660: break;
        case 372: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return OCTET_LENGTH;
          }
        case 661: break;
        case 168: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return USING;
          }
        case 662: break;
        case 317: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return CLUSTERED;
          }
        case 663: break;
        case 32: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Menor_o_igual_que;
          }
        case 664: break;
        case 124: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return USER;
          }
        case 665: break;
        case 252: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return PARTIAL;
          }
        case 666: break;
        case 274: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return DATABASE;
          }
        case 667: break;
        case 131: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return SOME;
          }
        case 668: break;
        case 326: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return ISOLATION;
          }
        case 669: break;
        case 218: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return SECOND;
          }
        case 670: break;
        case 191: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return DOUBLE;
          }
        case 671: break;
        case 90: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return DESC;
          }
        case 672: break;
        case 56: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return KB;
          }
        case 673: break;
        case 282: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return TRUNCATE;
          }
        case 674: break;
        case 364: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return NONCLUSTERED;
          }
        case 675: break;
        case 277: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return DISTINCT;
          }
        case 676: break;
        case 283: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return READTEXT;
          }
        case 677: break;
        case 54: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return GB;
          }
        case 678: break;
        case 65: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return ANY;
          }
        case 679: break;
        case 340: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return CHECKPOINT;
          }
        case 680: break;
        case 48: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return IN;
          }
        case 681: break;
        case 113: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return LIKE;
          }
        case 682: break;
        case 88: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return DATE;
          }
        case 683: break;
        case 73: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return NOT;
          }
        case 684: break;
        case 82: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return OFF;
          }
        case 685: break;
        case 346: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return STATISTICS;
          }
        case 686: break;
        case 299: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return PRESERVE;
          }
        case 687: break;
        case 382: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return TIMEZONE_MINUTE;
          }
        case 688: break;
        case 254: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return PREPARE;
          }
        case 689: break;
        case 229: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return DEFAULT;
          }
        case 690: break;
        case 66: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return ALL;
          }
        case 691: break;
        case 112: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return LEFT;
          }
        case 692: break;
        case 290: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return LANGUAGE;
          }
        case 693: break;
        case 39: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Par√©ntesis;
          }
        case 694: break;
        case 234: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return EXTRACT;
          }
        case 695: break;
        case 311: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return TEMPORARY;
          }
        case 696: break;
        case 263: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return SESSION;
          }
        case 697: break;
        case 41: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Doble_Numeral;
          }
        case 698: break;
        case 163: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return PRIOR;
          }
        case 699: break;
        case 174: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return SPACE;
          }
        case 700: break;
        case 333: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return DESCRIPTOR;
          }
        case 701: break;
        case 214: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return BROWSE;
          }
        case 702: break;
        case 98: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return TRAN;
          }
        case 703: break;
        case 354: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return TRANSLATION;
          }
        case 704: break;
        case 212: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return UPDATE;
          }
        case 705: break;
        case 26: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Bit;
          }
        case 706: break;
        case 225: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return KEYSET;
          }
        case 707: break;
        case 306: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return SQLSTATE;
          }
        case 708: break;
        case 110: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return NONE;
          }
        case 709: break;
        case 133: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return OPEN;
          }
        case 710: break;
        case 280: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return TEXTSIZE;
          }
        case 711: break;
        case 100: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return TRIM;
          }
        case 712: break;
        case 298: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return HOLDLOCK;
          }
        case 713: break;
        case 292: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return FUNCTION;
          }
        case 714: break;
        case 29: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Float;
          }
        case 715: break;
        case 384: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return CHARACTER_LENGTH;
          }
        case 716: break;
        case 219: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return STATIC;
          }
        case 717: break;
        case 19: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Cierre_de_corchetes;
          }
        case 718: break;
        case 107: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return NAME;
          }
        case 719: break;
        case 202: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return CALLED;
          }
        case 720: break;
        case 111: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return LAST;
          }
        case 721: break;
        case 143: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return VIEW;
          }
        case 722: break;
        case 385: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return EXECUTE_AS_CLAUSE;
          }
        case 723: break;
        case 125: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return BULK;
          }
        case 724: break;
        case 166: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return UPPER;
          }
        case 725: break;
        case 9: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Division;
          }
        case 726: break;
        case 302: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return INTERVAL;
          }
        case 727: break;
        case 59: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return String;
          }
        case 728: break;
        case 18: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Apertura_de_corchetes;
          }
        case 729: break;
        case 328: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return SUBSTRING;
          }
        case 730: break;
        case 72: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return TOP;
          }
        case 731: break;
        case 195: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return ERRLVL;
          }
        case 732: break;
        case 295: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return COALESCE;
          }
        case 733: break;
        case 205: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return CURSOR;
          }
        case 734: break;
        case 178: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return OWNER;
          }
        case 735: break;
        case 343: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return PRIVILEGES;
          }
        case 736: break;
        case 117: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return FILE;
          }
        case 737: break;
        case 310: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return EXCEPTION;
          }
        case 738: break;
        case 249: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return CONVERT;
          }
        case 739: break;
        case 185: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return WHERE;
          }
        case 740: break;
        case 268: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return MODULAR;
          }
        case 741: break;
        case 161: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return COUNT;
          }
        case 742: break;
        case 237: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return RETURNS;
          }
        case 743: break;
        case 121: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return HOUR;
          }
        case 744: break;
        case 45: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return TO;
          }
        case 745: break;
        case 142: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return WORK;
          }
        case 746: break;
        case 216: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return INSERT;
          }
        case 747: break;
        case 371: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return SCROLL_LOCKS;
          }
        case 748: break;
        case 313: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return TIMESTAMP;
          }
        case 749: break;
        case 236: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return TSEQUAL;
          }
        case 750: break;
        case 104: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return REAL;
          }
        case 751: break;
        case 25: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Numeral;
          }
        case 752: break;
        case 200: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return NULLIF;
          }
        case 753: break;
        case 287: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return ROLLBACK;
          }
        case 754: break;
        case 162: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return PRINT;
          }
        case 755: break;
        case 40: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return Llaves;
          }
        case 756: break;
        case 269: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return WAITFOR;
          }
        case 757: break;
        case 170: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return BREAK;
          }
        case 758: break;
        case 285: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return RELATIVE;
          }
        case 759: break;
        case 179: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return GRANT;
          }
        case 760: break;
        case 378: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return CONTAINSTABLE;
          }
        case 761: break;
        case 336: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return REFERENCES;
          }
        case 762: break;
        case 334: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return DISCONNECT;
          }
        case 763: break;
        case 122: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return PROC;
          }
        case 764: break;
        case 265: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return OFFSETS;
          }
        case 765: break;
        case 137: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return ZONE;
          }
        case 766: break;
        case 86: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return MAX;
          }
        case 767: break;
        case 370: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return SESSION_USER;
          }
        case 768: break;
        case 241: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return NOCHECK;
          }
        case 769: break;
        case 144: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return JOIN;
          }
        case 770: break;
        case 140: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return WHEN;
          }
        case 771: break;
        case 109: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return NULL;
          }
        case 772: break;
        case 375: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return TIMEZONE_HOUR;
          }
        case 773: break;
        case 262: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return SECTION;
          }
        case 774: break;
        case 105: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return RULE;
          }
        case 775: break;
        case 58: 
          { lexeme=yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength()-1; return StringE;
          }
        case 776: break;
        case 126: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return BOTH;
          }
        case 777: break;
        case 177: 
          { lexeme = yytext(); line = yyline; initialcolumn = yycolumn; finalcolumn = yycolumn + yylength() -1; return OUTER;
          }
        case 778: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
